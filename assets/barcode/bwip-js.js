// This file is part of the bwip-js project available at:
//
// 	  http://metafloor.github.io/bwip-js
//
// Copyright (c) 2011-2022 Mark Warren
//
// This file contains code automatically generated from:
// Barcode Writer in Pure PostScript - Version 2022-06-10
// Copyright (c) 2004-2022 Terry Burton
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.bwipjs = factory();
	}
}(typeof self !== 'undefined' ? self : this, function () {
// exports.js
"use strict";


//@@BEGIN-BROWSER-ONLY@@

// bwipjs.toCanvas(canvas, options)
// bwipjs.toCanvas(options, canvas)
//
// Uses the built-in canvas drawing.  Identical rendering as toBuffer().
//
// `canvas` can be an HTMLCanvasElement or an ID string or unique selector string.
// `options` are a bwip-js/BWIPP options object.
//
// This function is synchronous and throws on error.
//
// Returns the HTMLCanvasElement.
//
// Browser usage only.
function ToCanvas(opts, canvas) {
    // This code has to be duplicated with _ToCanvas() to keep the bwipp_lookup() out
    // of the latter.
	if (typeof canvas == 'string') {
		canvas = document.getElementById(canvas) || document.querySelector(canvas);
	} else if (typeof opts == 'string') {
		opts = document.getElementById(opts) || document.querySelector(opts);
	}
	if (opts instanceof HTMLCanvasElement) {
		var tmp = opts;
		opts = canvas;
		canvas = tmp;
	} else if (!(canvas instanceof HTMLCanvasElement)) {
		throw 'bwipjs: Not a canvas';
	}
    _Render(bwipp_lookup(opts.bcid), opts, DrawingCanvas(opts, canvas));
    return canvas;
}
// Entry point for the symbol-specific exports
function _ToCanvas(encoder, opts, canvas) {
	if (typeof canvas == 'string') {
		canvas = document.getElementById(canvas) || document.querySelector(canvas);
	} else if (typeof opts == 'string') {
		opts = document.getElementById(opts) || document.querySelector(opts);
	}
	if (opts instanceof HTMLCanvasElement) {
		var tmp = opts;
		opts = canvas;
		canvas = tmp;
	} else if (!(canvas instanceof HTMLCanvasElement)) {
		throw 'bwipjs: Not a canvas';
	}
    _Render(encoder, opts, DrawingCanvas(opts, canvas));
    return canvas;
}

//@@ENDOF-BROWSER-ONLY@@

function FixupOptions(opts) {
	var scale	= opts.scale || 2;
	var scaleX	= +opts.scaleX || scale;
	var scaleY	= +opts.scaleY || scaleX;

	// Fix up padding.
	opts.paddingleft = padding(opts.paddingleft, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingright = padding(opts.paddingright, opts.paddingwidth, opts.padding, scaleX);
	opts.paddingtop = padding(opts.paddingtop, opts.paddingheight, opts.padding, scaleY);
	opts.paddingbottom = padding(opts.paddingbottom, opts.paddingheight, opts.padding, scaleY);

	// We override BWIPP's background color functionality.  If in CMYK, convert to RGB so
	// the drawing interface is consistent.
	if (/^[0-9a-fA-F]{8}$/.test(''+opts.backgroundcolor)) {
		var cmyk = opts.backgroundcolor;
		var c = parseInt(cmyk.substr(0,2), 16) / 255;
		var m = parseInt(cmyk.substr(2,2), 16) / 255;
		var y = parseInt(cmyk.substr(4,2), 16) / 255;
		var k = parseInt(cmyk.substr(6,2), 16) / 255;
		var r = Math.floor((1-c) * (1-k) * 255).toString(16);
		var g = Math.floor((1-m) * (1-k) * 255).toString(16);
		var b = Math.floor((1-y) * (1-k) * 255).toString(16);
		opts.backgroundcolor = (r.length == 1 ? '0' : '') + r +
							   (g.length == 1 ? '0' : '') + g +
							   (b.length == 1 ? '0' : '') + b;
	}

	return opts;

	function padding(a, b, c, s) {
		if (a != null) {
			return a*s;
		}
		if (b != null) {
			return b*s;
		}
		return c*s || 0;
	}
}

var BWIPJS_OPTIONS = {
	bcid:1,
	text:1,
	scale:1,
	scaleX:1,
	scaleY:1,
	rotate:1,
	padding:1,
	paddingwidth:1,
	paddingheight:1,
	paddingtop:1,
	paddingleft:1,
	paddingright:1,
	paddingbottom:1,
	backgroundcolor:1,
};

// bwipjs.render(options, drawing)
//
// Renders a barcode using the provided drawing object.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function Render(params, drawing) {
    return _Render(bwipp_lookup(params.bcid), params, drawing);
}

// Called by the public exports
function _Render(encoder, params, drawing) {
	var text = params.text;
	if (!text) {
		throw new ReferenceError('bwip-js: bar code text not specified.');
	}

	// Set the bwip-js defaults
    FixupOptions(params);
	var scale	= params.scale || 2;
	var scaleX	= +params.scaleX || scale;
	var scaleY	= +params.scaleY || scaleX;
	var rotate	= params.rotate || 'N';

	// Create a barcode writer object.  This is the interface between
	// the low-level BWIPP code, the bwip-js graphics context, and the
	// drawing interface.
	var bw = new BWIPJS(drawing);

	// Set the BWIPP options
	var opts = {};
	for (var id in params) {
		if (!BWIPJS_OPTIONS[id]) {
			opts[id] = params[id];
		}
	}

	// Fix a disconnect in the BWIPP rendering logic
	if (opts.alttext) {
		opts.includetext = true;
	}
	// We use mm rather than inches for height - except pharmacode2 height
	// which is already in mm.
	if (+opts.height && encoder != bwipp_pharmacode2) {
		opts.height = opts.height / 25.4 || 0.5;
	}
	// Likewise, width
	if (+opts.width) {
		opts.width = opts.width / 25.4 || 0;
	}

	// Scale the image
	bw.scale(scaleX, scaleY);

	// Call into the BWIPP cross-compiled code and render the image.
    bwipp_encode(bw, encoder, text, opts);
	return bw.render();		// Return whatever drawing.end() returns
}

// bwipjs.raw(options)
// bwipjs.raw(bcid, text, opts-string)
//
// Invokes the low level BWIPP code and returns the raw encoding data.
//
// This function is synchronous and throws on error.
//
// Browser and nodejs usage.
function ToRaw(bcid, text, options) {
	if (arguments.length == 1) {
		options = bcid;
		bcid = options.bcid;
		text = options.text;
	}

	// The drawing interface is just needed for the pre-init() calls.
	var bw = new BWIPJS(DrawingBuiltin({}));
	var stack = bwipp_encode(bw, bwipp_lookup(bcid), text, options, true);

	// bwip-js uses Maps to emulate PostScript dictionary objects; but Maps
	// are not a typical/expected return value.  Convert to plain-old-objects.
	var ids = { pixs:1, pixx:1, pixy:1, sbs:1, bbs:1, bhs:1, width:1, height:1 };
	for (var i = 0; i < stack.length; i++) {
		var elt = stack[i];
		if (elt instanceof Map) {
			var obj = {};
			// Could they make Maps any harder to iterate over???
			for (var keys = elt.keys(), size = elt.size, k = 0; k < size; k++) {
				var id = keys.next().value;
				if (ids[id]) {
					var val = elt.get(id);
					if (val instanceof Array) {
						// The postscript arrays have extra named properties
						// to emulate array views.  Return cleaned up arrays.
						obj[id] = val.b.slice(val.o, val.o + val.length);
					} else {
						obj[id] = val;
					}
				}
			}
			stack[i] = obj;
		} else {
			// This should never exec...
			stack.splice(i--, 1);
		}
	}
	return stack;
}
// bwip-js // Barcode Writer in Pure JavaScript
// https://github.com/metafloor/bwip-js
//
// This code was automatically generated from:
// Barcode Writer in Pure PostScript - Version 2022-06-10
//
// Copyright (c) 2011-2022 Mark Warren
// Copyright (c) 2004-2022 Terry Burton
//
// Licensed MIT. See the LICENSE file in the bwip-js root directory.
// bwip-js/barcode-hdr.js
//
// This code is injected above the cross-compiled barcode.js.

// The BWIPJS object (graphics interface)
var $$ = null;
var $j = 0; // stack pointer
var $k = []; // operand stack

// Global state defined at runtime
var $0 = {
    $error: new Map,
};

// Array ctor
//	$a()	: Build a new array up to the Infinity-marker on the stack.
//	$a(arr)	: Convert native array to a "view" of the array.
//	$a(len)	: Create a new array of length `len`
function $a(a) {
    if (!arguments.length) {
        for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
        if (i < 0) {
            throw new Error('array-marker-not-found');
        }
        a = $k.splice(i + 1, $j - 1 - i);
        $j = i;
    } else if (!(a instanceof Array)) {
        a = new Array(+arguments[0]);
        for (var i = 0, l = a.length; i < l; i++) {
            a[i] = null;
        }
    }
    a.b = a; // base array
    a.o = 0; // offset into base
    return a;
}

// dict ctor
//	$d() : look for the Infinity marker on the stack
function $d() {
    // Build the dictionary in the order the keys/values were pushed so enumeration
    // occurs in the correct sequence.
    for (var mark = $j - 1; mark >= 0 && $k[mark] !== Infinity; mark -= 2) {
        if ($k[mark - 1] === Infinity) {
            throw new Error('dict-malformed-stack');
        }
    }
    if (mark < 0) {
        throw 'dict-marker-not-found';
    }
    var d = new Map;
    for (var i = mark + 1; i < $j; i += 2) {
        // Unlike javascript, postscript dict keys differentiate between
        // numbers and the string representation of a number.
        var k = $k[i]; // "key" into the dict entry
        var t = typeof k;
        if (t == 'number' || t == 'string') {
            d.set(k, $k[i + 1]);
        } else if (k instanceof Uint8Array) {
            d.set($z(k), $k[i + 1]);
        } else {
            throw 'dict-not-a-valid-key(' + k + ')';
        }
    }
    $j = mark;
    return d;
}

// string ctor
//	s(number)	: create zero-filled string of number-length
//	s(string)	: make a copy of the string
//	s(uint8[])	: make a copy of the string
//
// Returns a Uint8Array-string.
function $s(v) {
    var t = typeof v;
    if (t === 'number') {
        return new Uint8Array(v);
    }
    if (t !== 'string') {
        v = '' + v;
    }
    var s = new Uint8Array(v.length);
    for (var i = 0; i < v.length; i++) {
        s[i] = v.charCodeAt(i);
    }
    return s;
}

// ... n c roll
function $r(n, c) {
    if ($j < n) {
        throw 'roll: --stack-underflow--';
    }
    if (!c) {
        return;
    }
    if (c < 0) {
        var t = $k.splice($j - n, -c);
    } else {
        var t = $k.splice($j - n, n - c);
    }
    $k.splice.apply($k, [$j - t.length, 0].concat(t));
}

// Primarily designed to convert uint8-string to string, but will call the
// the toString() method on any value.
function $z(s) {
    if (s instanceof Uint8Array) {
        return String.fromCharCode.apply(null, s);
    }
    return '' + s;
}

// Copies source to dest and returns a view of just the copied characters
function $strcpy(dst, src) {
    if (typeof dst === 'string') {
        dst = $s(dst);
    }
    if (src instanceof Uint8Array) {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src[i];
        }
    } else {
        for (var i = 0, l = src.length; i < l; i++) {
            dst[i] = src.charCodeAt(i);
        }
    }
    return src.length < dst.length ? dst.subarray(0, src.length) : dst;
}

// Copies source to dest and should (but doesn't) return a view of just the copied elements
function $arrcpy(dst, src) {
    for (var i = 0, l = src.length; i < l; i++) {
        dst[i] = src[i];
    }
    dst.length = src.length;
    return dst;
}

// cvs operator - convert a value to its string representation
//	s : string to store into
//	v : any value
function $cvs(s, v) {
    var t = typeof v;
    if (t == 'number' || t == 'boolean' || v === null) {
        v = '' + v;
    } else if (t !== 'string') {
        v = '--nostringval--';
    }
    for (var i = 0, l = v.length; i < l; i++) {
        s[i] = v.charCodeAt(i);
    }
    $k[$j++] = i < s.length ? s.subarray(0, i) : s;
}
// cvi operator - converts a numeric string value to integer.
function $cvi(s) {
    if (s instanceof Uint8Array) {
        // nul-chars on the end of a string are ignored by postscript but cause javascript
        // to return a zero result.
        return String.fromCharCode.apply(null, s).replace(/\0+$/, '') | 0;
    }
    return ('' + s) | 0;
}

// cvrs operator - convert a number to a radix string
//	s : string to store into
//	n : number
//	r : radix
function $cvrs(s, n, r) {
    return $strcpy(s, (~~n).toString(r).toUpperCase());
}

// get operator
//	s : source
//	k : key
function $get(s, k) {
    if (s instanceof Uint8Array) {
        return s[k];
    }
    if (typeof s === 'string') {
        return s.charCodeAt(k);
    }
    if (s instanceof Array) {
        return s.b[s.o + k];
    }
    if (k instanceof Uint8Array) {
        return s.get($z(k));
    }
    return s.get(k);
}

// put operator
//	d : dest
//	k : key
//	v : value
function $put(d, k, v) {
    if (d instanceof Uint8Array) {
        d[k] = v;
    } else if (d instanceof Array) {
        d.b[d.o + k] = v;
    } else if (typeof d == 'object') {
        if (k instanceof Uint8Array) {
            d.set($z(k), v);
        } else {
            d.set(k, v);
        }
    } else {
        throw 'put-not-writable-' + (typeof d);
    }
}

// getinterval operator
//	s : src
//	o : offset
//	l : length
function $geti(s, o, l) {
    if (s instanceof Uint8Array) {
        return s.subarray(o, o + l);
    }
    if (s instanceof Array) {
        var a = new Array(l);
        a.b = s.b; // base array
        a.o = s.o + o; // offset into base
        return a;
    }
    // Must be a string
    return s.substr(o, l);
}

// putinterval operator
//	d : dst
//	o : offset
//	s : src
function $puti(d, o, s) {
    if (d instanceof Uint8Array) {
        if (typeof s == 'string') {
            for (var i = 0, l = s.length; i < l; i++) {
                d[o + i] = s.charCodeAt(i);
            }
        } else {
            // When both d and s are the same, we want to copy
            // backwards, which works for the general case as well.
            for (var i = s.length - 1; i >= 0; i--) {
                d[o + i] = s[i];
            }
        }
    } else if (d instanceof Array) {
        // Operate on the base arrays
        var darr = d.b;
        var doff = o + d.o;
        var sarr = s.b;
        var soff = s.o;

        for (var i = 0, l = s.length; i < l; i++) {
            darr[doff + i] = sarr[soff + i];
        }
    } else {
        throw 'putinterval-not-writable-' + (typeof d);
    }
}

// type operator
function $type(v) {
    // null can be mis-typed - get it out of the way
    if (v === null || v === undefined) {
        return 'nulltype';
    }
    var t = typeof v;
    if (t == 'number') {
        return v % 1 ? 'realtype' : 'integertype';
    }
    if (t == 'boolean') {
        return 'booleantype';
    }
    if (t == 'string' || v instanceof Uint8Array) {
        return 'stringtype';
    }
    if (t == 'function') {
        return 'operatortype';
    }
    if (v instanceof Array) {
        return 'arraytype';
    }
    return 'dicttype';
    // filetype
    // fonttype
    // gstatetype
    // marktype	(v === Infinity)
    // nametype
    // savetype
}

// search operator
//		string seek search suffix match prefix true %if-found
//						   string false				%if-not-found
function $search(str, seek) {
    if (!(str instanceof Uint8Array)) {
        str = $s(str);
    }
    var ls = str.length;

    // Virtually all uses of search in BWIPP are for single-characters.
    // Optimize for that case.
    if (seek.length == 1) {
        var lk = 1;
        var cd = seek instanceof Uint8Array ? seek[0] : seek.charCodeAt(0);
        for (var i = 0; i < ls && str[i] != cd; i++);
    } else {
        // Slow path, 
        if (!(seek instanceof Uint8Array)) {
            seek = $(seek);
        }
        var lk = seek.length;
        var cd = seek[0];
        for (var i = 0; i < ls && str[i] != cd; i++);
        while (i < ls) {
            for (var j = 1; j < lk && str[i + j] === seek[j]; j++);
            if (j === lk) {
                break;
            }
            for (i++; i < ls && str[i] != cd; i++);
        }
    }
    if (i < ls) {
        $k[$j++] = str.subarray(i + lk);
        $k[$j++] = str.subarray(i, i + lk);
        $k[$j++] = str.subarray(0, i);
        $k[$j++] = true;
    } else {
        $k[$j++] = str;
        $k[$j++] = false;
    }
}

// The callback is omitted when forall is being used just to push onto the
// stack.  The callback normally returns undefined.  A return of true means break.
function $forall(o, cb) {
    if (o instanceof Uint8Array) {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o[i];
            if (cb && cb()) break;
        }
    } else if (o instanceof Array) {
        // The array may be a view.
        for (var a = o.b, i = o.o, l = o.o + o.length; i < l; i++) {
            $k[$j++] = a[i];
            if (cb && cb()) break;
        }
    } else if (typeof o === 'string') {
        for (var i = 0, l = o.length; i < l; i++) {
            $k[$j++] = o.charCodeAt(i);
            if (cb && cb()) break;
        }
    } else if (o instanceof Map) {
        for (var keys = o.keys(), i = 0, l = o.size; i < l; i++) {
            var id = keys.next().value;
            $k[$j++] = id;
            $k[$j++] = o.get(id);
            if (cb && cb()) break;
        }
    } else {
        for (var id in o) {
            $k[$j++] = id;
            $k[$j++] = o[id];
            if (cb && cb()) break;
        }
    }
}

function $cleartomark() {
    while ($j > 0 && $k[--$j] !== Infinity);
}

function $counttomark() {
    for (var i = $j - 1; i >= 0 && $k[i] !== Infinity; i--);
    return $j - i - 1;
}

function $aload(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o; i < l; i++) {
        $k[$j++] = b[o + i];
    }
    // This push has been optimized out.  See $.aload() in psc.js.
    //$k[$j++] = a;
}

function $astore(a) {
    for (var i = 0, l = a.length, b = a.b, o = a.o + l - 1; i < l; i++) {
        b[o - i] = $k[--$j];
    }
    $k[$j++] = a;
}

function $eq(a, b) {
    if (typeof a === 'string' && typeof b === 'string') {
        return a == b;
    }
    if (a instanceof Uint8Array && b instanceof Uint8Array) {
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0, l = a.length; i < l; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }
    if (a instanceof Uint8Array && typeof b === 'string' ||
        b instanceof Uint8Array && typeof a === 'string') {
        if (a instanceof Uint8Array) {
            a = $z(a);
        } else {
            b = $z(b);
        }
        return a == b;
    }
    return a == b;
}

function $ne(a, b) {
    return !$eq(a, b);
}

function $lt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a < b;
}

function $le(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a <= b;
}

function $gt(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a > b;
}

function $ge(a, b) {
    if (a instanceof Uint8Array) {
        a = $z(a);
    }
    if (b instanceof Uint8Array) {
        b = $z(b);
    }
    return a >= b;
}

function $an(a, b) { // and
    return (typeof a === 'boolean') ? a && b : a & b;
}

function $or(a, b) { // or
    return (typeof a === 'boolean') ? a || b : a | b;
}

function $xo(a, b) { // xor
    return (typeof a === 'boolean') ? !a && b || a && !b : a ^ b;
}

function $nt(a) {
    return typeof a == 'boolean' ? !a : ~a;
}
// emulate single-precision floating-point (pseudo-polyfill for Math.fround)
var $f = (function(fa) {
    return function(v) {
        return Number.isInteger(v) ? v : (fa[0] = v, fa[0]);
    };
})(new Float32Array(1));

// DEBUG-BEGIN
function $stack() {
    console.log('[[[');
    for (var i = $j - 1; i >= 0; i--) {
        console.log(tostring($k[i]));
    }
    console.log(']]]');

    function tostring(v) {
        // null can be mis-typed - get it out of the way
        if (v === null) {
            return 'null';
        } else if (v === undefined) {
            return '<undefined>';
        } else if (v instanceof Array) {
            var s = '<array,' + v.o + ',' + v.length + '>[';
            for (var j = v.o, a = v.b, l = v.length + v.o; j < l; j++) {
                s += (j == v.o ? '' : ',') + tostring(a[j]);
            }
            return s + ']';
        } else if (v instanceof Uint8Array) {
            return '(' + $z[v] + ')';
        } else if (typeof v === 'object') {
            var s = '<<';
            for (var id in v) {
                s += (s.length == 7 ? '' : ',') + id + ':' + tostring(v[id]);
            }
            return s + '>>';
        } else if (typeof v === 'string') {
            return '"' + v + '"';
        } else {
            return '' + v;
        }
    }
}
// DEBUG-END
function bwipp_raiseerror() {
    $put($0.$error, 'errorinfo', $k[--$j]); //#55
    $put($0.$error, 'errorname', $k[--$j]); //#56
    $put($0.$error, 'command', null); //#57
    $put($0.$error, 'newerror', true); //#58
    throw new Error($z($0.$error.get("errorname")) + ": " + $z($0.$error.get("errorinfo"))); //#59
}

function bwipp_parseinput() {
    var $1 = {}; //#80
    $1.fncvals = $k[--$j]; //#82
    $1.barcode = $k[--$j]; //#83
    var _2 = 'parse'; //#85
    $1[_2] = $get($1.fncvals, _2); //#85
    delete $1.fncvals[_2]; //#85
    var _6 = 'parsefnc'; //#86
    $1[_6] = $get($1.fncvals, _6); //#86
    delete $1.fncvals[_6]; //#86
    var _A = 'parseonly'; //#87
    var _C = $get($1.fncvals, _A) !== undefined; //#87
    $1[_A] = _C; //#87
    delete $1.fncvals[_A]; //#87
    var _E = 'eci'; //#88
    var _G = $get($1.fncvals, _E) !== undefined; //#88
    $1[_E] = _G; //#88
    delete $1.fncvals[_E]; //#88
    $1.msg = $a($1.barcode.length); //#90
    $1.j = 0; //#91
    $k[$j++] = $1.barcode; //#186
    for (;;) { //#186
        $search($k[--$j], "^"); //#93
        var _M = $k[--$j]; //#93
        var _N = $k[--$j]; //#93
        $k[$j++] = _M; //#96
        $k[$j++] = _N.length; //#96
        $k[$j++] = $1.msg; //#96
        $k[$j++] = $1.j; //#96
        $k[$j++] = _N; //#96
        $k[$j++] = Infinity; //#96
        var _Q = $k[--$j]; //#96
        var _R = $k[--$j]; //#96
        $k[$j++] = _Q; //#96
        $forall(_R); //#96
        var _S = $a(); //#96
        var _T = $k[--$j]; //#96
        $puti($k[--$j], _T, _S); //#96
        $1.j = $f($k[--$j] + $1.j); //#97
        if ($k[--$j]) { //#184
            $j--; //#99
            for (var _Y = 0, _Z = 1; _Y < _Z; _Y++) { //#182
                if ($an($nt($1.parse), $nt($1.parsefnc))) { //#106
                    $put($1.msg, $1.j, 94); //#103
                    $1.j = $f($1.j + 1); //#104
                    break; //#105
                } //#105
                $put($1.msg, $1.j, 94); //#109
                $1.j = $f($1.j + 1); //#110
                if ($1.parse) { //#129
                    var _j = $k[--$j]; //#114
                    $k[$j++] = _j; //#128
                    if (_j.length >= 3) { //#128
                        var _k = $k[--$j]; //#115
                        var _l = $geti(_k, 0, 3); //#115
                        $k[$j++] = _k; //#117
                        $k[$j++] = true; //#117
                        for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#117
                            var _o = $get(_l, _m); //#117
                            if ((_o < 48) || (_o > 57)) { //#116
                                $j--; //#116
                                $k[$j++] = false; //#116
                            } //#116
                        } //#116
                        if ($k[--$j]) { //#127
                            var _q = $k[--$j]; //#119
                            var _r = $geti(_q, 0, 3); //#119
                            var _s = $cvi(_r); //#119
                            $k[$j++] = _q; //#122
                            $k[$j++] = _s; //#122
                            if (_s > 255) { //#122
                                $j -= 2; //#120
                                $k[$j++] = 'bwipp.invalidOrdinal'; //#121
                                $k[$j++] = "Ordinal must be 000 to 255"; //#121
                                bwipp_raiseerror(); //#121
                            } //#121
                            $1.j = $f($1.j - 1); //#123
                            $put($1.msg, $1.j, $k[--$j]); //#124
                            $1.j = $f($1.j + 1); //#125
                            var _y = $k[--$j]; //#126
                            $k[$j++] = $geti(_y, 3, _y.length - 3); //#126
                        } //#126
                    } //#126
                } //#126
                if (($or($1.parseonly, $nt($1.parsefnc))) || ($get($1.msg, $f($1.j - 1)) != 94)) { //#134
                    break; //#134
                } //#134
                $1.j = $f($1.j - 1); //#137
                var _16 = $k[--$j]; //#138
                $k[$j++] = _16; //#141
                if (_16.length < 3) { //#141
                    $j--; //#139
                    $k[$j++] = 'bwipp.truncatedFNC'; //#140
                    $k[$j++] = "Function character truncated"; //#140
                    bwipp_raiseerror(); //#140
                } //#140
                var _17 = $k[--$j]; //#142
                $k[$j++] = _17; //#147
                if ($get(_17, 0) == 94) { //#147
                    $put($1.msg, $1.j, 94); //#143
                    $1.j = $f($1.j + 1); //#144
                    var _1C = $k[--$j]; //#145
                    $k[$j++] = $geti(_1C, 1, _1C.length - 1); //#146
                    break; //#146
                } //#146
                var _1E = $k[--$j]; //#148
                $k[$j++] = _1E; //#165
                if ($eq($geti(_1E, 0, 3), "ECI") && $1.eci) { //#165
                    var _1H = $k[--$j]; //#149
                    $k[$j++] = _1H; //#152
                    if (_1H.length < 9) { //#152
                        $j--; //#150
                        $k[$j++] = 'bwipp.truncatedECI'; //#151
                        $k[$j++] = "ECI truncated"; //#151
                        bwipp_raiseerror(); //#151
                    } //#151
                    var _1I = $k[--$j]; //#153
                    var _1J = $geti(_1I, 3, 6); //#153
                    $k[$j++] = _1I; //#159
                    $k[$j++] = _1J; //#159
                    for (var _1K = 0, _1L = _1J.length; _1K < _1L; _1K++) { //#159
                        var _1M = $get(_1J, _1K); //#159
                        if ((_1M < 48) || (_1M > 57)) { //#158
                            $j -= 2; //#156
                            $k[$j++] = 'bwipp.invalidECI'; //#157
                            $k[$j++] = "ECI must be 000000 to 999999"; //#157
                            bwipp_raiseerror(); //#157
                        } //#157
                    } //#157
                    var _1N = $k[--$j]; //#160
                    $k[$j++] = 0; //#160
                    $forall(_1N, function() { //#160
                        var _1O = $k[--$j]; //#160
                        var _1P = $k[--$j]; //#160
                        $k[$j++] = ($f(_1P - $f(_1O - 48))) * 10; //#160
                    }); //#160
                    $put($1.msg, $1.j, (~~($k[--$j] / 10)) - 1000000); //#161
                    $1.j = $f($1.j + 1); //#162
                    var _1U = $k[--$j]; //#163
                    $k[$j++] = $geti(_1U, 9, _1U.length - 9); //#164
                    break; //#164
                } //#164
                var _1W = $k[--$j]; //#166
                $k[$j++] = _1W; //#169
                if (_1W.length < 4) { //#169
                    $j--; //#167
                    $k[$j++] = 'bwipp.truncatedFNC'; //#168
                    $k[$j++] = "Function character truncated"; //#168
                    bwipp_raiseerror(); //#168
                } //#168
                var _1X = $k[--$j]; //#170
                var _1Y = $geti(_1X, 0, 4); //#170
                var _1a = $get($1.fncvals, _1Y) !== undefined; //#170
                $k[$j++] = _1X; //#175
                $k[$j++] = _1Y; //#175
                if (!_1a) { //#175
                    var _1b = $k[--$j]; //#171
                    var _1c = $s(_1b.length + 28); //#171
                    $puti(_1c, 28, _1b); //#171
                    $puti(_1c, 0, "Unknown function character: "); //#172
                    var _1d = $k[--$j]; //#173
                    $k[$j++] = _1c; //#173
                    $k[$j++] = _1d; //#173
                    $j--; //#173
                    var _1e = $k[--$j]; //#174
                    $k[$j++] = 'bwipp.unknownFNC'; //#174
                    $k[$j++] = _1e; //#174
                    bwipp_raiseerror(); //#174
                } //#174
                $put($1.msg, $1.j, $get($1.fncvals, $k[--$j])); //#177
                $1.j = $f($1.j + 1); //#178
                var _1l = $k[--$j]; //#179
                $k[$j++] = $geti(_1l, 4, _1l.length - 4); //#180
                break; //#180
            } //#180
        } else { //#184
            break; //#184
        } //#184
    } //#184
    if ($nt($1.parseonly)) { //#192
        $k[$j++] = $geti($1.msg, 0, $1.j); //#189
    } else { //#192
        $k[$j++] = $s($1.j); //#192
        for (var _1v = 0, _1u = $f($1.j - 1); _1v <= _1u; _1v += 1) { //#192
            var _1w = $k[--$j]; //#192
            $put(_1w, _1v, $get($1.msg, _1v)); //#192
            $k[$j++] = _1w; //#192
        } //#192
    } //#192
}

function bwipp_gs1lint() {
    var $1 = {}; //#217
    $1.vals = $k[--$j]; //#219
    $1.ais = $k[--$j]; //#220
    $1.lintnumeric = function() {
        var _2 = $k[--$j]; //#223
        $k[$j++] = true; //#225
        $forall(_2, function() { //#225
            var _3 = $k[--$j]; //#224
            if ((_3 < 48) || (_3 > 57)) { //#224
                $j--; //#224
                $k[$j++] = false; //#224
                return true; //#224
            } //#224
        }); //#224
        if ($nt($k[--$j])) { //#226
            $j--; //#226
            $k[$j++] = 'bwipp.GS1notNumeric'; //#226
            $k[$j++] = "Not numeric"; //#226
            $k[$j++] = false; //#226
            return true; //#226
        } //#226
    }; //#227
    $1.lintcset82 = function() {
        var _5 = $k[--$j]; //#230
        $k[$j++] = true; //#235
        $forall(_5, function() { //#235
            var _6 = $s(1); //#231
            $put(_6, 0, $k[--$j]); //#231
            $search("!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _6); //#233
            if ($nt($k[--$j])) { //#233
                $j -= 2; //#233
                $k[$j++] = false; //#233
                return true; //#233
            } //#233
            $j -= 3; //#234
        }); //#234
        if ($nt($k[--$j])) { //#236
            $j--; //#236
            $k[$j++] = 'bwipp.GS1badCSET82character'; //#236
            $k[$j++] = "Invalid CSET 82 character"; //#236
            $k[$j++] = false; //#236
            return true; //#236
        } //#236
    }; //#237
    $1.lintcset39 = function() {
        var _A = $k[--$j]; //#240
        $k[$j++] = true; //#245
        $forall(_A, function() { //#245
            var _B = $s(1); //#241
            $put(_B, 0, $k[--$j]); //#241
            $search("#-/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _B); //#243
            if ($nt($k[--$j])) { //#243
                $j -= 2; //#243
                $k[$j++] = false; //#243
                return true; //#243
            } //#243
            $j -= 3; //#244
        }); //#244
        if ($nt($k[--$j])) { //#246
            $j--; //#246
            $k[$j++] = 'bwipp.GS1badCSET39character'; //#246
            $k[$j++] = "Invalid CSET 39 character"; //#246
            $k[$j++] = false; //#246
            return true; //#246
        } //#246
    }; //#247
    $1.lintkey = function() {
        var _F = $k[--$j]; //#250
        $k[$j++] = _F; //#250
        if (_F.length < 2) { //#250
            $j -= 2; //#250
            $k[$j++] = 'bwipp.GS1keyTooShort'; //#250
            $k[$j++] = "Key is too short"; //#250
            $k[$j++] = false; //#250
            return true; //#250
        } //#250
        var _G = $k[--$j]; //#251
        var _H = $get(_G, 0); //#251
        var _I = $get(_G, 1); //#252
        if (((_H < 48) || (_H > 57)) || ((_I < 48) || (_I > 57))) { //#254
            $j--; //#253
            $k[$j++] = 'bwipp.GS1badGCP'; //#253
            $k[$j++] = "Non-numeric company prefix"; //#253
            $k[$j++] = false; //#253
            return true; //#253
        } //#253
    }; //#255
    $1.lintimporteridx = function() {
        $search("-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", $k[--$j]); //#259
        if ($nt($k[--$j])) { //#259
            $j -= 2; //#259
            $k[$j++] = 'bwipp.GS1badImporterIndex'; //#259
            $k[$j++] = "Invalid importer index"; //#259
            $k[$j++] = false; //#259
            return true; //#259
        } //#259
        $j -= 3; //#260
    }; //#261
    $1.lintcsum = function() {
        $k[$j++] = Infinity; //#264
        var _L = $k[--$j]; //#264
        var _M = $k[--$j]; //#264
        var _N = ((_M.length % 2) == 0) ? 3 : 1; //#265
        $k[$j++] = _L; //#266
        $k[$j++] = _N; //#266
        $forall(_M, function() { //#266
            var _O = $k[--$j]; //#266
            var _P = $k[--$j]; //#266
            $k[$j++] = $f(_O - 48) * _P; //#266
            $k[$j++] = $f(4 - _P); //#266
        }); //#266
        $j--; //#266
        var _Q = $counttomark() + 1; //#267
        $k[$j++] = 0; //#267
        for (var _R = 0, _S = _Q - 1; _R < _S; _R++) { //#267
            var _T = $k[--$j]; //#267
            var _U = $k[--$j]; //#267
            $k[$j++] = $f(_U + _T); //#267
        } //#267
        var _V = $k[--$j]; //#267
        var _W = $k[--$j]; //#267
        $k[$j++] = _V; //#267
        $k[$j++] = _W; //#267
        $j--; //#267
        if (($k[--$j] % 10) != 0) { //#268
            $j--; //#268
            $k[$j++] = 'bwipp.GS1badChecksum'; //#268
            $k[$j++] = "Bad checksum"; //#268
            $k[$j++] = false; //#268
            return true; //#268
        } //#268
    }; //#269
    $k[$j++] = Infinity; //#273
    $k[$j++] = 0; //#273
    for (var _Y = 0, _Z = "!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".length; _Y < _Z; _Y++) { //#273
        var _b = $k[--$j]; //#273
        $k[$j++] = $get("!\"%&'()*+,-./0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz", _Y); //#273
        $k[$j++] = _b; //#273
        $k[$j++] = $f(_b + 1); //#273
    } //#273
    $j--; //#273
    $1.cset82 = $d(); //#274
    $k[$j++] = Infinity; //#278
    $k[$j++] = 0; //#278
    for (var _d = 0, _e = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ".length; _d < _e; _d++) { //#278
        var _g = $k[--$j]; //#278
        $k[$j++] = $get("23456789ABCDEFGHJKLMNPQRSTUVWXYZ", _d); //#278
        $k[$j++] = _g; //#278
        $k[$j++] = $f(_g + 1); //#278
    } //#278
    $j--; //#278
    $1.cset32 = $d(); //#279
    $1.lintcsumalpha = function() {
        var _i = $k[--$j]; //#282
        $k[$j++] = _i; //#282
        if (_i.length < 2) { //#282
            $j -= 2; //#282
            $k[$j++] = 'bwipp.GS1alphaTooShort'; //#282
            $k[$j++] = "Alphanumeric string is too short to check"; //#282
            $k[$j++] = false; //#282
            return true; //#282
        } //#282
        var _j = $k[--$j]; //#283
        $k[$j++] = _j; //#285
        $k[$j++] = _j.length - 2; //#285
        $k[$j++] = $geti(_j, 0, _j.length - 2); //#285
        $k[$j++] = Infinity; //#285
        var _l = $k[--$j]; //#285
        var _m = $k[--$j]; //#285
        $k[$j++] = _l; //#287
        $forall(_m, function() { //#287
            var _n = $k[--$j]; //#286
            var _p = $get($1.cset82, _n) !== undefined; //#286
            $k[$j++] = _n; //#286
            if (_p) { //#286
                var _s = $get($1.cset82, $k[--$j]); //#286
                $k[$j++] = _s; //#286
            } else { //#286
                $k[$j++] = -1; //#286
                return true; //#286
            } //#286
        }); //#286
        var _t = $k[--$j]; //#288
        $k[$j++] = _t; //#288
        if (_t == -1) { //#288
            $cleartomark(); //#288
            $j -= 3; //#288
            $k[$j++] = 'bwipp.GS1UnknownCSET82Character'; //#288
            $k[$j++] = "Unknown CSET 82 character"; //#288
            $k[$j++] = false; //#288
            return true; //#288
        } //#288
        $astore($a($counttomark())); //#289
        var _w = $k[--$j]; //#289
        var _x = $k[--$j]; //#289
        $k[$j++] = _w; //#289
        $k[$j++] = _x; //#289
        $j--; //#289
        var _y = $k[--$j]; //#290
        var _z = $k[--$j]; //#290
        var _11 = $geti($k[--$j], _z, 2); //#291
        $k[$j++] = _y; //#291
        $k[$j++] = _11; //#291
        $k[$j++] = Infinity; //#291
        var _12 = $k[--$j]; //#291
        var _13 = $k[--$j]; //#291
        $k[$j++] = _12; //#293
        $forall(_13, function() { //#293
            var _14 = $k[--$j]; //#292
            var _16 = $get($1.cset32, _14) !== undefined; //#292
            $k[$j++] = _14; //#292
            if (_16) { //#292
                var _19 = $get($1.cset32, $k[--$j]); //#292
                $k[$j++] = _19; //#292
            } else { //#292
                $k[$j++] = -1; //#292
                return true; //#292
            } //#292
        }); //#292
        var _1A = $k[--$j]; //#294
        $k[$j++] = _1A; //#294
        if (_1A == -1) { //#294
            $cleartomark(); //#294
            $j -= 2; //#294
            $k[$j++] = 'bwipp.GS1UnknownCSET32Character'; //#294
            $k[$j++] = "Unknown CSET 32 character"; //#294
            $k[$j++] = false; //#294
            return true; //#294
        } //#294
        $astore($a($counttomark())); //#295
        var _1D = $k[--$j]; //#295
        var _1E = $k[--$j]; //#295
        $k[$j++] = _1D; //#295
        $k[$j++] = _1E; //#295
        $j--; //#295
        var _1F = $k[--$j]; //#296
        var _1I = $k[--$j]; //#296
        var _1J = $a([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]); //#297
        var _1K = _1I.length; //#299
        $k[$j++] = $f(($get(_1F, 0) << 5) + $get(_1F, 1)); //#299
        $k[$j++] = _1I; //#299
        $k[$j++] = _1J; //#299
        $k[$j++] = _1K; //#299
        if (_1K > _1J.length) { //#299
            $j -= 5; //#299
            $k[$j++] = 'bwipp.GS1alphaTooLong'; //#299
            $k[$j++] = "Alphanumeric string is too long to check"; //#299
            $k[$j++] = false; //#299
            return true; //#299
        } //#299
        var _1L = $k[--$j]; //#300
        var _1N = $geti($k[--$j], 0, _1L); //#300
        for (var _1O = 0, _1P = _1N.length; _1O < _1P; _1O++) { //#300
            var _1R = $k[--$j]; //#300
            $k[$j++] = $get(_1N, _1O); //#300
            $k[$j++] = _1R; //#300
        } //#300
        var _1S = $k[--$j]; //#301
        $k[$j++] = 0; //#301
        $forall(_1S, function() { //#301
            var _1T = $k[--$j]; //#301
            var _1U = $k[--$j]; //#301
            var _1V = $k[--$j]; //#301
            $k[$j++] = $f(_1U + (_1V * _1T)); //#301
        }); //#301
        var _1W = $k[--$j]; //#301
        if ($k[--$j] != (_1W % 1021)) { //#302
            $j--; //#302
            $k[$j++] = 'bwipp.GS1badAlphaCheckCharacters'; //#302
            $k[$j++] = "Bad alphanumeric check characters"; //#302
            $k[$j++] = false; //#302
            return true; //#302
        } //#302
    }; //#303
    $k[$j++] = Infinity; //#324
    var _1Y = $a(['004', '008', '010', '012', '016', '020', '024', '028', '031', '032', '036', '040', '044', '048', '050', '051', '052', '056', '060', '064', '068', '070', '072', '074', '076', '084', '086', '090', '092', '096', '100', '104', '108', '112', '116', '120', '124', '132', '136', '140', '144', '148', '152', '156', '158', '162', '166', '170', '174', '175', '178', '180', '184', '188', '191', '192', '196', '203', '204', '208', '212', '214', '218', '222', '226', '231', '232', '233', '234', '238', '239', '242', '246', '248', '250', '254', '258', '260', '262', '266', '268', '270', '275', '276', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '334', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '428', '430', '434', '438', '440', '442', '446', '450', '454', '458', '462', '466', '470', '474', '478', '480', '484', '492', '496', '498', '499', '500', '504', '508', '512', '516', '520', '524', '528', '531', '533', '534', '535', '540', '548', '554', '558', '562', '566', '570', '574', '578', '580', '581', '583', '584', '585', '586', '591', '598', '600', '604', '608', '612', '616', '620', '624', '626', '630', '634', '638', '642', '643', '646', '652', '654', '659', '660', '662', '663', '666', '670', '674', '678', '682', '686', '688', '690', '694', '702', '703', '704', '705', '706', '710', '716', '724', '728', '729', '732', '740', '744', '748', '752', '756', '760', '762', '764', '768', '772', '776', '780', '784', '788', '792', '795', '796', '798', '800', '804', '807', '818', '826', '831', '832', '833', '834', '840', '850', '854', '858', '860', '862', '876', '882', '887', '894']); //#323
    for (var _1Z = 0, _1a = _1Y.length; _1Z < _1a; _1Z++) { //#324
        var _1b = $get(_1Y, _1Z); //#324
        $k[$j++] = _1b; //#324
        $k[$j++] = _1b; //#324
    } //#324
    $1.iso3166 = $d(); //#324
    $1.lintiso3166 = function() {
        var _1f = $get($1.iso3166, $k[--$j]) !== undefined; //#327
        if (!_1f) { //#327
            $j--; //#327
            $k[$j++] = 'bwipp.GS1UnknownCountry'; //#327
            $k[$j++] = "Unknown country code"; //#327
            $k[$j++] = false; //#327
            return true; //#327
        } //#327
    }; //#328
    $1.lintiso3166999 = function() {
        var _1g = $k[--$j]; //#331
        $k[$j++] = _1g; //#335
        if ($ne(_1g, '999')) { //#334
            var _1j = $get($1.iso3166, $k[--$j]) !== undefined; //#332
            if (!_1j) { //#332
                $j--; //#332
                $k[$j++] = 'bwipp.GS1UnknownCountryOr999'; //#332
                $k[$j++] = "Unknown country code or not 999"; //#332
                $k[$j++] = false; //#332
                return true; //#332
            } //#332
        } else { //#334
            $j--; //#334
        } //#334
    }; //#336
    $1.lintiso3166list = function() {
        var _1k = $k[--$j]; //#339
        $k[$j++] = _1k; //#341
        if ((_1k.length % 3) != 0) { //#341
            $j -= 2; //#340
            $k[$j++] = 'bwipp.GS1BadCountryListLength'; //#340
            $k[$j++] = "Not a group of three-digit country codes"; //#340
            $k[$j++] = false; //#340
            return true; //#340
        } //#340
        var _1l = $k[--$j]; //#343
        $k[$j++] = _1l; //#346
        $k[$j++] = true; //#346
        for (var _1n = 0, _1m = _1l.length - 1; _1n <= _1m; _1n += 3) { //#346
            var _1o = $k[--$j]; //#344
            var _1p = $k[--$j]; //#344
            var _1s = $get($1.iso3166, $geti(_1p, _1n, 3)) !== undefined; //#345
            $k[$j++] = _1p; //#345
            $k[$j++] = _1o; //#345
            if (!_1s) { //#345
                $j -= 2; //#345
                $k[$j++] = false; //#345
                break; //#345
            } //#345
        } //#345
        if ($nt($k[--$j])) { //#347
            $j--; //#347
            $k[$j++] = 'bwipp.GS1UnknownCountry'; //#347
            $k[$j++] = "Unknown country code"; //#347
            $k[$j++] = false; //#347
            return true; //#347
        } //#347
        $j--; //#348
    }; //#349
    $k[$j++] = Infinity; //#376
    var _1u = $a(['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']); //#375
    for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#376
        var _1x = $get(_1u, _1v); //#376
        $k[$j++] = _1x; //#376
        $k[$j++] = _1x; //#376
    } //#376
    $1.iso3166alpha2 = $d(); //#376
    $1.lintiso3166alpha2 = function() {
        var _21 = $get($1.iso3166alpha2, $k[--$j]) !== undefined; //#379
        if (!_21) { //#379
            $j--; //#379
            $k[$j++] = 'bwipp.GS1UnknownCountryAlpha'; //#379
            $k[$j++] = "Unknown country alpha code"; //#379
            $k[$j++] = false; //#379
            return true; //#379
        } //#379
    }; //#380
    $k[$j++] = Infinity; //#405
    var _22 = $a(['008', '012', '032', '036', '044', '048', '050', '051', '052', '060', '064', '068', '072', '084', '090', '096', '104', '108', '116', '124', '132', '136', '144', '152', '156', '170', '174', '188', '191', '192', '203', '208', '214', '222', '230', '232', '238', '242', '262', '270', '292', '320', '324', '328', '332', '340', '344', '348', '352', '356', '360', '364', '368', '376', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '430', '434', '446', '454', '458', '462', '480', '484', '496', '498', '504', '512', '516', '524', '532', '533', '548', '554', '558', '566', '578', '586', '590', '598', '600', '604', '608', '634', '643', '646', '654', '682', '690', '694', '702', '704', '706', '710', '728', '748', '752', '756', '760', '764', '776', '780', '784', '788', '800', '807', '818', '826', '834', '840', '858', '860', '882', '886', '901', '927', '928', '929', '930', '931', '932', '933', '934', '936', '938', '940', '941', '943', '944', '946', '947', '948', '949', '950', '951', '952', '953', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '967', '968', '969', '970', '971', '972', '973', '975', '976', '977', '978', '979', '980', '981', '984', '985', '986', '990', '994', '997', '999']); //#404
    for (var _23 = 0, _24 = _22.length; _23 < _24; _23++) { //#405
        var _25 = $get(_22, _23); //#405
        $k[$j++] = _25; //#405
        $k[$j++] = _25; //#405
    } //#405
    $1.iso4217 = $d(); //#405
    $1.lintiso4217 = function() {
        var _29 = $get($1.iso4217, $k[--$j]) !== undefined; //#408
        if (!_29) { //#408
            $j--; //#408
            $k[$j++] = 'bwipp.GS1UnknownCurrency'; //#408
            $k[$j++] = "Unknown currency code"; //#408
            $k[$j++] = false; //#408
            return true; //#408
        } //#408
    }; //#409
    $1.lintiban = function() {
        var _2A = $k[--$j]; //#412
        $k[$j++] = _2A; //#412
        if (_2A.length <= 4) { //#412
            $j -= 2; //#412
            $k[$j++] = 'bwipp.GS1tooShort'; //#412
            $k[$j++] = "IBAN too short"; //#412
            $k[$j++] = false; //#412
            return true; //#412
        } //#412
        var _2B = $k[--$j]; //#413
        $k[$j++] = _2B; //#418
        $k[$j++] = true; //#418
        $forall(_2B, function() { //#418
            var _2C = $s(1); //#414
            $put(_2C, 0, $k[--$j]); //#414
            $search("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", _2C); //#416
            if ($nt($k[--$j])) { //#416
                $j -= 2; //#416
                $k[$j++] = false; //#416
                return true; //#416
            } //#416
            $j -= 3; //#417
        }); //#417
        if ($nt($k[--$j])) { //#419
            $j--; //#419
            $k[$j++] = 'bwipp.GS1badIBANcharacter'; //#419
            $k[$j++] = "Invalid IBAN character"; //#419
            $k[$j++] = false; //#419
            return true; //#419
        } //#419
        var _2G = $k[--$j]; //#420
        $k[$j++] = _2G; //#420
        $k[$j++] = _2G; //#420
        $k[$j++] = Infinity; //#420
        var _2H = $k[--$j]; //#420
        var _2I = $k[--$j]; //#420
        $k[$j++] = _2H; //#420
        $k[$j++] = _2I; //#420
        $k[$j++] = Infinity; //#420
        var _2J = $k[--$j]; //#420
        var _2K = $k[--$j]; //#420
        $k[$j++] = _2J; //#420
        $forall(_2K); //#420
        $r($counttomark(), -4); //#420
        $astore($a($counttomark())); //#420
        var _2O = $k[--$j]; //#420
        var _2P = $k[--$j]; //#420
        $k[$j++] = _2O; //#420
        $k[$j++] = _2P; //#420
        $j--; //#420
        $forall($k[--$j], function() { //#422
            var _2S = $f($k[--$j] - 48); //#421
            $k[$j++] = _2S; //#421
            if (_2S > 9) { //#421
                var _2U = $f($k[--$j] - 7); //#421
                $k[$j++] = ~~(_2U / 10); //#421
                $k[$j++] = _2U % 10; //#421
            } //#421
        }); //#421
        $astore($a($counttomark())); //#422
        var _2X = $k[--$j]; //#422
        var _2Y = $k[--$j]; //#422
        $k[$j++] = _2X; //#422
        $k[$j++] = _2Y; //#422
        $j--; //#422
        var _2Z = $k[--$j]; //#423
        $k[$j++] = 0; //#423
        $forall(_2Z, function() { //#423
            var _2a = $k[--$j]; //#423
            var _2b = $k[--$j]; //#423
            $k[$j++] = ($f(_2a + (_2b * 10))) % 97; //#423
        }); //#423
        if ($k[--$j] != 1) { //#424
            $j -= 2; //#424
            $k[$j++] = 'bwipp.GS1badIBANchecksum'; //#424
            $k[$j++] = "IBAN checksum incorrect"; //#424
            $k[$j++] = false; //#424
            return true; //#424
        } //#424
        var _2e = $geti($k[--$j], 0, 2); //#425
        $k[$j++] = _2e; //#425
        $1.lintiso3166alpha2(); //#425
    }; //#426
    $1.lintzero = function() {
        if ($ne($k[--$j], "0")) { //#429
            $j--; //#429
            $k[$j++] = 'bwipp.GS1zeroRequired'; //#429
            $k[$j++] = "Zero is required"; //#429
            $k[$j++] = false; //#429
            return true; //#429
        } //#429
    }; //#430
    $1.lintnonzero = function() {
        var _2g = $k[--$j]; //#433
        $k[$j++] = false; //#433
        $forall(_2g, function() { //#433
            if ($k[--$j] != 48) { //#433
                $j--; //#433
                $k[$j++] = true; //#433
            } //#433
        }); //#433
        if ($nt($k[--$j])) { //#434
            $j--; //#434
            $k[$j++] = 'bwipp.GS1zeroNotPermitted'; //#434
            $k[$j++] = "Zero not permitted"; //#434
            $k[$j++] = false; //#434
            return true; //#434
        } //#434
    }; //#435
    $1.lintnozeroprefix = function() {
        var _2j = $k[--$j]; //#438
        if ((_2j.length > 1) && ($get(_2j, 0) == 48)) { //#440
            $j--; //#439
            $k[$j++] = 'bwipp.GS1badZeroPrefix'; //#439
            $k[$j++] = "Zero prefix is not permitted"; //#439
            $k[$j++] = false; //#439
            return true; //#439
        } //#439
    }; //#441
    $1.lintyymmd0 = function() {
        var _2l = $k[--$j]; //#444
        var _2n = $cvi($geti(_2l, 2, 2)); //#444
        $k[$j++] = _2l; //#444
        if ((_2n < 1) || (_2n > 12)) { //#444
            $j--; //#444
            $k[$j++] = 'bwipp.GS1badMonth'; //#444
            $k[$j++] = "Invalid month"; //#444
            $k[$j++] = false; //#444
            return true; //#444
        } //#444
        var _2o = $k[--$j]; //#445
        var _2q = $cvi($geti(_2o, 0, 2)); //#445
        var _2r = _2q - 21; //#446
        $k[$j++] = _2o; //#446
        $k[$j++] = _2q; //#446
        $k[$j++] = _2r; //#446
        if (_2r >= 51) { //#446
            $j--; //#446
            var _2s = $k[--$j]; //#446
            $k[$j++] = $f(_2s + 1900); //#446
        } else { //#446
            if ($k[--$j] <= -50) { //#446
                var _2u = $k[--$j]; //#446
                $k[$j++] = $f(_2u + 2100); //#446
            } else { //#446
                var _2v = $k[--$j]; //#446
                $k[$j++] = $f(_2v + 2000); //#446
            } //#446
        } //#446
        var _2w = $k[--$j]; //#447
        $k[$j++] = ((_2w % 400) == 0) || (((_2w % 4) == 0) && ((_2w % 100) != 0)); //#448
        $k[$j++] = Infinity; //#448
        var _2x = $k[--$j]; //#448
        var _2z = $k[--$j] ? 29 : 28; //#448
        $k[$j++] = _2x; //#448
        $k[$j++] = 31; //#448
        $k[$j++] = _2z; //#448
        $k[$j++] = 31; //#448
        $k[$j++] = 30; //#448
        $k[$j++] = 31; //#448
        $k[$j++] = 30; //#448
        $k[$j++] = 31; //#448
        $k[$j++] = 31; //#448
        $k[$j++] = 30; //#448
        $k[$j++] = 31; //#448
        $k[$j++] = 30; //#448
        $k[$j++] = 31; //#448
        var _30 = $a(); //#448
        var _31 = $k[--$j]; //#449
        if ($get(_30, $cvi($geti(_31, 2, 2)) - 1) < $cvi($geti(_31, 4, 2))) { //#450
            $j--; //#450
            $k[$j++] = 'bwipp.GS1badDay'; //#450
            $k[$j++] = "Invalid day of month"; //#450
            $k[$j++] = false; //#450
            return true; //#450
        } //#450
    }; //#451
    $1.lintyymmdd = function() {
        var _35 = $k[--$j]; //#454
        $k[$j++] = _35; //#454
        if (_35.length != 6) { //#454
            $j--; //#454
            $k[$j++] = 'bwipp.GS1badDateLength'; //#454
            $k[$j++] = "Invalid length for date"; //#454
            $k[$j++] = false; //#454
            return true; //#454
        } //#454
        var _36 = $k[--$j]; //#455
        $k[$j++] = _36; //#455
        if ($cvi($geti(_36, 4, 2)) < 1) { //#455
            $j--; //#455
            $k[$j++] = 'bwipp.GS1badDay'; //#455
            $k[$j++] = "Invalid day of month"; //#455
            $k[$j++] = false; //#455
            return true; //#455
        } //#455
        $1.lintyymmd0(); //#456
    }; //#457
    $1.lintyymmddhh = function() {
        var _38 = $k[--$j]; //#460
        $k[$j++] = _38; //#460
        if (_38.length != 8) { //#460
            $j--; //#460
            $k[$j++] = 'bwipp.GS1badYYMMDDHHLength'; //#460
            $k[$j++] = "Invalid length for date with hour"; //#460
            $k[$j++] = false; //#460
            return true; //#460
        } //#460
        var _39 = $k[--$j]; //#461
        $k[$j++] = _39; //#461
        if ($cvi($geti(_39, 6, 2)) > 23) { //#461
            $j -= 2; //#461
            $k[$j++] = 'bwipp.GS1badHour'; //#461
            $k[$j++] = "Invalid hour of day"; //#461
            $k[$j++] = false; //#461
            return true; //#461
        } //#461
        var _3C = $geti($k[--$j], 0, 6); //#462
        $k[$j++] = _3C; //#462
        $1.lintyymmdd(); //#462
    }; //#463
    $1.linthhmm = function() {
        var _3D = $k[--$j]; //#466
        $k[$j++] = _3D; //#466
        if ($cvi($geti(_3D, 0, 2)) > 23) { //#466
            $j -= 2; //#466
            $k[$j++] = 'bwipp.GS1badHour'; //#466
            $k[$j++] = "Invalid hour of day"; //#466
            $k[$j++] = false; //#466
            return true; //#466
        } //#466
        if ($cvi($geti($k[--$j], 2, 2)) > 59) { //#467
            $j--; //#467
            $k[$j++] = 'bwipp.GS1badMinute'; //#467
            $k[$j++] = "Invalid minute in the hour"; //#467
            $k[$j++] = false; //#467
            return true; //#467
        } //#467
    }; //#468
    $1.lintmmoptss = function() {
        var _3H = $k[--$j]; //#471
        var _3I = _3H.length; //#471
        $k[$j++] = _3H; //#473
        if ((_3I != 2) && (_3I != 4)) { //#473
            $j--; //#472
            $k[$j++] = 'bwipp.GS1badTimeLength'; //#472
            $k[$j++] = "Invalid length for optional minutes and seconds"; //#472
            $k[$j++] = false; //#472
            return true; //#472
        } //#472
        var _3J = $k[--$j]; //#474
        $k[$j++] = _3J; //#474
        if ($cvi($geti(_3J, 0, 2)) > 59) { //#474
            $j -= 2; //#474
            $k[$j++] = 'bwipp.GS1badMinute'; //#474
            $k[$j++] = "Invalid minute in the hour"; //#474
            $k[$j++] = false; //#474
            return true; //#474
        } //#474
        var _3L = $k[--$j]; //#475
        $k[$j++] = _3L; //#477
        if (_3L.length >= 4) { //#477
            var _3M = $k[--$j]; //#476
            $k[$j++] = _3M; //#476
            if ($cvi($geti(_3M, 2, 2)) > 59) { //#476
                $j -= 2; //#476
                $k[$j++] = 'bwipp.GS1badSecond'; //#476
                $k[$j++] = "Invalid second in the minute"; //#476
                $k[$j++] = false; //#476
                return true; //#476
            } //#476
        } //#476
        $j--; //#478
    }; //#479
    $1.lintyesno = function() {
        var _3O = $k[--$j]; //#482
        if ($ne(_3O, "0") && $ne(_3O, "1")) { //#484
            $j--; //#483
            $k[$j++] = 'bwipp.GS1badBoolean'; //#483
            $k[$j++] = "Neither 0 nor 1 for yes or no"; //#483
            $k[$j++] = false; //#483
            return true; //#483
        } //#483
    }; //#485
    $1.lintwinding = function() {
        var _3P = $k[--$j]; //#488
        if ($ne(_3P, "0") && ($ne(_3P, "1") && $ne(_3P, "9"))) { //#490
            $j--; //#489
            $k[$j++] = 'bwipp.GS1badWinding'; //#489
            $k[$j++] = "Invalid winding direction"; //#489
            $k[$j++] = false; //#489
            return true; //#489
        } //#489
    }; //#491
    $1.lintpieceoftotal = function() {
        var _3Q = $k[--$j]; //#494
        $k[$j++] = _3Q; //#494
        if ((_3Q.length % 2) != 0) { //#494
            $j -= 2; //#494
            $k[$j++] = 'bwipp.GS1badPieceTotalLength'; //#494
            $k[$j++] = "Invalid piece/total length"; //#494
            $k[$j++] = false; //#494
            return true; //#494
        } //#494
        var _3R = $k[--$j]; //#495
        var _3T = $cvi($geti(_3R, 0, ~~(_3R.length / 2))); //#496
        $k[$j++] = _3R; //#496
        $k[$j++] = _3T; //#496
        if (_3T == 0) { //#496
            $j -= 3; //#496
            $k[$j++] = 'bwipp.GS1badPieceNumber'; //#496
            $k[$j++] = "Invalid piece number"; //#496
            $k[$j++] = false; //#496
            return true; //#496
        } //#496
        var _3U = $k[--$j]; //#497
        var _3V = $k[--$j]; //#497
        var _3W = ~~(_3V.length / 2); //#497
        var _3Y = $cvi($geti(_3V, _3W, _3W)); //#498
        $k[$j++] = _3U; //#498
        $k[$j++] = _3Y; //#498
        if (_3Y == 0) { //#498
            $j -= 3; //#498
            $k[$j++] = 'bwipp.GS1badPieceTotal'; //#498
            $k[$j++] = "Invalid total number"; //#498
            $k[$j++] = false; //#498
            return true; //#498
        } //#498
        var _3Z = $k[--$j]; //#499
        if ($gt($k[--$j], _3Z)) { //#499
            $j--; //#499
            $k[$j++] = 'bwipp.GS1pieceExceedsTotal'; //#499
            $k[$j++] = "Piece number exceeds total"; //#499
            $k[$j++] = false; //#499
            return true; //#499
        } //#499
    }; //#500
    $1.lintpcenc = function() {
        for (;;) { //#513
            $search($k[--$j], "%"); //#504
            if ($nt($k[--$j])) { //#504
                $j--; //#504
                break; //#504
            } //#504
            $j -= 2; //#505
            var _3d = $k[--$j]; //#505
            $k[$j++] = _3d; //#505
            if (_3d.length < 2) { //#505
                $j -= 2; //#505
                $k[$j++] = 'bwipp.GS1badPercentEscape'; //#505
                $k[$j++] = "Invalid % escape"; //#505
                $k[$j++] = false; //#505
                break; //#505
            } //#505
            var _3e = $k[--$j]; //#506
            var _3f = $geti(_3e, 0, 2); //#506
            $k[$j++] = _3e; //#511
            $k[$j++] = true; //#511
            for (var _3g = 0, _3h = _3f.length; _3g < _3h; _3g++) { //#511
                var _3j = $s(1); //#507
                $put(_3j, 0, $get(_3f, _3g)); //#507
                $search("0123456789ABCDEFabcdef", _3j); //#509
                if ($nt($k[--$j])) { //#509
                    $j -= 2; //#509
                    $k[$j++] = false; //#509
                    return true; //#509
                } //#509
                $j -= 3; //#510
            } //#510
            if ($nt($k[--$j])) { //#512
                $j -= 2; //#512
                $k[$j++] = 'bwipp.GS1badPercentChars'; //#512
                $k[$j++] = "Invalid characters for percent encoding"; //#512
                $k[$j++] = false; //#512
                break; //#512
            } //#512
        } //#512
    }; //#514
    $1.lintcouponcode = function() {
        var _3m = $k[--$j]; //#517
        $k[$j++] = _3m; //#519
        $k[$j++] = true; //#519
        $forall(_3m, function() { //#519
            var _3n = $k[--$j]; //#518
            if ((_3n < 48) || (_3n > 57)) { //#518
                $j--; //#518
                $k[$j++] = false; //#518
                return true; //#518
            } //#518
        }); //#518
        if ($nt($k[--$j])) { //#520
            $j -= 2; //#520
            $k[$j++] = 'bwipp.GS1couponNotNumeric'; //#520
            $k[$j++] = "Coupon not numeric"; //#520
            $k[$j++] = false; //#520
            return true; //#520
        } //#520
        var _3p = $k[--$j]; //#523
        $k[$j++] = _3p; //#525
        if (_3p.length < 1) { //#525
            $j -= 2; //#524
            $k[$j++] = 'bwipp.GS1couponTooShortGCPVLI'; //#524
            $k[$j++] = "Coupon too short: Missing GCP VLI"; //#524
            $k[$j++] = false; //#524
            return true; //#524
        } //#524
        var _3q = $k[--$j]; //#526
        var _3s = $cvi($geti(_3q, 0, 1)); //#526
        $k[$j++] = _3q; //#528
        $k[$j++] = _3s; //#528
        if (_3s > 6) { //#528
            $j -= 2; //#527
            $k[$j++] = 'bwipp.GS1couponBadGCPVLI'; //#527
            $k[$j++] = "Coupon GCP length indicator must be 0-6"; //#527
            $k[$j++] = false; //#527
            return true; //#527
        } //#527
        var _3t = $k[--$j]; //#529
        var _3u = $k[--$j]; //#530
        $k[$j++] = _3u; //#532
        $k[$j++] = $f($f(_3t + 6) + 1); //#532
        if (($f($f(_3t + 6) + 1)) > _3u.length) { //#532
            $j -= 3; //#531
            $k[$j++] = 'bwipp.GS1couponTooShortGCP'; //#531
            $k[$j++] = "Coupon too short: GCP truncated"; //#531
            $k[$j++] = false; //#531
            return true; //#531
        } //#531
        var _3v = $k[--$j]; //#533
        var _3w = $k[--$j]; //#533
        var _3x = $geti(_3w, _3v, $f(_3w.length - _3v)); //#533
        $k[$j++] = _3x; //#538
        if (_3x.length < 6) { //#538
            $j -= 2; //#537
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode'; //#537
            $k[$j++] = "Coupon too short: Offer Code truncated"; //#537
            $k[$j++] = false; //#537
            return true; //#537
        } //#537
        var _3y = $k[--$j]; //#539
        var _3z = $geti(_3y, 6, _3y.length - 6); //#539
        $k[$j++] = _3z; //#544
        if (_3z.length < 1) { //#544
            $j -= 2; //#543
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValueVLI'; //#543
            $k[$j++] = "Coupon too short: Missing Save Value VLI"; //#543
            $k[$j++] = false; //#543
            return true; //#543
        } //#543
        var _40 = $k[--$j]; //#545
        var _42 = $cvi($geti(_40, 0, 1)); //#545
        $k[$j++] = _40; //#547
        $k[$j++] = _42; //#547
        if ((_42 < 1) || (_42 > 5)) { //#547
            $j -= 2; //#546
            $k[$j++] = 'bwipp.GS1couponBadSaveValueVLI'; //#546
            $k[$j++] = "Coupon Save Value length indicator must be 1-5"; //#546
            $k[$j++] = false; //#546
            return true; //#546
        } //#546
        var _43 = $k[--$j]; //#548
        var _44 = $k[--$j]; //#549
        $k[$j++] = _44; //#551
        $k[$j++] = $f(_43 + 1); //#551
        if ($f(_43 + 1) > _44.length) { //#551
            $j -= 3; //#550
            $k[$j++] = 'bwipp.GS1couponTooShortSaveValue'; //#550
            $k[$j++] = "Coupon too short: Save Value truncated"; //#550
            $k[$j++] = false; //#550
            return true; //#550
        } //#550
        var _45 = $k[--$j]; //#552
        var _46 = $k[--$j]; //#552
        var _47 = $geti(_46, _45, $f(_46.length - _45)); //#552
        $k[$j++] = _47; //#557
        if (_47.length < 1) { //#557
            $j -= 2; //#556
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementVLI'; //#556
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement VLI"; //#556
            $k[$j++] = false; //#556
            return true; //#556
        } //#556
        var _48 = $k[--$j]; //#558
        var _4A = $cvi($geti(_48, 0, 1)); //#558
        $k[$j++] = _48; //#560
        $k[$j++] = _4A; //#560
        if ((_4A < 1) || (_4A > 5)) { //#560
            $j -= 2; //#559
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementVLI'; //#559
            $k[$j++] = "Coupon 1st Purchase Requirement length indicator must be 1-5"; //#559
            $k[$j++] = false; //#559
            return true; //#559
        } //#559
        var _4B = $k[--$j]; //#561
        var _4C = $k[--$j]; //#562
        $k[$j++] = _4C; //#564
        $k[$j++] = $f(_4B + 1); //#564
        if ($f(_4B + 1) > _4C.length) { //#564
            $j -= 3; //#563
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirement'; //#563
            $k[$j++] = "Coupon too short: 1st Purchase Requirement truncated"; //#563
            $k[$j++] = false; //#563
            return true; //#563
        } //#563
        var _4D = $k[--$j]; //#565
        var _4E = $k[--$j]; //#565
        var _4F = $geti(_4E, _4D, $f(_4E.length - _4D)); //#565
        $k[$j++] = _4F; //#570
        if (_4F.length < 1) { //#570
            $j -= 2; //#569
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseRequirementCode'; //#569
            $k[$j++] = "Coupon too short: Missing 1st Purchase Requirement Code"; //#569
            $k[$j++] = false; //#569
            return true; //#569
        } //#569
        var _4G = $k[--$j]; //#571
        var _4I = $cvi($geti(_4G, 0, 1)); //#571
        $k[$j++] = _4G; //#573
        if ((_4I > 4) && (_4I != 9)) { //#573
            $j -= 2; //#572
            $k[$j++] = 'bwipp.GS1couponBad1stPurchaseRequirementCode'; //#572
            $k[$j++] = "Coupon 1st Purchase Requirement Code must be 0-4 or 9"; //#572
            $k[$j++] = false; //#572
            return true; //#572
        } //#572
        var _4J = $k[--$j]; //#574
        var _4K = $geti(_4J, 1, _4J.length - 1); //#574
        $k[$j++] = _4K; //#579
        if (_4K.length < 3) { //#579
            $j -= 2; //#578
            $k[$j++] = 'bwipp.GS1couponTooShort1stPurchaseFamilyCode'; //#578
            $k[$j++] = "Coupon too short: 1st Purchase Family Code truncated"; //#578
            $k[$j++] = false; //#578
            return true; //#578
        } //#578
        var _4L = $k[--$j]; //#580
        var _4M = $geti(_4L, 3, _4L.length - 3); //#580
        $k[$j++] = _4M; //#636
        if (_4M.length >= 1) { //#636
            var _4N = $k[--$j]; //#583
            $k[$j++] = _4N; //#636
            if ($cvi($geti(_4N, 0, 1)) == 1) { //#636
                var _4P = $k[--$j]; //#584
                var _4Q = $geti(_4P, 1, _4P.length - 1); //#584
                $k[$j++] = _4Q; //#589
                if (_4Q.length < 1) { //#589
                    $j -= 2; //#588
                    $k[$j++] = 'bwipp.GS1couponTooShortAdditionalPurchaseRulesCode'; //#588
                    $k[$j++] = "Coupon too short: Missing Additional Purchase Rules Code"; //#588
                    $k[$j++] = false; //#588
                    return true; //#588
                } //#588
                var _4R = $k[--$j]; //#590
                $k[$j++] = _4R; //#592
                if ($cvi($geti(_4R, 0, 1)) > 3) { //#592
                    $j -= 2; //#591
                    $k[$j++] = 'bwipp.GS1couponBadAdditionalPurchaseRulesCode'; //#591
                    $k[$j++] = "Coupon Additional Purchase Rules Code must be 0-3"; //#591
                    $k[$j++] = false; //#591
                    return true; //#591
                } //#591
                var _4T = $k[--$j]; //#593
                var _4U = $geti(_4T, 1, _4T.length - 1); //#593
                $k[$j++] = _4U; //#598
                if (_4U.length < 1) { //#598
                    $j -= 2; //#597
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementVLI'; //#597
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement VLI"; //#597
                    $k[$j++] = false; //#597
                    return true; //#597
                } //#597
                var _4V = $k[--$j]; //#599
                var _4X = $cvi($geti(_4V, 0, 1)); //#599
                $k[$j++] = _4V; //#601
                $k[$j++] = _4X; //#601
                if ((_4X < 1) || (_4X > 5)) { //#601
                    $j -= 2; //#600
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementVLI'; //#600
                    $k[$j++] = "Coupon 2nd Purchase Requirement length indicator must be 1-5"; //#600
                    $k[$j++] = false; //#600
                    return true; //#600
                } //#600
                var _4Y = $k[--$j]; //#602
                var _4Z = $k[--$j]; //#603
                $k[$j++] = _4Z; //#605
                $k[$j++] = $f(_4Y + 1); //#605
                if ($f(_4Y + 1) > _4Z.length) { //#605
                    $j -= 3; //#604
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirement'; //#604
                    $k[$j++] = "Coupon too short: 2nd Purchase Requirement truncated"; //#604
                    $k[$j++] = false; //#604
                    return true; //#604
                } //#604
                var _4a = $k[--$j]; //#606
                var _4b = $k[--$j]; //#606
                var _4c = $geti(_4b, _4a, $f(_4b.length - _4a)); //#606
                $k[$j++] = _4c; //#611
                if (_4c.length < 1) { //#611
                    $j -= 2; //#610
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseRequirementCode'; //#610
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase Requirement Code"; //#610
                    $k[$j++] = false; //#610
                    return true; //#610
                } //#610
                var _4d = $k[--$j]; //#612
                var _4f = $cvi($geti(_4d, 0, 1)); //#612
                $k[$j++] = _4d; //#614
                if ((_4f > 4) && (_4f != 9)) { //#614
                    $j -= 2; //#613
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseRequirementCode'; //#613
                    $k[$j++] = "Coupon 2nd Purchase Requirement Code must be 0-4 or 9"; //#613
                    $k[$j++] = false; //#613
                    return true; //#613
                } //#613
                var _4g = $k[--$j]; //#615
                var _4h = $geti(_4g, 1, _4g.length - 1); //#615
                $k[$j++] = _4h; //#620
                if (_4h.length < 3) { //#620
                    $j -= 2; //#619
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseFamilyCode'; //#619
                    $k[$j++] = "Coupon too short: 2nd Purchase Family Code truncated"; //#619
                    $k[$j++] = false; //#619
                    return true; //#619
                } //#619
                var _4i = $k[--$j]; //#621
                var _4j = $geti(_4i, 3, _4i.length - 3); //#621
                $k[$j++] = _4j; //#626
                if (_4j.length < 1) { //#626
                    $j -= 2; //#625
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCPVLI'; //#625
                    $k[$j++] = "Coupon too short: Missing 2nd Purchase GCP VLI"; //#625
                    $k[$j++] = false; //#625
                    return true; //#625
                } //#625
                var _4k = $k[--$j]; //#627
                var _4m = $cvi($geti(_4k, 0, 1)); //#627
                $k[$j++] = _4k; //#629
                $k[$j++] = _4m; //#629
                if ((_4m > 6) && (_4m != 9)) { //#629
                    $j -= 2; //#628
                    $k[$j++] = 'bwipp.GS1couponBad2ndPurchaseGCPVLI'; //#628
                    $k[$j++] = "Coupon 2nd Purchase GCP length indicator must be 0-6 or 9"; //#628
                    $k[$j++] = false; //#628
                    return true; //#628
                } //#628
                var _4n = $k[--$j]; //#630
                $k[$j++] = _4n; //#630
                if (_4n != 9) { //#630
                    var _4o = $k[--$j]; //#630
                    $k[$j++] = $f(_4o + 6); //#630
                } else { //#630
                    $j--; //#630
                    $k[$j++] = 0; //#630
                } //#630
                var _4p = $k[--$j]; //#630
                var _4q = $k[--$j]; //#631
                $k[$j++] = _4q; //#633
                $k[$j++] = $f(_4p + 1); //#633
                if ($f(_4p + 1) > _4q.length) { //#633
                    $j -= 3; //#632
                    $k[$j++] = 'bwipp.GS1couponTooShort2ndPurchaseGCP'; //#632
                    $k[$j++] = "Coupon too short: 2nd Purchase GCP truncated"; //#632
                    $k[$j++] = false; //#632
                    return true; //#632
                } //#632
                var _4r = $k[--$j]; //#634
                var _4s = $k[--$j]; //#634
                $k[$j++] = $geti(_4s, _4r, $f(_4s.length - _4r)); //#634
            } //#634
        } //#634
        var _4u = $k[--$j]; //#639
        $k[$j++] = _4u; //#683
        if (_4u.length >= 1) { //#683
            var _4v = $k[--$j]; //#639
            $k[$j++] = _4v; //#683
            if ($cvi($geti(_4v, 0, 1)) == 2) { //#683
                var _4x = $k[--$j]; //#640
                var _4y = $geti(_4x, 1, _4x.length - 1); //#640
                $k[$j++] = _4y; //#645
                if (_4y.length < 1) { //#645
                    $j -= 2; //#644
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementVLI'; //#644
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement VLI"; //#644
                    $k[$j++] = false; //#644
                    return true; //#644
                } //#644
                var _4z = $k[--$j]; //#646
                var _51 = $cvi($geti(_4z, 0, 1)); //#646
                $k[$j++] = _4z; //#648
                $k[$j++] = _51; //#648
                if ((_51 < 1) || (_51 > 5)) { //#648
                    $j -= 2; //#647
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementVLI'; //#647
                    $k[$j++] = "Coupon 3rd Purchase Requirement length indicator must be 1-5"; //#647
                    $k[$j++] = false; //#647
                    return true; //#647
                } //#647
                var _52 = $k[--$j]; //#649
                var _53 = $k[--$j]; //#650
                $k[$j++] = _53; //#652
                $k[$j++] = $f(_52 + 1); //#652
                if ($f(_52 + 1) > _53.length) { //#652
                    $j -= 3; //#651
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirement'; //#651
                    $k[$j++] = "Coupon too short: 3rd Purchase Requirement truncated"; //#651
                    $k[$j++] = false; //#651
                    return true; //#651
                } //#651
                var _54 = $k[--$j]; //#653
                var _55 = $k[--$j]; //#653
                var _56 = $geti(_55, _54, $f(_55.length - _54)); //#653
                $k[$j++] = _56; //#658
                if (_56.length < 1) { //#658
                    $j -= 2; //#657
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseRequirementCode'; //#657
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase Requirement Code"; //#657
                    $k[$j++] = false; //#657
                    return true; //#657
                } //#657
                var _57 = $k[--$j]; //#659
                var _59 = $cvi($geti(_57, 0, 1)); //#659
                $k[$j++] = _57; //#661
                if ((_59 > 4) && (_59 != 9)) { //#661
                    $j -= 2; //#660
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseRequirementCode'; //#660
                    $k[$j++] = "Coupon 3rd Purchase Requirement Code must be 0-4 or 9"; //#660
                    $k[$j++] = false; //#660
                    return true; //#660
                } //#660
                var _5A = $k[--$j]; //#662
                var _5B = $geti(_5A, 1, _5A.length - 1); //#662
                $k[$j++] = _5B; //#667
                if (_5B.length < 3) { //#667
                    $j -= 2; //#666
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseFamilyCode'; //#666
                    $k[$j++] = "Coupon too short: 3rd Purchase Family Code truncated"; //#666
                    $k[$j++] = false; //#666
                    return true; //#666
                } //#666
                var _5C = $k[--$j]; //#668
                var _5D = $geti(_5C, 3, _5C.length - 3); //#668
                $k[$j++] = _5D; //#673
                if (_5D.length < 1) { //#673
                    $j -= 2; //#672
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCPVLI'; //#672
                    $k[$j++] = "Coupon too short: Missing 3rd Purchase GCP VLI"; //#672
                    $k[$j++] = false; //#672
                    return true; //#672
                } //#672
                var _5E = $k[--$j]; //#674
                var _5G = $cvi($geti(_5E, 0, 1)); //#674
                $k[$j++] = _5E; //#676
                $k[$j++] = _5G; //#676
                if ((_5G > 6) && (_5G != 9)) { //#676
                    $j -= 2; //#675
                    $k[$j++] = 'bwipp.GS1couponBad3rdPurchaseGCPVLI'; //#675
                    $k[$j++] = "Coupon 3rd Purchase GCP length indicator must be 0-6 or 9"; //#675
                    $k[$j++] = false; //#675
                    return true; //#675
                } //#675
                var _5H = $k[--$j]; //#677
                $k[$j++] = _5H; //#677
                if (_5H != 9) { //#677
                    var _5I = $k[--$j]; //#677
                    $k[$j++] = $f(_5I + 6); //#677
                } else { //#677
                    $j--; //#677
                    $k[$j++] = 0; //#677
                } //#677
                var _5J = $k[--$j]; //#677
                var _5K = $k[--$j]; //#678
                $k[$j++] = _5K; //#680
                $k[$j++] = $f(_5J + 1); //#680
                if ($f(_5J + 1) > _5K.length) { //#680
                    $j -= 3; //#679
                    $k[$j++] = 'bwipp.GS1couponTooShort3rdPurchaseGCP'; //#679
                    $k[$j++] = "Coupon too short: 3rd Purchase GCP truncated"; //#679
                    $k[$j++] = false; //#679
                    return true; //#679
                } //#679
                var _5L = $k[--$j]; //#681
                var _5M = $k[--$j]; //#681
                $k[$j++] = $geti(_5M, _5L, $f(_5M.length - _5L)); //#681
            } //#681
        } //#681
        $1.couponexpire = -1; //#686
        var _5O = $k[--$j]; //#687
        $k[$j++] = _5O; //#705
        if (_5O.length >= 1) { //#705
            var _5P = $k[--$j]; //#687
            $k[$j++] = _5P; //#705
            if ($cvi($geti(_5P, 0, 1)) == 3) { //#705
                var _5R = $k[--$j]; //#688
                var _5S = $geti(_5R, 1, _5R.length - 1); //#688
                $k[$j++] = _5S; //#693
                if (_5S.length < 6) { //#693
                    $j -= 2; //#692
                    $k[$j++] = 'bwipp.GS1couponTooShortExpirationDate'; //#692
                    $k[$j++] = "Coupon too short: Expiration date"; //#692
                    $k[$j++] = false; //#692
                    return true; //#692
                } //#692
                var _5T = $k[--$j]; //#694
                var _5V = $cvi($geti(_5T, 2, 2)); //#694
                $k[$j++] = _5T; //#694
                if ((_5V < 1) || (_5V > 12)) { //#694
                    $j -= 2; //#694
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadMonth'; //#694
                    $k[$j++] = "Invalid month in expiration date"; //#694
                    $k[$j++] = false; //#694
                    return true; //#694
                } //#694
                var _5W = $k[--$j]; //#695
                var _5Y = $cvi($geti(_5W, 0, 2)); //#695
                var _5Z = _5Y - 21; //#696
                $k[$j++] = _5W; //#696
                $k[$j++] = _5Y; //#696
                $k[$j++] = _5Z; //#696
                if (_5Z >= 51) { //#696
                    $j--; //#696
                    var _5a = $k[--$j]; //#696
                    $k[$j++] = $f(_5a + 1900); //#696
                } else { //#696
                    if ($k[--$j] <= -50) { //#696
                        var _5c = $k[--$j]; //#696
                        $k[$j++] = $f(_5c + 2100); //#696
                    } else { //#696
                        var _5d = $k[--$j]; //#696
                        $k[$j++] = $f(_5d + 2000); //#696
                    } //#696
                } //#696
                var _5e = $k[--$j]; //#697
                $k[$j++] = ((_5e % 400) == 0) || (((_5e % 4) == 0) && ((_5e % 100) != 0)); //#698
                $k[$j++] = Infinity; //#698
                var _5f = $k[--$j]; //#698
                var _5h = $k[--$j] ? 29 : 28; //#698
                $k[$j++] = _5f; //#698
                $k[$j++] = 31; //#698
                $k[$j++] = _5h; //#698
                $k[$j++] = 31; //#698
                $k[$j++] = 30; //#698
                $k[$j++] = 31; //#698
                $k[$j++] = 30; //#698
                $k[$j++] = 31; //#698
                $k[$j++] = 31; //#698
                $k[$j++] = 30; //#698
                $k[$j++] = 31; //#698
                $k[$j++] = 30; //#698
                $k[$j++] = 31; //#698
                var _5i = $a(); //#698
                var _5j = $k[--$j]; //#699
                var _5n = $cvi($geti(_5j, 4, 2)); //#700
                $k[$j++] = _5j; //#701
                if (($get(_5i, $cvi($geti(_5j, 2, 2)) - 1) < _5n) || (_5n < 1)) { //#701
                    $j -= 2; //#701
                    $k[$j++] = 'bwipp.GS1couponExpirationDateBadDay'; //#701
                    $k[$j++] = "Invalid day of month in expiration date"; //#701
                    $k[$j++] = false; //#701
                    return true; //#701
                } //#701
                var _5o = $k[--$j]; //#702
                $1.couponexpire = $cvi($geti(_5o, 0, 6)); //#702
                $k[$j++] = $geti(_5o, 6, _5o.length - 6); //#703
            } //#703
        } //#703
        var _5r = $k[--$j]; //#708
        $k[$j++] = _5r; //#729
        if (_5r.length >= 1) { //#729
            var _5s = $k[--$j]; //#708
            $k[$j++] = _5s; //#729
            if ($cvi($geti(_5s, 0, 1)) == 4) { //#729
                var _5u = $k[--$j]; //#709
                var _5v = $geti(_5u, 1, _5u.length - 1); //#709
                $k[$j++] = _5v; //#714
                if (_5v.length < 6) { //#714
                    $j -= 2; //#713
                    $k[$j++] = 'bwipp.GS1couponTooShortStartDate'; //#713
                    $k[$j++] = "Coupon too short: Start date"; //#713
                    $k[$j++] = false; //#713
                    return true; //#713
                } //#713
                var _5w = $k[--$j]; //#715
                var _5y = $cvi($geti(_5w, 2, 2)); //#715
                $k[$j++] = _5w; //#715
                if ((_5y < 1) || (_5y > 12)) { //#715
                    $j -= 2; //#715
                    $k[$j++] = 'bwipp.GS1couponStartDateBadMonth'; //#715
                    $k[$j++] = "Invalid month in start date"; //#715
                    $k[$j++] = false; //#715
                    return true; //#715
                } //#715
                var _5z = $k[--$j]; //#716
                var _61 = $cvi($geti(_5z, 0, 2)); //#716
                var _62 = _61 - 21; //#717
                $k[$j++] = _5z; //#717
                $k[$j++] = _61; //#717
                $k[$j++] = _62; //#717
                if (_62 >= 51) { //#717
                    $j--; //#717
                    var _63 = $k[--$j]; //#717
                    $k[$j++] = $f(_63 + 1900); //#717
                } else { //#717
                    if ($k[--$j] <= -50) { //#717
                        var _65 = $k[--$j]; //#717
                        $k[$j++] = $f(_65 + 2100); //#717
                    } else { //#717
                        var _66 = $k[--$j]; //#717
                        $k[$j++] = $f(_66 + 2000); //#717
                    } //#717
                } //#717
                var _67 = $k[--$j]; //#718
                $k[$j++] = ((_67 % 400) == 0) || (((_67 % 4) == 0) && ((_67 % 100) != 0)); //#719
                $k[$j++] = Infinity; //#719
                var _68 = $k[--$j]; //#719
                var _6A = $k[--$j] ? 29 : 28; //#719
                $k[$j++] = _68; //#719
                $k[$j++] = 31; //#719
                $k[$j++] = _6A; //#719
                $k[$j++] = 31; //#719
                $k[$j++] = 30; //#719
                $k[$j++] = 31; //#719
                $k[$j++] = 30; //#719
                $k[$j++] = 31; //#719
                $k[$j++] = 31; //#719
                $k[$j++] = 30; //#719
                $k[$j++] = 31; //#719
                $k[$j++] = 30; //#719
                $k[$j++] = 31; //#719
                var _6B = $a(); //#719
                var _6C = $k[--$j]; //#720
                var _6G = $cvi($geti(_6C, 4, 2)); //#721
                $k[$j++] = _6C; //#722
                if (($get(_6B, $cvi($geti(_6C, 2, 2)) - 1) < _6G) || (_6G < 1)) { //#722
                    $j -= 2; //#722
                    $k[$j++] = 'bwipp.GS1couponStartDateBadDay'; //#722
                    $k[$j++] = "Invalid day of month in start date"; //#722
                    $k[$j++] = false; //#722
                    return true; //#722
                } //#722
                var _6H = $k[--$j]; //#723
                $1.couponstart = $cvi($geti(_6H, 0, 6)); //#723
                $k[$j++] = _6H; //#726
                if (($1.couponexpire != -1) && ($1.couponexpire < $1.couponstart)) { //#726
                    $j -= 2; //#725
                    $k[$j++] = 'bwipp.GS1couponExpireDateBeforeStartDate'; //#725
                    $k[$j++] = "Coupon expires before it starts"; //#725
                    $k[$j++] = false; //#725
                    return true; //#725
                } //#725
                var _6M = $k[--$j]; //#727
                $k[$j++] = $geti(_6M, 6, _6M.length - 6); //#727
            } //#727
        } //#727
        var _6O = $k[--$j]; //#732
        $k[$j++] = _6O; //#745
        if (_6O.length >= 1) { //#745
            var _6P = $k[--$j]; //#732
            $k[$j++] = _6P; //#745
            if ($cvi($geti(_6P, 0, 1)) == 5) { //#745
                var _6R = $k[--$j]; //#733
                var _6S = $geti(_6R, 1, _6R.length - 1); //#733
                $k[$j++] = _6S; //#738
                if (_6S.length < 1) { //#738
                    $j -= 2; //#737
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumberVLI'; //#737
                    $k[$j++] = "Coupon too short: Missing Serial Number VLI"; //#737
                    $k[$j++] = false; //#737
                    return true; //#737
                } //#737
                var _6T = $k[--$j]; //#739
                var _6U = $geti(_6T, 0, 1); //#739
                $k[$j++] = _6T; //#742
                $k[$j++] = ($cvi(_6U) + 6) + 1; //#742
                if ((($cvi(_6U) + 6) + 1) > _6T.length) { //#742
                    $j -= 3; //#741
                    $k[$j++] = 'bwipp.GS1couponTooShortSerialNumber'; //#741
                    $k[$j++] = "Coupon too short: Serial Number truncated"; //#741
                    $k[$j++] = false; //#741
                    return true; //#741
                } //#741
                var _6V = $k[--$j]; //#743
                var _6W = $k[--$j]; //#743
                $k[$j++] = $geti(_6W, _6V, $f(_6W.length - _6V)); //#743
            } //#743
        } //#743
        var _6Y = $k[--$j]; //#748
        $k[$j++] = _6Y; //#764
        if (_6Y.length >= 1) { //#764
            var _6Z = $k[--$j]; //#748
            $k[$j++] = _6Z; //#764
            if ($cvi($geti(_6Z, 0, 1)) == 6) { //#764
                var _6b = $k[--$j]; //#749
                var _6c = $geti(_6b, 1, _6b.length - 1); //#749
                $k[$j++] = _6c; //#754
                if (_6c.length < 1) { //#754
                    $j -= 2; //#753
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLNVLI'; //#753
                    $k[$j++] = "Coupon too short: Missing Retailer GCP/GLN VLI"; //#753
                    $k[$j++] = false; //#753
                    return true; //#753
                } //#753
                var _6d = $k[--$j]; //#755
                var _6f = $cvi($geti(_6d, 0, 1)); //#755
                $k[$j++] = _6d; //#757
                $k[$j++] = _6f; //#757
                if ((_6f < 1) || (_6f > 7)) { //#757
                    $j -= 2; //#756
                    $k[$j++] = 'bwipp.GS1couponBadRetailerGCPGLNVLI'; //#756
                    $k[$j++] = "Coupon Retailer GCP/GLN length indicator must be 1-7"; //#756
                    $k[$j++] = false; //#756
                    return true; //#756
                } //#756
                var _6g = $k[--$j]; //#758
                var _6h = $k[--$j]; //#759
                $k[$j++] = _6h; //#761
                $k[$j++] = $f($f(_6g + 6) + 1); //#761
                if (($f($f(_6g + 6) + 1)) > _6h.length) { //#761
                    $j -= 3; //#760
                    $k[$j++] = 'bwipp.GS1couponTooShortRetailerGCPGLN'; //#760
                    $k[$j++] = "Coupon too short: Retailer GCP/GLN truncated"; //#760
                    $k[$j++] = false; //#760
                    return true; //#760
                } //#760
                var _6i = $k[--$j]; //#762
                var _6j = $k[--$j]; //#762
                $k[$j++] = $geti(_6j, _6i, $f(_6j.length - _6i)); //#762
            } //#762
        } //#762
        var _6l = $k[--$j]; //#767
        $k[$j++] = _6l; //#803
        if (_6l.length >= 1) { //#803
            var _6m = $k[--$j]; //#767
            $k[$j++] = _6m; //#803
            if ($cvi($geti(_6m, 0, 1)) == 9) { //#803
                var _6o = $k[--$j]; //#768
                var _6p = $geti(_6o, 1, _6o.length - 1); //#768
                $k[$j++] = _6p; //#773
                if (_6p.length < 1) { //#773
                    $j -= 2; //#772
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueCode'; //#772
                    $k[$j++] = "Coupon too short: Missing Save Value Code"; //#772
                    $k[$j++] = false; //#772
                    return true; //#772
                } //#772
                var _6q = $k[--$j]; //#774
                var _6s = $cvi($geti(_6q, 0, 1)); //#774
                $k[$j++] = _6q; //#776
                if ((_6s > 6) || ((_6s == 3) || (_6s == 4))) { //#776
                    $j -= 2; //#775
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueCode'; //#775
                    $k[$j++] = "Coupon Save Value Code must be 0,1,2,5 or 6"; //#775
                    $k[$j++] = false; //#775
                    return true; //#775
                } //#775
                var _6t = $k[--$j]; //#777
                var _6u = $geti(_6t, 1, _6t.length - 1); //#777
                $k[$j++] = _6u; //#782
                if (_6u.length < 1) { //#782
                    $j -= 2; //#781
                    $k[$j++] = 'bwipp.GS1couponTooShortSaveValueAppliesToItem'; //#781
                    $k[$j++] = "Coupon too short: Missing Save Value Applies to Item"; //#781
                    $k[$j++] = false; //#781
                    return true; //#781
                } //#781
                var _6v = $k[--$j]; //#783
                $k[$j++] = _6v; //#785
                if ($cvi($geti(_6v, 0, 1)) > 2) { //#785
                    $j -= 2; //#784
                    $k[$j++] = 'bwipp.GS1couponBadSaveValueAppliesToItem'; //#784
                    $k[$j++] = "Coupon Save Value Applies to Item must be 0-2"; //#784
                    $k[$j++] = false; //#784
                    return true; //#784
                } //#784
                var _6x = $k[--$j]; //#786
                var _6y = $geti(_6x, 1, _6x.length - 1); //#786
                $k[$j++] = _6y; //#791
                if (_6y.length < 1) { //#791
                    $j -= 2; //#790
                    $k[$j++] = 'bwipp.GS1couponTooShortStoreCouponFlag'; //#790
                    $k[$j++] = "Coupon too short: Missing Store Coupon Flag"; //#790
                    $k[$j++] = false; //#790
                    return true; //#790
                } //#790
                var _6z = $k[--$j]; //#792
                var _70 = $geti(_6z, 1, _6z.length - 1); //#792
                $k[$j++] = _70; //#797
                if (_70.length < 1) { //#797
                    $j -= 2; //#796
                    $k[$j++] = 'bwipp.GS1couponTooShortDontMultiplyFlag'; //#796
                    $k[$j++] = "Coupon too short: Missing Don't Multiply Flag"; //#796
                    $k[$j++] = false; //#796
                    return true; //#796
                } //#796
                var _71 = $k[--$j]; //#798
                $k[$j++] = _71; //#800
                if ($cvi($geti(_71, 0, 1)) > 1) { //#800
                    $j -= 2; //#799
                    $k[$j++] = 'bwipp.GS1couponBadDontMultiplyFlag'; //#799
                    $k[$j++] = "Don't Multiply Flag must be 0 or 1"; //#799
                    $k[$j++] = false; //#799
                    return true; //#799
                } //#799
                var _73 = $k[--$j]; //#801
                $k[$j++] = $geti(_73, 1, _73.length - 1); //#801
            } //#801
        } //#801
        var _75 = $k[--$j]; //#805
        $k[$j++] = _75; //#807
        if (_75.length != 0) { //#807
            $j -= 2; //#806
            $k[$j++] = 'bwipp.GS1couponUnrecognisedOptionalField'; //#806
            $k[$j++] = "Coupon fields must be 1,2,3,4,5,6 or 9, increasing order"; //#806
            $k[$j++] = false; //#806
            return true; //#806
        } //#806
        $j--; //#808
    }; //#809
    $1.lintcouponposoffer = function() {
        var _76 = $k[--$j]; //#812
        $k[$j++] = _76; //#814
        $k[$j++] = true; //#814
        $forall(_76, function() { //#814
            var _77 = $k[--$j]; //#813
            if ((_77 < 48) || (_77 > 57)) { //#813
                $j--; //#813
                $k[$j++] = false; //#813
                return true; //#813
            } //#813
        }); //#813
        if ($nt($k[--$j])) { //#815
            $j -= 2; //#815
            $k[$j++] = 'bwipp.GS1couponNotNumeric'; //#815
            $k[$j++] = "Coupon not numeric"; //#815
            $k[$j++] = false; //#815
            return true; //#815
        } //#815
        var _79 = $k[--$j]; //#817
        $k[$j++] = _79; //#819
        if (_79.length < 1) { //#819
            $j -= 2; //#818
            $k[$j++] = 'bwipp.GS1couponTooShortFormatCode'; //#818
            $k[$j++] = "Coupon too short: Missing Format Code"; //#818
            $k[$j++] = false; //#818
            return true; //#818
        } //#818
        var _7A = $k[--$j]; //#820
        var _7B = $geti(_7A, 0, 1); //#820
        $k[$j++] = _7A; //#822
        if ($ne(_7B, "0") && $ne(_7B, "1")) { //#822
            $j -= 2; //#821
            $k[$j++] = 'bwipp.GS1couponBadFormatCode'; //#821
            $k[$j++] = "Coupon format must be 0 or 1"; //#821
            $k[$j++] = false; //#821
            return true; //#821
        } //#821
        var _7C = $k[--$j]; //#823
        var _7D = $geti(_7C, 1, _7C.length - 1); //#823
        $k[$j++] = _7D; //#827
        if (_7D.length < 1) { //#827
            $j -= 2; //#826
            $k[$j++] = 'bwipp.GS1couponTooShortFunderVLI'; //#826
            $k[$j++] = "Coupon too short: Missing Funder VLI"; //#826
            $k[$j++] = false; //#826
            return true; //#826
        } //#826
        var _7E = $k[--$j]; //#828
        var _7G = $cvi($geti(_7E, 0, 1)); //#828
        $k[$j++] = _7E; //#830
        $k[$j++] = _7G; //#830
        if (_7G > 6) { //#830
            $j -= 3; //#829
            $k[$j++] = 'bwipp.GS1couponBadFunderVLI'; //#829
            $k[$j++] = "Coupon Funder length indicator must be 0-6"; //#829
            $k[$j++] = false; //#829
            return true; //#829
        } //#829
        var _7H = $k[--$j]; //#831
        var _7I = $k[--$j]; //#832
        $k[$j++] = _7I; //#834
        $k[$j++] = $f($f(_7H + 6) + 1); //#834
        if (($f($f(_7H + 6) + 1)) > _7I.length) { //#834
            $j -= 3; //#833
            $k[$j++] = 'bwipp.GS1couponTooShortFunder'; //#833
            $k[$j++] = "Coupon too short: Truncated Funder ID"; //#833
            $k[$j++] = false; //#833
            return true; //#833
        } //#833
        var _7J = $k[--$j]; //#835
        var _7K = $k[--$j]; //#835
        var _7L = $geti(_7K, _7J, $f(_7K.length - _7J)); //#835
        $k[$j++] = _7L; //#839
        if (_7L.length < 6) { //#839
            $j -= 2; //#838
            $k[$j++] = 'bwipp.GS1couponTooShortOfferCode'; //#838
            $k[$j++] = "Coupon too short: Truncated Offer Code"; //#838
            $k[$j++] = false; //#838
            return true; //#838
        } //#838
        var _7M = $k[--$j]; //#840
        var _7N = $geti(_7M, 6, _7M.length - 6); //#840
        $k[$j++] = _7N; //#844
        if (_7N.length < 1) { //#844
            $j -= 2; //#843
            $k[$j++] = 'bwipp.GS1couponTooShortSnVLI'; //#843
            $k[$j++] = "Coupon too short: Missing SN VLI"; //#843
            $k[$j++] = false; //#843
            return true; //#843
        } //#843
        var _7O = $k[--$j]; //#845
        var _7P = $geti(_7O, 0, 1); //#845
        $k[$j++] = _7O; //#849
        $k[$j++] = ($cvi(_7P) + 6) + 1; //#849
        if ((($cvi(_7P) + 6) + 1) > _7O.length) { //#849
            $j -= 3; //#848
            $k[$j++] = 'bwipp.GS1couponTooShortSn'; //#848
            $k[$j++] = "Coupon too short: Truncated SN"; //#848
            $k[$j++] = false; //#848
            return true; //#848
        } //#848
        var _7Q = $k[--$j]; //#850
        var _7R = $k[--$j]; //#850
        var _7S = $geti(_7R, _7Q, $f(_7R.length - _7Q)); //#850
        $k[$j++] = _7S; //#853
        if (_7S.length != 0) { //#853
            $j -= 2; //#852
            $k[$j++] = 'bwipp.GS1couponTooLong'; //#852
            $k[$j++] = "Coupon too long"; //#852
            $k[$j++] = false; //#852
            return true; //#852
        } //#852
        $j--; //#854
    }; //#855
    var _7U = new Map([
        ["cset", 'N'],
        ["min", 18],
        ["max", 18],
        ["check", $a(['lintcsum', 'lintkey'])]
    ]); //#860
    var _7X = new Map([
        ["cset", 'N'],
        ["min", 14],
        ["max", 14],
        ["check", $a(['lintcsum', 'lintkey'])]
    ]); //#866
    var _7Y = $a([_7X]); //#866
    var _7a = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#873
    var _7d = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a(['lintyymmd0'])]
    ]); //#879
    var _7e = $a([_7d]); //#879
    var _7g = new Map([
        ["cset", 'N'],
        ["min", 2],
        ["max", 2],
        ["check", $a([])]
    ]); //#890
    var _7j = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#896
    var _7k = $a([_7j]); //#896
    var _7m = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 28],
        ["check", $a([])]
    ]); //#903
    var _7p = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a([])]
    ]); //#909
    var _7q = $a([_7p]); //#909
    var _7s = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 6],
        ["check", $a([])]
    ]); //#916
    var _7v = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#922
    var _7y = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a([])]
    ]); //#928
    var _7z = $a([_7y]); //#928
    var _81 = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["check", $a(['lintcsum', 'lintkey'])]
    ]); //#935
    var _83 = new Map([
        ["cset", 'X'],
        ["min", 0],
        ["max", 17],
        ["check", $a([])]
    ]); //#936
    var _86 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#942
    var _89 = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["check", $a(['lintcsum', 'lintkey'])]
    ]); //#948
    var _8B = new Map([
        ["cset", 'N'],
        ["min", 0],
        ["max", 12],
        ["check", $a([])]
    ]); //#949
    var _8E = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 8],
        ["check", $a([])]
    ]); //#955
    var _8H = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a([])]
    ]); //#961
    var _8I = $a([_8H]); //#961
    var _8K = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 8],
        ["check", $a([])]
    ]); //#1284
    var _8N = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 15],
        ["check", $a([])]
    ]); //#1290
    var _8O = $a([_8N]); //#1290
    var _8Q = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["check", $a(['lintiso4217'])]
    ]); //#1305
    var _8S = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 15],
        ["check", $a([])]
    ]); //#1306
    var _8T = $a([_8Q, _8S]); //#1306
    var _8V = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 15],
        ["check", $a([])]
    ]); //#1321
    var _8W = $a([_8V]); //#1321
    var _8Y = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["check", $a(['lintiso4217'])]
    ]); //#1336
    var _8a = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 15],
        ["check", $a([])]
    ]); //#1337
    var _8b = $a([_8Y, _8a]); //#1337
    var _8d = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["check", $a([])]
    ]); //#1352
    var _8e = $a([_8d]); //#1352
    var _8g = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a([])]
    ]); //#1361
    var _8h = $a([_8g]); //#1361
    var _8j = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a([])]
    ]); //#1372
    var _8m = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a(['lintkey'])]
    ]); //#1378
    var _8p = new Map([
        ["cset", 'N'],
        ["min", 17],
        ["max", 17],
        ["check", $a(['lintcsum', 'lintkey'])]
    ]); //#1384
    var _8s = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a([])]
    ]); //#1390
    var _8v = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["check", $a(['lintcsum', 'lintkey'])]
    ]); //#1396
    var _8w = $a([_8v]); //#1396
    var _8y = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#1409
    var _91 = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["check", $a(['lintiso3166'])]
    ]); //#1415
    var _93 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 9],
        ["check", $a([])]
    ]); //#1416
    var _96 = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["check", $a(['lintiso3166'])]
    ]); //#1422
    var _99 = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 15],
        ["check", $a(['lintiso3166list'])]
    ]); //#1428
    var _9C = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["check", $a(['lintiso3166'])]
    ]); //#1434
    var _9F = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 15],
        ["check", $a(['lintiso3166list'])]
    ]); //#1440
    var _9I = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["check", $a(['lintiso3166'])]
    ]); //#1446
    var _9L = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 3],
        ["check", $a([])]
    ]); //#1452
    var _9O = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 35],
        ["check", $a(['lintpcenc'])]
    ]); //#1458
    var _9P = $a([_9O]); //#1458
    var _9R = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["check", $a(['lintpcenc'])]
    ]); //#1465
    var _9S = $a([_9R]); //#1465
    var _9U = new Map([
        ["cset", 'X'],
        ["min", 2],
        ["max", 2],
        ["check", $a(['lintiso3166alpha2'])]
    ]); //#1475
    var _9X = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a([])]
    ]); //#1481
    var _9a = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 35],
        ["check", $a(['lintpcenc'])]
    ]); //#1487
    var _9b = $a([_9a]); //#1487
    var _9d = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["check", $a(['lintpcenc'])]
    ]); //#1494
    var _9e = $a([_9d]); //#1494
    var _9g = new Map([
        ["cset", 'X'],
        ["min", 2],
        ["max", 2],
        ["check", $a(['lintiso3166alpha2'])]
    ]); //#1504
    var _9j = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#1510
    var _9m = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a([])]
    ]); //#1516
    var _9p = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 35],
        ["check", $a(['lintpcenc'])]
    ]); //#1522
    var _9s = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["check", $a(['lintyesno'])]
    ]); //#1528
    var _9t = $a([_9s]); //#1528
    var _9v = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a(['lintyymmd0'])]
    ]); //#1536
    var _9x = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["check", $a(['linthhmm'])]
    ]); //#1537
    var _9y = $a([_9v, _9x]); //#1537
    var _A0 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a(['lintyymmdd'])]
    ]); //#1544
    var _A3 = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["check", $a([])]
    ]); //#1550
    var _A6 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a([])]
    ]); //#1556
    var _A9 = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a(['lintyymmdd'])]
    ]); //#1562
    var _AB = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["check", $a(['linthhmm'])]
    ]); //#1563
    var _AE = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 4],
        ["check", $a([])]
    ]); //#1569
    var _AH = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 12],
        ["check", $a([])]
    ]); //#1575
    var _AK = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a(['lintyymmdd'])]
    ]); //#1581
    var _AN = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a(['lintyymmdd'])]
    ]); //#1587
    var _AP = new Map([
        ["cset", 'N'],
        ["min", 0],
        ["max", 6],
        ["check", $a(['lintyymmdd'])]
    ]); //#1588
    var _AS = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 3],
        ["check", $a([])]
    ]); //#1594
    var _AV = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 10],
        ["check", $a([])]
    ]); //#1600
    var _AY = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 2],
        ["check", $a([])]
    ]); //#1606
    var _Ab = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#1612
    var _Ac = $a([_Ab]); //#1612
    var _Ae = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a(['lintkey'])]
    ]); //#1620
    var _Ah = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["check", $a(['lintiso3166999'])]
    ]); //#1626
    var _Aj = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 27],
        ["check", $a([])]
    ]); //#1627
    var _Ak = $a([_Ah, _Aj]); //#1627
    var _Am = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["check", $a([])]
    ]); //#1642
    var _Ao = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["check", $a([])]
    ]); //#1643
    var _Aq = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["check", $a([])]
    ]); //#1644
    var _As = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 1],
        ["check", $a(['lintimporteridx'])]
    ]); //#1645
    var _Av = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#1651
    var _Aw = $a([_Av]); //#1651
    var _Ay = new Map([
        ["cset", 'X'],
        ["min", 2],
        ["max", 2],
        ["check", $a([])]
    ]); //#1662
    var _B0 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 28],
        ["check", $a([])]
    ]); //#1663
    var _B1 = $a([_Ay, _B0]); //#1663
    var _B3 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#1678
    var _B6 = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["check", $a(['lintnonzero'])]
    ]); //#1684
    var _B8 = new Map([
        ["cset", 'N'],
        ["min", 5],
        ["max", 5],
        ["check", $a(['lintnonzero'])]
    ]); //#1685
    var _BA = new Map([
        ["cset", 'N'],
        ["min", 3],
        ["max", 3],
        ["check", $a(['lintnonzero'])]
    ]); //#1686
    var _BC = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["check", $a(['lintwinding'])]
    ]); //#1687
    var _BE = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["check", $a([])]
    ]); //#1688
    var _BH = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#1694
    var _BK = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 1],
        ["check", $a(['lintzero'])]
    ]); //#1700
    var _BM = new Map([
        ["cset", 'N'],
        ["min", 13],
        ["max", 13],
        ["check", $a(['lintcsum', 'lintkey'])]
    ]); //#1701
    var _BO = new Map([
        ["cset", 'X'],
        ["min", 0],
        ["max", 16],
        ["check", $a([])]
    ]); //#1702
    var _BR = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a(['lintkey'])]
    ]); //#1708
    var _BU = new Map([
        ["cset", 'N'],
        ["min", 6],
        ["max", 6],
        ["check", $a([])]
    ]); //#1714
    var _BX = new Map([
        ["cset", 'N'],
        ["min", 14],
        ["max", 14],
        ["check", $a(['lintcsum'])]
    ]); //#1720
    var _BZ = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["check", $a(['lintpieceoftotal'])]
    ]); //#1721
    var _Bc = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 34],
        ["check", $a(['lintiban'])]
    ]); //#1727
    var _Bf = new Map([
        ["cset", 'N'],
        ["min", 8],
        ["max", 8],
        ["check", $a(['lintyymmddhh'])]
    ]); //#1733
    var _Bh = new Map([
        ["cset", 'N'],
        ["min", 0],
        ["max", 4],
        ["check", $a(['lintmmoptss'])]
    ]); //#1734
    var _Bk = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 50],
        ["check", $a([])]
    ]); //#1740
    var _Bn = new Map([
        ["cset", 'C'],
        ["min", 1],
        ["max", 30],
        ["check", $a(['lintkey'])]
    ]); //#1746
    var _Bq = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 12],
        ["check", $a(['lintnozeroprefix'])]
    ]); //#1752
    var _Bt = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 20],
        ["check", $a([])]
    ]); //#1758
    var _Bw = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 25],
        ["check", $a(['lintcsumalpha', 'lintkey'])]
    ]); //#1764
    var _Bz = new Map([
        ["cset", 'N'],
        ["min", 18],
        ["max", 18],
        ["check", $a(['lintcsum'])]
    ]); //#1770
    var _C0 = $a([_Bz]); //#1770
    var _C2 = new Map([
        ["cset", 'N'],
        ["min", 1],
        ["max", 10],
        ["check", $a([])]
    ]); //#1777
    var _C5 = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 25],
        ["check", $a([])]
    ]); //#1783
    var _C8 = new Map([
        ["cset", 'N'],
        ["min", 14],
        ["max", 14],
        ["check", $a(['lintcsum'])]
    ]); //#1789
    var _CA = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["check", $a(['lintpieceoftotal'])]
    ]); //#1790
    var _CD = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["check", $a(['lintcouponcode'])]
    ]); //#1796
    var _CG = new Map([
        ["cset", 'N'],
        ["min", 4],
        ["max", 4],
        ["check", $a([])]
    ]); //#1802
    var _CJ = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["check", $a(['lintcouponposoffer'])]
    ]); //#1808
    var _CM = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 70],
        ["check", $a([])]
    ]); //#1814
    var _CP = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 30],
        ["check", $a([])]
    ]); //#1820
    var _CS = new Map([
        ["cset", 'X'],
        ["min", 1],
        ["max", 90],
        ["check", $a([])]
    ]); //#1826
    var _CT = $a([_CS]); //#1826
    var _CU = new Map([
        ["00", $a([_7U])],
        ["01", _7Y],
        ["02", _7Y],
        ["10", $a([_7a])],
        ["11", _7e],
        ["12", _7e],
        ["13", _7e],
        ["15", _7e],
        ["16", _7e],
        ["17", _7e],
        ["20", $a([_7g])],
        ["21", _7k],
        ["22", _7k],
        ["235", $a([_7m])],
        ["240", _7q],
        ["241", _7q],
        ["242", $a([_7s])],
        ["243", $a([_7v])],
        ["250", _7z],
        ["251", _7z],
        ["253", $a([_81, _83])],
        ["254", $a([_86])],
        ["255", $a([_89, _8B])],
        ["30", $a([_8E])],
        ["3100", _8I],
        ["3101", _8I],
        ["3102", _8I],
        ["3103", _8I],
        ["3104", _8I],
        ["3105", _8I],
        ["3110", _8I],
        ["3111", _8I],
        ["3112", _8I],
        ["3113", _8I],
        ["3114", _8I],
        ["3115", _8I],
        ["3120", _8I],
        ["3121", _8I],
        ["3122", _8I],
        ["3123", _8I],
        ["3124", _8I],
        ["3125", _8I],
        ["3130", _8I],
        ["3131", _8I],
        ["3132", _8I],
        ["3133", _8I],
        ["3134", _8I],
        ["3135", _8I],
        ["3140", _8I],
        ["3141", _8I],
        ["3142", _8I],
        ["3143", _8I],
        ["3144", _8I],
        ["3145", _8I],
        ["3150", _8I],
        ["3151", _8I],
        ["3152", _8I],
        ["3153", _8I],
        ["3154", _8I],
        ["3155", _8I],
        ["3160", _8I],
        ["3161", _8I],
        ["3162", _8I],
        ["3163", _8I],
        ["3164", _8I],
        ["3165", _8I],
        ["3200", _8I],
        ["3201", _8I],
        ["3202", _8I],
        ["3203", _8I],
        ["3204", _8I],
        ["3205", _8I],
        ["3210", _8I],
        ["3211", _8I],
        ["3212", _8I],
        ["3213", _8I],
        ["3214", _8I],
        ["3215", _8I],
        ["3220", _8I],
        ["3221", _8I],
        ["3222", _8I],
        ["3223", _8I],
        ["3224", _8I],
        ["3225", _8I],
        ["3230", _8I],
        ["3231", _8I],
        ["3232", _8I],
        ["3233", _8I],
        ["3234", _8I],
        ["3235", _8I],
        ["3240", _8I],
        ["3241", _8I],
        ["3242", _8I],
        ["3243", _8I],
        ["3244", _8I],
        ["3245", _8I],
        ["3250", _8I],
        ["3251", _8I],
        ["3252", _8I],
        ["3253", _8I],
        ["3254", _8I],
        ["3255", _8I],
        ["3260", _8I],
        ["3261", _8I],
        ["3262", _8I],
        ["3263", _8I],
        ["3264", _8I],
        ["3265", _8I],
        ["3270", _8I],
        ["3271", _8I],
        ["3272", _8I],
        ["3273", _8I],
        ["3274", _8I],
        ["3275", _8I],
        ["3280", _8I],
        ["3281", _8I],
        ["3282", _8I],
        ["3283", _8I],
        ["3284", _8I],
        ["3285", _8I],
        ["3290", _8I],
        ["3291", _8I],
        ["3292", _8I],
        ["3293", _8I],
        ["3294", _8I],
        ["3295", _8I],
        ["3300", _8I],
        ["3301", _8I],
        ["3302", _8I],
        ["3303", _8I],
        ["3304", _8I],
        ["3305", _8I],
        ["3310", _8I],
        ["3311", _8I],
        ["3312", _8I],
        ["3313", _8I],
        ["3314", _8I],
        ["3315", _8I],
        ["3320", _8I],
        ["3321", _8I],
        ["3322", _8I],
        ["3323", _8I],
        ["3324", _8I],
        ["3325", _8I],
        ["3330", _8I],
        ["3331", _8I],
        ["3332", _8I],
        ["3333", _8I],
        ["3334", _8I],
        ["3335", _8I],
        ["3340", _8I],
        ["3341", _8I],
        ["3342", _8I],
        ["3343", _8I],
        ["3344", _8I],
        ["3345", _8I],
        ["3350", _8I],
        ["3351", _8I],
        ["3352", _8I],
        ["3353", _8I],
        ["3354", _8I],
        ["3355", _8I],
        ["3360", _8I],
        ["3361", _8I],
        ["3362", _8I],
        ["3363", _8I],
        ["3364", _8I],
        ["3365", _8I],
        ["3370", _8I],
        ["3371", _8I],
        ["3372", _8I],
        ["3373", _8I],
        ["3374", _8I],
        ["3375", _8I],
        ["3400", _8I],
        ["3401", _8I],
        ["3402", _8I],
        ["3403", _8I],
        ["3404", _8I],
        ["3405", _8I],
        ["3410", _8I],
        ["3411", _8I],
        ["3412", _8I],
        ["3413", _8I],
        ["3414", _8I],
        ["3415", _8I],
        ["3420", _8I],
        ["3421", _8I],
        ["3422", _8I],
        ["3423", _8I],
        ["3424", _8I],
        ["3425", _8I],
        ["3430", _8I],
        ["3431", _8I],
        ["3432", _8I],
        ["3433", _8I],
        ["3434", _8I],
        ["3435", _8I],
        ["3440", _8I],
        ["3441", _8I],
        ["3442", _8I],
        ["3443", _8I],
        ["3444", _8I],
        ["3445", _8I],
        ["3450", _8I],
        ["3451", _8I],
        ["3452", _8I],
        ["3453", _8I],
        ["3454", _8I],
        ["3455", _8I],
        ["3460", _8I],
        ["3461", _8I],
        ["3462", _8I],
        ["3463", _8I],
        ["3464", _8I],
        ["3465", _8I],
        ["3470", _8I],
        ["3471", _8I],
        ["3472", _8I],
        ["3473", _8I],
        ["3474", _8I],
        ["3475", _8I],
        ["3480", _8I],
        ["3481", _8I],
        ["3482", _8I],
        ["3483", _8I],
        ["3484", _8I],
        ["3485", _8I],
        ["3490", _8I],
        ["3491", _8I],
        ["3492", _8I],
        ["3493", _8I],
        ["3494", _8I],
        ["3495", _8I],
        ["3500", _8I],
        ["3501", _8I],
        ["3502", _8I],
        ["3503", _8I],
        ["3504", _8I],
        ["3505", _8I],
        ["3510", _8I],
        ["3511", _8I],
        ["3512", _8I],
        ["3513", _8I],
        ["3514", _8I],
        ["3515", _8I],
        ["3520", _8I],
        ["3521", _8I],
        ["3522", _8I],
        ["3523", _8I],
        ["3524", _8I],
        ["3525", _8I],
        ["3530", _8I],
        ["3531", _8I],
        ["3532", _8I],
        ["3533", _8I],
        ["3534", _8I],
        ["3535", _8I],
        ["3540", _8I],
        ["3541", _8I],
        ["3542", _8I],
        ["3543", _8I],
        ["3544", _8I],
        ["3545", _8I],
        ["3550", _8I],
        ["3551", _8I],
        ["3552", _8I],
        ["3553", _8I],
        ["3554", _8I],
        ["3555", _8I],
        ["3560", _8I],
        ["3561", _8I],
        ["3562", _8I],
        ["3563", _8I],
        ["3564", _8I],
        ["3565", _8I],
        ["3570", _8I],
        ["3571", _8I],
        ["3572", _8I],
        ["3573", _8I],
        ["3574", _8I],
        ["3575", _8I],
        ["3600", _8I],
        ["3601", _8I],
        ["3602", _8I],
        ["3603", _8I],
        ["3604", _8I],
        ["3605", _8I],
        ["3610", _8I],
        ["3611", _8I],
        ["3612", _8I],
        ["3613", _8I],
        ["3614", _8I],
        ["3615", _8I],
        ["3620", _8I],
        ["3621", _8I],
        ["3622", _8I],
        ["3623", _8I],
        ["3624", _8I],
        ["3625", _8I],
        ["3630", _8I],
        ["3631", _8I],
        ["3632", _8I],
        ["3633", _8I],
        ["3634", _8I],
        ["3635", _8I],
        ["3640", _8I],
        ["3641", _8I],
        ["3642", _8I],
        ["3643", _8I],
        ["3644", _8I],
        ["3645", _8I],
        ["3650", _8I],
        ["3651", _8I],
        ["3652", _8I],
        ["3653", _8I],
        ["3654", _8I],
        ["3655", _8I],
        ["3660", _8I],
        ["3661", _8I],
        ["3662", _8I],
        ["3663", _8I],
        ["3664", _8I],
        ["3665", _8I],
        ["3670", _8I],
        ["3671", _8I],
        ["3672", _8I],
        ["3673", _8I],
        ["3674", _8I],
        ["3675", _8I],
        ["3680", _8I],
        ["3681", _8I],
        ["3682", _8I],
        ["3683", _8I],
        ["3684", _8I],
        ["3685", _8I],
        ["3690", _8I],
        ["3691", _8I],
        ["3692", _8I],
        ["3693", _8I],
        ["3694", _8I],
        ["3695", _8I],
        ["37", $a([_8K])],
        ["3900", _8O],
        ["3901", _8O],
        ["3902", _8O],
        ["3903", _8O],
        ["3904", _8O],
        ["3905", _8O],
        ["3906", _8O],
        ["3907", _8O],
        ["3908", _8O],
        ["3909", _8O],
        ["3910", _8T],
        ["3911", _8T],
        ["3912", _8T],
        ["3913", _8T],
        ["3914", _8T],
        ["3915", _8T],
        ["3916", _8T],
        ["3917", _8T],
        ["3918", _8T],
        ["3919", _8T],
        ["3920", _8W],
        ["3921", _8W],
        ["3922", _8W],
        ["3923", _8W],
        ["3924", _8W],
        ["3925", _8W],
        ["3926", _8W],
        ["3927", _8W],
        ["3928", _8W],
        ["3929", _8W],
        ["3930", _8b],
        ["3931", _8b],
        ["3932", _8b],
        ["3933", _8b],
        ["3934", _8b],
        ["3935", _8b],
        ["3936", _8b],
        ["3937", _8b],
        ["3938", _8b],
        ["3939", _8b],
        ["3940", _8e],
        ["3941", _8e],
        ["3942", _8e],
        ["3943", _8e],
        ["3950", _8h],
        ["3951", _8h],
        ["3952", _8h],
        ["3953", _8h],
        ["3954", _8h],
        ["3955", _8h],
        ["400", $a([_8j])],
        ["401", $a([_8m])],
        ["402", $a([_8p])],
        ["403", $a([_8s])],
        ["410", _8w],
        ["411", _8w],
        ["412", _8w],
        ["413", _8w],
        ["414", _8w],
        ["415", _8w],
        ["416", _8w],
        ["417", _8w],
        ["420", $a([_8y])],
        ["421", $a([_91, _93])],
        ["422", $a([_96])],
        ["423", $a([_99])],
        ["424", $a([_9C])],
        ["425", $a([_9F])],
        ["426", $a([_9I])],
        ["427", $a([_9L])],
        ["4300", _9P],
        ["4301", _9P],
        ["4302", _9S],
        ["4303", _9S],
        ["4304", _9S],
        ["4305", _9S],
        ["4306", _9S],
        ["4307", $a([_9U])],
        ["4308", $a([_9X])],
        ["4310", _9b],
        ["4311", _9b],
        ["4312", _9e],
        ["4313", _9e],
        ["4314", _9e],
        ["4315", _9e],
        ["4316", _9e],
        ["4317", $a([_9g])],
        ["4318", $a([_9j])],
        ["4319", $a([_9m])],
        ["4320", $a([_9p])],
        ["4321", _9t],
        ["4322", _9t],
        ["4323", _9t],
        ["4324", _9y],
        ["4325", _9y],
        ["4326", $a([_A0])],
        ["7001", $a([_A3])],
        ["7002", $a([_A6])],
        ["7003", $a([_A9, _AB])],
        ["7004", $a([_AE])],
        ["7005", $a([_AH])],
        ["7006", $a([_AK])],
        ["7007", $a([_AN, _AP])],
        ["7008", $a([_AS])],
        ["7009", $a([_AV])],
        ["7010", $a([_AY])],
        ["7020", _Ac],
        ["7021", _Ac],
        ["7022", _Ac],
        ["7023", $a([_Ae])],
        ["7030", _Ak],
        ["7031", _Ak],
        ["7032", _Ak],
        ["7033", _Ak],
        ["7034", _Ak],
        ["7035", _Ak],
        ["7036", _Ak],
        ["7037", _Ak],
        ["7038", _Ak],
        ["7039", _Ak],
        ["7040", $a([_Am, _Ao, _Aq, _As])],
        ["710", _Aw],
        ["711", _Aw],
        ["712", _Aw],
        ["713", _Aw],
        ["714", _Aw],
        ["715", _Aw],
        ["7230", _B1],
        ["7231", _B1],
        ["7232", _B1],
        ["7233", _B1],
        ["7234", _B1],
        ["7235", _B1],
        ["7236", _B1],
        ["7237", _B1],
        ["7238", _B1],
        ["7239", _B1],
        ["7240", $a([_B3])],
        ["8001", $a([_B6, _B8, _BA, _BC, _BE])],
        ["8002", $a([_BH])],
        ["8003", $a([_BK, _BM, _BO])],
        ["8004", $a([_BR])],
        ["8005", $a([_BU])],
        ["8006", $a([_BX, _BZ])],
        ["8007", $a([_Bc])],
        ["8008", $a([_Bf, _Bh])],
        ["8009", $a([_Bk])],
        ["8010", $a([_Bn])],
        ["8011", $a([_Bq])],
        ["8012", $a([_Bt])],
        ["8013", $a([_Bw])],
        ["8017", _C0],
        ["8018", _C0],
        ["8019", $a([_C2])],
        ["8020", $a([_C5])],
        ["8026", $a([_C8, _CA])],
        ["8110", $a([_CD])],
        ["8111", $a([_CG])],
        ["8112", $a([_CJ])],
        ["8200", $a([_CM])],
        ["90", $a([_CP])],
        ["91", _CT],
        ["92", _CT],
        ["93", _CT],
        ["94", _CT],
        ["95", _CT],
        ["96", _CT],
        ["97", _CT],
        ["98", _CT],
        ["99", _CT]
    ]); //#1837
    $1.gs1syntax = _CU; //#1839
    $k[$j++] = true; //#1866
    for (var _CX = 0, _CW = $1.vals.length - 1; _CX <= _CW; _CX += 1) { //#1866
        $1.ai = $get($1.ais, _CX); //#1843
        $1.val = $get($1.vals, _CX); //#1844
        var _Ce = $get($1.gs1syntax, $1.ai) !== undefined; //#1845
        if (_Ce) { //#1864
            $forall($get($1.gs1syntax, $1.ai), function() { //#1858
                $1.props = $k[--$j]; //#1847
                var _Ck = $get($1.props, 'max'); //#1848
                var _Cl = $1.val; //#1848
                var _Cm = _Cl.length; //#1848
                if (_Ck > _Cl.length) { //#1848
                    var _ = _Cm; //#1848
                    _Cm = _Ck; //#1848
                    _Ck = _; //#1848
                } //#1848
                $1.eval = $geti($1.val, 0, _Ck); //#1849
                var _Cr = $1.eval.length; //#1850
                $1.val = $geti($1.val, _Cr, $1.val.length - _Cr); //#1850
                if ($1.eval.length < $get($1.props, 'min')) { //#1853
                    $j--; //#1852
                    $k[$j++] = 'bwipp.GS1valueTooShort'; //#1852
                    $k[$j++] = "Too short"; //#1852
                    $k[$j++] = false; //#1852
                    return true; //#1852
                } //#1852
                var _Cx = new Map([
                    ["N", 'lintnumeric'],
                    ["X", 'lintcset82'],
                    ["C", 'lintcset39']
                ]); //#1854
                $k[$j++] = $1.eval; //#1854
                if ($1[$get(_Cx, $get($1.props, 'cset'))]() === true) {
                    return true;
                } //#1854
                if ($1.eval.length > 0) { //#1857
                    $forall($get($1.props, 'check'), function() { //#1856
                        var _D8 = $1[$k[--$j]]; //#1856
                        $k[$j++] = $1.eval; //#1856
                        if (_D8() === true) {
                            return true;
                        } //#1856
                    }); //#1856
                } //#1856
            }); //#1856
            var _D9 = $k[--$j]; //#1859
            $k[$j++] = _D9; //#1859
            if ($nt(_D9)) { //#1859
                break; //#1859
            } //#1859
            if ($1.val.length != 0) { //#1862
                $j--; //#1861
                $k[$j++] = 'bwipp.GS1valueTooLong'; //#1861
                $k[$j++] = "Too long"; //#1861
                $k[$j++] = false; //#1861
                break; //#1861
            } //#1861
        } else { //#1864
            $j--; //#1864
            $k[$j++] = 'bwipp.GS1unknownAI'; //#1864
            $k[$j++] = "Unrecognised AI"; //#1864
            $k[$j++] = false; //#1864
            break; //#1864
        } //#1864
    } //#1864
    if ($nt($k[--$j])) { //#1874
        var _DC = $k[--$j]; //#1868
        var _DE = $s((_DC.length + $1.ai.length) + 5); //#1868
        $puti(_DE, 0, "AI "); //#1869
        $puti(_DE, 3, $1.ai); //#1870
        $puti(_DE, 3 + $1.ai.length, ": "); //#1871
        $puti(_DE, 5 + $1.ai.length, _DC); //#1872
        $k[$j++] = _DE; //#1873
        bwipp_raiseerror(); //#1873
    } //#1873
    $k[$j++] = true; //#1877
}

function bwipp_renmatrix() {
    if ($0.bwipjs_dontdraw) { //#2152
        return; //#2152
    } //#2152
    var $1 = {}; //#2154
    $1.args = $k[--$j]; //#2156
    $1.width = 1; //#2159
    $1.height = 1; //#2160
    $1.barcolor = "unset"; //#2161
    $1.backgroundcolor = "unset"; //#2162
    $1.colormap = "unset"; //#2163
    $1.dotty = false; //#2164
    $1.inkspread = 0; //#2165
    $1.inkspreadh = 0; //#2166
    $1.inkspreadv = 0; //#2167
    $1.includetext = false; //#2168
    $1.txt = $a([]); //#2169
    $1.textcolor = "unset"; //#2170
    $1.textxalign = "unset"; //#2171
    $1.textyalign = "unset"; //#2172
    $1.textfont = "OCR-B"; //#2173
    $1.textsize = 10; //#2174
    $1.textxoffset = 0; //#2175
    $1.textyoffset = 0; //#2176
    $1.textgaps = 0; //#2177
    $1.alttext = ""; //#2178
    $forall($1.args, function() { //#2181
        var _4 = $k[--$j]; //#2181
        $1[$k[--$j]] = _4; //#2181
    }); //#2181
    var _6 = $1.opt; //#2182
    for (var _B = _6.size, _A = _6.keys(), _9 = 0; _9 < _B; _9++) { //#2182
        var _7 = _A.next().value; //#2182
        $1[_7] = _6.get(_7); //#2182
    } //#2182
    $1.width = +$1.width; //#2184
    $1.height = +$1.height; //#2185
    $1.barcolor = "" + $1.barcolor; //#2186
    $1.backgroundcolor = "" + $1.backgroundcolor; //#2187
    $1.inkspread = +$1.inkspread; //#2188
    $1.inkspreadh = +$1.inkspreadh; //#2189
    $1.inkspreadv = +$1.inkspreadv; //#2190
    $1.textcolor = "" + $1.textcolor; //#2191
    $1.textxalign = "" + $1.textxalign; //#2192
    $1.textyalign = "" + $1.textyalign; //#2193
    $1.textfont = "" + $1.textfont; //#2194
    $1.textsize = +$1.textsize; //#2195
    $1.textxoffset = +$1.textxoffset; //#2196
    $1.textyoffset = +$1.textyoffset; //#2197
    $1.textgaps = +$1.textgaps; //#2198
    $1.alttext = "" + $1.alttext; //#2199
    if ($1.inkspread != 0) { //#2201
        $1.inkspreadh = $1.inkspread; //#2201
    } //#2201
    if ($1.inkspread != 0) { //#2202
        $1.inkspreadv = $1.inkspread; //#2202
    } //#2202
    $1.xyget = function() {
        var _X = $k[--$j]; //#2204
        var _a = $get($1.pixs, $f($k[--$j] + (_X * $1.pixx))); //#2204
        $k[$j++] = _a; //#2204
    }; //#2204
    $1.cget = function() {
        var _c = $k[--$j]; //#2205
        var _f = $get($1.cache, $f($k[--$j] + (_c * $1.pixx))); //#2205
        var _g = $k[--$j]; //#2205
        $k[$j++] = $an(_g, _f); //#2205
    }; //#2205
    $1.cput = function() {
        var _h = $k[--$j]; //#2207
        $k[$j++] = _h; //#2211
        if ((_h % 4) == 0) { //#2210
            var _i = $k[--$j]; //#2208
            var _j = $k[--$j]; //#2208
            var _k = $k[--$j]; //#2208
            var _l = $1.pixx; //#2208
            var _m = $1.cache; //#2208
            $put(_m, $f(_k + (_j * _l)), $or($get(_m, $f(_k + (_j * _l))), _i)); //#2208
        } else { //#2210
            $j -= 3; //#2210
        } //#2210
    }; //#2212
    $1.abcd = function() {
        $k[$j++] = $s(4); //#2219
        $k[$j++] = 0; //#2219
        $k[$j++] = Infinity; //#2219
        var _p = $k[--$j]; //#2216
        var _q = $k[--$j]; //#2216
        var _r = $k[--$j]; //#2216
        var _s = $k[--$j]; //#2216
        var _v = $f($k[--$j] + (_s * $1.pixx)); //#2217
        $k[$j++] = _r; //#2218
        $k[$j++] = _q; //#2218
        $k[$j++] = _p; //#2218
        $k[$j++] = _v; //#2218
        $aload($geti($1.pixs, _v, 2)); //#2218
        var _y = $k[--$j]; //#2218
        var _z = $k[--$j]; //#2218
        var _13 = $geti($1.pixs, $f($k[--$j] + $1.pixx), 2); //#2219
        $k[$j++] = _z; //#2219
        $k[$j++] = _y; //#2219
        $aload(_13); //#2219
        var _14 = $a(); //#2219
        for (var _15 = 0, _16 = _14.length; _15 < _16; _15++) { //#2220
            var _18 = $k[--$j]; //#2220
            var _19 = $k[--$j]; //#2220
            $put(_19, _18, $f($get(_14, _15) + 48)); //#2220
            $k[$j++] = _19; //#2220
            $k[$j++] = $f(_18 + 1); //#2220
        } //#2220
        $j--; //#2220
    }; //#2221
    $1.right = function() {
        if ($1.dir != 1) { //#2223
            $k[$j++] = $1.x; //#2223
            $k[$j++] = $1.y; //#2223
            $k[$j++] = $1.dir; //#2223
            $1.cput(); //#2223
            $k[$j++] = $a([$1.x, $1.y]); //#2223
        } //#2223
        $1.x = $1.x + 1; //#2223
        $1.dir = 1; //#2223
    }; //#2223
    $1.down = function() {
        if ($1.dir != 2) { //#2224
            $k[$j++] = $1.x; //#2224
            $k[$j++] = $1.y; //#2224
            $k[$j++] = $1.dir; //#2224
            $1.cput(); //#2224
            $k[$j++] = $a([$1.x, $1.y]); //#2224
        } //#2224
        $1.y = $1.y + 1; //#2224
        $1.dir = 2; //#2224
    }; //#2224
    $1.left = function() {
        if ($1.dir != 4) { //#2225
            $k[$j++] = $1.x; //#2225
            $k[$j++] = $1.y; //#2225
            $k[$j++] = $1.dir; //#2225
            $1.cput(); //#2225
            $k[$j++] = $a([$1.x, $1.y]); //#2225
        } //#2225
        $1.x = $1.x - 1; //#2225
        $1.dir = 4; //#2225
    }; //#2225
    $1.up = function() {
        if ($1.dir != 8) { //#2226
            $k[$j++] = $1.x; //#2226
            $k[$j++] = $1.y; //#2226
            $k[$j++] = $1.dir; //#2226
            $1.cput(); //#2226
            $k[$j++] = $a([$1.x, $1.y]); //#2226
        } //#2226
        $1.y = $1.y - 1; //#2226
        $1.dir = 8; //#2226
    }; //#2226
    $1.trace = function() {
        $1.y = $k[--$j]; //#2230
        $1.x = $k[--$j]; //#2230
        $k[$j++] = 'dir'; //#2232
        $k[$j++] = $f($1.x + 1); //#2232
        $k[$j++] = $f($1.y + 1); //#2232
        $1.xyget(); //#2232
        var _1l = ($k[--$j] == 1) ? 8 : 4; //#2232
        $1[$k[--$j]] = _1l; //#2232
        $1.sx = $1.x; //#2233
        $1.sy = $1.y; //#2233
        $1.sdir = $1.dir; //#2233
        $k[$j++] = Infinity; //#2237
        for (;;) { //#2251
            $k[$j++] = $1.x; //#2238
            $k[$j++] = $1.y; //#2238
            $1.abcd(); //#2238
            for (var _1s = 0, _1t = 1; _1s < _1t; _1s++) { //#2249
                var _1u = $k[--$j]; //#2240
                $k[$j++] = _1u; //#2240
                if ($eq(_1u, "0001") || ($eq(_1u, "0011") || $eq(_1u, "1011"))) { //#2240
                    $j--; //#2240
                    $1.right(); //#2240
                    break; //#2240
                } //#2240
                var _1v = $k[--$j]; //#2241
                $k[$j++] = _1v; //#2241
                if ($eq(_1v, "0010") || ($eq(_1v, "1010") || $eq(_1v, "1110"))) { //#2241
                    $j--; //#2241
                    $1.down(); //#2241
                    break; //#2241
                } //#2241
                var _1w = $k[--$j]; //#2242
                $k[$j++] = _1w; //#2242
                if ($eq(_1w, "1000") || ($eq(_1w, "1100") || $eq(_1w, "1101"))) { //#2242
                    $j--; //#2242
                    $1.left(); //#2242
                    break; //#2242
                } //#2242
                var _1x = $k[--$j]; //#2243
                $k[$j++] = _1x; //#2243
                if ($eq(_1x, "0100") || ($eq(_1x, "0101") || $eq(_1x, "0111"))) { //#2243
                    $j--; //#2243
                    $1.up(); //#2243
                    break; //#2243
                } //#2243
                var _1y = $k[--$j]; //#2244
                $k[$j++] = _1y; //#2248
                if ($eq(_1y, "1001")) { //#2247
                    if ($1.dir == 2) { //#2245
                        $j--; //#2245
                        $1.left(); //#2245
                        break; //#2245
                    } else { //#2245
                        $j--; //#2245
                        $1.right(); //#2245
                        break; //#2245
                    } //#2245
                } else { //#2247
                    if ($1.dir == 1) { //#2247
                        $j--; //#2247
                        $1.down(); //#2247
                        break; //#2247
                    } else { //#2247
                        $j--; //#2247
                        $1.up(); //#2247
                        break; //#2247
                    } //#2247
                } //#2247
            } //#2247
            if (($eq($1.x, $1.sx) && $eq($1.y, $1.sy)) && ($1.dir == $1.sdir)) { //#2250
                break; //#2250
            } //#2250
        } //#2250
        $astore($a($counttomark())); //#2252
        var _29 = $k[--$j]; //#2252
        var _2A = $k[--$j]; //#2252
        $k[$j++] = _29; //#2252
        $k[$j++] = _2A; //#2252
        $j--; //#2252
    }; //#2254
    $1.drawlayer = function() {
        $1.pixsorig = $1.pixs; //#2270
        $1.pixs = $k[--$j]; //#2271
        $k[$j++] = Infinity; //#2281
        for (var _2E = 0, _2F = $1.pixx + 2; _2E < _2F; _2E++) { //#2275
            $k[$j++] = 0; //#2275
        } //#2275
        for (var _2J = 0, _2K = $1.pixx, _2I = $1.pixs.length - 1; _2K < 0 ? _2J >= _2I : _2J <= _2I; _2J += _2K) { //#2280
            $k[$j++] = 0; //#2278
            $aload($geti($1.pixs, _2J, $1.pixx)); //#2278
            $k[$j++] = 0; //#2279
        } //#2279
        for (var _2P = 0, _2Q = $1.pixx + 2; _2P < _2Q; _2P++) { //#2281
            $k[$j++] = 0; //#2281
        } //#2281
        $1.pixs = $a(); //#2281
        $1.pixx = $1.pixx + 2; //#2283
        $1.pixy = $1.pixy + 2; //#2284
        $k[$j++] = Infinity; //#2287
        for (var _2V = 0, _2W = $1.pixs.length; _2V < _2W; _2V++) { //#2287
            $k[$j++] = 0; //#2287
        } //#2287
        $1.cache = $a(); //#2287
        $k[$j++] = Infinity; //#2303
        for (var _2a = 0, _2Z = $1.pixy - 2; _2a <= _2Z; _2a += 1) { //#2307
            $1.j = _2a; //#2292
            for (var _2d = 0, _2c = $1.pixx - 2; _2d <= _2c; _2d += 1) { //#2306
                $1.i = _2d; //#2294
                $k[$j++] = 'k'; //#2295
                $k[$j++] = $1.i; //#2295
                $k[$j++] = $1.j; //#2295
                $1.abcd(); //#2295
                var _2g = $k[--$j]; //#2295
                $1[$k[--$j]] = _2g; //#2295
                if ($eq($1.k, "0001") || $eq($1.k, "1001")) { //#2300
                    $k[$j++] = 8; //#2297
                    $k[$j++] = $1.i; //#2297
                    $k[$j++] = $1.j; //#2297
                    $1.cget(); //#2297
                    if ($k[--$j] == 0) { //#2299
                        $k[$j++] = $1.i; //#2298
                        $k[$j++] = $1.j; //#2298
                        $1.trace(); //#2298
                    } //#2298
                } //#2298
                if ($eq($1.k, "1110")) { //#2305
                    $k[$j++] = 4; //#2302
                    $k[$j++] = $1.i; //#2302
                    $k[$j++] = $1.j; //#2302
                    $1.cget(); //#2302
                    if ($k[--$j] == 0) { //#2304
                        $k[$j++] = $1.i; //#2303
                        $k[$j++] = $1.j; //#2303
                        $1.trace(); //#2303
                    } //#2303
                } //#2303
            } //#2303
        } //#2303
        $1.paths = $a(); //#2303
        $1.pixx = $1.pixx - 2; //#2311
        $1.pixy = $1.pixy - 2; //#2312
        $$.newpath(); //#2315
        var _2y = $1.paths; //#2316
        for (var _2z = 0, _30 = _2y.length; _2z < _30; _2z++) { //#2334
            $1.p = $get(_2y, _2z); //#2317
            $1.len = $1.p.length; //#2318
            $aload($get($1.p, $1.len - 1)); //#2319
            $aload($get($1.p, 0)); //#2320
            for (var _3A = 0, _39 = $1.len - 1; _3A <= _39; _3A += 1) { //#2331
                $1.i = _3A; //#2322
                $aload($get($1.p, ($1.i + 1) % $1.len)); //#2323
                var _3F = $k[--$j]; //#2323
                var _3G = $k[--$j]; //#2323
                var _3H = $k[--$j]; //#2323
                var _3I = $k[--$j]; //#2323
                var _3J = $k[--$j]; //#2323
                var _3K = $k[--$j]; //#2323
                $k[$j++] = _3I; //#2325
                $k[$j++] = _3H; //#2325
                $k[$j++] = _3G; //#2325
                $k[$j++] = _3F; //#2325
                $k[$j++] = _3K; //#2325
                $k[$j++] = _3I; //#2325
                $k[$j++] = $1.inkspreadh; //#2325
                if ($lt(_3F, _3J)) { //#2325
                    var _3M = $k[--$j]; //#2325
                    var _3N = $k[--$j]; //#2325
                    $k[$j++] = $f(_3N + _3M); //#2325
                } else { //#2325
                    var _3O = $k[--$j]; //#2325
                    var _3P = $k[--$j]; //#2325
                    $k[$j++] = $f(_3P - _3O); //#2325
                } //#2325
                var _3Q = $k[--$j]; //#2326
                var _3R = $k[--$j]; //#2326
                var _3S = $k[--$j]; //#2326
                var _3T = $k[--$j]; //#2326
                var _3U = $k[--$j]; //#2327
                $k[$j++] = _3U; //#2328
                $k[$j++] = _3Q; //#2328
                $k[$j++] = _3T; //#2328
                $k[$j++] = _3S; //#2328
                $k[$j++] = _3U; //#2328
                $k[$j++] = $1.inkspreadv; //#2328
                if ($gt(_3T, _3R)) { //#2328
                    var _3W = $k[--$j]; //#2328
                    var _3X = $k[--$j]; //#2328
                    $k[$j++] = $f(_3X + _3W); //#2328
                } else { //#2328
                    var _3Y = $k[--$j]; //#2328
                    var _3Z = $k[--$j]; //#2328
                    $k[$j++] = $f(_3Z - _3Y); //#2328
                } //#2328
                var _3a = $k[--$j]; //#2329
                var _3b = $k[--$j]; //#2329
                var _3c = $k[--$j]; //#2329
                var _3d = $k[--$j]; //#2329
                $k[$j++] = _3c; //#2330
                $k[$j++] = _3b; //#2330
                $k[$j++] = _3d; //#2330
                $k[$j++] = $f($1.pixy - _3a); //#2330
                if ($1.i == 0) { //#2330
                    var _3g = $k[--$j]; //#2330
                    $$.moveto($k[--$j], _3g); //#2330
                } else { //#2330
                    var _3i = $k[--$j]; //#2330
                    $$.lineto($k[--$j], _3i); //#2330
                } //#2330
            } //#2330
            $$.closepath(); //#2332
            $j -= 4; //#2333
        } //#2333
        $$.fill(); //#2335
        $1.pixs = $1.pixsorig; //#2337
    }; //#2339
    $1.drawlayerdots = function() {
        $1.pixsorig = $1.pixs; //#2343
        $1.pixs = $k[--$j]; //#2344
        $$.newpath(); //#2346
        for (var _3p = 0, _3o = $1.pixs.length - 1; _3p <= _3o; _3p += 1) { //#2354
            $1.x = _3p % $1.pixx; //#2348
            $1.y = ~~(_3p / $1.pixx); //#2349
            $k[$j++] = $1.x; //#2350
            $k[$j++] = $1.y; //#2350
            $1.xyget(); //#2350
            if ($k[--$j] == 1) { //#2353
                $$.moveto($f($1.x + 0.5), $f(($1.pixy - $1.y) - 0.5)); //#2351
                $$.arc($f($1.x + 0.5), $f(($1.pixy - $1.y) - 0.5), $f(0.5 - $1.inkspread), 0, 360, 1); //#2352
            } //#2352
        } //#2352
        $$.fill(); //#2355
        $1.pixs = $1.pixsorig; //#2357
    }; //#2359
    $$.save(); //#2361
    $1.inkspread = $1.inkspread / 2; //#2364
    $1.inkspreadh = $1.inkspreadh / 2; //#2365
    $1.inkspreadv = $1.inkspreadv / 2; //#2366
    var _46 = $$.currpos(); //#2367
    $$.translate(_46.x, _46.y); //#2367
    $$.scale(($1.width / $1.pixx) * 72, ($1.height / $1.pixy) * 72); //#2368
    $$.moveto(0, 0); //#2369
    $$.lineto($1.pixx, 0); //#2369
    $$.lineto($1.pixx, $1.pixy); //#2369
    $$.lineto(0, $1.pixy); //#2369
    $$.closepath(); //#2369
    if ($eq($1.colormap, "unset")) { //#2374
        var _4H = new Map([
            [1, $1.barcolor]
        ]); //#2373
        $1.colormap = _4H; //#2373
    } //#2373
    var _4I = $1.colormap; //#2376
    for (var _4N = _4I.size, _4M = _4I.keys(), _4L = 0; _4L < _4N; _4L++) { //#2382
        var _4J = _4M.next().value; //#2382
        $$.setcolor(_4I.get(_4J)); //#2377
        $1.key = _4J; //#2378
        $k[$j++] = Infinity; //#2380
        var _4O = $1.pixs; //#2380
        for (var _4P = 0, _4Q = _4O.length; _4P < _4Q; _4P++) { //#2380
            var _4T = $eq($get(_4O, _4P), $1.key) ? 1 : 0; //#2380
            $k[$j++] = _4T; //#2380
        } //#2380
        var _4U = $a(); //#2380
        $k[$j++] = _4U; //#2381
        if ($1.dotty) { //#2381
            $1.drawlayerdots(); //#2381
        } else { //#2381
            $1.drawlayer(); //#2381
        } //#2381
    } //#2381
    if ($ne($1.textcolor, "unset")) { //#2385
        $$.setcolor($1.textcolor); //#2385
    } //#2385
    if ($1.includetext) { //#2442
        if (($eq($1.textxalign, "unset") && $eq($1.textyalign, "unset")) && $eq($1.alttext, "")) { //#2440
            $1.s = 0; //#2388
            $1.fn = ""; //#2388
            var _4c = $1.txt; //#2389
            for (var _4d = 0, _4e = _4c.length; _4d < _4e; _4d++) { //#2398
                $forall($get(_4c, _4d)); //#2390
                var _4g = $k[--$j]; //#2391
                var _4h = $k[--$j]; //#2391
                $k[$j++] = _4h; //#2396
                $k[$j++] = _4g; //#2396
                if ((_4g != $1.s) || $ne(_4h, $1.fn)) { //#2395
                    var _4k = $k[--$j]; //#2392
                    var _4l = $k[--$j]; //#2392
                    $1.s = _4k; //#2392
                    $1.fn = _4l; //#2392
                    $$.selectfont(_4l, _4k); //#2393
                } else { //#2395
                    $j -= 2; //#2395
                } //#2395
                var _4m = $k[--$j]; //#2397
                $$.moveto($k[--$j], _4m); //#2397
                $$.show($k[--$j], 0, 0); //#2397
            } //#2397
        } else { //#2440
            $$.selectfont($1.textfont, $1.textsize); //#2400
            if ($eq($1.alttext, "")) { //#2406
                $k[$j++] = Infinity; //#2402
                var _4s = $1.txt; //#2402
                for (var _4t = 0, _4u = _4s.length; _4t < _4u; _4t++) { //#2402
                    $forall($get($get(_4s, _4t), 0)); //#2402
                } //#2402
                $1.txt = $a(); //#2402
                $1.tstr = $s($1.txt.length); //#2403
                for (var _52 = 0, _51 = $1.txt.length - 1; _52 <= _51; _52 += 1) { //#2404
                    $put($1.tstr, _52, $get($1.txt, _52)); //#2404
                } //#2404
            } else { //#2406
                $1.tstr = $1.alttext; //#2406
            } //#2406
            if ($1.tstr.length == 0) { //#2416
                $k[$j++] = 0; //#2411
            } else { //#2416
                $$.save(); //#2413
                $$.newpath(); //#2414
                $$.moveto(0, 0); //#2414
                $$.charpath("0", false); //#2414
                var _58 = $$.pathbbox(); //#2414
                $$.restore(); //#2416
                $k[$j++] = _58.ury; //#2416
            } //#2416
            $1.textascent = $k[--$j]; //#2425
            var _5B = $$.stringwidth($1.tstr); //#2426
            $1.textwidth = $f(_5B.w + (($1.tstr.length - 1) * $1.textgaps)); //#2426
            $1.textxpos = $f($1.textxoffset + ($f($1.pixx - $1.textwidth) / 2)); //#2428
            if ($eq($1.textxalign, "left")) { //#2429
                $1.textxpos = $1.textxoffset; //#2429
            } //#2429
            if ($eq($1.textxalign, "right")) { //#2430
                $1.textxpos = $f($f($1.pixx - $1.textxoffset) - $1.textwidth); //#2430
            } //#2430
            if ($eq($1.textxalign, "offleft")) { //#2431
                $1.textxpos = -$f($1.textwidth + $1.textxoffset); //#2431
            } //#2431
            if ($eq($1.textxalign, "offright")) { //#2432
                $1.textxpos = $f($1.pixx + $1.textxoffset); //#2432
            } //#2432
            if ($eq($1.textxalign, "justify") && ($1.textwidth < $1.pixx)) { //#2436
                $1.textxpos = 0; //#2434
                $1.textgaps = $f($1.pixx - $1.textwidth) / ($1.tstr.length - 1); //#2435
            } //#2435
            $1.textypos = -($f($f($1.textyoffset + $1.textascent) + 1)); //#2437
            if ($eq($1.textyalign, "above")) { //#2438
                $1.textypos = $f($f($1.textyoffset + $1.pixy) + 1); //#2438
            } //#2438
            if ($eq($1.textyalign, "center")) { //#2439
                $1.textypos = $f($1.textyoffset + ($f($1.pixy - $1.textascent) / 2)); //#2439
            } //#2439
            $$.moveto($1.textxpos, $1.textypos); //#2440
            $$.show($1.tstr, $1.textgaps, 0); //#2440
        } //#2440
    } //#2440
    $$.restore(); //#2444
}

function bwipp_ean5() {
    var $1 = {}; //#2562
    $1.options = $k[--$j]; //#2564
    $1.barcode = $k[--$j]; //#2565
    $1.dontdraw = false; //#2567
    $1.includetext = false; //#2568
    $1.textfont = "OCR-B"; //#2569
    $1.textsize = 12; //#2570
    $1.textxoffset = 0; //#2571
    $1.textyoffset = "unset"; //#2572
    $1.height = 0.7; //#2573
    $forall($1.options, function() { //#2584
        var _3 = $k[--$j]; //#2584
        $1[$k[--$j]] = _3; //#2584
    }); //#2584
    $1.textfont = "" + $1.textfont; //#2586
    $1.textsize = +$1.textsize; //#2587
    $1.height = +$1.height; //#2588
    $1.textxoffset = +$1.textxoffset; //#2589
    if ($eq($1.textyoffset, "unset")) { //#2593
        $1.textyoffset = $f(($1.height * 72) + 1); //#2591
    } else { //#2593
        $1.textyoffset = +$1.textyoffset; //#2593
    } //#2593
    if ($1.barcode.length != 5) { //#2599
        $k[$j++] = 'bwipp.ean5badLength'; //#2598
        $k[$j++] = "EAN-5 add-on must be 5 digits"; //#2598
        bwipp_raiseerror(); //#2598
    } //#2598
    $forall($1.barcode, function() { //#2604
        var _E = $k[--$j]; //#2601
        if ((_E < 48) || (_E > 57)) { //#2603
            $k[$j++] = 'bwipp.ean5badCharacter'; //#2602
            $k[$j++] = "EAN-5 add-on must contain only digits"; //#2602
            bwipp_raiseerror(); //#2602
        } //#2602
    }); //#2602
    $1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#2611
    $1.barchars = "0123456789"; //#2614
    $1.mirrormaps = $a(["11000", "10100", "10010", "10001", "01100", "00110", "00011", "01010", "01001", "00101"]); //#2620
    $1.checksum = 0; //#2621
    for (var _H = 0; _H <= 4; _H += 1) { //#2630
        $1.i = _H; //#2623
        $1.barchar = $f($get($1.barcode, $1.i) - 48); //#2624
        if (($1.i % 2) == 0) { //#2628
            $1.checksum = $f(($1.barchar * 3) + $1.checksum); //#2626
        } else { //#2628
            $1.checksum = $f(($1.barchar * 9) + $1.checksum); //#2628
        } //#2628
    } //#2628
    $1.checksum = $1.checksum % 10; //#2631
    $1.mirrormap = $get($1.mirrormaps, $1.checksum); //#2632
    $1.sbs = $s(31); //#2634
    $1.txt = $a(5); //#2635
    for (var _W = 0; _W <= 4; _W += 1) { //#2665
        $1.i = _W; //#2638
        if ($1.i == 0) { //#2644
            $puti($1.sbs, 0, $get($1.encs, 10)); //#2642
        } else { //#2644
            $puti($1.sbs, (($1.i - 1) * 6) + 7, $get($1.encs, 11)); //#2644
        } //#2644
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#2648
        $j--; //#2649
        $1.indx = $k[--$j].length; //#2650
        $j -= 2; //#2651
        $1.enc = $get($1.encs, $1.indx); //#2652
        if ($get($1.mirrormap, $1.i) == 49) { //#2662
            $1.enclen = $1.enc.length; //#2654
            $1.revenc = $s($1.enclen); //#2655
            for (var _v = 0, _u = $1.enclen - 1; _v <= _u; _v += 1) { //#2660
                $1.j = _v; //#2657
                $1.char = $get($1.enc, $1.j); //#2658
                $put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); //#2659
            } //#2659
            $1.enc = $1.revenc; //#2661
        } //#2661
        $puti($1.sbs, ($1.i * 6) + 3, $1.enc); //#2663
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(((($1.i - 1) * 9) + 13) + $1.textxoffset), $1.textyoffset, $1.textfont, $1.textsize])); //#2664
    } //#2664
    $k[$j++] = Infinity; //#2679
    $k[$j++] = Infinity; //#2670
    var _1I = $1.sbs; //#2670
    for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) { //#2670
        $k[$j++] = $get(_1I, _1J) - 48; //#2670
    } //#2670
    var _1M = $a(); //#2670
    $k[$j++] = Infinity; //#2671
    for (var _1N = 0, _1O = 16; _1N < _1O; _1N++) { //#2671
        $k[$j++] = $1.height; //#2671
    } //#2671
    var _1Q = $a(); //#2671
    $k[$j++] = Infinity; //#2672
    for (var _1R = 0, _1S = 16; _1R < _1S; _1R++) { //#2672
        $k[$j++] = 0; //#2672
    } //#2672
    var _1T = $a(); //#2672
    $k[$j++] = 'ren'; //#2675
    $k[$j++] = bwipp_renlinear; //#2675
    $k[$j++] = 'sbs'; //#2675
    $k[$j++] = _1M; //#2675
    $k[$j++] = 'bhs'; //#2675
    $k[$j++] = _1Q; //#2675
    $k[$j++] = 'bbs'; //#2675
    $k[$j++] = _1T; //#2675
    if ($1.includetext) { //#2675
        $k[$j++] = 'txt'; //#2674
        $k[$j++] = $1.txt; //#2674
    } //#2674
    $k[$j++] = 'opt'; //#2679
    $k[$j++] = $1.options; //#2679
    $k[$j++] = 'guardrightpos'; //#2679
    $k[$j++] = 10; //#2679
    $k[$j++] = 'guardrightypos'; //#2679
    $k[$j++] = $f($1.textyoffset + 4); //#2679
    $k[$j++] = 'bordertop'; //#2679
    $k[$j++] = 10; //#2679
    var _1Y = $d(); //#2679
    $k[$j++] = _1Y; //#2682
    if (!$1.dontdraw) { //#2682
        bwipp_renlinear(); //#2682
    } //#2682
}

function bwipp_ean2() {
    var $1 = {}; //#2711
    $1.options = $k[--$j]; //#2713
    $1.barcode = $k[--$j]; //#2714
    $1.dontdraw = false; //#2716
    $1.includetext = false; //#2717
    $1.textfont = "OCR-B"; //#2718
    $1.textsize = 12; //#2719
    $1.textxoffset = 0; //#2720
    $1.textyoffset = "unset"; //#2721
    $1.height = 0.7; //#2722
    $forall($1.options, function() { //#2733
        var _3 = $k[--$j]; //#2733
        $1[$k[--$j]] = _3; //#2733
    }); //#2733
    $1.textfont = "" + $1.textfont; //#2735
    $1.textsize = +$1.textsize; //#2736
    $1.height = +$1.height; //#2737
    $1.textxoffset = +$1.textxoffset; //#2738
    if ($eq($1.textyoffset, "unset")) { //#2742
        $1.textyoffset = $f(($1.height * 72) + 1); //#2740
    } else { //#2742
        $1.textyoffset = +$1.textyoffset; //#2742
    } //#2742
    if ($1.barcode.length != 2) { //#2748
        $k[$j++] = 'bwipp.ean2badLength'; //#2747
        $k[$j++] = "EAN-2 add-on must be 2 digits"; //#2747
        bwipp_raiseerror(); //#2747
    } //#2747
    $forall($1.barcode, function() { //#2753
        var _E = $k[--$j]; //#2750
        if ((_E < 48) || (_E > 57)) { //#2752
            $k[$j++] = 'bwipp.ean2badCharacter'; //#2751
            $k[$j++] = "EAN-2 add-on must contain only digits"; //#2751
            bwipp_raiseerror(); //#2751
        } //#2751
    }); //#2751
    $1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "112", "11"]); //#2760
    $1.barchars = "0123456789"; //#2763
    $1.mirrormap = $get($a(["00", "01", "10", "11"]), $cvi($geti($1.barcode, 0, 2)) % 4); //#2766
    $1.sbs = $s(13); //#2768
    $1.txt = $a(2); //#2769
    for (var _M = 0; _M <= 1; _M += 1) { //#2799
        $1.i = _M; //#2772
        if ($1.i == 0) { //#2778
            $puti($1.sbs, 0, $get($1.encs, 10)); //#2776
        } else { //#2778
            $puti($1.sbs, (($1.i - 1) * 6) + 7, $get($1.encs, 11)); //#2778
        } //#2778
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#2782
        $j--; //#2783
        $1.indx = $k[--$j].length; //#2784
        $j -= 2; //#2785
        $1.enc = $get($1.encs, $1.indx); //#2786
        if ($get($1.mirrormap, $1.i) == 49) { //#2796
            $1.enclen = $1.enc.length; //#2788
            $1.revenc = $s($1.enclen); //#2789
            for (var _l = 0, _k = $1.enclen - 1; _l <= _k; _l += 1) { //#2794
                $1.j = _l; //#2791
                $1.char = $get($1.enc, $1.j); //#2792
                $put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); //#2793
            } //#2793
            $1.enc = $1.revenc; //#2795
        } //#2795
        $puti($1.sbs, ($1.i * 6) + 3, $1.enc); //#2797
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(((($1.i - 1) * 9) + 13) + $1.textxoffset), $1.textyoffset, $1.textfont, $1.textsize])); //#2798
    } //#2798
    $k[$j++] = Infinity; //#2813
    $k[$j++] = Infinity; //#2804
    var _18 = $1.sbs; //#2804
    for (var _19 = 0, _1A = _18.length; _19 < _1A; _19++) { //#2804
        $k[$j++] = $get(_18, _19) - 48; //#2804
    } //#2804
    var _1C = $a(); //#2804
    $k[$j++] = Infinity; //#2805
    for (var _1D = 0, _1E = 12; _1D < _1E; _1D++) { //#2805
        $k[$j++] = $1.height; //#2805
    } //#2805
    var _1G = $a(); //#2805
    $k[$j++] = Infinity; //#2806
    for (var _1H = 0, _1I = 12; _1H < _1I; _1H++) { //#2806
        $k[$j++] = 0; //#2806
    } //#2806
    var _1J = $a(); //#2806
    $k[$j++] = 'ren'; //#2809
    $k[$j++] = bwipp_renlinear; //#2809
    $k[$j++] = 'sbs'; //#2809
    $k[$j++] = _1C; //#2809
    $k[$j++] = 'bhs'; //#2809
    $k[$j++] = _1G; //#2809
    $k[$j++] = 'bbs'; //#2809
    $k[$j++] = _1J; //#2809
    if ($1.includetext) { //#2809
        $k[$j++] = 'txt'; //#2808
        $k[$j++] = $1.txt; //#2808
    } //#2808
    $k[$j++] = 'opt'; //#2813
    $k[$j++] = $1.options; //#2813
    $k[$j++] = 'guardrightpos'; //#2813
    $k[$j++] = 10; //#2813
    $k[$j++] = 'guardrightypos'; //#2813
    $k[$j++] = $f($1.textyoffset + 4); //#2813
    $k[$j++] = 'bordertop'; //#2813
    $k[$j++] = 10; //#2813
    var _1O = $d(); //#2813
    $k[$j++] = _1O; //#2816
    if (!$1.dontdraw) { //#2816
        bwipp_renlinear(); //#2816
    } //#2816
}

function bwipp_ean13() {
    var $1 = {}; //#2847
    $1.options = $k[--$j]; //#2849
    $1.barcode = $k[--$j]; //#2850
    $1.dontdraw = false; //#2852
    $1.includetext = false; //#2853
    $1.textfont = "OCR-B"; //#2854
    $1.textsize = 12; //#2855
    $1.textxoffset = -10; //#2856
    $1.textyoffset = -4; //#2857
    $1.height = 1; //#2858
    $1.addongap = 12; //#2859
    $1.addontextfont = "unset"; //#2860
    $1.addontextsize = "unset"; //#2861
    $1.addontextxoffset = "unset"; //#2862
    $1.addontextyoffset = "unset"; //#2863
    $forall($1.options, function() { //#2874
        var _3 = $k[--$j]; //#2874
        $1[$k[--$j]] = _3; //#2874
    }); //#2874
    $1.textfont = "" + $1.textfont; //#2876
    $1.textsize = +$1.textsize; //#2877
    $1.textxoffset = +$1.textxoffset; //#2878
    $1.textyoffset = +$1.textyoffset; //#2879
    $1.height = +$1.height; //#2880
    $1.addongap = +$1.addongap; //#2881
    if ($ne($1.addontextfont, "unset")) { //#2882
        $1.addontextfont = "" + $1.addontextfont; //#2882
    } //#2882
    if ($ne($1.addontextsize, "unset")) { //#2883
        $1.addontextsize = +$1.addontextsize; //#2883
    } //#2883
    if ($ne($1.addontextxoffset, "unset")) { //#2884
        $1.addontextxoffset = +$1.addontextxoffset; //#2884
    } //#2884
    if ($ne($1.addontextyoffset, "unset")) { //#2885
        $1.addontextyoffset = +$1.addontextyoffset; //#2885
    } //#2885
    $search($1.barcode, " "); //#2888
    if ($k[--$j]) { //#2894
        $1.barcode = $k[--$j]; //#2889
        $j--; //#2890
        $1.addon = $k[--$j]; //#2891
    } else { //#2894
        $j--; //#2893
        $1.addon = ""; //#2894
    } //#2894
    if (($1.barcode.length != 12) && ($1.barcode.length != 13)) { //#2900
        $k[$j++] = 'bwipp.ean13badLength'; //#2899
        $k[$j++] = "EAN-13 must be 12 or 13 digits"; //#2899
        bwipp_raiseerror(); //#2899
    } //#2899
    $forall($1.barcode, function() { //#2905
        var _Q = $k[--$j]; //#2902
        if ((_Q < 48) || (_Q > 57)) { //#2904
            $k[$j++] = 'bwipp.ean13badCharacter'; //#2903
            $k[$j++] = "EAN-13 must contain only digits"; //#2903
            bwipp_raiseerror(); //#2903
        } //#2903
    }); //#2903
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#2908
        $k[$j++] = 'bwipp.ean13badAddOnLength'; //#2907
        $k[$j++] = "Add-on for EAN-13 must be 2 or 5 digits"; //#2907
        bwipp_raiseerror(); //#2907
    } //#2907
    $1.pad = $s(13); //#2911
    $1.checksum = 0; //#2912
    for (var _V = 0; _V <= 11; _V += 1) { //#2921
        $1.i = _V; //#2914
        $1.barchar = $f($get($1.barcode, $1.i) - 48); //#2915
        if (($1.i % 2) == 0) { //#2919
            $1.checksum = $f($1.barchar + $1.checksum); //#2917
        } else { //#2919
            $1.checksum = $f(($1.barchar * 3) + $1.checksum); //#2919
        } //#2919
    } //#2919
    $1.checksum = ($f(10 - ($1.checksum % 10))) % 10; //#2922
    if ($1.barcode.length == 13) { //#2927
        if ($get($1.barcode, 12) != $f($1.checksum + 48)) { //#2926
            $k[$j++] = 'bwipp.ean13badCheckDigit'; //#2925
            $k[$j++] = "Incorrect EAN-13 check digit provided"; //#2925
            bwipp_raiseerror(); //#2925
        } //#2925
    } //#2925
    $puti($1.pad, 0, $1.barcode); //#2928
    $put($1.pad, 12, $f($1.checksum + 48)); //#2929
    $1.barcode = $1.pad; //#2930
    $1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#2937
    $1.barchars = "0123456789"; //#2940
    $1.mirrormaps = $a(["000000", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#2946
    $1.sbs = $s(59); //#2948
    $1.txt = $a(13); //#2949
    $puti($1.sbs, 0, $get($1.encs, 10)); //#2952
    $1.mirrormap = $get($1.mirrormaps, $get($1.barcode, 0) - 48); //#2955
    $put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])); //#2956
    for (var _17 = 1; _17 <= 6; _17 += 1) { //#2979
        $1.i = _17; //#2961
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#2962
        $j--; //#2963
        $1.indx = $k[--$j].length; //#2964
        $j -= 2; //#2965
        $1.enc = $get($1.encs, $1.indx); //#2966
        if ($get($1.mirrormap, $1.i - 1) == 49) { //#2976
            $1.enclen = $1.enc.length; //#2968
            $1.revenc = $s($1.enclen); //#2969
            for (var _1O = 0, _1N = $1.enclen - 1; _1O <= _1N; _1O += 1) { //#2974
                $1.j = _1O; //#2971
                $1.char = $get($1.enc, $1.j); //#2972
                $put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); //#2973
            } //#2973
            $1.enc = $1.revenc; //#2975
        } //#2975
        $puti($1.sbs, (($1.i - 1) * 4) + 3, $1.enc); //#2977
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(((($1.i - 1) * 7) + 14) + $1.textxoffset), $1.textyoffset, $1.textfont, $1.textsize])); //#2978
    } //#2978
    $puti($1.sbs, ((7 - 1) * 4) + 3, $get($1.encs, 11)); //#2982
    for (var _1o = 7; _1o <= 12; _1o += 1) { //#2995
        $1.i = _1o; //#2987
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#2988
        $j--; //#2989
        $1.indx = $k[--$j].length; //#2990
        $j -= 2; //#2991
        $1.enc = $get($1.encs, $1.indx); //#2992
        $puti($1.sbs, (($1.i - 1) * 4) + 8, $1.enc); //#2993
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(((($1.i - 1) * 7) + 18) + $1.textxoffset), $1.textyoffset, $1.textfont, $1.textsize])); //#2994
    } //#2994
    $puti($1.sbs, 56, $get($1.encs, 12)); //#2998
    $k[$j++] = Infinity; //#3000
    var _2E = $1.sbs; //#3000
    for (var _2F = 0, _2G = _2E.length; _2F < _2G; _2F++) { //#3000
        $k[$j++] = $get(_2E, _2F) - 48; //#3000
    } //#3000
    $1.sbs = $a(); //#3000
    if ($1.includetext) { //#3007
        $k[$j++] = Infinity; //#3002
        $k[$j++] = $1.height; //#3002
        $k[$j++] = $1.height; //#3002
        for (var _2M = 0, _2N = 12; _2M < _2N; _2M++) { //#3002
            $k[$j++] = $f($1.height - 0.075); //#3002
        } //#3002
        $k[$j++] = $1.height; //#3002
        $k[$j++] = $1.height; //#3002
        for (var _2R = 0, _2S = 12; _2R < _2S; _2R++) { //#3002
            $k[$j++] = $f($1.height - 0.075); //#3002
        } //#3002
        $k[$j++] = $1.height; //#3002
        $k[$j++] = $1.height; //#3002
        $1.bhs = $a(); //#3002
        $k[$j++] = Infinity; //#3003
        $k[$j++] = 0; //#3003
        $k[$j++] = 0; //#3003
        for (var _2X = 0, _2Y = 12; _2X < _2Y; _2X++) { //#3003
            $k[$j++] = 0.075; //#3003
        } //#3003
        $k[$j++] = 0; //#3003
        $k[$j++] = 0; //#3003
        for (var _2Z = 0, _2a = 12; _2Z < _2a; _2Z++) { //#3003
            $k[$j++] = 0.075; //#3003
        } //#3003
        $k[$j++] = 0; //#3003
        $k[$j++] = 0; //#3003
        $1.bbs = $a(); //#3003
    } else { //#3007
        $k[$j++] = Infinity; //#3005
        for (var _2c = 0, _2d = 30; _2c < _2d; _2c++) { //#3005
            $k[$j++] = $1.height; //#3005
        } //#3005
        $1.bhs = $a(); //#3005
        $k[$j++] = Infinity; //#3006
        for (var _2g = 0, _2h = 30; _2g < _2h; _2g++) { //#3006
            $k[$j++] = 0; //#3006
        } //#3006
        $1.bbs = $a(); //#3006
        $1.txt = $a([]); //#3007
    } //#3007
    $1.guardrightypos = 0; //#3009
    if ($ne($1.addon, "")) { //#3030
        $k[$j++] = Infinity; //#3020
        $k[$j++] = 'dontdraw'; //#3017
        $k[$j++] = true; //#3017
        $k[$j++] = 'includetext'; //#3017
        $k[$j++] = true; //#3017
        $k[$j++] = 'height'; //#3017
        $k[$j++] = $f($1.height - 0.15); //#3017
        $k[$j++] = 'textxoffset'; //#3017
        if ($1.addontextxoffset != "unset") { //#3017
            $k[$j++] = $1.addontextxoffset; //#3017
        } else { //#3017
            $k[$j++] = $f(95 + $1.addongap); //#3017
        } //#3017
        if ($1.addontextyoffset != "unset") { //#3018
            $k[$j++] = 'textyoffset'; //#3018
            $k[$j++] = $1.addontextyoffset; //#3018
        } //#3018
        var _2s = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; //#3019
        var _2u = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; //#3020
        $k[$j++] = 'textsize'; //#3020
        $k[$j++] = _2s; //#3020
        $k[$j++] = 'textfont'; //#3020
        $k[$j++] = _2u; //#3020
        $1.addopts = $d(); //#3021
        if ($1.addon.length == 2) { //#3022
            $k[$j++] = $1.addon; //#3022
            $k[$j++] = $1.addopts; //#3022
            bwipp_ean2(); //#3022
        } //#3022
        if ($1.addon.length == 5) { //#3023
            $k[$j++] = $1.addon; //#3023
            $k[$j++] = $1.addopts; //#3023
            bwipp_ean5(); //#3023
        } //#3023
        $1.addcode = $k[--$j]; //#3024
        $k[$j++] = Infinity; //#3025
        $aload($1.sbs); //#3025
        $k[$j++] = $1.addongap; //#3025
        $aload($get($1.addcode, "sbs")); //#3025
        $1.sbs = $a(); //#3025
        $k[$j++] = Infinity; //#3026
        $aload($1.bhs); //#3026
        $forall($get($1.addcode, "bhs"), function() { //#3026
            var _3B = $k[--$j]; //#3026
            $k[$j++] = $f(_3B - 0.075); //#3026
        }); //#3026
        $1.bhs = $a(); //#3026
        $k[$j++] = Infinity; //#3027
        $aload($1.bbs); //#3027
        $forall($get($1.addcode, "bbs"), function() { //#3027
            var _3G = $k[--$j]; //#3027
            $k[$j++] = $f(_3G + 0.075); //#3027
        }); //#3027
        $1.bbs = $a(); //#3027
        $k[$j++] = Infinity; //#3028
        $aload($1.txt); //#3028
        $aload($get($1.addcode, "txt")); //#3028
        $1.txt = $a(); //#3028
        $1.guardrightypos = $f(($1.height * 72) - 6); //#3029
    } //#3029
    var _3T = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["txt", $1.txt],
        ["opt", $1.options],
        ["guardrightpos", 10],
        ["guardrightypos", $1.guardrightypos],
        ["borderbottom", 5]
    ]); //#3042
    $k[$j++] = _3T; //#3045
    if (!$1.dontdraw) { //#3045
        bwipp_renlinear(); //#3045
    } //#3045
}

function bwipp_ean8() {
    var $1 = {}; //#3076
    $1.options = $k[--$j]; //#3078
    $1.barcode = $k[--$j]; //#3079
    $1.dontdraw = false; //#3081
    $1.includetext = false; //#3082
    $1.textfont = "OCR-B"; //#3083
    $1.textsize = 12; //#3084
    $1.textxoffset = 4; //#3085
    $1.textyoffset = -4; //#3086
    $1.height = 1; //#3087
    $1.addongap = 12; //#3088
    $1.addontextfont = "unset"; //#3089
    $1.addontextsize = "unset"; //#3090
    $1.addontextxoffset = "unset"; //#3091
    $1.addontextyoffset = "unset"; //#3092
    $forall($1.options, function() { //#3103
        var _3 = $k[--$j]; //#3103
        $1[$k[--$j]] = _3; //#3103
    }); //#3103
    $1.textfont = "" + $1.textfont; //#3105
    $1.textsize = +$1.textsize; //#3106
    $1.textxoffset = +$1.textxoffset; //#3107
    $1.textyoffset = +$1.textyoffset; //#3108
    $1.height = +$1.height; //#3109
    $1.addongap = +$1.addongap; //#3110
    if ($ne($1.addontextfont, "unset")) { //#3111
        $1.addontextfont = "" + $1.addontextfont; //#3111
    } //#3111
    if ($ne($1.addontextsize, "unset")) { //#3112
        $1.addontextsize = +$1.addontextsize; //#3112
    } //#3112
    if ($ne($1.addontextxoffset, "unset")) { //#3113
        $1.addontextxoffset = +$1.addontextxoffset; //#3113
    } //#3113
    if ($ne($1.addontextyoffset, "unset")) { //#3114
        $1.addontextyoffset = +$1.addontextyoffset; //#3114
    } //#3114
    $search($1.barcode, " "); //#3117
    if ($k[--$j]) { //#3123
        $1.barcode = $k[--$j]; //#3118
        $j--; //#3119
        $1.addon = $k[--$j]; //#3120
    } else { //#3123
        $j--; //#3122
        $1.addon = ""; //#3123
    } //#3123
    if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //#3129
        $k[$j++] = 'bwipp.ean8badLength'; //#3128
        $k[$j++] = "EAN-8 must be 7 or 8 digits"; //#3128
        bwipp_raiseerror(); //#3128
    } //#3128
    $forall($1.barcode, function() { //#3134
        var _Q = $k[--$j]; //#3131
        if ((_Q < 48) || (_Q > 57)) { //#3133
            $k[$j++] = 'bwipp.ean8badCharacter'; //#3132
            $k[$j++] = "EAN-8 must contain only digits"; //#3132
            bwipp_raiseerror(); //#3132
        } //#3132
    }); //#3132
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#3137
        $k[$j++] = 'bwipp.ean8badAddOnLength'; //#3136
        $k[$j++] = "Add-on for EAN-8 must be 2 or 5 digits"; //#3136
        bwipp_raiseerror(); //#3136
    } //#3136
    $1.pad = $s(8); //#3140
    $1.checksum = 0; //#3141
    for (var _V = 0; _V <= 6; _V += 1) { //#3150
        $1.i = _V; //#3143
        $1.barchar = $f($get($1.barcode, $1.i) - 48); //#3144
        if (($1.i % 2) != 0) { //#3148
            $1.checksum = $f($1.barchar + $1.checksum); //#3146
        } else { //#3148
            $1.checksum = $f(($1.barchar * 3) + $1.checksum); //#3148
        } //#3148
    } //#3148
    $1.checksum = ($f(10 - ($1.checksum % 10))) % 10; //#3151
    if ($1.barcode.length == 8) { //#3156
        if ($get($1.barcode, 7) != $f($1.checksum + 48)) { //#3155
            $k[$j++] = 'bwipp.ean8badCheckDigit'; //#3154
            $k[$j++] = "Incorrect EAN-8 check digit provided"; //#3154
            bwipp_raiseerror(); //#3154
        } //#3154
    } //#3154
    $puti($1.pad, 0, $1.barcode); //#3157
    $put($1.pad, 7, $f($1.checksum + 48)); //#3158
    $1.barcode = $1.pad; //#3159
    $1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#3166
    $1.barchars = "0123456789"; //#3169
    $1.sbs = $s(43); //#3171
    $1.txt = $a(8); //#3172
    $puti($1.sbs, 0, $get($1.encs, 10)); //#3175
    for (var _u = 0; _u <= 3; _u += 1) { //#3188
        $1.i = _u; //#3180
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#3181
        $j--; //#3182
        $1.indx = $k[--$j].length; //#3183
        $j -= 2; //#3184
        $1.enc = $get($1.encs, $1.indx); //#3185
        $puti($1.sbs, ($1.i * 4) + 3, $1.enc); //#3186
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(($1.i * 7) + $1.textxoffset), $1.textyoffset, $1.textfont, $1.textsize])); //#3187
    } //#3187
    $puti($1.sbs, (4 * 4) + 3, $get($1.encs, 11)); //#3191
    for (var _1K = 4; _1K <= 7; _1K += 1) { //#3204
        $1.i = _1K; //#3196
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#3197
        $j--; //#3198
        $1.indx = $k[--$j].length; //#3199
        $j -= 2; //#3200
        $1.enc = $get($1.encs, $1.indx); //#3201
        $puti($1.sbs, ($1.i * 4) + 8, $1.enc); //#3202
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(($f(($1.i * 7) + $1.textxoffset)) + 4), $1.textyoffset, $1.textfont, $1.textsize])); //#3203
    } //#3203
    $puti($1.sbs, 40, $get($1.encs, 12)); //#3207
    $k[$j++] = Infinity; //#3209
    var _1k = $1.sbs; //#3209
    for (var _1l = 0, _1m = _1k.length; _1l < _1m; _1l++) { //#3209
        $k[$j++] = $get(_1k, _1l) - 48; //#3209
    } //#3209
    $1.sbs = $a(); //#3209
    if ($1.includetext) { //#3216
        $k[$j++] = Infinity; //#3211
        $k[$j++] = $1.height; //#3211
        $k[$j++] = $1.height; //#3211
        for (var _1s = 0, _1t = 8; _1s < _1t; _1s++) { //#3211
            $k[$j++] = $f($1.height - 0.075); //#3211
        } //#3211
        $k[$j++] = $1.height; //#3211
        $k[$j++] = $1.height; //#3211
        for (var _1x = 0, _1y = 8; _1x < _1y; _1x++) { //#3211
            $k[$j++] = $f($1.height - 0.075); //#3211
        } //#3211
        $k[$j++] = $1.height; //#3211
        $k[$j++] = $1.height; //#3211
        $1.bhs = $a(); //#3211
        $k[$j++] = Infinity; //#3212
        $k[$j++] = 0; //#3212
        $k[$j++] = 0; //#3212
        for (var _23 = 0, _24 = 8; _23 < _24; _23++) { //#3212
            $k[$j++] = 0.075; //#3212
        } //#3212
        $k[$j++] = 0; //#3212
        $k[$j++] = 0; //#3212
        for (var _25 = 0, _26 = 8; _25 < _26; _25++) { //#3212
            $k[$j++] = 0.075; //#3212
        } //#3212
        $k[$j++] = 0; //#3212
        $k[$j++] = 0; //#3212
        $1.bbs = $a(); //#3212
    } else { //#3216
        $k[$j++] = Infinity; //#3214
        for (var _28 = 0, _29 = 22; _28 < _29; _28++) { //#3214
            $k[$j++] = $1.height; //#3214
        } //#3214
        $1.bhs = $a(); //#3214
        $k[$j++] = Infinity; //#3215
        for (var _2C = 0, _2D = 22; _2C < _2D; _2C++) { //#3215
            $k[$j++] = 0; //#3215
        } //#3215
        $1.bbs = $a(); //#3215
        $1.txt = $a([]); //#3216
    } //#3216
    $1.guardrightypos = 0; //#3218
    if ($ne($1.addon, "")) { //#3239
        $k[$j++] = Infinity; //#3229
        $k[$j++] = 'dontdraw'; //#3226
        $k[$j++] = true; //#3226
        $k[$j++] = 'includetext'; //#3226
        $k[$j++] = true; //#3226
        $k[$j++] = 'height'; //#3226
        $k[$j++] = $f($1.height - 0.15); //#3226
        $k[$j++] = 'textxoffset'; //#3226
        if ($1.addontextxoffset != "unset") { //#3226
            $k[$j++] = $1.addontextxoffset; //#3226
        } else { //#3226
            $k[$j++] = $f(67 + $1.addongap); //#3226
        } //#3226
        if ($1.addontextyoffset != "unset") { //#3227
            $k[$j++] = 'textyoffset'; //#3227
            $k[$j++] = $1.addontextyoffset; //#3227
        } //#3227
        var _2O = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; //#3228
        var _2Q = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; //#3229
        $k[$j++] = 'textsize'; //#3229
        $k[$j++] = _2O; //#3229
        $k[$j++] = 'textfont'; //#3229
        $k[$j++] = _2Q; //#3229
        $1.addopts = $d(); //#3230
        if ($1.addon.length == 2) { //#3231
            $k[$j++] = $1.addon; //#3231
            $k[$j++] = $1.addopts; //#3231
            bwipp_ean2(); //#3231
        } //#3231
        if ($1.addon.length == 5) { //#3232
            $k[$j++] = $1.addon; //#3232
            $k[$j++] = $1.addopts; //#3232
            bwipp_ean5(); //#3232
        } //#3232
        $1.addcode = $k[--$j]; //#3233
        $k[$j++] = Infinity; //#3234
        $aload($1.sbs); //#3234
        $k[$j++] = $1.addongap; //#3234
        $aload($get($1.addcode, "sbs")); //#3234
        $1.sbs = $a(); //#3234
        $k[$j++] = Infinity; //#3235
        $aload($1.bhs); //#3235
        $forall($get($1.addcode, "bhs"), function() { //#3235
            var _2h = $k[--$j]; //#3235
            $k[$j++] = $f(_2h - 0.075); //#3235
        }); //#3235
        $1.bhs = $a(); //#3235
        $k[$j++] = Infinity; //#3236
        $aload($1.bbs); //#3236
        $forall($get($1.addcode, "bbs"), function() { //#3236
            var _2m = $k[--$j]; //#3236
            $k[$j++] = $f(_2m + 0.075); //#3236
        }); //#3236
        $1.bbs = $a(); //#3236
        $k[$j++] = Infinity; //#3237
        $aload($1.txt); //#3237
        $aload($get($1.addcode, "txt")); //#3237
        $1.txt = $a(); //#3237
        $1.guardrightypos = $f(($1.height * 72) - 6); //#3238
    } //#3238
    var _2z = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["txt", $1.txt],
        ["opt", $1.options],
        ["guardleftpos", 10],
        ["guardrightpos", 10],
        ["guardrightypos", $1.guardrightypos],
        ["borderbottom", 5]
    ]); //#3252
    $k[$j++] = _2z; //#3255
    if (!$1.dontdraw) { //#3255
        bwipp_renlinear(); //#3255
    } //#3255
}

function bwipp_upca() {
    var $1 = {}; //#3286
    $1.options = $k[--$j]; //#3288
    $1.barcode = $k[--$j]; //#3289
    $1.dontdraw = false; //#3291
    $1.includetext = false; //#3292
    $1.textfont = "OCR-B"; //#3293
    $1.textsize = 12; //#3294
    $1.textxoffset = -7; //#3295
    $1.textyoffset = -4; //#3296
    $1.height = 1; //#3297
    $1.addongap = 12; //#3298
    $1.addontextfont = "unset"; //#3299
    $1.addontextsize = "unset"; //#3300
    $1.addontextxoffset = "unset"; //#3301
    $1.addontextyoffset = "unset"; //#3302
    $forall($1.options, function() { //#3313
        var _3 = $k[--$j]; //#3313
        $1[$k[--$j]] = _3; //#3313
    }); //#3313
    $1.textfont = "" + $1.textfont; //#3315
    $1.textsize = +$1.textsize; //#3316
    $1.textxoffset = +$1.textxoffset; //#3317
    $1.textyoffset = +$1.textyoffset; //#3318
    $1.height = +$1.height; //#3319
    $1.addongap = +$1.addongap; //#3320
    if ($ne($1.addontextfont, "unset")) { //#3321
        $1.addontextfont = "" + $1.addontextfont; //#3321
    } //#3321
    if ($ne($1.addontextsize, "unset")) { //#3322
        $1.addontextsize = +$1.addontextsize; //#3322
    } //#3322
    if ($ne($1.addontextxoffset, "unset")) { //#3323
        $1.addontextxoffset = +$1.addontextxoffset; //#3323
    } //#3323
    if ($ne($1.addontextyoffset, "unset")) { //#3324
        $1.addontextyoffset = +$1.addontextyoffset; //#3324
    } //#3324
    $search($1.barcode, " "); //#3327
    if ($k[--$j]) { //#3333
        $1.barcode = $k[--$j]; //#3328
        $j--; //#3329
        $1.addon = $k[--$j]; //#3330
    } else { //#3333
        $j--; //#3332
        $1.addon = ""; //#3333
    } //#3333
    if (($1.barcode.length == 7) || ($1.barcode.length == 8)) { //#3379
        $forall($1.barcode, function() { //#3343
            var _Q = $k[--$j]; //#3340
            if ((_Q < 48) || (_Q > 57)) { //#3342
                $k[$j++] = 'bwipp.upcAupcEbadCharacter'; //#3341
                $k[$j++] = "UPC-E must contain only digits"; //#3341
                bwipp_raiseerror(); //#3341
            } //#3341
        }); //#3341
        var _S = $get($1.barcode, 0); //#3344
        if ((_S != 48) && (_S != 49)) { //#3346
            $k[$j++] = 'bwipp.upcAupcEbadNumberSystem'; //#3345
            $k[$j++] = "UPC-E must have number system 0 or 1"; //#3345
            bwipp_raiseerror(); //#3345
        } //#3345
        for (var _T = 0, _U = 1; _T < _U; _T++) { //#3374
            var _W = ($1.barcode.length == 8) ? 12 : 11; //#3348
            $1.upcacode = $s(_W); //#3348
            if ($f($get($1.barcode, 6) - 48) <= 2) { //#3355
                $puti($1.upcacode, 0, $geti($1.barcode, 0, 3)); //#3350
                $puti($1.upcacode, 3, $geti($1.barcode, 6, 1)); //#3351
                $puti($1.upcacode, 4, "0000"); //#3352
                $puti($1.upcacode, 8, $geti($1.barcode, 3, 3)); //#3353
                break; //#3354
            } //#3354
            if ($f($get($1.barcode, 6) - 48) == 3) { //#3361
                $puti($1.upcacode, 0, $geti($1.barcode, 0, 4)); //#3357
                $puti($1.upcacode, 4, "00000"); //#3358
                $puti($1.upcacode, 9, $geti($1.barcode, 4, 2)); //#3359
                break; //#3360
            } //#3360
            if ($f($get($1.barcode, 6) - 48) == 4) { //#3367
                $puti($1.upcacode, 0, $geti($1.barcode, 0, 5)); //#3363
                $puti($1.upcacode, 5, "00000"); //#3364
                $puti($1.upcacode, 10, $geti($1.barcode, 5, 1)); //#3365
                break; //#3366
            } //#3366
            if ($f($get($1.barcode, 6) - 48) >= 5) { //#3373
                $puti($1.upcacode, 0, $geti($1.barcode, 0, 6)); //#3369
                $puti($1.upcacode, 6, "0000"); //#3370
                $puti($1.upcacode, 10, $geti($1.barcode, 6, 1)); //#3371
                break; //#3372
            } //#3372
        } //#3372
        if ($1.barcode.length == 8) { //#3377
            $puti($1.upcacode, 11, $geti($1.barcode, 7, 1)); //#3376
        } //#3376
        $1.barcode = $1.upcacode; //#3378
    } //#3378
    if (($1.barcode.length != 11) && ($1.barcode.length != 12)) { //#3384
        $k[$j++] = 'bwipp.upcAbadLength'; //#3383
        $k[$j++] = "UPC-A must be 11 or 12 digits"; //#3383
        bwipp_raiseerror(); //#3383
    } //#3383
    var _1I = $1.barcode; //#3385
    for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) { //#3389
        var _1L = $get(_1I, _1J); //#3389
        if ((_1L < 48) || (_1L > 57)) { //#3388
            $k[$j++] = 'bwipp.upcAbadCharacter'; //#3387
            $k[$j++] = "UPC-A must contain only digits"; //#3387
            bwipp_raiseerror(); //#3387
        } //#3387
    } //#3387
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#3392
        $k[$j++] = 'bwipp.upcAbadAddOnLength'; //#3391
        $k[$j++] = "Add-on for UPC-A must be 2 or 5 digits"; //#3391
        bwipp_raiseerror(); //#3391
    } //#3391
    $1.pad = $s(12); //#3395
    $1.checksum = 0; //#3396
    for (var _1Q = 0; _1Q <= 10; _1Q += 1) { //#3405
        $1.i = _1Q; //#3398
        $1.barchar = $get($1.barcode, $1.i) - 48; //#3399
        if (($1.i % 2) != 0) { //#3403
            $1.checksum = $1.checksum + $1.barchar; //#3401
        } else { //#3403
            $1.checksum = $1.checksum + ($1.barchar * 3); //#3403
        } //#3403
    } //#3403
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#3406
    if ($1.barcode.length == 12) { //#3411
        if ($get($1.barcode, 11) != ($1.checksum + 48)) { //#3410
            $k[$j++] = 'bwipp.upcAbadCheckDigit'; //#3409
            $k[$j++] = "Incorrect UPC check digit provided"; //#3409
            bwipp_raiseerror(); //#3409
        } //#3409
    } //#3409
    $puti($1.pad, 0, $1.barcode); //#3412
    $put($1.pad, 11, $1.checksum + 48); //#3413
    $1.barcode = $1.pad; //#3414
    $1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "11111", "111"]); //#3421
    $1.barchars = "0123456789"; //#3424
    $1.sbs = $s(59); //#3426
    $1.txt = $a(12); //#3427
    $puti($1.sbs, 0, $get($1.encs, 10)); //#3430
    for (var _1p = 0; _1p <= 5; _1p += 1) { //#3447
        $1.i = _1p; //#3435
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#3436
        $j--; //#3437
        $1.indx = $k[--$j].length; //#3438
        $j -= 2; //#3439
        $1.enc = $get($1.encs, $1.indx); //#3440
        $puti($1.sbs, ($1.i * 4) + 3, $1.enc); //#3441
        if ($1.i == 0) { //#3445
            $put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $f($1.textsize - 2)])); //#3443
        } else { //#3445
            $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f((($1.i * 7) + 11) + $1.textxoffset), $1.textyoffset, $1.textfont, $1.textsize])); //#3445
        } //#3445
    } //#3445
    $puti($1.sbs, (6 * 4) + 3, $get($1.encs, 11)); //#3450
    for (var _2O = 6; _2O <= 11; _2O += 1) { //#3467
        $1.i = _2O; //#3455
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#3456
        $j--; //#3457
        $1.indx = $k[--$j].length; //#3458
        $j -= 2; //#3459
        $1.enc = $get($1.encs, $1.indx); //#3460
        $puti($1.sbs, ($1.i * 4) + 8, $1.enc); //#3461
        if ($1.i == 11) { //#3465
            $put($1.txt, 11, $a([$geti($1.barcode, 11, 1), $f($1.textxoffset + 104), $1.textyoffset, $1.textfont, $f($1.textsize - 2)])); //#3463
        } else { //#3465
            $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(($f(($1.i * 7) + $1.textxoffset)) + 15), $1.textyoffset, $1.textfont, $1.textsize])); //#3465
        } //#3465
    } //#3465
    $puti($1.sbs, 56, $get($1.encs, 12)); //#3470
    $k[$j++] = Infinity; //#3472
    var _2x = $1.sbs; //#3472
    for (var _2y = 0, _2z = _2x.length; _2y < _2z; _2y++) { //#3472
        $k[$j++] = $get(_2x, _2y) - 48; //#3472
    } //#3472
    $1.sbs = $a(); //#3472
    if ($1.includetext) { //#3479
        $k[$j++] = Infinity; //#3474
        for (var _33 = 0, _34 = 4; _33 < _34; _33++) { //#3474
            $k[$j++] = $1.height; //#3474
        } //#3474
        for (var _36 = 0, _37 = 10; _36 < _37; _36++) { //#3474
            $k[$j++] = $f($1.height - 0.075); //#3474
        } //#3474
        $k[$j++] = $1.height; //#3474
        $k[$j++] = $1.height; //#3474
        for (var _3B = 0, _3C = 10; _3B < _3C; _3B++) { //#3474
            $k[$j++] = $f($1.height - 0.075); //#3474
        } //#3474
        for (var _3E = 0, _3F = 4; _3E < _3F; _3E++) { //#3474
            $k[$j++] = $1.height; //#3474
        } //#3474
        $1.bhs = $a(); //#3474
        $k[$j++] = Infinity; //#3475
        $k[$j++] = 0; //#3475
        $k[$j++] = 0; //#3475
        $k[$j++] = 0; //#3475
        $k[$j++] = 0; //#3475
        for (var _3I = 0, _3J = 10; _3I < _3J; _3I++) { //#3475
            $k[$j++] = 0.075; //#3475
        } //#3475
        $k[$j++] = 0; //#3475
        $k[$j++] = 0; //#3475
        for (var _3K = 0, _3L = 10; _3K < _3L; _3K++) { //#3475
            $k[$j++] = 0.075; //#3475
        } //#3475
        $k[$j++] = 0; //#3475
        $k[$j++] = 0; //#3475
        $k[$j++] = 0; //#3475
        $k[$j++] = 0; //#3475
        $1.bbs = $a(); //#3475
    } else { //#3479
        $k[$j++] = Infinity; //#3477
        for (var _3N = 0, _3O = 30; _3N < _3O; _3N++) { //#3477
            $k[$j++] = $1.height; //#3477
        } //#3477
        $1.bhs = $a(); //#3477
        $k[$j++] = Infinity; //#3478
        for (var _3R = 0, _3S = 30; _3R < _3S; _3R++) { //#3478
            $k[$j++] = 0; //#3478
        } //#3478
        $1.bbs = $a(); //#3478
        $1.txt = $a([]); //#3479
    } //#3479
    $1.guardrightypos = 0; //#3481
    if ($ne($1.addon, "")) { //#3502
        $k[$j++] = Infinity; //#3492
        $k[$j++] = 'dontdraw'; //#3489
        $k[$j++] = true; //#3489
        $k[$j++] = 'includetext'; //#3489
        $k[$j++] = true; //#3489
        $k[$j++] = 'height'; //#3489
        $k[$j++] = $f($1.height - 0.15); //#3489
        $k[$j++] = 'textxoffset'; //#3489
        if ($1.addontextxoffset != "unset") { //#3489
            $k[$j++] = $1.addontextxoffset; //#3489
        } else { //#3489
            $k[$j++] = $f(95 + $1.addongap); //#3489
        } //#3489
        if ($1.addontextyoffset != "unset") { //#3490
            $k[$j++] = 'textyoffset'; //#3490
            $k[$j++] = $1.addontextyoffset; //#3490
        } //#3490
        var _3d = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; //#3491
        var _3f = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; //#3492
        $k[$j++] = 'textsize'; //#3492
        $k[$j++] = _3d; //#3492
        $k[$j++] = 'textfont'; //#3492
        $k[$j++] = _3f; //#3492
        $1.addopts = $d(); //#3493
        if ($1.addon.length == 2) { //#3494
            $k[$j++] = $1.addon; //#3494
            $k[$j++] = $1.addopts; //#3494
            bwipp_ean2(); //#3494
        } //#3494
        if ($1.addon.length == 5) { //#3495
            $k[$j++] = $1.addon; //#3495
            $k[$j++] = $1.addopts; //#3495
            bwipp_ean5(); //#3495
        } //#3495
        $1.addcode = $k[--$j]; //#3496
        $k[$j++] = Infinity; //#3497
        $aload($1.sbs); //#3497
        $k[$j++] = $1.addongap; //#3497
        $aload($get($1.addcode, "sbs")); //#3497
        $1.sbs = $a(); //#3497
        $k[$j++] = Infinity; //#3498
        $aload($1.bhs); //#3498
        $forall($get($1.addcode, "bhs"), function() { //#3498
            var _3w = $k[--$j]; //#3498
            $k[$j++] = $f(_3w - 0.075); //#3498
        }); //#3498
        $1.bhs = $a(); //#3498
        $k[$j++] = Infinity; //#3499
        $aload($1.bbs); //#3499
        $forall($get($1.addcode, "bbs"), function() { //#3499
            var _41 = $k[--$j]; //#3499
            $k[$j++] = $f(_41 + 0.075); //#3499
        }); //#3499
        $1.bbs = $a(); //#3499
        $k[$j++] = Infinity; //#3500
        $aload($1.txt); //#3500
        $aload($get($1.addcode, "txt")); //#3500
        $1.txt = $a(); //#3500
        $1.guardrightypos = $f(($1.height * 72) - 6); //#3501
    } //#3501
    var _4E = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["txt", $1.txt],
        ["opt", $1.options],
        ["guardrightpos", 10],
        ["guardrightypos", $1.guardrightypos],
        ["borderbottom", 5]
    ]); //#3514
    $k[$j++] = _4E; //#3517
    if (!$1.dontdraw) { //#3517
        bwipp_renlinear(); //#3517
    } //#3517
}

function bwipp_upce() {
    var $1 = {}; //#3548
    $1.options = $k[--$j]; //#3550
    $1.barcode = $k[--$j]; //#3551
    $1.dontdraw = false; //#3553
    $1.includetext = false; //#3554
    $1.textfont = "OCR-B"; //#3555
    $1.textsize = 12; //#3556
    $1.textxoffset = -7; //#3557
    $1.textyoffset = -4; //#3558
    $1.height = 1; //#3559
    $1.addongap = 12; //#3560
    $1.addontextfont = "unset"; //#3561
    $1.addontextsize = "unset"; //#3562
    $1.addontextxoffset = "unset"; //#3563
    $1.addontextyoffset = "unset"; //#3564
    $forall($1.options, function() { //#3575
        var _3 = $k[--$j]; //#3575
        $1[$k[--$j]] = _3; //#3575
    }); //#3575
    $1.textfont = "" + $1.textfont; //#3577
    $1.textsize = +$1.textsize; //#3578
    $1.textxoffset = +$1.textxoffset; //#3579
    $1.textyoffset = +$1.textyoffset; //#3580
    $1.height = +$1.height; //#3581
    $1.addongap = +$1.addongap; //#3582
    if ($ne($1.addontextfont, "unset")) { //#3583
        $1.addontextfont = "" + $1.addontextfont; //#3583
    } //#3583
    if ($ne($1.addontextsize, "unset")) { //#3584
        $1.addontextsize = +$1.addontextsize; //#3584
    } //#3584
    if ($ne($1.addontextxoffset, "unset")) { //#3585
        $1.addontextxoffset = +$1.addontextxoffset; //#3585
    } //#3585
    if ($ne($1.addontextyoffset, "unset")) { //#3586
        $1.addontextyoffset = +$1.addontextyoffset; //#3586
    } //#3586
    $search($1.barcode, " "); //#3589
    if ($k[--$j]) { //#3595
        $1.barcode = $k[--$j]; //#3590
        $j--; //#3591
        $1.addon = $k[--$j]; //#3592
    } else { //#3595
        $j--; //#3594
        $1.addon = ""; //#3595
    } //#3595
    if (($1.barcode.length == 11) || ($1.barcode.length == 12)) { //#3637
        $forall($1.barcode, function() { //#3605
            var _Q = $k[--$j]; //#3602
            if ((_Q < 48) || (_Q > 57)) { //#3604
                $k[$j++] = 'bwipp.upcEupcAbadCharacter'; //#3603
                $k[$j++] = "UPC-A must contain only digits"; //#3603
                bwipp_raiseerror(); //#3603
            } //#3603
        }); //#3603
        for (var _R = 0, _S = 1; _R < _S; _R++) { //#3632
            var _U = ($1.barcode.length == 12) ? 8 : 7; //#3607
            $1.upcecode = $s(_U); //#3607
            if (($f($get($1.barcode, 3) - 48) <= 2) && $eq($geti($1.barcode, 4, 4), "0000")) { //#3613
                $puti($1.upcecode, 0, $geti($1.barcode, 0, 3)); //#3609
                $puti($1.upcecode, 3, $geti($1.barcode, 8, 3)); //#3610
                $puti($1.upcecode, 6, $geti($1.barcode, 3, 1)); //#3611
                break; //#3612
            } //#3612
            if ($eq($geti($1.barcode, 4, 5), "00000")) { //#3619
                $puti($1.upcecode, 0, $geti($1.barcode, 0, 4)); //#3615
                $puti($1.upcecode, 4, $geti($1.barcode, 9, 2)); //#3616
                $puti($1.upcecode, 6, "3"); //#3617
                break; //#3618
            } //#3618
            if ($eq($geti($1.barcode, 5, 5), "00000")) { //#3625
                $puti($1.upcecode, 0, $geti($1.barcode, 0, 5)); //#3621
                $puti($1.upcecode, 5, $geti($1.barcode, 10, 1)); //#3622
                $puti($1.upcecode, 6, "4"); //#3623
                break; //#3624
            } //#3624
            if (($f($get($1.barcode, 10) - 48) >= 5) && $eq($geti($1.barcode, 6, 4), "0000")) { //#3630
                $puti($1.upcecode, 0, $geti($1.barcode, 0, 6)); //#3627
                $puti($1.upcecode, 6, $geti($1.barcode, 10, 1)); //#3628
                break; //#3629
            } //#3629
            $k[$j++] = 'bwipp.upcEupcAnotCompressible'; //#3631
            $k[$j++] = "UPC-A cannot be converted to a UPC-E"; //#3631
            bwipp_raiseerror(); //#3631
        } //#3631
        if ($1.barcode.length == 12) { //#3635
            $puti($1.upcecode, 7, $geti($1.barcode, 11, 1)); //#3634
        } //#3634
        $1.barcode = $1.upcecode; //#3636
    } //#3636
    if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //#3642
        $k[$j++] = 'bwipp.upcEbadLength'; //#3641
        $k[$j++] = "UPC-E must be 7 or 8 digits"; //#3641
        bwipp_raiseerror(); //#3641
    } //#3641
    var _1I = $1.barcode; //#3643
    for (var _1J = 0, _1K = _1I.length; _1J < _1K; _1J++) { //#3647
        var _1L = $get(_1I, _1J); //#3647
        if ((_1L < 48) || (_1L > 57)) { //#3646
            $k[$j++] = 'bwipp.upcEbadCharacter'; //#3645
            $k[$j++] = "UPC-E must contain only digits"; //#3645
            bwipp_raiseerror(); //#3645
        } //#3645
    } //#3645
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#3650
        $k[$j++] = 'bwipp.upcEbadAddOnLength'; //#3649
        $k[$j++] = "Add-on for UPC-E must be 2 or 5 digits"; //#3649
        bwipp_raiseerror(); //#3649
    } //#3649
    var _1Q = $get($1.barcode, 0); //#3653
    if ((_1Q != 48) && (_1Q != 49)) { //#3655
        $k[$j++] = 'bwipp.upcEbadNumberSystem'; //#3654
        $k[$j++] = "UPC-E must have number system 0 or 1"; //#3654
        bwipp_raiseerror(); //#3654
    } //#3654
    $1.encs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "1312", "1213", "3112", "111", "111111"]); //#3662
    $1.barchars = "0123456789"; //#3665
    $1.mirrormaps = $a(["000111", "001011", "001101", "001110", "010011", "011001", "011100", "010101", "010110", "011010"]); //#3670
    for (var _1T = 0, _1U = 1; _1T < _1U; _1T++) { //#3700
        $1.upcacode = $s(11); //#3674
        if (($get($1.barcode, 6) - 48) <= 2) { //#3681
            $puti($1.upcacode, 0, $geti($1.barcode, 0, 3)); //#3676
            $puti($1.upcacode, 3, $geti($1.barcode, 6, 1)); //#3677
            $puti($1.upcacode, 4, "0000"); //#3678
            $puti($1.upcacode, 8, $geti($1.barcode, 3, 3)); //#3679
            break; //#3680
        } //#3680
        if (($get($1.barcode, 6) - 48) == 3) { //#3687
            $puti($1.upcacode, 0, $geti($1.barcode, 0, 4)); //#3683
            $puti($1.upcacode, 4, "00000"); //#3684
            $puti($1.upcacode, 9, $geti($1.barcode, 4, 2)); //#3685
            break; //#3686
        } //#3686
        if (($get($1.barcode, 6) - 48) == 4) { //#3693
            $puti($1.upcacode, 0, $geti($1.barcode, 0, 5)); //#3689
            $puti($1.upcacode, 5, "00000"); //#3690
            $puti($1.upcacode, 10, $geti($1.barcode, 5, 1)); //#3691
            break; //#3692
        } //#3692
        if (($get($1.barcode, 6) - 48) >= 5) { //#3699
            $puti($1.upcacode, 0, $geti($1.barcode, 0, 6)); //#3695
            $puti($1.upcacode, 6, "0000"); //#3696
            $puti($1.upcacode, 10, $geti($1.barcode, 6, 1)); //#3697
            break; //#3698
        } //#3698
    } //#3698
    $1.checksum = 0; //#3701
    for (var _29 = 0; _29 <= 10; _29 += 1) { //#3710
        $1.i = _29; //#3703
        $1.barchar = $get($1.upcacode, $1.i) - 48; //#3704
        if (($1.i % 2) != 0) { //#3708
            $1.checksum = $1.checksum + $1.barchar; //#3706
        } else { //#3708
            $1.checksum = $1.checksum + ($1.barchar * 3); //#3708
        } //#3708
    } //#3708
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#3711
    if ($1.barcode.length == 8) { //#3716
        if ($get($1.barcode, 7) != ($1.checksum + 48)) { //#3715
            $k[$j++] = 'bwipp.upcEbadCheckDigit'; //#3714
            $k[$j++] = "Incorrect UPC check digit provided"; //#3714
            bwipp_raiseerror(); //#3714
        } //#3714
    } //#3714
    $1.pad = $s(8); //#3717
    $puti($1.pad, 0, $1.barcode); //#3718
    $put($1.pad, 7, $1.checksum + 48); //#3719
    $1.barcode = $1.pad; //#3720
    $1.txt = $a(8); //#3721
    $put($1.txt, 0, $a([$geti($1.barcode, 0, 1), $1.textxoffset, $1.textyoffset, $1.textfont, $f($1.textsize - 2)])); //#3722
    $1.mirrormap = $get($1.mirrormaps, $1.checksum); //#3725
    if ($get($1.barcode, 0) == 48) { //#3739
        $1.invt = $s($1.mirrormap.length); //#3729
        for (var _2l = 0, _2k = $1.mirrormap.length - 1; _2l <= _2k; _2l += 1) { //#3737
            $1.i = _2l; //#3731
            if ($get($1.mirrormap, $1.i) == 48) { //#3735
                $put($1.invt, $1.i, 49); //#3733
            } else { //#3735
                $put($1.invt, $1.i, 48); //#3735
            } //#3735
        } //#3735
        $1.mirrormap = $1.invt; //#3738
    } //#3738
    $1.sbs = $s(33); //#3741
    $puti($1.sbs, 0, $get($1.encs, 10)); //#3744
    for (var _2y = 1; _2y <= 6; _2y += 1) { //#3766
        $1.i = _2y; //#3747
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#3749
        $j--; //#3750
        $1.indx = $k[--$j].length; //#3751
        $j -= 2; //#3752
        $1.enc = $get($1.encs, $1.indx); //#3753
        if ($get($1.mirrormap, $1.i - 1) == 49) { //#3763
            $1.enclen = $1.enc.length; //#3755
            $1.revenc = $s($1.enclen); //#3756
            for (var _3F = 0, _3E = $1.enclen - 1; _3F <= _3E; _3F += 1) { //#3761
                $1.j = _3F; //#3758
                $1.char = $get($1.enc, $1.j); //#3759
                $put($1.revenc, ($1.enclen - $1.j) - 1, $1.char); //#3760
            } //#3760
            $1.enc = $1.revenc; //#3762
        } //#3762
        $puti($1.sbs, (($1.i - 1) * 4) + 3, $1.enc); //#3764
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(((($1.i - 1) * 7) + 11) + $1.textxoffset), $1.textyoffset, $1.textfont, $1.textsize])); //#3765
    } //#3765
    $put($1.txt, 7, $a([$geti($1.barcode, 7, 1), $f(((6 * 7) + 18) + $1.textxoffset), $1.textyoffset, $1.textfont, $f($1.textsize - 2)])); //#3768
    $puti($1.sbs, 27, $get($1.encs, 11)); //#3771
    $k[$j++] = Infinity; //#3773
    var _3n = $1.sbs; //#3773
    for (var _3o = 0, _3p = _3n.length; _3o < _3p; _3o++) { //#3773
        $k[$j++] = $get(_3n, _3o) - 48; //#3773
    } //#3773
    $1.sbs = $a(); //#3773
    if ($1.includetext) { //#3780
        $k[$j++] = Infinity; //#3775
        $k[$j++] = $1.height; //#3775
        $k[$j++] = $1.height; //#3775
        for (var _3v = 0, _3w = 12; _3v < _3w; _3v++) { //#3775
            $k[$j++] = $f($1.height - 0.075); //#3775
        } //#3775
        $k[$j++] = $1.height; //#3775
        $k[$j++] = $1.height; //#3775
        $k[$j++] = $1.height; //#3775
        $1.bhs = $a(); //#3775
        $k[$j++] = Infinity; //#3776
        $k[$j++] = 0; //#3776
        $k[$j++] = 0; //#3776
        for (var _42 = 0, _43 = 12; _42 < _43; _42++) { //#3776
            $k[$j++] = 0.075; //#3776
        } //#3776
        $k[$j++] = 0; //#3776
        $k[$j++] = 0; //#3776
        $k[$j++] = 0; //#3776
        $1.bbs = $a(); //#3776
    } else { //#3780
        $k[$j++] = Infinity; //#3778
        for (var _45 = 0, _46 = 17; _45 < _46; _45++) { //#3778
            $k[$j++] = $1.height; //#3778
        } //#3778
        $1.bhs = $a(); //#3778
        $k[$j++] = Infinity; //#3779
        for (var _49 = 0, _4A = 17; _49 < _4A; _49++) { //#3779
            $k[$j++] = 0; //#3779
        } //#3779
        $1.bbs = $a(); //#3779
        $1.txt = $a([]); //#3780
    } //#3780
    $1.guardrightypos = 0; //#3782
    if ($ne($1.addon, "")) { //#3803
        $k[$j++] = Infinity; //#3793
        $k[$j++] = 'dontdraw'; //#3790
        $k[$j++] = true; //#3790
        $k[$j++] = 'includetext'; //#3790
        $k[$j++] = true; //#3790
        $k[$j++] = 'height'; //#3790
        $k[$j++] = $f($1.height - 0.15); //#3790
        $k[$j++] = 'textxoffset'; //#3790
        if ($1.addontextxoffset != "unset") { //#3790
            $k[$j++] = $1.addontextxoffset; //#3790
        } else { //#3790
            $k[$j++] = $f(51 + $1.addongap); //#3790
        } //#3790
        if ($1.addontextyoffset != "unset") { //#3791
            $k[$j++] = 'textyoffset'; //#3791
            $k[$j++] = $1.addontextyoffset; //#3791
        } //#3791
        var _4L = ($1.addontextsize != "unset") ? $1.addontextsize : $1.textsize; //#3792
        var _4N = $ne($1.addontextfont, "unset") ? $1.addontextfont : $1.textfont; //#3793
        $k[$j++] = 'textsize'; //#3793
        $k[$j++] = _4L; //#3793
        $k[$j++] = 'textfont'; //#3793
        $k[$j++] = _4N; //#3793
        $1.addopts = $d(); //#3794
        if ($1.addon.length == 2) { //#3795
            $k[$j++] = $1.addon; //#3795
            $k[$j++] = $1.addopts; //#3795
            bwipp_ean2(); //#3795
        } //#3795
        if ($1.addon.length == 5) { //#3796
            $k[$j++] = $1.addon; //#3796
            $k[$j++] = $1.addopts; //#3796
            bwipp_ean5(); //#3796
        } //#3796
        $1.addcode = $k[--$j]; //#3797
        $k[$j++] = Infinity; //#3798
        $aload($1.sbs); //#3798
        $k[$j++] = $1.addongap; //#3798
        $aload($get($1.addcode, "sbs")); //#3798
        $1.sbs = $a(); //#3798
        $k[$j++] = Infinity; //#3799
        $aload($1.bhs); //#3799
        $forall($get($1.addcode, "bhs"), function() { //#3799
            var _4e = $k[--$j]; //#3799
            $k[$j++] = $f(_4e - 0.075); //#3799
        }); //#3799
        $1.bhs = $a(); //#3799
        $k[$j++] = Infinity; //#3800
        $aload($1.bbs); //#3800
        $forall($get($1.addcode, "bbs"), function() { //#3800
            var _4j = $k[--$j]; //#3800
            $k[$j++] = $f(_4j + 0.075); //#3800
        }); //#3800
        $1.bbs = $a(); //#3800
        $k[$j++] = Infinity; //#3801
        $aload($1.txt); //#3801
        $aload($get($1.addcode, "txt")); //#3801
        $1.txt = $a(); //#3801
        $1.guardrightypos = $f(($1.height * 72) - 6); //#3802
    } //#3802
    var _4w = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["txt", $1.txt],
        ["opt", $1.options],
        ["guardrightpos", 10],
        ["guardrightypos", $1.guardrightypos],
        ["borderbottom", 5]
    ]); //#3815
    $k[$j++] = _4w; //#3818
    if (!$1.dontdraw) { //#3818
        bwipp_renlinear(); //#3818
    } //#3818
}

function bwipp_isbn() {
    var $1 = {}; //#3848
    $1.options = $k[--$j]; //#3850
    $1.barcode = $k[--$j]; //#3851
    $1.dontdraw = false; //#3853
    $1.includetext = false; //#3854
    $1.isbntextfont = 'OCR-A'; //#3855
    $1.isbntextsize = 8; //#3856
    $1.isbntextxoffset = "unset"; //#3857
    $1.isbntextyoffset = "unset"; //#3858
    $1.height = 1; //#3859
    $1.addongap = 12; //#3860
    $1.legacy = false; //#3861
    $forall($1.options, function() { //#3872
        var _3 = $k[--$j]; //#3872
        $1[$k[--$j]] = _3; //#3872
    }); //#3872
    $1.isbntextfont = "" + $1.isbntextfont; //#3874
    $1.isbntextsize = +$1.isbntextsize; //#3875
    if ($ne($1.isbntextxoffset, "unset")) { //#3876
        $1.isbntextxoffset = +$1.isbntextxoffset; //#3876
    } //#3876
    if ($ne($1.isbntextyoffset, "unset")) { //#3877
        $1.isbntextyoffset = +$1.isbntextyoffset; //#3877
    } //#3877
    $1.height = +$1.height; //#3878
    $1.addongap = +$1.addongap; //#3879
    $search($1.barcode, " "); //#3882
    if ($k[--$j]) { //#3888
        $1.barcode = $k[--$j]; //#3883
        $j--; //#3884
        $1.addon = $k[--$j]; //#3885
    } else { //#3888
        $j--; //#3887
        $1.addon = ""; //#3888
    } //#3888
    if ((($1.barcode.length != 15) && ($1.barcode.length != 17)) && (($1.barcode.length != 11) && ($1.barcode.length != 13))) { //#3895
        $k[$j++] = 'bwipp.isbnBadLength'; //#3894
        $k[$j++] = "ISBN-13 must be 15 or 17 characters including dashes. ISBN-10 must be 11 or 13 characters including dashes"; //#3894
        bwipp_raiseerror(); //#3894
    } //#3894
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#3898
        $k[$j++] = 'bwipp.isbnBadAddOnLength'; //#3897
        $k[$j++] = "Add-on for ISBN must be 2 or 5 digits"; //#3897
        bwipp_raiseerror(); //#3897
    } //#3897
    if ($1.barcode.length >= 15) { //#3962
        var _Q = $geti($1.barcode, 0, 4); //#3900
        if ($ne(_Q, "978-") && $ne(_Q, "979-")) { //#3902
            $k[$j++] = 'bwipp.isbn13badPrefix'; //#3901
            $k[$j++] = "ISBN-13 prefix must be 978- or 979-"; //#3901
            bwipp_raiseerror(); //#3901
        } //#3901
        $1.wasdash = false; //#3903
        $1.numdash = 0; //#3903
        $1.numdigit = 0; //#3903
        var _S = $geti($1.barcode, 5, 9); //#3904
        for (var _T = 0, _U = _S.length; _T < _U; _T++) { //#3917
            var _V = $get(_S, _T); //#3917
            $k[$j++] = _V; //#3912
            if (_V == 45) { //#3912
                if ($1.wasdash) { //#3909
                    $k[$j++] = 'bwipp.isbn13adjacentDashes'; //#3908
                    $k[$j++] = "ISBN-13 does not permit adjacent dashes"; //#3908
                    bwipp_raiseerror(); //#3908
                } //#3908
                $1.wasdash = true; //#3910
                $1.numdash = $1.numdash + 1; //#3911
            } //#3911
            var _Y = $k[--$j]; //#3913
            if ((_Y >= 48) && (_Y <= 57)) { //#3916
                $1.wasdash = false; //#3914
                $1.numdigit = $1.numdigit + 1; //#3915
            } //#3915
        } //#3915
        if (($1.numdash != 2) || ($1.numdigit != 7)) { //#3920
            $k[$j++] = 'bwipp.isbn13numDashesDigits'; //#3919
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-13"; //#3919
            bwipp_raiseerror(); //#3919
        } //#3919
        var _d = $get($1.barcode, 14); //#3921
        if ((_d < 48) || (_d > 57)) { //#3923
            $k[$j++] = 'bwipp.isbn13character15'; //#3922
            $k[$j++] = "ISBN-13 character 15 must be a digit"; //#3922
            bwipp_raiseerror(); //#3922
        } //#3922
        if ($1.barcode.length == 17) { //#3931
            if ($ne($geti($1.barcode, 15, 1), "-")) { //#3927
                $k[$j++] = 'bwipp.isbn13character16'; //#3926
                $k[$j++] = "ISBN-13 penultimate character must be a dash"; //#3926
                bwipp_raiseerror(); //#3926
            } //#3926
            var _i = $get($1.barcode, 16); //#3928
            if ((_i < 48) || (_i > 57)) { //#3930
                $k[$j++] = 'bwipp.isbn13character17'; //#3929
                $k[$j++] = "ISBN-13 final character must be a digit"; //#3929
                bwipp_raiseerror(); //#3929
            } //#3929
        } //#3929
    } else { //#3962
        var _k = $get($1.barcode, 0); //#3933
        if ((_k < 48) || (_k > 57)) { //#3935
            $k[$j++] = 'bwipp.isbn10FirstDigit'; //#3934
            $k[$j++] = "ISBN-10 first character must be a digit"; //#3934
            bwipp_raiseerror(); //#3934
        } //#3934
        $1.wasdash = false; //#3936
        $1.numdash = 0; //#3936
        $1.numdigit = 0; //#3936
        var _m = $geti($1.barcode, 1, 9); //#3937
        for (var _n = 0, _o = _m.length; _n < _o; _n++) { //#3950
            var _p = $get(_m, _n); //#3950
            $k[$j++] = _p; //#3945
            if (_p == 45) { //#3945
                if ($1.wasdash) { //#3942
                    $k[$j++] = 'bwipp.isbn10adjacentDashes'; //#3941
                    $k[$j++] = "ISBN-10 does not permit adjacent dashes"; //#3941
                    bwipp_raiseerror(); //#3941
                } //#3941
                $1.wasdash = true; //#3943
                $1.numdash = $1.numdash + 1; //#3944
            } //#3944
            var _s = $k[--$j]; //#3946
            if ((_s >= 48) && (_s <= 57)) { //#3949
                $1.wasdash = false; //#3947
                $1.numdigit = $1.numdigit + 1; //#3948
            } //#3948
        } //#3948
        if (($1.numdash != 2) || ($1.numdigit != 7)) { //#3953
            $k[$j++] = 'bwipp.isbn10numDashesDigits'; //#3952
            $k[$j++] = "Incorrect number of dashes and digits for ISBN-10"; //#3952
            bwipp_raiseerror(); //#3952
        } //#3952
        var _x = $get($1.barcode, 10); //#3954
        if ((_x < 48) || (_x > 57)) { //#3956
            $k[$j++] = 'bwipp.isbn10character11'; //#3955
            $k[$j++] = "ISBN-10 character 11 must be a digit"; //#3955
            bwipp_raiseerror(); //#3955
        } //#3955
        if ($1.barcode.length == 13) { //#3964
            if ($ne($geti($1.barcode, 11, 1), "-")) { //#3960
                $k[$j++] = 'bwipp.isbn10character12'; //#3959
                $k[$j++] = "ISBN-10 penultimate character must be a dash"; //#3959
                bwipp_raiseerror(); //#3959
            } //#3959
            var _12 = $get($1.barcode, 12); //#3961
            if (((_12 < 48) || (_12 > 57)) && (_12 != 88)) { //#3963
                $k[$j++] = 'bwipp.isbn10character13'; //#3962
                $k[$j++] = "ISBN-10 final character must be a digit or X"; //#3962
                bwipp_raiseerror(); //#3962
            } //#3962
        } //#3962
    } //#3962
    $1.isbntxt = $1.barcode; //#3967
    if ($1.isbntxt.length <= 13) { //#3993
        $1.isbn = $s(10); //#3971
        $1.checksum = 0; //#3972
        $1.i = 0; //#3973
        $1.n = 0; //#3973
        for (;;) { //#3985
            $1.isbnchar = $f($get($1.isbntxt, $1.i) - 48); //#3975
            if ($1.isbnchar != -3) { //#3982
                $put($1.isbn, $1.n, $f($1.isbnchar + 48)); //#3977
                if ($1.n < 9) { //#3980
                    $1.checksum = $f($1.checksum + ((10 - $1.n) * $1.isbnchar)); //#3979
                } //#3979
                $1.n = $1.n + 1; //#3981
            } //#3981
            $1.i = $1.i + 1; //#3983
            if ($1.i == $1.isbntxt.length) { //#3984
                break; //#3984
            } //#3984
        } //#3984
        var _1M = ($f(11 - ($1.checksum % 11))) % 11; //#3986
        $k[$j++] = 'checksum'; //#3986
        $k[$j++] = _1M; //#3986
        if (_1M == 10) { //#3986
            $j--; //#3986
            $k[$j++] = 40; //#3986
        } //#3986
        var _1N = $k[--$j]; //#3986
        $1[$k[--$j]] = $f(_1N + 48); //#3986
        $1.isbn = $geti($1.isbn, 0, 9); //#3987
        if ($1.isbntxt.length == 13) { //#3992
            if ($get($1.isbntxt, 12) != $1.checksum) { //#3991
                $k[$j++] = 'bwipp.isbn10badCheckDigit'; //#3990
                $k[$j++] = "Incorrect ISBN-10 check digit provided"; //#3990
                bwipp_raiseerror(); //#3990
            } //#3990
        } //#3990
    } //#3990
    if ((!$1.legacy) || ($1.isbntxt.length >= 15)) { //#4029
        if ($1.isbntxt.length <= 13) { //#4003
            $1.pad = $s(15); //#3999
            $puti($1.pad, 0, "978-"); //#4000
            $puti($1.pad, 4, $geti($1.isbntxt, 0, 11)); //#4001
            $1.isbntxt = $1.pad; //#4002
        } //#4002
        $1.isbn = $s(13); //#4006
        $1.checksum = 0; //#4007
        $1.i = 0; //#4008
        $1.n = 0; //#4008
        for (;;) { //#4020
            $1.isbnchar = $get($1.isbntxt, $1.i) - 48; //#4010
            if ($1.isbnchar != -3) { //#4017
                $put($1.isbn, $1.n, $1.isbnchar + 48); //#4012
                if ($1.n < 12) { //#4015
                    $k[$j++] = 'checksum'; //#4014
                    $k[$j++] = $1.isbnchar; //#4014
                    if (($1.n % 2) != 0) { //#4014
                        var _1p = $k[--$j]; //#4014
                        $k[$j++] = _1p * 3; //#4014
                    } //#4014
                    var _1r = $k[--$j]; //#4014
                    $1[$k[--$j]] = $f(_1r + $1.checksum); //#4014
                } //#4014
                $1.n = $1.n + 1; //#4016
            } //#4016
            $1.i = $1.i + 1; //#4018
            if ($1.i == $1.isbntxt.length) { //#4019
                break; //#4019
            } //#4019
        } //#4019
        $1.checksum = ((10 - ($1.checksum % 10)) % 10) + 48; //#4021
        $1.isbn = $geti($1.isbn, 0, 12); //#4022
        if ($1.isbntxt.length == 17) { //#4027
            if ($get($1.isbntxt, 16) != $1.checksum) { //#4026
                $k[$j++] = 'bwipp.isbn13badCheckDigit'; //#4025
                $k[$j++] = "Incorrect ISBN-13 check digit provided"; //#4025
                bwipp_raiseerror(); //#4025
            } //#4025
        } //#4025
    } //#4025
    var _25 = ($1.isbn.length == 12) ? 22 : 18; //#4032
    $1.pad = $s(_25); //#4032
    $puti($1.pad, 0, "ISBN "); //#4033
    $puti($1.pad, 5, $1.isbntxt); //#4034
    $put($1.pad, $1.pad.length - 2, 45); //#4035
    $put($1.pad, $1.pad.length - 1, $1.checksum); //#4036
    $1.isbntxt = $1.pad; //#4037
    $1.barcode = $s(12); //#4040
    if ($1.isbn.length == 9) { //#4045
        $puti($1.barcode, 0, "978"); //#4042
        $puti($1.barcode, 3, $1.isbn); //#4043
    } else { //#4045
        $puti($1.barcode, 0, $1.isbn); //#4045
    } //#4045
    if ($ne($1.addon, "")) { //#4055
        var _2P = $s((12 + $1.addon.length) + 1); //#4050
        $puti(_2P, 0, $1.barcode); //#4051
        $puti(_2P, 12, " "); //#4052
        $puti(_2P, 13, $1.addon); //#4053
        $1.barcode = _2P; //#4054
    } //#4054
    $put($1.options, "dontdraw", true); //#4058
    $put($1.options, "addongap", $1.addongap); //#4059
    $k[$j++] = 'args'; //#4060
    $k[$j++] = $1.barcode; //#4060
    $k[$j++] = $1.options; //#4060
    bwipp_ean13(); //#4060
    var _2X = $k[--$j]; //#4060
    $1[$k[--$j]] = _2X; //#4060
    if ($1.includetext) { //#4079
        if ($1.isbntextxoffset == "unset") { //#4066
            $k[$j++] = 'isbntextxoffset'; //#4065
            if ($1.isbn.length == 9) { //#4065
                $k[$j++] = -1; //#4065
            } else { //#4065
                $k[$j++] = -12; //#4065
            } //#4065
            var _2c = $k[--$j]; //#4065
            $1[$k[--$j]] = _2c; //#4065
        } //#4065
        if ($1.isbntextyoffset == "unset") { //#4069
            $1.isbntextyoffset = $f(($1.height * 72) + 3); //#4068
        } //#4068
        var _2h = $get($1.args, "txt") !== undefined; //#4070
        if (_2h) { //#4077
            $1.txt = $get($1.args, "txt"); //#4071
            $1.newtxt = $a($1.txt.length + 1); //#4072
            $puti($1.newtxt, 0, $1.txt); //#4073
            $put($1.newtxt, $1.newtxt.length - 1, $a([$1.isbntxt, $1.isbntextxoffset, $1.isbntextyoffset, $1.isbntextfont, $1.isbntextsize])); //#4074
            $put($1.args, "txt", $1.newtxt); //#4075
        } else { //#4077
            $put($1.args, "txt", $a([$a([$1.isbntxt, $1.isbntextxoffset, $1.isbntextyoffset, $1.isbntextfont, $1.isbntextsize])])); //#4077
        } //#4077
    } //#4077
    $put($1.args, "opt", $1.options); //#4081
    $k[$j++] = $1.args; //#4084
    if (!$1.dontdraw) { //#4084
        bwipp_renlinear(); //#4084
    } //#4084
}

function bwipp_ismn() {
    var $1 = {}; //#4114
    $1.options = $k[--$j]; //#4116
    $1.barcode = $k[--$j]; //#4117
    $1.dontdraw = false; //#4119
    $1.includetext = false; //#4120
    $1.ismntextfont = 'OCR-A'; //#4121
    $1.ismntextsize = 8; //#4122
    $1.ismntextxoffset = "unset"; //#4123
    $1.ismntextyoffset = "unset"; //#4124
    $1.height = 1; //#4125
    $1.addongap = 12; //#4126
    $1.legacy = false; //#4127
    $forall($1.options, function() { //#4138
        var _3 = $k[--$j]; //#4138
        $1[$k[--$j]] = _3; //#4138
    }); //#4138
    $1.ismntextfont = "" + $1.ismntextfont; //#4140
    $1.ismntextsize = +$1.ismntextsize; //#4141
    if ($ne($1.ismntextxoffset, "unset")) { //#4142
        $1.ismntextxoffset = +$1.ismntextxoffset; //#4142
    } //#4142
    if ($ne($1.ismntextyoffset, "unset")) { //#4143
        $1.ismntextyoffset = +$1.ismntextyoffset; //#4143
    } //#4143
    $1.height = +$1.height; //#4144
    $1.addongap = +$1.addongap; //#4145
    $search($1.barcode, " "); //#4148
    if ($k[--$j]) { //#4154
        $1.barcode = $k[--$j]; //#4149
        $j--; //#4150
        $1.addon = $k[--$j]; //#4151
    } else { //#4154
        $j--; //#4153
        $1.addon = ""; //#4154
    } //#4154
    if ((($1.barcode.length != 15) && ($1.barcode.length != 17)) && (($1.barcode.length != 11) && ($1.barcode.length != 13))) { //#4161
        $k[$j++] = 'bwipp.ismnBadLength'; //#4160
        $k[$j++] = "ISMN-13 must be 15 or 17 characters including dashes. ISMN-10 must be 11 or 13 characters including dashes"; //#4160
        bwipp_raiseerror(); //#4160
    } //#4160
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#4164
        $k[$j++] = 'bwipp.ismnBadAddOnLength'; //#4163
        $k[$j++] = "Add-on for ISMN must be 2 or 5 digits"; //#4163
        bwipp_raiseerror(); //#4163
    } //#4163
    if ($1.barcode.length >= 15) { //#4231
        if ($ne($geti($1.barcode, 0, 4), "979-")) { //#4168
            $k[$j++] = 'bwipp.ismn13badPrefix'; //#4167
            $k[$j++] = "ISMN-13 prefix must be 979-"; //#4167
            bwipp_raiseerror(); //#4167
        } //#4167
        $1.wasdash = false; //#4169
        $1.numdash = 0; //#4169
        $1.numdigit = 0; //#4169
        var _S = $geti($1.barcode, 5, 9); //#4170
        for (var _T = 0, _U = _S.length; _T < _U; _T++) { //#4183
            var _V = $get(_S, _T); //#4183
            $k[$j++] = _V; //#4178
            if (_V == 45) { //#4178
                if ($1.wasdash) { //#4175
                    $k[$j++] = 'bwipp.ismn13adjacentDashes'; //#4174
                    $k[$j++] = "ISMN-13 does not permit adjacent dashes"; //#4174
                    bwipp_raiseerror(); //#4174
                } //#4174
                $1.wasdash = true; //#4176
                $1.numdash = $1.numdash + 1; //#4177
            } //#4177
            var _Y = $k[--$j]; //#4179
            if ((_Y >= 48) && (_Y <= 57)) { //#4182
                $1.wasdash = false; //#4180
                $1.numdigit = $1.numdigit + 1; //#4181
            } //#4181
        } //#4181
        if (($1.numdash != 2) || ($1.numdigit != 7)) { //#4186
            $k[$j++] = 'bwipp.ismn13numDashesDigits'; //#4185
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-13"; //#4185
            bwipp_raiseerror(); //#4185
        } //#4185
        var _d = $get($1.barcode, 14); //#4187
        if ((_d < 48) || (_d > 57)) { //#4189
            $k[$j++] = 'bwipp.ismn13character15'; //#4188
            $k[$j++] = "ISMN-13 character 15 must be a digit"; //#4188
            bwipp_raiseerror(); //#4188
        } //#4188
        if ($1.barcode.length == 17) { //#4197
            if ($ne($geti($1.barcode, 15, 1), "-")) { //#4193
                $k[$j++] = 'bwipp.ismn13character16'; //#4192
                $k[$j++] = "ISMN-13 penultimate character must be a dash"; //#4192
                bwipp_raiseerror(); //#4192
            } //#4192
            var _i = $get($1.barcode, 16); //#4194
            if ((_i < 48) || (_i > 57)) { //#4196
                $k[$j++] = 'bwipp.ismn13character17'; //#4195
                $k[$j++] = "ISMN-13 final character must be a digit"; //#4195
                bwipp_raiseerror(); //#4195
            } //#4195
        } //#4195
    } else { //#4231
        if ($ne($geti($1.barcode, 0, 2), "M-")) { //#4201
            $k[$j++] = 'bwipp.ismn10badPrefix'; //#4200
            $k[$j++] = "ISMN-10 prefix must be M-"; //#4200
            bwipp_raiseerror(); //#4200
        } //#4200
        var _m = $get($1.barcode, 2); //#4202
        if ((_m < 48) || (_m > 57)) { //#4204
            $k[$j++] = 'bwipp.ismn10character3'; //#4203
            $k[$j++] = "ISMN-10 character 3 must be a digit"; //#4203
            bwipp_raiseerror(); //#4203
        } //#4203
        $1.wasdash = false; //#4205
        $1.numdash = 0; //#4205
        $1.numdigit = 0; //#4205
        var _o = $geti($1.barcode, 3, 7); //#4206
        for (var _p = 0, _q = _o.length; _p < _q; _p++) { //#4219
            var _r = $get(_o, _p); //#4219
            $k[$j++] = _r; //#4214
            if (_r == 45) { //#4214
                if ($1.wasdash) { //#4211
                    $k[$j++] = 'bwipp.ismn10adjacentDashes'; //#4210
                    $k[$j++] = "ISMN-10 does not permit adjacent dashes"; //#4210
                    bwipp_raiseerror(); //#4210
                } //#4210
                $1.wasdash = true; //#4212
                $1.numdash = $1.numdash + 1; //#4213
            } //#4213
            var _u = $k[--$j]; //#4215
            if ((_u >= 48) && (_u <= 57)) { //#4218
                $1.wasdash = false; //#4216
                $1.numdigit = $1.numdigit + 1; //#4217
            } //#4217
        } //#4217
        if (($1.numdash != 1) || ($1.numdigit != 6)) { //#4222
            $k[$j++] = 'bwipp.ismn10numDashesDigits'; //#4221
            $k[$j++] = "Incorrect number of dashes and digits for ISMN-10"; //#4221
            bwipp_raiseerror(); //#4221
        } //#4221
        var _z = $get($1.barcode, 10); //#4223
        if ((_z < 48) || (_z > 57)) { //#4225
            $k[$j++] = 'bwipp.ismn10character11'; //#4224
            $k[$j++] = "ISMN-10 character 11 must be a digit"; //#4224
            bwipp_raiseerror(); //#4224
        } //#4224
        if ($1.barcode.length == 13) { //#4233
            if ($ne($geti($1.barcode, 11, 1), "-")) { //#4229
                $k[$j++] = 'bwipp.ismn10character12'; //#4228
                $k[$j++] = "ISMN-10 penultimate character must be a dash"; //#4228
                bwipp_raiseerror(); //#4228
            } //#4228
            var _14 = $get($1.barcode, 12); //#4230
            if (((_14 < 48) || (_14 > 57)) && (_14 != 88)) { //#4232
                $k[$j++] = 'bwipp.ismn10character13'; //#4231
                $k[$j++] = "ISMN-10 final character must be a digit or X"; //#4231
                bwipp_raiseerror(); //#4231
            } //#4231
        } //#4231
    } //#4231
    $1.ismntxt = $1.barcode; //#4236
    $1.legacytxt = ""; //#4239
    if ($1.ismntxt.length <= 13) { //#4246
        $1.legacytxt = $1.ismntxt; //#4241
        $1.pad = $s($1.ismntxt.length + 4); //#4242
        $puti($1.pad, 0, "979-0-"); //#4243
        $puti($1.pad, 6, $geti($1.ismntxt, 2, $1.ismntxt.length - 2)); //#4244
        $1.ismntxt = $1.pad; //#4245
    } //#4245
    $1.ismn = $s(13); //#4249
    $1.checksum = 0; //#4250
    $1.i = 0; //#4251
    $1.n = 0; //#4251
    for (;;) { //#4267
        $1.ismnchar = $get($1.ismntxt, $1.i) - 48; //#4253
        if ($1.ismnchar != -3) { //#4264
            $put($1.ismn, $1.n, $1.ismnchar + 48); //#4255
            if ($1.n < 12) { //#4262
                if (($1.n % 2) == 0) { //#4260
                    $1.checksum = $1.ismnchar + $1.checksum; //#4258
                } else { //#4260
                    $1.checksum = ($1.ismnchar * 3) + $1.checksum; //#4260
                } //#4260
            } //#4260
            $1.n = $1.n + 1; //#4263
        } //#4263
        $1.i = $1.i + 1; //#4265
        if ($1.i == $1.ismntxt.length) { //#4266
            break; //#4266
        } //#4266
    } //#4266
    $1.checksum = ((10 - ($1.checksum % 10)) % 10) + 48; //#4268
    if (($1.barcode.length == 13) || ($1.barcode.length == 17)) { //#4275
        var _1b = $1.barcode; //#4272
        if ($get(_1b, _1b.length - 1) != $1.checksum) { //#4274
            $k[$j++] = 'bwipp.ismnBadCheckDigit'; //#4273
            $k[$j++] = "Incorrect ISMN check digit provided"; //#4273
            bwipp_raiseerror(); //#4273
        } //#4273
    } //#4273
    if ($1.legacy && $ne($1.legacytxt, "")) { //#4282
        $1.ismntxt = $1.legacytxt; //#4279
        $1.pad = $s(18); //#4280
    } else { //#4282
        $1.pad = $s(22); //#4282
    } //#4282
    $puti($1.pad, 0, "ISMN "); //#4284
    $puti($1.pad, 5, $1.ismntxt); //#4285
    $put($1.pad, $1.pad.length - 2, 45); //#4286
    $put($1.pad, $1.pad.length - 1, $1.checksum); //#4287
    $1.ismntxt = $1.pad; //#4288
    $1.barcode = $geti($1.ismn, 0, 12); //#4291
    if ($ne($1.addon, "")) { //#4300
        var _1w = $s((12 + $1.addon.length) + 1); //#4295
        $puti(_1w, 0, $1.barcode); //#4296
        $puti(_1w, 12, " "); //#4297
        $puti(_1w, 13, $1.addon); //#4298
        $1.barcode = _1w; //#4299
    } //#4299
    $put($1.options, "dontdraw", true); //#4303
    $put($1.options, "addongap", $1.addongap); //#4304
    $k[$j++] = 'args'; //#4305
    $k[$j++] = $1.barcode; //#4305
    $k[$j++] = $1.options; //#4305
    bwipp_ean13(); //#4305
    var _24 = $k[--$j]; //#4305
    $1[$k[--$j]] = _24; //#4305
    if ($1.includetext) { //#4324
        if ($1.ismntextxoffset == "unset") { //#4311
            $k[$j++] = 'ismntextxoffset'; //#4310
            if ($1.ismntxt.length == 18) { //#4310
                $k[$j++] = -1; //#4310
            } else { //#4310
                $k[$j++] = -12; //#4310
            } //#4310
            var _29 = $k[--$j]; //#4310
            $1[$k[--$j]] = _29; //#4310
        } //#4310
        if ($1.ismntextyoffset == "unset") { //#4314
            $1.ismntextyoffset = $f(($1.height * 72) + 3); //#4313
        } //#4313
        var _2E = $get($1.args, "txt") !== undefined; //#4315
        if (_2E) { //#4322
            $1.txt = $get($1.args, "txt"); //#4316
            $1.newtxt = $a($1.txt.length + 1); //#4317
            $puti($1.newtxt, 0, $1.txt); //#4318
            $put($1.newtxt, $1.newtxt.length - 1, $a([$1.ismntxt, $1.ismntextxoffset, $1.ismntextyoffset, $1.ismntextfont, $1.ismntextsize])); //#4319
            $put($1.args, "txt", $1.newtxt); //#4320
        } else { //#4322
            $put($1.args, "txt", $a([$a([$1.ismntxt, $1.ismntextxoffset, $1.ismntextyoffset, $1.ismntextfont, $1.ismntextsize])])); //#4322
        } //#4322
    } //#4322
    $put($1.args, "opt", $1.options); //#4326
    $k[$j++] = $1.args; //#4329
    if (!$1.dontdraw) { //#4329
        bwipp_renlinear(); //#4329
    } //#4329
}

function bwipp_issn() {
    var $1 = {}; //#4359
    $1.options = $k[--$j]; //#4361
    $1.issntxt = $k[--$j]; //#4362
    $1.dontdraw = false; //#4364
    $1.includetext = false; //#4365
    $1.issntextfont = 'OCR-A'; //#4366
    $1.issntextsize = 8; //#4367
    $1.issntextxoffset = "unset"; //#4368
    $1.issntextyoffset = "unset"; //#4369
    $1.height = 1; //#4370
    $1.addongap = 12; //#4371
    $forall($1.options, function() { //#4382
        var _3 = $k[--$j]; //#4382
        $1[$k[--$j]] = _3; //#4382
    }); //#4382
    $1.issntextfont = "" + $1.issntextfont; //#4384
    $1.issntextsize = +$1.issntextsize; //#4385
    if ($ne($1.issntextxoffset, "unset")) { //#4386
        $1.issntextxoffset = +$1.issntextxoffset; //#4386
    } //#4386
    if ($ne($1.issntextyoffset, "unset")) { //#4387
        $1.issntextyoffset = +$1.issntextyoffset; //#4387
    } //#4387
    $1.height = +$1.height; //#4388
    $1.addongap = +$1.addongap; //#4389
    $search($1.issntxt, " "); //#4392
    if ($k[--$j]) { //#4398
        $1.issntxt = $k[--$j]; //#4393
        $j--; //#4394
        $1.seqvar = $k[--$j]; //#4395
    } else { //#4398
        $j--; //#4397
        $1.seqvar = "00"; //#4398
    } //#4398
    $search($1.seqvar, " "); //#4402
    if ($k[--$j]) { //#4408
        $1.seqvar = $k[--$j]; //#4403
        $j--; //#4404
        $1.addon = $k[--$j]; //#4405
    } else { //#4408
        $j--; //#4407
        $1.addon = ""; //#4408
    } //#4408
    if (($1.issntxt.length != 8) && ($1.issntxt.length != 9)) { //#4414
        $k[$j++] = 'bwipp.issnBadLength'; //#4413
        $k[$j++] = "ISSN must be 8 or 9 characters including dash, in the format XXXX-XXXX"; //#4413
        bwipp_raiseerror(); //#4413
    } //#4413
    var _O = $geti($1.issntxt, 0, 4); //#4415
    for (var _P = 0, _Q = _O.length; _P < _Q; _P++) { //#4419
        var _R = $get(_O, _P); //#4419
        if ((_R < 48) || (_R > 57)) { //#4418
            $k[$j++] = 'bwipp.issnFirstThroughFourthNotNumeric'; //#4417
            $k[$j++] = "ISSN first four characters must be numeral characters"; //#4417
            bwipp_raiseerror(); //#4417
        } //#4417
    } //#4417
    if ($ne($geti($1.issntxt, 4, 1), "-")) { //#4422
        $k[$j++] = 'bwipp.issnNeedsDash'; //#4421
        $k[$j++] = "ISSN fifth character must be a dash"; //#4421
        bwipp_raiseerror(); //#4421
    } //#4421
    var _V = $geti($1.issntxt, 5, 3); //#4423
    for (var _W = 0, _X = _V.length; _W < _X; _W++) { //#4427
        var _Y = $get(_V, _W); //#4427
        if ((_Y < 48) || (_Y > 57)) { //#4426
            $k[$j++] = 'bwipp.issnSixthThroughEighthNotNumeric'; //#4425
            $k[$j++] = "ISSN sixth through eighth characters must be numerals"; //#4425
            bwipp_raiseerror(); //#4425
        } //#4425
    } //#4425
    if ($1.issntxt.length == 9) { //#4432
        var _b = $get($1.issntxt, 8); //#4429
        if (((_b < 48) || (_b > 57)) && (_b != 88)) { //#4431
            $k[$j++] = 'bwipp.issnNinthCharacterBadFormat'; //#4430
            $k[$j++] = "ISSN ninth character must be a number or the character X"; //#4430
            bwipp_raiseerror(); //#4430
        } //#4430
    } //#4430
    if ($1.seqvar.length != 2) { //#4435
        $k[$j++] = 'bwipp.issnBadSequenceVariantLength'; //#4434
        $k[$j++] = "Sequence variant for ISSN must be 2 digits"; //#4434
        bwipp_raiseerror(); //#4434
    } //#4434
    $forall($1.seqvar, function() { //#4440
        var _e = $k[--$j]; //#4437
        if ((_e < 48) || (_e > 57)) { //#4439
            $k[$j++] = 'bwipp.issnSequenceVariantBadCharacter'; //#4438
            $k[$j++] = "Sequence variant for ISSN must contain only digits"; //#4438
            bwipp_raiseerror(); //#4438
        } //#4438
    }); //#4438
    if ((($1.addon.length != 0) && ($1.addon.length != 2)) && ($1.addon.length != 5)) { //#4443
        $k[$j++] = 'bwipp.issnBadAddOnLength'; //#4442
        $k[$j++] = "Add-on for ISSN must be 2 or 5 digits"; //#4442
        bwipp_raiseerror(); //#4442
    } //#4442
    $1.issn = $s(8); //#4446
    $1.checksum = 0; //#4447
    $1.i = 0; //#4448
    $1.n = 0; //#4448
    for (;;) { //#4460
        $1.issnchar = $f($get($1.issntxt, $1.i) - 48); //#4450
        if ($1.issnchar != -3) { //#4457
            $put($1.issn, $1.n, $f($1.issnchar + 48)); //#4452
            if ($1.n < 7) { //#4455
                $1.checksum = $f($1.checksum + ($1.issnchar * (8 - $1.n))); //#4454
            } //#4454
            $1.n = $1.n + 1; //#4456
        } //#4456
        $1.i = $1.i + 1; //#4458
        if ($1.i == $1.issntxt.length) { //#4459
            break; //#4459
        } //#4459
    } //#4459
    $1.checksum = ($f(11 - ($1.checksum % 11))) % 11; //#4461
    var _10 = $f($1.checksum + 48); //#4462
    $k[$j++] = 'checksum'; //#4462
    $k[$j++] = _10; //#4462
    if (_10 == 58) { //#4462
        $j--; //#4462
        $k[$j++] = 88; //#4462
    } //#4462
    var _11 = $k[--$j]; //#4462
    $1[$k[--$j]] = _11; //#4462
    if ($1.issntxt.length == 9) { //#4467
        if ($get($1.issntxt, 8) != $1.checksum) { //#4466
            $k[$j++] = 'bwipp.issnBadCheckDigit'; //#4465
            $k[$j++] = "Incorrect ISSN check digit provided"; //#4465
            bwipp_raiseerror(); //#4465
        } //#4465
    } //#4465
    $1.pad = $s(14); //#4470
    $puti($1.pad, 0, "ISSN "); //#4471
    $puti($1.pad, 5, $1.issntxt); //#4472
    $put($1.pad, 13, $1.checksum); //#4473
    $1.issntxt = $1.pad; //#4474
    $1.barcode = $geti($1.issn, 0, 7); //#4477
    $1.barcode = $s(12); //#4480
    $puti($1.barcode, 0, "977"); //#4481
    $puti($1.barcode, 3, $1.issn); //#4482
    $puti($1.barcode, 10, $1.seqvar); //#4483
    if ($ne($1.addon, "")) { //#4492
        var _1O = $s((12 + $1.addon.length) + 1); //#4487
        $puti(_1O, 0, $1.barcode); //#4488
        $puti(_1O, 12, " "); //#4489
        $puti(_1O, 13, $1.addon); //#4490
        $1.barcode = _1O; //#4491
    } //#4491
    $put($1.options, "dontdraw", true); //#4495
    $put($1.options, "addongap", $1.addongap); //#4496
    $k[$j++] = 'args'; //#4497
    $k[$j++] = $1.barcode; //#4497
    $k[$j++] = $1.options; //#4497
    bwipp_ean13(); //#4497
    var _1W = $k[--$j]; //#4497
    $1[$k[--$j]] = _1W; //#4497
    if ($1.includetext) { //#4514
        if ($1.issntextxoffset == "unset") { //#4501
            $1.issntextxoffset = 10; //#4501
        } //#4501
        if ($1.issntextyoffset == "unset") { //#4504
            $1.issntextyoffset = $f(($1.height * 72) + 3); //#4503
        } //#4503
        var _1d = $get($1.args, "txt") !== undefined; //#4505
        if (_1d) { //#4512
            $1.txt = $get($1.args, "txt"); //#4506
            $1.newtxt = $a($1.txt.length + 1); //#4507
            $puti($1.newtxt, 0, $1.txt); //#4508
            $put($1.newtxt, $1.newtxt.length - 1, $a([$1.issntxt, $1.issntextxoffset, $1.issntextyoffset, $1.issntextfont, $1.issntextsize])); //#4509
            $put($1.args, "txt", $1.newtxt); //#4510
        } else { //#4512
            $put($1.args, "txt", $a([$a([$1.issntxt, $1.issntextxoffset, $1.issntextyoffset, $1.issntextfont, $1.issntextsize])])); //#4512
        } //#4512
    } //#4512
    $put($1.args, "opt", $1.options); //#4516
    $k[$j++] = $1.args; //#4519
    if (!$1.dontdraw) { //#4519
        bwipp_renlinear(); //#4519
    } //#4519
}

function bwipp_mands() {
    var $1 = {}; //#4549
    $1.options = $k[--$j]; //#4551
    $1.barcode = $k[--$j]; //#4552
    $1.dontdraw = false; //#4554
    $1.includetext = false; //#4555
    $forall($1.options, function() { //#4566
        var _3 = $k[--$j]; //#4566
        $1[$k[--$j]] = _3; //#4566
    }); //#4566
    $1.barlen = $1.barcode.length; //#4568
    if (($1.barlen != 7) && ($1.barlen != 8)) { //#4573
        $k[$j++] = 'bwipp.MandSbadLength'; //#4572
        $k[$j++] = "M&S barcode must be 7 or 8 characters"; //#4572
        bwipp_raiseerror(); //#4572
    } //#4572
    if ($1.barlen == 7) { //#4577
        var _A = $strcpy($s(8), "00000000"); //#4576
        $puti(_A, 1, $1.barcode); //#4576
        $1.barcode = _A; //#4576
    } //#4576
    $put($1.options, "dontdraw", true); //#4580
    $k[$j++] = 'args'; //#4581
    $k[$j++] = $1.barcode; //#4581
    $k[$j++] = $1.options; //#4581
    bwipp_ean8(); //#4581
    var _F = $k[--$j]; //#4581
    $1[$k[--$j]] = _F; //#4581
    var _I = $get($1.args, "bbs"); //#4584
    $put(_I, 10, $get(_I, 2)); //#4585
    $put(_I, 11, $get(_I, 2)); //#4586
    var _M = $get($1.args, "bhs"); //#4587
    $put(_M, 10, $get(_M, 2)); //#4588
    $put(_M, 11, $get(_M, 2)); //#4589
    $1.txt = $get($1.args, "txt"); //#4592
    if ($1.barlen == 7) { //#4600
        for (var _S = 0; _S <= 6; _S += 1) { //#4598
            var _T = $1.txt; //#4595
            $puti($get($get(_T, _S), 0), 0, $get($get(_T, _S + 1), 0)); //#4597
        } //#4597
        $puti($get($get($1.txt, 7), 0), 0, " "); //#4599
    } //#4599
    var _b = $a(10); //#4603
    $puti(_b, 0, $1.txt); //#4603
    $1.txt = _b; //#4603
    var _e = $get($1.txt, 0); //#4604
    $put($1.txt, 8, $arrcpy($a(_e.length), _e)); //#4604
    var _j = $get($1.txt, 0); //#4605
    $put($1.txt, 9, $arrcpy($a(_j.length), _j)); //#4605
    $put($get($1.txt, 8), 0, "M"); //#4606
    $put($get($1.txt, 8), 1, -12); //#4606
    var _r = $1.txt; //#4607
    $put($get(_r, 9), 0, "S"); //#4607
    $put($get($1.txt, 9), 1, 69); //#4607
    $put($1.args, "txt", $1.txt); //#4609
    $put($1.args, "opt", $1.options); //#4610
    $k[$j++] = $1.args; //#4613
    if (!$1.dontdraw) { //#4613
        bwipp_renlinear(); //#4613
    } //#4613
}

function bwipp_code128() {
    var $1 = {}; //#4643
    $1.options = $k[--$j]; //#4645
    $1.barcode = $k[--$j]; //#4646
    $1.dontdraw = false; //#4648
    $1.includetext = false; //#4649
    $1.textfont = "OCR-B"; //#4650
    $1.textsize = 10; //#4651
    $1.textxoffset = 0; //#4652
    $1.textyoffset = -8; //#4653
    $1.height = 1; //#4654
    $1.encoding = "auto"; //#4655
    $1.raw = false; //#4656
    $1.parse = false; //#4657
    $1.parsefnc = false; //#4658
    $forall($1.options, function() { //#4669
        var _3 = $k[--$j]; //#4669
        $1[$k[--$j]] = _3; //#4669
    }); //#4669
    $1.textfont = "" + $1.textfont; //#4671
    $1.textsize = +$1.textsize; //#4672
    $1.textxoffset = +$1.textxoffset; //#4673
    $1.textyoffset = +$1.textyoffset; //#4674
    $1.height = +$1.height; //#4675
    $1.sta = -1; //#4678
    $1.stb = -2; //#4678
    $1.stc = -3; //#4678
    $1.swa = -4; //#4679
    $1.swb = -5; //#4679
    $1.swc = -6; //#4679
    $1.fn1 = -7; //#4680
    $1.fn2 = -8; //#4680
    $1.fn3 = -9; //#4680
    $1.fn4 = -10; //#4681
    $1.sft = -11; //#4681
    $1.stp = -12; //#4681
    $1.lka = -13; //#4682
    $1.lkc = -14; //#4682
    var _I = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["FNC1", $1.fn1],
        ["FNC1", $1.fn1],
        ["FNC2", $1.fn2],
        ["FNC3", $1.fn3],
        ["LNKA", $1.lka],
        ["LNKC", $1.lkc]
    ]); //#4694
    $1.fncvals = _I; //#4695
    $k[$j++] = 'msg'; //#4696
    $k[$j++] = $1.barcode; //#4696
    $k[$j++] = $1.fncvals; //#4696
    bwipp_parseinput(); //#4696
    var _L = $k[--$j]; //#4696
    $1[$k[--$j]] = _L; //#4696
    $1.msglen = $1.msg.length; //#4697
    $1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sft, $1.sft, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.sta, $1.sta, $1.sta]), $a([$1.stb, $1.stb, $1.stb]), $a([$1.stc, $1.stc, $1.stc]), $a([$1.stp, $1.stp, $1.stp])]); //#4738
    $1.charvals = $a([new Map, new Map, new Map]); //#4741
    for (var _2e = 0, _2d = $1.charmaps.length - 1; _2e <= _2d; _2e += 1) { //#4750
        $1.i = _2e; //#4743
        $1.encs = $get($1.charmaps, $1.i); //#4744
        for (var _2i = 0; _2i <= 2; _2i += 1) { //#4749
            $1.j = _2i; //#4746
            var _2l = $get($1.encs, $1.j); //#4747
            $k[$j++] = _2l; //#4747
            if ($eq($type(_2l), 'stringtype')) { //#4747
                var _2o = $get($k[--$j], 0); //#4747
                $k[$j++] = _2o; //#4747
            } //#4747
            $put($get($1.charvals, $1.j), $k[--$j], $1.i); //#4748
        } //#4748
    } //#4748
    $1.seta = $get($1.charvals, 0); //#4751
    $1.setb = $get($1.charvals, 1); //#4752
    $1.setc = $get($1.charvals, 2); //#4753
    $put($1.seta, $1.lka, $get($1.seta, $1.swb)); //#4756
    $put($1.seta, $1.lkc, $get($1.seta, $1.swc)); //#4756
    $put($1.setb, $1.lka, $get($1.setb, $1.swc)); //#4757
    $put($1.setb, $1.lkc, $get($1.setb, $1.swa)); //#4757
    $put($1.setc, $1.lka, $get($1.setc, $1.swa)); //#4758
    $put($1.setc, $1.lkc, $get($1.setc, $1.swb)); //#4758
    if ($1.raw) { //#4760
        $1.encoding = "raw"; //#4760
    } //#4760
    if ($eq($1.encoding, "raw")) { //#4774
        $1.cws = $a($1.barcode.length); //#4763
        $1.i = 0; //#4764
        $1.j = 0; //#4764
        for (;;) { //#4771
            if ($1.i == $1.barcode.length) { //#4766
                break; //#4766
            } //#4766
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#4767
            $put($1.cws, $1.j, $1.cw); //#4768
            $1.i = $1.i + 4; //#4769
            $1.j = $1.j + 1; //#4770
        } //#4770
        $1.cws = $geti($1.cws, 0, $1.j); //#4772
        $1.text = ""; //#4773
    } //#4773
    if ($eq($1.encoding, "auto")) { //#4999
        $1.text = $s($1.msglen); //#4778
        for (var _3q = 0, _3p = $1.msglen - 1; _3q <= _3p; _3q += 1) { //#4782
            $1.i = _3q; //#4780
            var _3v = $get($1.msg, $1.i); //#4781
            $k[$j++] = $1.text; //#4781
            $k[$j++] = $1.i; //#4781
            $k[$j++] = _3v; //#4781
            if (_3v < 0) { //#4781
                $j--; //#4781
                $k[$j++] = 32; //#4781
            } //#4781
            var _3w = $k[--$j]; //#4781
            var _3x = $k[--$j]; //#4781
            $put($k[--$j], _3x, _3w); //#4781
        } //#4781
        $k[$j++] = Infinity; //#4785
        for (var _40 = 0, _41 = $1.msglen; _40 < _41; _40++) { //#4785
            $k[$j++] = 0; //#4785
        } //#4785
        $k[$j++] = 0; //#4785
        $1.numSA = $a(); //#4785
        $k[$j++] = Infinity; //#4786
        for (var _44 = 0, _45 = $1.msglen; _44 < _45; _44++) { //#4786
            $k[$j++] = 0; //#4786
        } //#4786
        $k[$j++] = 0; //#4786
        $1.numEA = $a(); //#4786
        for (var _48 = $1.msglen - 1; _48 >= 0; _48 -= 1) { //#4796
            $1.i = _48; //#4788
            if ($get($1.msg, $1.i) >= 0) { //#4795
                if ($get($1.msg, $1.i) >= 128) { //#4793
                    $put($1.numEA, $1.i, $f($get($1.numEA, $1.i + 1) + 1)); //#4791
                } else { //#4793
                    $put($1.numSA, $1.i, $f($get($1.numSA, $1.i + 1) + 1)); //#4793
                } //#4793
            } //#4793
        } //#4793
        $1.ea = false; //#4799
        $1.msgtmp = $a([]); //#4799
        for (var _4S = 0, _4R = $1.msglen - 1; _4S <= _4R; _4S += 1) { //#4814
            $1.i = _4S; //#4801
            $1.c = $get($1.msg, $1.i); //#4802
            if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //#4812
                if ($1.ea) { //#4804
                    $k[$j++] = $1.numSA; //#4804
                } else { //#4804
                    $k[$j++] = $1.numEA; //#4804
                } //#4804
                var _4e = $get($k[--$j], $1.i); //#4804
                var _4h = ($f(_4e + $1.i) == $1.msglen) ? 3 : 5; //#4805
                if (_4e < _4h) { //#4810
                    $k[$j++] = Infinity; //#4807
                    $aload($1.msgtmp); //#4807
                    $k[$j++] = $1.fn4; //#4807
                    $1.msgtmp = $a(); //#4807
                } else { //#4810
                    $k[$j++] = Infinity; //#4809
                    $aload($1.msgtmp); //#4809
                    $k[$j++] = $1.fn4; //#4809
                    $k[$j++] = $1.fn4; //#4809
                    $1.msgtmp = $a(); //#4809
                    $1.ea = !$1.ea; //#4810
                } //#4810
            } //#4810
            $k[$j++] = Infinity; //#4813
            $aload($1.msgtmp); //#4813
            if ($1.c >= 0) { //#4813
                $k[$j++] = $1.c & 127; //#4813
            } else { //#4813
                $k[$j++] = $1.c; //#4813
            } //#4813
            $1.msgtmp = $a(); //#4813
        } //#4813
        $1.msg = $1.msgtmp; //#4815
        $1.msglen = $1.msg.length; //#4816
        $1.numsscr = function() {
            $1.n = 0; //#4820
            $1.s = 0; //#4820
            $1.p = $k[--$j]; //#4821
            for (;;) { //#4834
                if ($1.p >= $1.msglen) { //#4822
                    break; //#4822
                } //#4822
                var _52 = $get($1.msg, $1.p); //#4823
                var _54 = $get($1.setc, _52) !== undefined; //#4824
                $k[$j++] = _52; //#4824
                if (!_54) { //#4824
                    $j--; //#4824
                    break; //#4824
                } //#4824
                var _55 = $k[--$j]; //#4825
                $k[$j++] = _55; //#4830
                if (_55 <= -1) { //#4829
                    var _57 = $k[--$j]; //#4827
                    if ((_57 == $1.fn1) && (($1.s % 2) == 0)) { //#4827
                        $1.s = $1.s + 1; //#4827
                    } else { //#4827
                        break; //#4827
                    } //#4827
                } else { //#4829
                    $j--; //#4829
                } //#4829
                $1.n = $1.n + 1; //#4831
                $1.s = $1.s + 1; //#4832
                $1.p = $f($1.p + 1); //#4833
            } //#4833
            $k[$j++] = $1.n; //#4835
            $k[$j++] = $1.s; //#4835
        }; //#4836
        $1.enca = function() {
            $put($1.cws, $1.j, $get($1.seta, $k[--$j])); //#4840
            $1.j = $1.j + 1; //#4841
        }; //#4842
        $1.encb = function() {
            $put($1.cws, $1.j, $get($1.setb, $k[--$j])); //#4844
            $1.j = $1.j + 1; //#4845
        }; //#4846
        $1.encc = function() {
            var _5R = $k[--$j]; //#4848
            $k[$j++] = _5R; //#4852
            if ($ne($type(_5R), 'arraytype')) { //#4851
                var _5V = $get($1.setc, $k[--$j]); //#4849
                $k[$j++] = _5V; //#4849
            } else { //#4851
                $aload($k[--$j]); //#4851
                var _5X = $k[--$j]; //#4851
                var _5Y = $k[--$j]; //#4851
                $k[$j++] = $f($f(_5X - 48) + ($f(_5Y - 48) * 10)); //#4851
            } //#4851
            $put($1.cws, $1.j, $k[--$j]); //#4853
            $1.j = $1.j + 1; //#4854
        }; //#4855
        $1.anotb = function() {
            var _5d = $k[--$j]; //#4858
            var _5f = $get($1.seta, _5d) !== undefined; //#4858
            var _5h = $get($1.setb, _5d) !== undefined; //#4858
            $k[$j++] = _5f && (!_5h); //#4858
        }; //#4858
        $1.bnota = function() {
            var _5i = $k[--$j]; //#4859
            var _5k = $get($1.setb, _5i) !== undefined; //#4859
            var _5m = $get($1.seta, _5i) !== undefined; //#4859
            $k[$j++] = _5k && (!_5m); //#4859
        }; //#4859
        $k[$j++] = Infinity; //#4862
        for (var _5o = 0, _5p = $1.msg.length; _5o < _5p; _5o++) { //#4862
            $k[$j++] = 0; //#4862
        } //#4862
        $k[$j++] = 9999; //#4862
        $1.nextanotb = $a(); //#4862
        $k[$j++] = Infinity; //#4863
        for (var _5s = 0, _5t = $1.msg.length; _5s < _5t; _5s++) { //#4863
            $k[$j++] = 0; //#4863
        } //#4863
        $k[$j++] = 9999; //#4863
        $1.nextbnota = $a(); //#4863
        for (var _5w = $1.msg.length - 1; _5w >= 0; _5w -= 1) { //#4876
            $1.i = _5w; //#4865
            $k[$j++] = $get($1.msg, $1.i); //#4866
            $1.anotb(); //#4866
            if ($k[--$j]) { //#4869
                $put($1.nextanotb, $1.i, 0); //#4867
            } else { //#4869
                $put($1.nextanotb, $1.i, $f($get($1.nextanotb, $1.i + 1) + 1)); //#4869
            } //#4869
            $k[$j++] = $get($1.msg, $1.i); //#4871
            $1.bnota(); //#4871
            if ($k[--$j]) { //#4874
                $put($1.nextbnota, $1.i, 0); //#4872
            } else { //#4874
                $put($1.nextbnota, $1.i, $f($get($1.nextbnota, $1.i + 1) + 1)); //#4874
            } //#4874
        } //#4874
        $1.abeforeb = function() {
            var _6J = $k[--$j]; //#4879
            $k[$j++] = $lt($get($1.nextanotb, _6J), $get($1.nextbnota, _6J)); //#4879
        }; //#4879
        $1.bbeforea = function() {
            var _6O = $k[--$j]; //#4880
            $k[$j++] = $lt($get($1.nextbnota, _6O), $get($1.nextanotb, _6O)); //#4880
        }; //#4880
        $1.cws = $a(($1.barcode.length * 2) + 3); //#4882
        $1.j = 0; //#4885
        if ($1.msglen > 0) { //#4886
            $k[$j++] = 0; //#4886
            $1.numsscr(); //#4886
        } else { //#4886
            $k[$j++] = -1; //#4886
            $k[$j++] = -1; //#4886
        } //#4886
        $1.nums = $k[--$j]; //#4886
        $1.nchars = $k[--$j]; //#4886
        for (;;) { //#4911
            if ($1.msglen == 0) { //#4892
                $k[$j++] = $1.stb; //#4889
                $1.enca(); //#4889
                $1.cset = "setb"; //#4890
                break; //#4891
            } //#4891
            if (($1.msglen == 2) && ($1.nums == 2)) { //#4897
                $k[$j++] = $1.stc; //#4894
                $1.enca(); //#4894
                $1.cset = "setc"; //#4895
                break; //#4896
            } //#4896
            if ($1.nums >= 4) { //#4902
                $k[$j++] = $1.stc; //#4899
                $1.enca(); //#4899
                $1.cset = "setc"; //#4900
                break; //#4901
            } //#4901
            $k[$j++] = 0; //#4903
            $1.abeforeb(); //#4903
            if ($k[--$j]) { //#4907
                $k[$j++] = $1.sta; //#4904
                $1.enca(); //#4904
                $1.cset = "seta"; //#4905
                break; //#4906
            } //#4906
            $k[$j++] = $1.stb; //#4908
            $1.enca(); //#4908
            $1.cset = "setb"; //#4909
            break; //#4910
        } //#4910
        $1.i = 0; //#4914
        for (;;) { //#4997
            if ($1.i == $1.msglen) { //#4915
                break; //#4915
            } //#4915
            $k[$j++] = $1.i; //#4917
            $1.numsscr(); //#4917
            $1.nums = $k[--$j]; //#4917
            $1.nchars = $k[--$j]; //#4917
            for (;;) { //#4995
                if ((($eq($1.cset, "seta") || $eq($1.cset, "setb")) && ($1.nums >= 4)) && ($get($1.msg, $1.i) != $1.fn1)) { //#4934
                    if (($1.nums % 2) == 0) { //#4932
                        $k[$j++] = $1.swc; //#4924
                        if ($eq($1.cset, "seta")) { //#4924
                            $1.enca(); //#4924
                        } else { //#4924
                            $1.encb(); //#4924
                        } //#4924
                        $1.cset = "setc"; //#4925
                        break; //#4926
                    } else { //#4932
                        $k[$j++] = $get($1.msg, $1.i); //#4928
                        if ($eq($1.cset, "seta")) { //#4928
                            $1.enca(); //#4928
                        } else { //#4928
                            $1.encb(); //#4928
                        } //#4928
                        $1.i = $1.i + 1; //#4929
                        $k[$j++] = $1.swc; //#4930
                        if ($eq($1.cset, "seta")) { //#4930
                            $1.enca(); //#4930
                        } else { //#4930
                            $1.encb(); //#4930
                        } //#4930
                        $1.cset = "setc"; //#4931
                        break; //#4932
                    } //#4932
                } //#4932
                $k[$j++] = $eq($1.cset, "setb"); //#4935
                $k[$j++] = $get($1.msg, $1.i); //#4935
                $1.anotb(); //#4935
                var _78 = $k[--$j]; //#4935
                var _79 = $k[--$j]; //#4935
                if ((_79 && _78)) { //#4947
                    if ($1.i < ($1.msglen - 1)) { //#4943
                        $k[$j++] = $1.i + 1; //#4937
                        $1.bbeforea(); //#4937
                        if ($k[--$j]) { //#4942
                            $k[$j++] = $1.sft; //#4938
                            $1.encb(); //#4938
                            $k[$j++] = $get($1.msg, $1.i); //#4939
                            $1.enca(); //#4939
                            $1.i = $1.i + 1; //#4940
                            break; //#4941
                        } //#4941
                    } //#4941
                    $k[$j++] = $1.swa; //#4944
                    $1.encb(); //#4944
                    $1.cset = "seta"; //#4945
                    break; //#4946
                } //#4946
                $k[$j++] = $eq($1.cset, "seta"); //#4948
                $k[$j++] = $get($1.msg, $1.i); //#4948
                $1.bnota(); //#4948
                var _7O = $k[--$j]; //#4948
                var _7P = $k[--$j]; //#4948
                if ((_7P && _7O)) { //#4960
                    if ($1.i < ($1.msglen - 1)) { //#4956
                        $k[$j++] = $1.i + 1; //#4950
                        $1.abeforeb(); //#4950
                        if ($k[--$j]) { //#4955
                            $k[$j++] = $1.sft; //#4951
                            $1.enca(); //#4951
                            $k[$j++] = $get($1.msg, $1.i); //#4952
                            $1.encb(); //#4952
                            $1.i = $1.i + 1; //#4953
                            break; //#4954
                        } //#4954
                    } //#4954
                    $k[$j++] = $1.swb; //#4957
                    $1.enca(); //#4957
                    $1.cset = "setb"; //#4958
                    break; //#4959
                } //#4959
                if (($eq($1.cset, "setc") && ($1.nums < 2)) && ($get($1.msg, $1.i) > -1)) { //#4970
                    $k[$j++] = $1.i; //#4962
                    $1.abeforeb(); //#4962
                    if ($k[--$j]) { //#4966
                        $k[$j++] = $1.swa; //#4963
                        $1.encc(); //#4963
                        $1.cset = "seta"; //#4964
                        break; //#4965
                    } //#4965
                    $k[$j++] = $1.swb; //#4967
                    $1.encc(); //#4967
                    $1.cset = "setb"; //#4968
                    break; //#4969
                } //#4969
                if ($eq($1.cset, "seta")) { //#4977
                    $k[$j++] = $get($1.msg, $1.i); //#4974
                    $1.enca(); //#4974
                    $1.i = $1.i + 1; //#4975
                    break; //#4976
                } //#4976
                if ($eq($1.cset, "setb")) { //#4982
                    $k[$j++] = $get($1.msg, $1.i); //#4979
                    $1.encb(); //#4979
                    $1.i = $1.i + 1; //#4980
                    break; //#4981
                } //#4981
                if ($eq($1.cset, "setc")) { //#4992
                    if ($get($1.msg, $1.i) <= -1) { //#4989
                        $k[$j++] = $get($1.msg, $1.i); //#4985
                        $1.encc(); //#4985
                        $1.i = $1.i + 1; //#4986
                    } else { //#4989
                        $k[$j++] = $geti($1.msg, $1.i, 2); //#4988
                        $1.encc(); //#4988
                        $1.i = $1.i + 2; //#4989
                    } //#4989
                    break; //#4991
                } //#4991
                break; //#4994
            } //#4994
        } //#4994
        $1.cws = $geti($1.cws, 0, $1.j); //#4998
    } //#4998
    var _89 = $a($1.j + 2); //#5002
    $puti(_89, 0, $1.cws); //#5002
    $1.cws = _89; //#5002
    $1.csum = $get($1.cws, 0); //#5003
    for (var _8F = 1, _8E = $1.j - 1; _8F <= _8E; _8F += 1) { //#5007
        $1.i = _8F; //#5005
        $1.csum = $f($1.csum + ($get($1.cws, $1.i) * $1.i)); //#5006
    } //#5006
    $1.csum = $1.csum % 103; //#5008
    $put($1.cws, $1.j, $1.csum); //#5009
    $put($1.cws, $1.j + 1, $get($1.seta, $1.stp)); //#5010
    $1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "2331112"]); //#5030
    $1.sbs = $s(($1.cws.length * 6) + 1); //#5033
    for (var _8Z = 0, _8Y = $1.cws.length - 1; _8Z <= _8Y; _8Z += 1) { //#5037
        $1.i = _8Z; //#5035
        $puti($1.sbs, $1.i * 6, $get($1.encs, $get($1.cws, $1.i))); //#5036
    } //#5036
    $k[$j++] = Infinity; //#5047
    $k[$j++] = Infinity; //#5042
    var _8h = $1.sbs; //#5042
    for (var _8i = 0, _8j = _8h.length; _8i < _8j; _8i++) { //#5042
        $k[$j++] = $get(_8h, _8i) - 48; //#5042
    } //#5042
    var _8l = $a(); //#5042
    $k[$j++] = Infinity; //#5043
    for (var _8n = 0, _8o = ~~(($1.sbs.length + 1) / 2); _8n < _8o; _8n++) { //#5043
        $k[$j++] = $1.height; //#5043
    } //#5043
    var _8q = $a(); //#5043
    $k[$j++] = Infinity; //#5044
    for (var _8s = 0, _8t = ~~(($1.sbs.length + 1) / 2); _8s < _8t; _8s++) { //#5044
        $k[$j++] = 0; //#5044
    } //#5044
    var _8u = $a(); //#5044
    $k[$j++] = 'ren'; //#5047
    $k[$j++] = bwipp_renlinear; //#5047
    $k[$j++] = 'sbs'; //#5047
    $k[$j++] = _8l; //#5047
    $k[$j++] = 'bhs'; //#5047
    $k[$j++] = _8q; //#5047
    $k[$j++] = 'bbs'; //#5047
    $k[$j++] = _8u; //#5047
    $k[$j++] = 'txt'; //#5047
    $k[$j++] = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); //#5047
    $k[$j++] = 'textxalign'; //#5047
    $k[$j++] = "center"; //#5047
    $k[$j++] = 'opt'; //#5047
    $k[$j++] = $1.options; //#5047
    var _93 = $d(); //#5047
    $k[$j++] = _93; //#5050
    if (!$1.dontdraw) { //#5050
        bwipp_renlinear(); //#5050
    } //#5050
}

function bwipp_gs1_128() {
    var $1 = {}; //#5082
    $1.options = $k[--$j]; //#5084
    $1.barcode = $k[--$j]; //#5085
    $1.dontdraw = false; //#5087
    $1.includetext = false; //#5088
    $1.textfont = "OCR-B"; //#5089
    $1.textsize = 10; //#5090
    $1.textxoffset = 0; //#5091
    $1.textyoffset = -8; //#5092
    $1.height = 0.5; //#5093
    $1.linkagea = false; //#5094
    $1.linkagec = false; //#5095
    $1.parse = false; //#5096
    $1.dontlint = false; //#5097
    $forall($1.options, function() { //#5108
        var _3 = $k[--$j]; //#5108
        $1[$k[--$j]] = _3; //#5108
    }); //#5108
    $1.textfont = "" + $1.textfont; //#5110
    $1.textsize = +$1.textsize; //#5111
    $1.textxoffset = +$1.textxoffset; //#5112
    $1.textyoffset = +$1.textyoffset; //#5113
    $1.height = +$1.height; //#5114
    $1.text = $1.barcode; //#5116
    $1.expand = function() {
        var _C = new Map([
            ["parse", $1.parse],
            ["parseonly", true],
            ["parsefnc", false]
        ]); //#5123
        $1.fncvals = _C; //#5124
        $k[$j++] = $1.fncvals; //#5125
        bwipp_parseinput(); //#5125
    }; //#5126
    $1.ais = $a([]); //#5129
    $1.vals = $a([]); //#5130
    var _G = $1.barcode; //#5131
    $k[$j++] = $geti(_G, 1, _G.length - 1); //#5144
    for (;;) { //#5144
        var _I = $k[--$j]; //#5133
        $k[$j++] = _I; //#5133
        if ($eq(_I, "")) { //#5133
            break; //#5133
        } //#5133
        $search($k[--$j], ")"); //#5134
        $j--; //#5134
        var _K = $k[--$j]; //#5135
        var _L = $k[--$j]; //#5135
        $k[$j++] = _K; //#5135
        $k[$j++] = _L; //#5135
        $j--; //#5135
        var _M = $k[--$j]; //#5136
        var _N = $k[--$j]; //#5136
        $k[$j++] = _M; //#5136
        $search(_N, "("); //#5136
        if ($k[--$j]) { //#5139
            var _P = $k[--$j]; //#5137
            var _Q = $k[--$j]; //#5137
            $k[$j++] = _P; //#5137
            $k[$j++] = _Q; //#5137
            $j--; //#5137
            var _R = $k[--$j]; //#5137
            var _S = $k[--$j]; //#5137
            var _T = $k[--$j]; //#5137
            $k[$j++] = _S; //#5137
            $k[$j++] = _T; //#5137
            $k[$j++] = _R; //#5137
        } else { //#5139
            var _U = $k[--$j]; //#5139
            var _V = $k[--$j]; //#5139
            $k[$j++] = ""; //#5139
            $k[$j++] = _V; //#5139
            $k[$j++] = _U; //#5139
        } //#5139
        $k[$j++] = Infinity; //#5141
        $aload($1.ais); //#5141
        var _Y = $k[$j - 1 - ($counttomark() + 2)]; //#5141
        $k[$j++] = _Y; //#5141
        $1.ais = $a(); //#5141
        $k[$j++] = Infinity; //#5142
        $aload($1.vals); //#5142
        var _c = $k[$j - 1 - ($counttomark() + 1)]; //#5142
        $k[$j++] = _c; //#5142
        $1.expand(); //#5142
        $1.vals = $a(); //#5142
        $j -= 2; //#5143
    } //#5143
    $j--; //#5145
    if (!$1.dontlint) { //#5147
        var _g = $1.vals; //#5147
        $k[$j++] = $1.ais; //#5147
        $k[$j++] = _g; //#5147
        bwipp_gs1lint(); //#5147
        $j--; //#5147
    } //#5147
    $1.aifixed = new Map; //#5152
    $k[$j++] = Infinity; //#5154
    for (var _h = 0; _h <= 4; _h += 1) { //#5154
        $k[$j++] = _h; //#5154
    } //#5154
    var _i = $a(); //#5154
    for (var _j = 0, _k = _i.length; _j < _k; _j++) { //#5157
        var _n = $strcpy($s(2), "00"); //#5156
        $put(_n, 1, $f($get(_i, _j) + 48)); //#5156
        $put($1.aifixed, _n, _n); //#5156
    } //#5156
    $k[$j++] = Infinity; //#5162
    for (var _p = 11; _p <= 20; _p += 1) { //#5159
        $k[$j++] = _p; //#5159
    } //#5159
    $k[$j++] = 23; //#5161
    for (var _q = 31; _q <= 36; _q += 1) { //#5161
        $k[$j++] = _q; //#5161
    } //#5161
    $k[$j++] = 41; //#5162
    var _r = $a(); //#5162
    for (var _s = 0, _t = _r.length; _s < _t; _s++) { //#5165
        var _w = $cvrs($s(2), $get(_r, _s), 10); //#5164
        $put($1.aifixed, _w, _w); //#5164
    } //#5164
    $1.fnc1 = -1; //#5168
    $1.c128 = $a([$1.fnc1]); //#5169
    for (var _12 = 0, _11 = $1.ais.length - 1; _12 <= _11; _12 += 1) { //#5185
        $1.i = _12; //#5171
        $1.ai = $get($1.ais, $1.i); //#5172
        $1.val = $get($1.vals, $1.i); //#5173
        var _1C = $a(($1.c128.length + $1.ai.length) + $1.val.length); //#5174
        $puti(_1C, 0, $1.c128); //#5175
        $k[$j++] = _1C; //#5176
        $k[$j++] = _1C; //#5176
        $k[$j++] = $1.c128.length; //#5176
        $k[$j++] = $1.ai; //#5176
        $k[$j++] = Infinity; //#5176
        var _1G = $k[--$j]; //#5176
        var _1H = $k[--$j]; //#5176
        $k[$j++] = _1G; //#5176
        $forall(_1H); //#5176
        var _1I = $a(); //#5176
        var _1J = $k[--$j]; //#5176
        $puti($k[--$j], _1J, _1I); //#5176
        var _1L = $k[--$j]; //#5177
        $k[$j++] = _1L; //#5177
        $k[$j++] = _1L; //#5177
        $k[$j++] = $1.c128.length + $1.ai.length; //#5177
        $k[$j++] = $1.val; //#5177
        $k[$j++] = Infinity; //#5177
        var _1P = $k[--$j]; //#5177
        var _1Q = $k[--$j]; //#5177
        $k[$j++] = _1P; //#5177
        $forall(_1Q); //#5177
        var _1R = $a(); //#5177
        var _1S = $k[--$j]; //#5177
        $puti($k[--$j], _1S, _1R); //#5177
        $1.c128 = $k[--$j]; //#5178
        var _1a = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; //#5179
        if (($1.i != ($1.ais.length - 1)) && (!_1a)) { //#5184
            var _1c = $a($1.c128.length + 1); //#5180
            $puti(_1c, 0, $1.c128); //#5181
            $put(_1c, $1.c128.length, $1.fnc1); //#5182
            $1.c128 = _1c; //#5183
        } //#5183
    } //#5183
    $1.barcode = $s(($1.c128.length + 1) * 5); //#5188
    $1.i = 0; //#5189
    $1.j = 0; //#5189
    for (;;) { //#5199
        if ($1.i == $1.c128.length) { //#5190
            break; //#5190
        } //#5190
        var _1m = $get($1.c128, $1.i); //#5191
        $k[$j++] = _1m; //#5196
        if (_1m == $1.fnc1) { //#5195
            $j--; //#5192
            $puti($1.barcode, $1.j, "^FNC1"); //#5192
            $1.j = $1.j + 4; //#5193
        } else { //#5195
            $put($1.barcode, $1.j, $k[--$j]); //#5195
        } //#5195
        $1.i = $1.i + 1; //#5197
        $1.j = $1.j + 1; //#5198
    } //#5198
    if ($1.linkagea || $1.linkagec) { //#5203
        $k[$j++] = $1.barcode; //#5201
        $k[$j++] = $1.j; //#5201
        if ($1.linkagea) { //#5201
            $k[$j++] = "^LNKA"; //#5201
        } else { //#5201
            $k[$j++] = "^LNKC"; //#5201
        } //#5201
        var _21 = $k[--$j]; //#5201
        var _22 = $k[--$j]; //#5201
        $puti($k[--$j], _22, _21); //#5201
        $1.j = $1.j + 5; //#5202
    } //#5202
    $1.barcode = $geti($1.barcode, 0, $1.j); //#5204
    delete $1.options["parse"]; //#5207
    $put($1.options, "height", $1.height); //#5208
    $put($1.options, "dontdraw", true); //#5209
    $put($1.options, "parsefnc", true); //#5210
    $k[$j++] = 'args'; //#5211
    $k[$j++] = $1.barcode; //#5211
    $k[$j++] = $1.options; //#5211
    bwipp_code128(); //#5211
    var _2F = $k[--$j]; //#5211
    $1[$k[--$j]] = _2F; //#5211
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#5213
    $put($1.args, "textxalign", "center"); //#5214
    $put($1.args, "opt", $1.options); //#5215
    $k[$j++] = $1.args; //#5218
    if (!$1.dontdraw) { //#5218
        bwipp_renlinear(); //#5218
    } //#5218
}

function bwipp_ean14() {
    var $1 = {}; //#5248
    $1.options = $k[--$j]; //#5250
    $1.barcode = $k[--$j]; //#5251
    $1.dontdraw = false; //#5253
    $1.includetext = false; //#5254
    $1.textfont = "OCR-B"; //#5255
    $1.textsize = 10; //#5256
    $1.textxoffset = 0; //#5257
    $1.textyoffset = -8; //#5258
    $1.height = 1; //#5259
    $forall($1.options, function() { //#5270
        var _3 = $k[--$j]; //#5270
        $1[$k[--$j]] = _3; //#5270
    }); //#5270
    $1.textfont = "" + $1.textfont; //#5272
    $1.textsize = +$1.textsize; //#5273
    $1.textxoffset = +$1.textxoffset; //#5274
    $1.textyoffset = +$1.textyoffset; //#5275
    $1.height = +$1.height; //#5276
    $1.text = $1.barcode; //#5279
    var _B = $1.barcode; //#5280
    $k[$j++] = $s(_B.length); //#5281
    $k[$j++] = 0; //#5281
    $forall(_B, function() { //#5281
        var _D = $k[--$j]; //#5281
        $k[$j++] = _D; //#5281
        if (_D != 32) { //#5281
            var _E = $k[--$j]; //#5281
            var _F = $k[--$j]; //#5281
            var _G = $k[--$j]; //#5281
            $put(_G, _F, _E); //#5281
            $k[$j++] = _G; //#5281
            $k[$j++] = $f(_F + 1); //#5281
        } else { //#5281
            $j--; //#5281
        } //#5281
    }); //#5281
    var _H = $k[--$j]; //#5282
    $1.barcode = $geti($k[--$j], 0, _H); //#5282
    $1.hasspace = $1.text.length != $1.barcode.length; //#5283
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#5288
        $k[$j++] = 'bwipp.ean14badAI'; //#5287
        $k[$j++] = "GS1-14 must begin with (01) application identifier"; //#5287
        bwipp_raiseerror(); //#5287
    } //#5287
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#5291
        $k[$j++] = 'bwipp.ean14badLength'; //#5290
        $k[$j++] = "GS1-14 must be 13 or 14 digits"; //#5290
        bwipp_raiseerror(); //#5290
    } //#5290
    var _S = $geti($1.barcode, 4, $1.barcode.length - 4); //#5292
    for (var _T = 0, _U = _S.length; _T < _U; _T++) { //#5296
        var _V = $get(_S, _T); //#5296
        if ((_V < 48) || (_V > 57)) { //#5295
            $k[$j++] = 'bwipp.ean14badCharacter'; //#5294
            $k[$j++] = "GS1-14 must contain only digits"; //#5294
            bwipp_raiseerror(); //#5294
        } //#5294
    } //#5294
    $1.checksum = 0; //#5299
    for (var _W = 0; _W <= 12; _W += 1) { //#5303
        $1.i = _W; //#5301
        $k[$j++] = 'checksum'; //#5302
        $k[$j++] = $1.checksum; //#5302
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#5302
        if (($1.i % 2) == 0) { //#5302
            var _c = $k[--$j]; //#5302
            $k[$j++] = _c * 3; //#5302
        } //#5302
        var _d = $k[--$j]; //#5302
        var _e = $k[--$j]; //#5302
        $1[$k[--$j]] = $f(_e + _d); //#5302
    } //#5302
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#5304
    if ($1.barcode.length == 18) { //#5318
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#5308
            $k[$j++] = 'bwipp.ean14badCheckDigit'; //#5307
            $k[$j++] = "Incorrect GS1-14 check digit provided"; //#5307
            bwipp_raiseerror(); //#5307
        } //#5307
    } else { //#5318
        var _l = $s(18); //#5310
        $puti(_l, 0, $1.barcode); //#5311
        $put(_l, 17, $1.checksum + 48); //#5312
        $1.barcode = _l; //#5313
        var _q = $1.hasspace ? 2 : 1; //#5314
        var _r = $s($1.text.length + _q); //#5314
        $puti(_r, _r.length - 2, " "); //#5315
        $put(_r, _r.length - 1, $1.checksum + 48); //#5316
        $puti(_r, 0, $1.text); //#5317
        $1.text = _r; //#5318
    } //#5318
    $1.gtin = $geti($1.barcode, 4, 14); //#5320
    $1.barcode = $s(21); //#5323
    $puti($1.barcode, 0, "^FNC101"); //#5324
    $puti($1.barcode, 7, $1.gtin); //#5325
    $put($1.options, "dontdraw", true); //#5328
    $put($1.options, "parsefnc", true); //#5329
    $k[$j++] = 'args'; //#5330
    $k[$j++] = $1.barcode; //#5330
    $k[$j++] = $1.options; //#5330
    bwipp_code128(); //#5330
    var _14 = $k[--$j]; //#5330
    $1[$k[--$j]] = _14; //#5330
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#5332
    $put($1.args, "textxalign", "center"); //#5333
    $put($1.args, "opt", $1.options); //#5334
    $k[$j++] = $1.args; //#5337
    if (!$1.dontdraw) { //#5337
        bwipp_renlinear(); //#5337
    } //#5337
}

function bwipp_sscc18() {
    var $1 = {}; //#5367
    $1.options = $k[--$j]; //#5369
    $1.barcode = $k[--$j]; //#5370
    $1.dontdraw = false; //#5372
    $1.includetext = false; //#5373
    $1.textfont = "OCR-B"; //#5374
    $1.textsize = 10; //#5375
    $1.textxoffset = 0; //#5376
    $1.textyoffset = -8; //#5377
    $1.height = 1; //#5378
    $forall($1.options, function() { //#5389
        var _3 = $k[--$j]; //#5389
        $1[$k[--$j]] = _3; //#5389
    }); //#5389
    $1.textfont = "" + $1.textfont; //#5391
    $1.textsize = +$1.textsize; //#5392
    $1.textxoffset = +$1.textxoffset; //#5393
    $1.textyoffset = +$1.textyoffset; //#5394
    $1.height = +$1.height; //#5395
    $1.text = $1.barcode; //#5398
    var _B = $1.barcode; //#5399
    $k[$j++] = $s(_B.length); //#5400
    $k[$j++] = 0; //#5400
    $forall(_B, function() { //#5400
        var _D = $k[--$j]; //#5400
        $k[$j++] = _D; //#5400
        if (_D != 32) { //#5400
            var _E = $k[--$j]; //#5400
            var _F = $k[--$j]; //#5400
            var _G = $k[--$j]; //#5400
            $put(_G, _F, _E); //#5400
            $k[$j++] = _G; //#5400
            $k[$j++] = $f(_F + 1); //#5400
        } else { //#5400
            $j--; //#5400
        } //#5400
    }); //#5400
    var _H = $k[--$j]; //#5401
    $1.barcode = $geti($k[--$j], 0, _H); //#5401
    $1.hasspace = $1.text.length != $1.barcode.length; //#5402
    if ($ne($geti($1.barcode, 0, 4), "(00)")) { //#5407
        $k[$j++] = 'bwipp.sscc18badAI'; //#5406
        $k[$j++] = "SSCC-18 must begin with (00) application identifier"; //#5406
        bwipp_raiseerror(); //#5406
    } //#5406
    if (($1.barcode.length != 21) && ($1.barcode.length != 22)) { //#5410
        $k[$j++] = 'bwipp.sscc18badLength'; //#5409
        $k[$j++] = "SSCC-18 must be 17 or 18 digits"; //#5409
        bwipp_raiseerror(); //#5409
    } //#5409
    var _S = $geti($1.barcode, 4, $1.barcode.length - 4); //#5411
    for (var _T = 0, _U = _S.length; _T < _U; _T++) { //#5415
        var _V = $get(_S, _T); //#5415
        if ((_V < 48) || (_V > 57)) { //#5414
            $k[$j++] = 'bwipp.sscc18badCharacter'; //#5413
            $k[$j++] = "SSCC-18 must contain only digits"; //#5413
            bwipp_raiseerror(); //#5413
        } //#5413
    } //#5413
    $1.checksum = 0; //#5418
    for (var _W = 0; _W <= 16; _W += 1) { //#5422
        $1.i = _W; //#5420
        $k[$j++] = 'checksum'; //#5421
        $k[$j++] = $1.checksum; //#5421
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#5421
        if (($1.i % 2) == 0) { //#5421
            var _c = $k[--$j]; //#5421
            $k[$j++] = _c * 3; //#5421
        } //#5421
        var _d = $k[--$j]; //#5421
        var _e = $k[--$j]; //#5421
        $1[$k[--$j]] = $f(_e + _d); //#5421
    } //#5421
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#5423
    if ($1.barcode.length == 22) { //#5437
        if ($get($1.barcode, 21) != ($1.checksum + 48)) { //#5427
            $k[$j++] = 'bwipp.sscc18badCheckDigit'; //#5426
            $k[$j++] = "Incorrect SSCC-18 check digit provided"; //#5426
            bwipp_raiseerror(); //#5426
        } //#5426
    } else { //#5437
        var _l = $s(22); //#5429
        $puti(_l, 0, $1.barcode); //#5430
        $put(_l, 21, $1.checksum + 48); //#5431
        $1.barcode = _l; //#5432
        var _q = $1.hasspace ? 2 : 1; //#5433
        var _r = $s($1.text.length + _q); //#5433
        $puti(_r, _r.length - 2, " "); //#5434
        $put(_r, _r.length - 1, $1.checksum + 48); //#5435
        $puti(_r, 0, $1.text); //#5436
        $1.text = _r; //#5437
    } //#5437
    $1.sscc = $geti($1.barcode, 4, 18); //#5439
    $1.barcode = $s(25); //#5442
    $puti($1.barcode, 0, "^FNC100"); //#5443
    $puti($1.barcode, 7, $1.sscc); //#5444
    $put($1.options, "dontdraw", true); //#5447
    $put($1.options, "parsefnc", true); //#5448
    $k[$j++] = 'args'; //#5449
    $k[$j++] = $1.barcode; //#5449
    $k[$j++] = $1.options; //#5449
    bwipp_code128(); //#5449
    var _14 = $k[--$j]; //#5449
    $1[$k[--$j]] = _14; //#5449
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#5451
    $put($1.args, "textxalign", "center"); //#5452
    $put($1.args, "opt", $1.options); //#5453
    $k[$j++] = $1.args; //#5456
    if (!$1.dontdraw) { //#5456
        bwipp_renlinear(); //#5456
    } //#5456
}

function bwipp_code39() {
    var $1 = {}; //#5485
    $1.options = $k[--$j]; //#5487
    $1.barcode = $k[--$j]; //#5488
    $1.dontdraw = false; //#5490
    $1.includecheck = false; //#5491
    $1.validatecheck = false; //#5492
    $1.includetext = false; //#5493
    $1.includecheckintext = false; //#5494
    $1.hidestars = false; //#5495
    $1.textfont = "OCR-B"; //#5496
    $1.textsize = 10; //#5497
    $1.textyoffset = -8; //#5498
    $1.height = 1; //#5499
    $forall($1.options, function() { //#5510
        var _3 = $k[--$j]; //#5510
        $1[$k[--$j]] = _3; //#5510
    }); //#5510
    $1.textfont = "" + $1.textfont; //#5512
    $1.textsize = +$1.textsize; //#5513
    $1.textyoffset = +$1.textyoffset; //#5514
    $1.height = +$1.height; //#5515
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#5518
    $1.charvals = new Map; //#5519
    for (var _9 = 0; _9 <= 42; _9 += 1) { //#5520
        $put($1.charvals, $geti($1.barchars, _9, 1), _9); //#5520
    } //#5520
    for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) { //#5527
        var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; //#5524
        if (!_J) { //#5526
            $k[$j++] = 'bwipp.code39badCharacter'; //#5525
            $k[$j++] = "Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#5525
            bwipp_raiseerror(); //#5525
        } //#5525
    } //#5525
    $k[$j++] = 'barlen'; //#5529
    $k[$j++] = $1.barcode.length; //#5529
    if ($1.validatecheck) { //#5529
        var _M = $k[--$j]; //#5529
        $k[$j++] = $f(_M - 1); //#5529
    } //#5529
    var _N = $k[--$j]; //#5529
    $1[$k[--$j]] = _N; //#5529
    $1.checksum = 0; //#5531
    for (var _R = 0, _Q = $f($1.barlen - 1); _R <= _Q; _R += 1) { //#5535
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum); //#5534
    } //#5534
    $1.checksum = $1.checksum % 43; //#5536
    if ($1.validatecheck) { //#5543
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#5540
            $k[$j++] = 'bwipp.code39badCheckDigit'; //#5539
            $k[$j++] = "Incorrect Code 39 check digit provided"; //#5539
            bwipp_raiseerror(); //#5539
        } //#5539
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#5541
        $1.includecheck = true; //#5542
    } //#5542
    $1.encs = $a(["1113313111", "3113111131", "1133111131", "3133111111", "1113311131", "3113311111", "1133311111", "1113113131", "3113113111", "1133113111", "3111131131", "1131131131", "3131131111", "1111331131", "3111331111", "1131331111", "1111133131", "3111133111", "1131133111", "1111333111", "3111111331", "1131111331", "3131111311", "1111311331", "3111311311", "1131311311", "1111113331", "3111113311", "1131113311", "1111313311", "3311111131", "1331111131", "3331111111", "1311311131", "3311311111", "1331311111", "1311113131", "3311113111", "1331113111", "1313131111", "1313111311", "1311131311", "1113131311", "1311313111"]); //#5556
    var _l = $1.includecheck ? 3 : 2; //#5558
    $1.sbs = $s($f($1.barlen + _l) * 10); //#5558
    var _p = $1.includecheck ? 3 : 2; //#5559
    $1.txt = $a($f($1.barlen + _p)); //#5559
    $puti($1.sbs, 0, $get($1.encs, 43)); //#5562
    if (!$1.hidestars) { //#5566
        $put($1.txt, 0, $a(["*", 0, $1.textyoffset, $1.textfont, $1.textsize])); //#5564
    } else { //#5566
        $put($1.txt, 0, $a(["", 0, $1.textyoffset, $1.textfont, $1.textsize])); //#5566
    } //#5566
    for (var _17 = 0, _16 = $f($1.barlen - 1); _17 <= _16; _17 += 1) { //#5574
        $1.i = _17; //#5570
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#5571
        $puti($1.sbs, ($1.i * 10) + 10, $get($1.encs, $1.indx)); //#5572
        $put($1.txt, $1.i + 1, $a([$geti($1.barcode, $1.i, 1), ($1.i + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#5573
    } //#5573
    if ($1.includecheck) { //#5595
        $puti($1.sbs, $f(($1.barlen * 10) + 10), $get($1.encs, $1.checksum)); //#5578
        if ($1.includecheckintext) { //#5582
            $put($1.txt, $f($1.barlen + 1), $a([$geti($1.barchars, $1.checksum, 1), $f($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#5580
        } else { //#5582
            $put($1.txt, $f($1.barlen + 1), $a(["", $f($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#5582
        } //#5582
        $puti($1.sbs, $f(($1.barlen * 10) + 20), $get($1.encs, 43)); //#5584
        if (!$1.hidestars) { //#5588
            $put($1.txt, $f($1.barlen + 2), $a(["*", $f($1.barlen + 2) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#5586
        } else { //#5588
            $put($1.txt, $f($1.barlen + 2), $a(["", $f($1.barlen + 2) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#5588
        } //#5588
    } else { //#5595
        $puti($1.sbs, $f(($1.barlen * 10) + 10), $get($1.encs, 43)); //#5591
        if (!$1.hidestars) { //#5595
            $put($1.txt, $f($1.barlen + 1), $a(["*", $f($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#5593
        } else { //#5595
            $put($1.txt, $f($1.barlen + 1), $a(["", $f($1.barlen + 1) * 16, $1.textyoffset, $1.textfont, $1.textsize])); //#5595
        } //#5595
    } //#5595
    $k[$j++] = Infinity; //#5608
    $k[$j++] = Infinity; //#5602
    var _2S = $1.sbs; //#5602
    for (var _2T = 0, _2U = _2S.length; _2T < _2U; _2T++) { //#5602
        $k[$j++] = $get(_2S, _2T) - 48; //#5602
    } //#5602
    var _2W = $a(); //#5602
    $k[$j++] = Infinity; //#5603
    for (var _2Y = 0, _2Z = ~~(($1.sbs.length + 1) / 2); _2Y < _2Z; _2Y++) { //#5603
        $k[$j++] = $1.height; //#5603
    } //#5603
    var _2b = $a(); //#5603
    $k[$j++] = Infinity; //#5604
    for (var _2d = 0, _2e = ~~(($1.sbs.length + 1) / 2); _2d < _2e; _2d++) { //#5604
        $k[$j++] = 0; //#5604
    } //#5604
    var _2f = $a(); //#5604
    $k[$j++] = 'ren'; //#5607
    $k[$j++] = bwipp_renlinear; //#5607
    $k[$j++] = 'sbs'; //#5607
    $k[$j++] = _2W; //#5607
    $k[$j++] = 'bhs'; //#5607
    $k[$j++] = _2b; //#5607
    $k[$j++] = 'bbs'; //#5607
    $k[$j++] = _2f; //#5607
    if ($1.includetext) { //#5607
        $k[$j++] = 'txt'; //#5606
        $k[$j++] = $1.txt; //#5606
    } //#5606
    $k[$j++] = 'opt'; //#5608
    $k[$j++] = $1.options; //#5608
    var _2j = $d(); //#5608
    $k[$j++] = _2j; //#5611
    if (!$1.dontdraw) { //#5611
        bwipp_renlinear(); //#5611
    } //#5611
}

function bwipp_code39ext() {
    var $1 = {}; //#5642
    $1.options = $k[--$j]; //#5644
    $1.barcode = $k[--$j]; //#5645
    $1.dontdraw = false; //#5647
    $1.includetext = false; //#5648
    $1.parse = false; //#5649
    $forall($1.options, function() { //#5660
        var _3 = $k[--$j]; //#5660
        $1[$k[--$j]] = _3; //#5660
    }); //#5660
    var _6 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#5666
    $1.fncvals = _6; //#5667
    $k[$j++] = 'barcode'; //#5668
    $k[$j++] = $1.barcode; //#5668
    $k[$j++] = $1.fncvals; //#5668
    bwipp_parseinput(); //#5668
    var _9 = $k[--$j]; //#5668
    $1[$k[--$j]] = _9; //#5668
    $1.barlen = $1.barcode.length; //#5669
    delete $1.options["parse"]; //#5670
    $forall($1.barcode, function() { //#5677
        if ($k[--$j] >= 128) { //#5676
            $k[$j++] = 'bwipp.code39extBadCharacter'; //#5675
            $k[$j++] = "Code 39 Extended must contain only ASCII characters"; //#5675
            bwipp_raiseerror(); //#5675
        } //#5675
    }); //#5675
    $1.extencs = $a
    $1.newcode = $s($1.barlen * 2); //#5691
    $1.newtext = $s($1.barlen * 2); //#5692
    $1.j = 0; //#5693
    for (var _M = 0, _L = $1.barlen - 1; _M <= _L; _M += 1) { //#5701
        $1.i = _M; //#5695
        $1.extchar = $get($1.extencs, $get($1.barcode, $1.i)); //#5696
        $puti($1.newcode, $1.j, $1.extchar); //#5697
        $put($1.newtext, $1.j, $get($1.barcode, $1.i)); //#5698
        if ($1.extchar.length != 1) { //#5699
            $puti($1.newtext, $1.j + 1, " "); //#5699
        } //#5699
        $1.j = $1.j + $1.extchar.length; //#5700
    } //#5700
    $1.newcode = $geti($1.newcode, 0, $1.j); //#5702
    $1.newtext = $geti($1.newtext, 0, $1.j); //#5703
    $put($1.options, "dontdraw", true); //#5706
    $k[$j++] = 'args'; //#5707
    $k[$j++] = $1.newcode; //#5707
    $k[$j++] = $1.options; //#5707
    bwipp_code39(); //#5707
    var _o = $k[--$j]; //#5707
    $1[$k[--$j]] = _o; //#5707
    if ($1.includetext) { //#5719
        $1.txt = $get($1.args, "txt"); //#5711
        for (var _v = 0, _u = $1.newtext.length - 1; _v <= _u; _v += 1) { //#5717
            $1.i = _v; //#5713
            $1.txtentry = $get($1.txt, $1.i + 1); //#5714
            $put($1.txtentry, 0, $geti($1.newtext, $1.i, 1)); //#5715
            $put($1.txt, $1.i + 1, $1.txtentry); //#5716
        } //#5716
        $put($1.args, "txt", $1.txt); //#5718
    } //#5718
    $put($1.args, "opt", $1.options); //#5720
    $k[$j++] = $1.args; //#5723
    if (!$1.dontdraw) { //#5723
        bwipp_renlinear(); //#5723
    } //#5723
}

function bwipp_code32() {
    var $1 = {}; //#5753
    $1.options = $k[--$j]; //#5755
    $1.barcode = $k[--$j]; //#5756
    $1.dontdraw = false; //#5758
    $1.includetext = false; //#5759
    $1.textfont = "OCR-B"; //#5760
    $1.textsize = 10; //#5761
    $1.textyoffset = -8; //#5762
    $1.textxoffset = 0; //#5763
    $1.height = 1; //#5764
    $forall($1.options, function() { //#5775
        var _3 = $k[--$j]; //#5775
        $1[$k[--$j]] = _3; //#5775
    }); //#5775
    $1.textfont = "" + $1.textfont; //#5777
    $1.textsize = +$1.textsize; //#5778
    $1.textyoffset = +$1.textyoffset; //#5779
    $1.height = +$1.height; //#5780
    if (($1.barcode.length != 8) && ($1.barcode.length != 9)) { //#5785
        $k[$j++] = 'bwipp.code32badLength'; //#5784
        $k[$j++] = "Italian Pharmacode must be 8 or 9 digits"; //#5784
        bwipp_raiseerror(); //#5784
    } //#5784
    $forall($1.barcode, function() { //#5790
        var _C = $k[--$j]; //#5787
        if ((_C < 48) || (_C > 57)) { //#5789
            $k[$j++] = 'bwipp.code32badCharacter'; //#5788
            $k[$j++] = "Italian Pharmacode must contain only digits"; //#5788
            bwipp_raiseerror(); //#5788
        } //#5788
    }); //#5788
    $1.checksum = 0; //#5793
    for (var _D = 0; _D <= 7; _D += 1) { //#5798
        $1.i = _D; //#5795
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#5796
        if (($1.i % 2) != 0) { //#5796
            var _I = $k[--$j]; //#5796
            $k[$j++] = _I * 2; //#5796
        } //#5796
        var _J = $k[--$j]; //#5796
        $k[$j++] = _J; //#5796
        if (_J > 9) { //#5796
            var _K = $k[--$j]; //#5796
            $k[$j++] = $f(_K - 9); //#5796
        } //#5796
        $1.checksum = $f($k[--$j] + $1.checksum); //#5797
    } //#5797
    $1.checksum = $1.checksum % 10; //#5799
    if ($1.barcode.length == 9) { //#5804
        if ($get($1.barcode, 8) != $f($1.checksum + 48)) { //#5803
            $k[$j++] = 'bwipp.code32badCheckDigit'; //#5802
            $k[$j++] = "Incorrect Italian Pharmacode check digit provided"; //#5802
            bwipp_raiseerror(); //#5802
        } //#5802
    } //#5802
    var _S = $s(10); //#5805
    $puti(_S, 0, $1.barcode); //#5806
    $put(_S, 8, $f($1.checksum + 48)); //#5807
    $1.text = _S; //#5808
    $1.val = $cvrs($s(6), $cvi($1.text), 32); //#5811
    $1.barcode = $s(6); //#5812
    for (var _Z = 0; _Z <= 5; _Z += 1) { //#5813
        $put($1.barcode, _Z, 48); //#5813
    } //#5813
    $puti($1.barcode, 6 - $1.val.length, $1.val); //#5814
    for (var _e = 0; _e <= 5; _e += 1) { //#5821
        var _g = $get($1.barcode, _e); //#5818
        $k[$j++] = _e; //#5819
        $k[$j++] = _g; //#5819
        $k[$j++] = _g; //#5819
        for (var _h = 0, _i = "AEIO".length; _h < _i; _h++) { //#5819
            if ($k[--$j] >= $get("AEIO", _h)) { //#5819
                var _l = $k[--$j]; //#5819
                $k[$j++] = $f(_l + 1); //#5819
            } //#5819
            var _m = $k[--$j]; //#5819
            $k[$j++] = _m; //#5819
            $k[$j++] = _m; //#5819
        } //#5819
        $j--; //#5819
        var _o = $k[--$j]; //#5820
        $put($1.barcode, $k[--$j], _o); //#5820
    } //#5820
    var _r = $1.text; //#5824
    $puti($1.text, 1, $geti(_r, 0, 9)); //#5824
    $put($1.text, 0, 65); //#5825
    $put($1.options, "dontdraw", true); //#5828
    $k[$j++] = 'args'; //#5829
    $k[$j++] = $1.barcode; //#5829
    $k[$j++] = $1.options; //#5829
    bwipp_code39(); //#5829
    var _x = $k[--$j]; //#5829
    $1[$k[--$j]] = _x; //#5829
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#5831
    $put($1.args, "textxalign", "center"); //#5832
    $put($1.args, "opt", $1.options); //#5833
    $k[$j++] = $1.args; //#5836
    if (!$1.dontdraw) { //#5836
        bwipp_renlinear(); //#5836
    } //#5836
}

function bwipp_pzn() {
    var $1 = {}; //#5866
    $1.options = $k[--$j]; //#5868
    $1.barcode = $k[--$j]; //#5869
    $1.dontdraw = false; //#5871
    $1.includetext = false; //#5872
    $1.textfont = "OCR-B"; //#5873
    $1.textsize = 10; //#5874
    $1.textyoffset = -8; //#5875
    $1.textxoffset = 0; //#5876
    $1.height = 1; //#5877
    $1.pzn8 = false; //#5878
    $forall($1.options, function() { //#5889
        var _3 = $k[--$j]; //#5889
        $1[$k[--$j]] = _3; //#5889
    }); //#5889
    $1.textfont = "" + $1.textfont; //#5891
    $1.textsize = +$1.textsize; //#5892
    $1.textyoffset = +$1.textyoffset; //#5893
    $1.textxoffset = +$1.textxoffset; //#5894
    $1.height = +$1.height; //#5895
    if ($1.pzn8) { //#5904
        if (($1.barcode.length != 7) && ($1.barcode.length != 8)) { //#5901
            $k[$j++] = 'bwipp.pzn8badLength'; //#5900
            $k[$j++] = "PZN8 must be 7 or 8 digits"; //#5900
            bwipp_raiseerror(); //#5900
        } //#5900
    } else { //#5904
        if (($1.barcode.length != 6) && ($1.barcode.length != 7)) { //#5905
            $k[$j++] = 'bwipp.pzn7badLength'; //#5904
            $k[$j++] = "PZN7 must be 6 or 7 digits"; //#5904
            bwipp_raiseerror(); //#5904
        } //#5904
    } //#5904
    $forall($1.barcode, function() { //#5911
        var _G = $k[--$j]; //#5908
        if ((_G < 48) || (_G > 57)) { //#5910
            $k[$j++] = 'bwipp.pznBadCharacter'; //#5909
            $k[$j++] = "PZN must contain only digits"; //#5909
            bwipp_raiseerror(); //#5909
        } //#5909
    }); //#5909
    var _I = $1.pzn8 ? 9 : 8; //#5914
    $1.msglen = _I; //#5914
    $1.checksum = 0; //#5915
    for (var _L = 0, _K = $1.msglen - 3; _L <= _K; _L += 1) { //#5920
        $1.i = _L; //#5917
        var _R = $1.pzn8 ? 1 : 2; //#5918
        $1.checksum = $f(($f($get($1.barcode, $1.i) - 48) * ($1.i + _R)) + $1.checksum); //#5919
    } //#5919
    $1.checksum = $1.checksum % 11; //#5921
    if ($1.checksum == 10) { //#5924
        $k[$j++] = 'bwipp.pznBadInputSequence'; //#5923
        $k[$j++] = "Incorrect PZN input sequence provided"; //#5923
        bwipp_raiseerror(); //#5923
    } //#5923
    if ($1.barcode.length == ($1.msglen - 1)) { //#5929
        if ($get($1.barcode, $1.msglen - 2) != $f($1.checksum + 48)) { //#5928
            $k[$j++] = 'bwipp.pznBadCheckDigit'; //#5927
            $k[$j++] = "Incorrect PZN check digit provided"; //#5927
            bwipp_raiseerror(); //#5927
        } //#5927
    } //#5927
    var _c = $s($1.msglen); //#5930
    $put(_c, 0, 45); //#5931
    $puti(_c, 1, $1.barcode); //#5932
    $put(_c, $1.msglen - 1, $f($1.checksum + 48)); //#5933
    $1.msg = _c; //#5934
    $put($1.options, "dontdraw", true); //#5937
    $k[$j++] = 'args'; //#5938
    $k[$j++] = $1.msg; //#5938
    $k[$j++] = $1.options; //#5938
    bwipp_code39(); //#5938
    var _j = $k[--$j]; //#5938
    $1[$k[--$j]] = _j; //#5938
    $1.text = $s($1.msglen + 5); //#5941
    $puti($1.text, 0, "PZN - "); //#5942
    var _r = $geti($1.msg, 1, $1.msglen - 1); //#5943
    $puti($1.text, 6, _r); //#5943
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#5945
    $put($1.args, "textxalign", "center"); //#5946
    $put($1.args, "opt", $1.options); //#5947
    $k[$j++] = $1.args; //#5950
    if (!$1.dontdraw) { //#5950
        bwipp_renlinear(); //#5950
    } //#5950
}

function bwipp_code93() {
    var $1 = {}; //#5980
    $1.options = $k[--$j]; //#5982
    $1.barcode = $k[--$j]; //#5983
    $1.dontdraw = false; //#5985
    $1.includecheck = false; //#5986
    $1.includetext = false; //#5987
    $1.textfont = "OCR-B"; //#5988
    $1.textsize = 10; //#5989
    $1.textyoffset = -8; //#5990
    $1.height = 1; //#5991
    $1.parse = false; //#5992
    $1.parsefnc = false; //#5993
    $forall($1.options, function() { //#6004
        var _3 = $k[--$j]; //#6004
        $1[$k[--$j]] = _3; //#6004
    }); //#6004
    $1.textfont = "" + $1.textfont; //#6006
    $1.textsize = +$1.textsize; //#6007
    $1.textyoffset = +$1.textyoffset; //#6008
    $1.height = +$1.height; //#6009
    $1.encs = $a(["131112", "111213", "111312", "111411", "121113", "121212", "121311", "111114", "131211", "141111", "211113", "211212", "211311", "221112", "221211", "231111", "112113", "112212", "112311", "122112", "132111", "111123", "111222", "111321", "121122", "131121", "212112", "212211", "211122", "211221", "221121", "222111", "112122", "112221", "122121", "123111", "121131", "311112", "311211", "321111", "112131", "113121", "211131", "121221", "312111", "311121", "122211", "111141", "1111411"]); //#6022
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#6025
    $1.sft1 = -1; //#6028
    $1.sft2 = -2; //#6028
    $1.sft3 = -3; //#6028
    $1.sft4 = -4; //#6028
    var _G = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["SFT$", $1.sft1],
        ["SFT%", $1.sft2],
        ["SFT/", $1.sft3],
        ["SFT+", $1.sft4]
    ]); //#6035
    $1.fncvals = _G; //#6036
    $k[$j++] = 'msg'; //#6037
    $k[$j++] = $1.barcode; //#6037
    $k[$j++] = $1.fncvals; //#6037
    bwipp_parseinput(); //#6037
    var _J = $k[--$j]; //#6037
    $1[$k[--$j]] = _J; //#6037
    $1.msglen = $1.msg.length; //#6038
    if ($1.includecheck) { //#6043
        $1.sbs = $s(($1.msglen * 6) + 25); //#6041
    } else { //#6043
        $1.sbs = $s(($1.msglen * 6) + 13); //#6043
    } //#6043
    $1.txt = $a($1.msglen); //#6045
    $puti($1.sbs, 0, $get($1.encs, 47)); //#6048
    $1.checksum1 = 0; //#6050
    $1.checksum2 = 0; //#6050
    for (var _Y = 0, _X = $1.msglen - 1; _Y <= _X; _Y += 1) { //#6069
        $1.i = _Y; //#6052
        var _b = $get($1.msg, $1.i); //#6054
        $k[$j++] = _b; //#6063
        if (_b < 0) { //#6062
            $1.indx = $f(42 - $k[--$j]); //#6055
            $1.char = " "; //#6056
        } else { //#6062
            var _d = $s(1); //#6058
            $put(_d, 0, $k[--$j]); //#6058
            $1.char = _d; //#6058
            $search($1.barchars, $1.char); //#6059
            $j--; //#6060
            $1.indx = $k[--$j].length; //#6061
            $j -= 2; //#6062
        } //#6062
        $1.enc = $get($1.encs, $1.indx); //#6064
        $puti($1.sbs, ($1.i * 6) + 6, $1.enc); //#6065
        $put($1.txt, $1.i, $a([$1.char, ($1.i * 9) + 9, $1.textyoffset, $1.textfont, $1.textsize])); //#6066
        $1.checksum1 = $1.checksum1 + ((((($1.msglen - $1.i) - 1) % 20) + 1) * $1.indx); //#6067
        $1.checksum2 = $1.checksum2 + (((($1.msglen - $1.i) % 15) + 1) * $1.indx); //#6068
    } //#6068
    if ($1.includecheck) { //#6081
        $1.checksum1 = $1.checksum1 % 47; //#6073
        $1.checksum2 = ($1.checksum2 + $1.checksum1) % 47; //#6074
        $puti($1.sbs, ($1.msglen * 6) + 6, $get($1.encs, $1.checksum1)); //#6075
        $puti($1.sbs, ($1.msglen * 6) + 12, $get($1.encs, $1.checksum2)); //#6076
        $puti($1.sbs, ($1.msglen * 6) + 18, $get($1.encs, 48)); //#6078
    } else { //#6081
        $puti($1.sbs, ($1.msglen * 6) + 6, $get($1.encs, 48)); //#6081
    } //#6081
    $k[$j++] = Infinity; //#6093
    $k[$j++] = Infinity; //#6087
    var _1Q = $1.sbs; //#6087
    for (var _1R = 0, _1S = _1Q.length; _1R < _1S; _1R++) { //#6087
        $k[$j++] = $get(_1Q, _1R) - 48; //#6087
    } //#6087
    var _1U = $a(); //#6087
    $k[$j++] = Infinity; //#6088
    for (var _1W = 0, _1X = ~~(($1.sbs.length + 1) / 2); _1W < _1X; _1W++) { //#6088
        $k[$j++] = $1.height; //#6088
    } //#6088
    var _1Z = $a(); //#6088
    $k[$j++] = Infinity; //#6089
    for (var _1b = 0, _1c = ~~(($1.sbs.length + 1) / 2); _1b < _1c; _1b++) { //#6089
        $k[$j++] = 0; //#6089
    } //#6089
    var _1d = $a(); //#6089
    $k[$j++] = 'ren'; //#6092
    $k[$j++] = bwipp_renlinear; //#6092
    $k[$j++] = 'sbs'; //#6092
    $k[$j++] = _1U; //#6092
    $k[$j++] = 'bhs'; //#6092
    $k[$j++] = _1Z; //#6092
    $k[$j++] = 'bbs'; //#6092
    $k[$j++] = _1d; //#6092
    if ($1.includetext) { //#6092
        $k[$j++] = 'txt'; //#6091
        $k[$j++] = $1.txt; //#6091
    } //#6091
    $k[$j++] = 'opt'; //#6093
    $k[$j++] = $1.options; //#6093
    var _1h = $d(); //#6093
    $k[$j++] = _1h; //#6096
    if (!$1.dontdraw) { //#6096
        bwipp_renlinear(); //#6096
    } //#6096
}

function bwipp_code93ext() {
    var $1 = {}; //#6127
    $1.options = $k[--$j]; //#6129
    $1.barcode = $k[--$j]; //#6130
    $1.dontdraw = false; //#6132
    $1.includetext = false; //#6133
    $1.parse = false; //#6134
    $forall($1.options, function() { //#6145
        var _3 = $k[--$j]; //#6145
        $1[$k[--$j]] = _3; //#6145
    }); //#6145
    var _6 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#6151
    $1.fncvals = _6; //#6152
    $k[$j++] = 'barcode'; //#6153
    $k[$j++] = $1.barcode; //#6153
    $k[$j++] = $1.fncvals; //#6153
    bwipp_parseinput(); //#6153
    var _9 = $k[--$j]; //#6153
    $1[$k[--$j]] = _9; //#6153
    $1.barlen = $1.barcode.length; //#6154
    delete $1.options["parse"]; //#6155
    $1.extencs = $a
    $1.newcode = $s($1.barlen * 6); //#6177
    $1.newtext = $s($1.barlen * 6); //#6178
    $1.j = 0; //#6179
    $1.k = 0; //#6179
    for (var _K = 0, _J = $1.barlen - 1; _K <= _J; _K += 1) { //#6189
        $1.i = _K; //#6181
        $1.extchar = $get($1.extencs, $get($1.barcode, $1.i)); //#6182
        $1.extlen = $1.extchar.length; //#6183
        $puti($1.newcode, $1.j, $1.extchar); //#6184
        $put($1.newtext, $1.k, $get($1.barcode, $1.i)); //#6185
        if ($1.extlen != 1) { //#6186
            $puti($1.newtext, $1.k + 1, " "); //#6186
        } //#6186
        $1.j = $1.j + $1.extlen; //#6187
        var _g = ($1.extlen == 1) ? 1 : 2; //#6188
        $1.k = $1.k + _g; //#6188
    } //#6188
    $1.newcode = $geti($1.newcode, 0, $1.j); //#6190
    $1.newtext = $geti($1.newtext, 0, $1.k); //#6191
    $put($1.options, "dontdraw", true); //#6194
    $put($1.options, "parsefnc", true); //#6195
    $k[$j++] = 'args'; //#6196
    $k[$j++] = $1.newcode; //#6196
    $k[$j++] = $1.options; //#6196
    bwipp_code93(); //#6196
    var _r = $k[--$j]; //#6196
    $1[$k[--$j]] = _r; //#6196
    if ($1.includetext) { //#6208
        $1.txt = $get($1.args, "txt"); //#6200
        for (var _y = 0, _x = $1.newtext.length - 1; _y <= _x; _y += 1) { //#6206
            $1.i = _y; //#6202
            $1.txtentry = $get($1.txt, $1.i); //#6203
            $put($1.txtentry, 0, $geti($1.newtext, $1.i, 1)); //#6204
            $put($1.txt, $1.i, $1.txtentry); //#6205
        } //#6205
        $put($1.args, "txt", $1.txt); //#6207
    } //#6207
    $put($1.args, "opt", $1.options); //#6209
    $k[$j++] = $1.args; //#6212
    if (!$1.dontdraw) { //#6212
        bwipp_renlinear(); //#6212
    } //#6212
}

function bwipp_interleaved2of5() {
    var $1 = {}; //#6241
    $1.options = $k[--$j]; //#6243
    $1.barcode = $k[--$j]; //#6244
    $1.dontdraw = false; //#6246
    $1.includecheck = false; //#6247
    $1.includetext = false; //#6248
    $1.includecheckintext = false; //#6249
    $1.textfont = "OCR-B"; //#6250
    $1.textsize = 10; //#6251
    $1.textyoffset = -8; //#6252
    $1.height = 1; //#6253
    $forall($1.options, function() { //#6264
        var _3 = $k[--$j]; //#6264
        $1[$k[--$j]] = _3; //#6264
    }); //#6264
    $1.textfont = "" + $1.textfont; //#6266
    $1.textsize = +$1.textsize; //#6267
    $1.textyoffset = +$1.textyoffset; //#6268
    $1.height = +$1.height; //#6269
    $forall($1.barcode, function() { //#6276
        var _A = $k[--$j]; //#6273
        if ((_A < 48) || (_A > 57)) { //#6275
            $k[$j++] = 'bwipp.interleaved2of5badCharacter'; //#6274
            $k[$j++] = "Interleaved 2 of 5 must contain only digits"; //#6274
            bwipp_raiseerror(); //#6274
        } //#6274
    }); //#6274
    $1.barlen = $1.barcode.length; //#6278
    if (((($1.barlen % 2) == 0) && $1.includecheck) || ((($1.barlen % 2) != 0) && (!$1.includecheck))) { //#6289
        $1.pad = $s($1.barlen + 1); //#6284
        $put($1.pad, 0, 48); //#6285
        $puti($1.pad, 1, $1.barcode); //#6286
        $1.barcode = $1.pad; //#6287
        $1.barlen = $1.barlen + 1; //#6288
    } //#6288
    if ($1.includecheck) { //#6308
        $1.checksum = 0; //#6293
        for (var _Q = 0, _P = $1.barlen - 1; _Q <= _P; _Q += 1) { //#6301
            $1.i = _Q; //#6295
            if (($1.i % 2) == 0) { //#6299
                $1.checksum = $1.checksum + (($get($1.barcode, $1.i) - 48) * 3); //#6297
            } else { //#6299
                $1.checksum = $1.checksum + ($get($1.barcode, $1.i) - 48); //#6299
            } //#6299
        } //#6299
        $1.checksum = (10 - ($1.checksum % 10)) % 10; //#6302
        $1.pad = $s($1.barlen + 1); //#6303
        $puti($1.pad, 0, $1.barcode); //#6304
        $put($1.pad, $1.barlen, $1.checksum + 48); //#6305
        $1.barcode = $1.pad; //#6306
        $1.barlen = $1.barlen + 1; //#6307
    } //#6307
    $1.encs = $a(["11221", "21112", "12112", "22111", "11212", "21211", "12211", "11122", "21121", "12121", "1111", "2111"]); //#6315
    $1.barchars = "0123456789"; //#6318
    $1.sbs = $s(($1.barlen * 5) + 8); //#6319
    $1.txt = $a($1.barlen); //#6320
    $puti($1.sbs, 0, $get($1.encs, 10)); //#6323
    for (var _u = 0, _t = $1.barlen - 1; _u <= _t; _u += 2) { //#6357
        $1.i = _u; //#6326
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#6328
        $j--; //#6329
        $1.indx = $k[--$j].length; //#6330
        $j -= 2; //#6331
        $1.enca = $get($1.encs, $1.indx); //#6332
        $search($1.barchars, $geti($1.barcode, $1.i + 1, 1)); //#6334
        $j--; //#6335
        $1.indx = $k[--$j].length; //#6336
        $j -= 2; //#6337
        $1.encb = $get($1.encs, $1.indx); //#6338
        $1.intl = $s($1.enca.length * 2); //#6341
        for (var _1F = 0, _1E = $1.enca.length - 1; _1F <= _1E; _1F += 1) { //#6348
            $1.j = _1F; //#6343
            $1.achar = $get($1.enca, $1.j); //#6344
            $1.bchar = $get($1.encb, $1.j); //#6345
            $put($1.intl, $1.j * 2, $1.achar); //#6346
            $put($1.intl, ($1.j * 2) + 1, $1.bchar); //#6347
        } //#6347
        $puti($1.sbs, ($1.i * 5) + 4, $1.intl); //#6350
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); //#6351
        if (($1.includecheck && (!$1.includecheckintext)) && (($1.barlen - 2) == $1.i)) { //#6355
            $put($1.txt, $1.i + 1, $a([" ", (($1.i + 1) * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); //#6353
        } else { //#6355
            $put($1.txt, $1.i + 1, $a([$geti($1.barcode, $1.i + 1, 1), (($1.i + 1) * 9) + 4, $1.textyoffset, $1.textfont, $1.textsize])); //#6355
        } //#6355
    } //#6355
    $puti($1.sbs, ($1.barlen * 5) + 4, $get($1.encs, 11)); //#6360
    $k[$j++] = Infinity; //#6373
    $k[$j++] = Infinity; //#6365
    var _24 = $1.sbs; //#6365
    for (var _25 = 0, _26 = _24.length; _25 < _26; _25++) { //#6365
        $k[$j++] = $get(_24, _25) - 48; //#6365
    } //#6365
    var _28 = $a(); //#6365
    $k[$j++] = Infinity; //#6366
    for (var _2A = 0, _2B = ~~(($1.sbs.length + 1) / 2); _2A < _2B; _2A++) { //#6366
        $k[$j++] = $1.height; //#6366
    } //#6366
    var _2D = $a(); //#6366
    $k[$j++] = Infinity; //#6367
    for (var _2F = 0, _2G = ~~(($1.sbs.length + 1) / 2); _2F < _2G; _2F++) { //#6367
        $k[$j++] = 0; //#6367
    } //#6367
    var _2H = $a(); //#6367
    $k[$j++] = 'ren'; //#6370
    $k[$j++] = bwipp_renlinear; //#6370
    $k[$j++] = 'sbs'; //#6370
    $k[$j++] = _28; //#6370
    $k[$j++] = 'bhs'; //#6370
    $k[$j++] = _2D; //#6370
    $k[$j++] = 'bbs'; //#6370
    $k[$j++] = _2H; //#6370
    if ($1.includetext) { //#6370
        $k[$j++] = 'txt'; //#6369
        $k[$j++] = $1.txt; //#6369
    } //#6369
    $k[$j++] = 'barratio'; //#6373
    $k[$j++] = 2; //#6373
    $k[$j++] = 'spaceratio'; //#6373
    $k[$j++] = 2; //#6373
    $k[$j++] = 'opt'; //#6373
    $k[$j++] = $1.options; //#6373
    var _2L = $d(); //#6373
    $k[$j++] = _2L; //#6376
    if (!$1.dontdraw) { //#6376
        bwipp_renlinear(); //#6376
    } //#6376
}

function bwipp_itf14() {
    var $1 = {}; //#6406
    $1.options = $k[--$j]; //#6408
    $1.barcode = $k[--$j]; //#6409
    $1.dontdraw = false; //#6411
    $1.includetext = false; //#6412
    $1.includecheckintext = true; //#6413
    $1.textfont = "OCR-B"; //#6414
    $1.textsize = 10; //#6415
    $1.textxoffset = 0; //#6416
    $1.textyoffset = 3; //#6417
    $1.height = 0.5; //#6418
    $1.showborder = true; //#6419
    $1.borderwidth = 4; //#6420
    $1.borderleft = 15; //#6421
    $1.borderright = 15; //#6422
    $forall($1.options, function() { //#6433
        var _3 = $k[--$j]; //#6433
        $1[$k[--$j]] = _3; //#6433
    }); //#6433
    $1.textfont = "" + $1.textfont; //#6435
    $1.textsize = +$1.textsize; //#6436
    $1.textxoffset = +$1.textxoffset; //#6437
    $1.textyoffset = +$1.textyoffset; //#6438
    $1.height = +$1.height; //#6439
    $1.borderwidth = +$1.borderwidth; //#6440
    $1.borderleft = +$1.borderleft; //#6441
    $1.borderright = +$1.borderright; //#6442
    $1.text = $1.barcode; //#6445
    var _E = $1.barcode; //#6446
    $k[$j++] = $s(_E.length); //#6447
    $k[$j++] = 0; //#6447
    $forall(_E, function() { //#6447
        var _G = $k[--$j]; //#6447
        $k[$j++] = _G; //#6447
        if (_G != 32) { //#6447
            var _H = $k[--$j]; //#6447
            var _I = $k[--$j]; //#6447
            var _J = $k[--$j]; //#6447
            $put(_J, _I, _H); //#6447
            $k[$j++] = _J; //#6447
            $k[$j++] = $f(_I + 1); //#6447
        } else { //#6447
            $j--; //#6447
        } //#6447
    }); //#6447
    var _K = $k[--$j]; //#6448
    $1.barcode = $geti($k[--$j], 0, _K); //#6448
    $1.hasspace = $1.text.length != $1.barcode.length; //#6449
    if (($1.barcode.length != 13) && ($1.barcode.length != 14)) { //#6454
        $k[$j++] = 'bwipp.itf14badLength'; //#6453
        $k[$j++] = "ITF-14 must be 13 or 14 digits"; //#6453
        bwipp_raiseerror(); //#6453
    } //#6453
    var _R = $1.barcode; //#6455
    for (var _S = 0, _T = _R.length; _S < _T; _S++) { //#6459
        var _U = $get(_R, _S); //#6459
        if ((_U < 48) || (_U > 57)) { //#6458
            $k[$j++] = 'bwipp.itf14badCharacter'; //#6457
            $k[$j++] = "ITF-14 must contain only digits"; //#6457
            bwipp_raiseerror(); //#6457
        } //#6457
    } //#6457
    $1.checksum = 0; //#6462
    for (var _V = 0; _V <= 12; _V += 1) { //#6466
        $1.i = _V; //#6464
        $k[$j++] = 'checksum'; //#6465
        $k[$j++] = $1.checksum; //#6465
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#6465
        if (($1.i % 2) == 0) { //#6465
            var _b = $k[--$j]; //#6465
            $k[$j++] = _b * 3; //#6465
        } //#6465
        var _c = $k[--$j]; //#6465
        var _d = $k[--$j]; //#6465
        $1[$k[--$j]] = $f(_d + _c); //#6465
    } //#6465
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#6467
    if ($1.barcode.length == 14) { //#6481
        if ($get($1.barcode, 13) != ($1.checksum + 48)) { //#6471
            $k[$j++] = 'bwipp.itf14badCheckDigit'; //#6470
            $k[$j++] = "Incorrect ITF-14 check digit provided"; //#6470
            bwipp_raiseerror(); //#6470
        } //#6470
    } else { //#6481
        var _k = $s(14); //#6473
        $puti(_k, 0, $1.barcode); //#6474
        $put(_k, 13, $1.checksum + 48); //#6475
        $1.barcode = _k; //#6476
        var _p = $1.hasspace ? 2 : 1; //#6477
        var _q = $s($1.text.length + _p); //#6477
        $puti(_q, _q.length - 2, " "); //#6478
        $put(_q, _q.length - 1, $1.checksum + 48); //#6479
        $puti(_q, 0, $1.text); //#6480
        $1.text = _q; //#6481
    } //#6481
    $put($1.options, "dontdraw", true); //#6485
    $put($1.options, "showborder", $1.showborder); //#6486
    $put($1.options, "borderwidth", $1.borderwidth); //#6487
    $put($1.options, "borderleft", $1.borderleft); //#6488
    $put($1.options, "borderright", $1.borderright); //#6489
    $put($1.options, "height", $1.height); //#6490
    $put($1.options, "textyoffset", $1.textyoffset); //#6491
    $k[$j++] = 'args'; //#6492
    $k[$j++] = $1.barcode; //#6492
    $k[$j++] = $1.options; //#6492
    bwipp_interleaved2of5(); //#6492
    var _18 = $k[--$j]; //#6492
    $1[$k[--$j]] = _18; //#6492
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#6494
    $put($1.args, "textxalign", "center"); //#6495
    $put($1.args, "opt", $1.options); //#6496
    $k[$j++] = $1.args; //#6499
    if (!$1.dontdraw) { //#6499
        bwipp_renlinear(); //#6499
    } //#6499
}

function bwipp_identcode() {
    var $1 = {}; //#6529
    $1.options = $k[--$j]; //#6531
    $1.barcode = $k[--$j]; //#6532
    $1.dontdraw = false; //#6534
    $1.includetext = false; //#6535
    $1.textfont = "OCR-B"; //#6536
    $1.textsize = 10; //#6537
    $1.textxoffset = 0; //#6538
    $1.textyoffset = -8; //#6539
    $1.height = 1; //#6540
    $forall($1.options, function() { //#6551
        var _3 = $k[--$j]; //#6551
        $1[$k[--$j]] = _3; //#6551
    }); //#6551
    $1.textfont = "" + $1.textfont; //#6553
    $1.textsize = +$1.textsize; //#6554
    $1.textxoffset = +$1.textxoffset; //#6555
    $1.textyoffset = +$1.textyoffset; //#6556
    $1.height = +$1.height; //#6557
    if (($1.barcode.length != 11) && ($1.barcode.length != 12)) { //#6562
        $k[$j++] = 'bwipp.identcodeBadLength'; //#6561
        $k[$j++] = "Deutsche Post Identcode must be 11 or 12 digits"; //#6561
        bwipp_raiseerror(); //#6561
    } //#6561
    $forall($1.barcode, function() { //#6567
        var _D = $k[--$j]; //#6564
        if ((_D < 48) || (_D > 57)) { //#6566
            $k[$j++] = 'bwipp.identcodeBadCharacter'; //#6565
            $k[$j++] = "Deutsche Post Identcode must contain only digits"; //#6565
            bwipp_raiseerror(); //#6565
        } //#6565
    }); //#6565
    $1.checksum = 0; //#6570
    for (var _E = 0; _E <= 10; _E += 1) { //#6574
        $1.i = _E; //#6572
        $k[$j++] = 'checksum'; //#6573
        $k[$j++] = $1.checksum; //#6573
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#6573
        if (($1.i % 2) == 0) { //#6573
            var _K = $k[--$j]; //#6573
            $k[$j++] = _K * 4; //#6573
        } else { //#6573
            var _L = $k[--$j]; //#6573
            $k[$j++] = _L * 9; //#6573
        } //#6573
        var _M = $k[--$j]; //#6573
        var _N = $k[--$j]; //#6573
        $1[$k[--$j]] = $f(_N + _M); //#6573
    } //#6573
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#6575
    if ($1.barcode.length == 12) { //#6580
        if ($get($1.barcode, 11) != ($1.checksum + 48)) { //#6579
            $k[$j++] = 'bwipp.identcodeBadCheckDigit'; //#6578
            $k[$j++] = "Incorrect Deutsche Post Identcode check digit provided"; //#6578
            bwipp_raiseerror(); //#6578
        } //#6578
    } //#6578
    var _U = $s(12); //#6581
    $puti(_U, 0, $1.barcode); //#6582
    $put(_U, 11, $1.checksum + 48); //#6583
    $1.barcode = _U; //#6584
    $1.text = $strcpy($s(16), "  .       .     "); //#6587
    $puti($1.text, 0, $geti($1.barcode, 0, 2)); //#6588
    $puti($1.text, 3, $geti($1.barcode, 2, 3)); //#6589
    $puti($1.text, 7, $geti($1.barcode, 5, 3)); //#6590
    var _i = $1.text; //#6591
    $puti(_i, 11, $geti($1.barcode, 8, 3)); //#6591
    $puti($1.text, 15, $geti($1.barcode, 11, 1)); //#6592
    $put($1.options, "dontdraw", true); //#6595
    $put($1.options, "includecheck", false); //#6596
    var _r = $1.options; //#6597
    $k[$j++] = 'args'; //#6597
    $k[$j++] = $1.barcode; //#6597
    $k[$j++] = _r; //#6597
    bwipp_interleaved2of5(); //#6597
    var _s = $k[--$j]; //#6597
    $1[$k[--$j]] = _s; //#6597
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#6599
    $put($1.args, "textxalign", "center"); //#6600
    $put($1.args, "opt", $1.options); //#6601
    $k[$j++] = $1.args; //#6604
    if (!$1.dontdraw) { //#6604
        bwipp_renlinear(); //#6604
    } //#6604
}

function bwipp_leitcode() {
    var $1 = {}; //#6634
    $1.options = $k[--$j]; //#6636
    $1.barcode = $k[--$j]; //#6637
    $1.dontdraw = false; //#6639
    $1.includetext = false; //#6640
    $1.textfont = "OCR-B"; //#6641
    $1.textsize = 10; //#6642
    $1.textxoffset = 0; //#6643
    $1.textyoffset = -8; //#6644
    $1.height = 1; //#6645
    $forall($1.options, function() { //#6656
        var _3 = $k[--$j]; //#6656
        $1[$k[--$j]] = _3; //#6656
    }); //#6656
    $1.textfont = "" + $1.textfont; //#6658
    $1.textsize = +$1.textsize; //#6659
    $1.textxoffset = +$1.textxoffset; //#6660
    $1.textyoffset = +$1.textyoffset; //#6661
    $1.height = +$1.height; //#6662
    if (($1.barcode.length != 13) && ($1.barcode.length != 14)) { //#6667
        $k[$j++] = 'bwipp.leitcodeBadLength'; //#6666
        $k[$j++] = "Deutsche Post Leitcode must be 13 or 14 digits"; //#6666
        bwipp_raiseerror(); //#6666
    } //#6666
    $forall($1.barcode, function() { //#6672
        var _D = $k[--$j]; //#6669
        if ((_D < 48) || (_D > 57)) { //#6671
            $k[$j++] = 'bwipp.leitcodeBadCharacter'; //#6670
            $k[$j++] = "Deutsche Post Leitcode must contain only digits"; //#6670
            bwipp_raiseerror(); //#6670
        } //#6670
    }); //#6670
    $1.checksum = 0; //#6675
    for (var _E = 0; _E <= 12; _E += 1) { //#6679
        $1.i = _E; //#6677
        $k[$j++] = 'checksum'; //#6678
        $k[$j++] = $1.checksum; //#6678
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#6678
        if (($1.i % 2) == 0) { //#6678
            var _K = $k[--$j]; //#6678
            $k[$j++] = _K * 4; //#6678
        } else { //#6678
            var _L = $k[--$j]; //#6678
            $k[$j++] = _L * 9; //#6678
        } //#6678
        var _M = $k[--$j]; //#6678
        var _N = $k[--$j]; //#6678
        $1[$k[--$j]] = $f(_N + _M); //#6678
    } //#6678
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#6680
    if ($1.barcode.length == 14) { //#6685
        if ($get($1.barcode, 13) != ($1.checksum + 48)) { //#6684
            $k[$j++] = 'bwipp.leitcodeBadCheckDigit'; //#6683
            $k[$j++] = "Incorrect Deutsche Post Leitcode check digit provided"; //#6683
            bwipp_raiseerror(); //#6683
        } //#6683
    } //#6683
    var _U = $s(14); //#6686
    $puti(_U, 0, $1.barcode); //#6687
    $put(_U, 13, $1.checksum + 48); //#6688
    $1.barcode = _U; //#6689
    $1.text = $strcpy($s(18), "     .   .   .    "); //#6692
    $puti($1.text, 0, $geti($1.barcode, 0, 5)); //#6693
    $puti($1.text, 6, $geti($1.barcode, 5, 3)); //#6694
    $puti($1.text, 10, $geti($1.barcode, 8, 3)); //#6695
    var _i = $1.text; //#6696
    $puti(_i, 14, $geti($1.barcode, 11, 2)); //#6696
    $puti($1.text, 17, $geti($1.barcode, 13, 1)); //#6697
    $put($1.options, "dontdraw", true); //#6700
    $put($1.options, "includecheck", false); //#6701
    var _r = $1.options; //#6702
    $k[$j++] = 'args'; //#6702
    $k[$j++] = $1.barcode; //#6702
    $k[$j++] = _r; //#6702
    bwipp_interleaved2of5(); //#6702
    var _s = $k[--$j]; //#6702
    $1[$k[--$j]] = _s; //#6702
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#6704
    $put($1.args, "textxalign", "center"); //#6705
    $put($1.args, "opt", $1.options); //#6706
    $k[$j++] = $1.args; //#6709
    if (!$1.dontdraw) { //#6709
        bwipp_renlinear(); //#6709
    } //#6709
}

function bwipp_databaromni() {
    var $1 = {}; //#6739
    $1.options = $k[--$j]; //#6741
    $1.barcode = $k[--$j]; //#6742
    $1.dontdraw = false; //#6744
    $1.height = 33 / 72; //#6745
    $1.linkage = false; //#6746
    $1.format = "omni"; //#6747
    $1.barxmult = 33; //#6748
    $forall($1.options, function() { //#6759
        var _3 = $k[--$j]; //#6759
        $1[$k[--$j]] = _3; //#6759
    }); //#6759
    if ($eq($1.format, "truncated")) { //#6761
        $1.height = 13 / 72; //#6761
    } //#6761
    $1.height = +$1.height; //#6762
    $1.barxmult = ~~$1.barxmult; //#6763
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#6768
        $k[$j++] = 'bwipp.databaromniBadAI'; //#6767
        $k[$j++] = "GS1 DataBar Omnidirectional must begin with (01) application identifier"; //#6767
        bwipp_raiseerror(); //#6767
    } //#6767
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#6771
        $k[$j++] = 'bwipp.databaromniBadLength'; //#6770
        $k[$j++] = "GS1 DataBar Omnidirectional must be 13 or 14 digits"; //#6770
        bwipp_raiseerror(); //#6770
    } //#6770
    var _E = $geti($1.barcode, 4, $1.barcode.length - 4); //#6772
    for (var _F = 0, _G = _E.length; _F < _G; _F++) { //#6776
        var _H = $get(_E, _F); //#6776
        if ((_H < 48) || (_H > 57)) { //#6775
            $k[$j++] = 'bwipp.databaromniBadCharacter'; //#6774
            $k[$j++] = "GS1 DataBar Omnidirectional must contain only digits"; //#6774
            bwipp_raiseerror(); //#6774
        } //#6774
    } //#6774
    $1.checksum = 0; //#6779
    for (var _I = 0; _I <= 12; _I += 1) { //#6783
        $1.i = _I; //#6781
        $k[$j++] = 'checksum'; //#6782
        $k[$j++] = $1.checksum; //#6782
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#6782
        if (($1.i % 2) == 0) { //#6782
            var _O = $k[--$j]; //#6782
            $k[$j++] = _O * 3; //#6782
        } //#6782
        var _P = $k[--$j]; //#6782
        var _Q = $k[--$j]; //#6782
        $1[$k[--$j]] = $f(_Q + _P); //#6782
    } //#6782
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#6784
    if ($1.barcode.length == 18) { //#6789
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#6788
            $k[$j++] = 'bwipp.databaromniBadCheckDigit'; //#6787
            $k[$j++] = "Incorrect GS1 DataBar Omnidirectional check digit provided"; //#6787
            bwipp_raiseerror(); //#6787
        } //#6787
    } //#6787
    var _X = $s(18); //#6790
    $puti(_X, 0, $1.barcode); //#6791
    $put(_X, 17, $1.checksum + 48); //#6792
    $1.barcode = _X; //#6793
    $1.txt = $a($1.barcode.length); //#6796
    for (var _e = 0, _d = $1.barcode.length - 1; _e <= _d; _e += 1) { //#6800
        $1.i = _e; //#6798
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#6799
    } //#6799
    $1.ncr = function() {
        var _l = $k[--$j]; //#6803
        var _m = $k[--$j]; //#6803
        var _n = $f(_m - _l); //#6803
        if (_l < $f(_m - _l)) { //#6803
            var _ = _n; //#6803
            _n = _l; //#6803
            _l = _; //#6803
        } //#6803
        $k[$j++] = _n; //#6810
        $k[$j++] = 1; //#6810
        $k[$j++] = 1; //#6810
        for (var _p = _m, _o = $f(_l + 1); _p >= _o; _p -= 1) { //#6810
            var _q = $k[--$j]; //#6806
            var _r = $k[--$j]; //#6807
            var _s = $k[--$j]; //#6807
            $k[$j++] = _s; //#6809
            $k[$j++] = _r; //#6809
            $k[$j++] = _q * _p; //#6809
            if ($le(_r, _s)) { //#6809
                var _t = $k[--$j]; //#6808
                var _u = $k[--$j]; //#6808
                $k[$j++] = $f(_u + 1); //#6808
                $k[$j++] = ~~(_t / _u); //#6808
            } //#6808
        } //#6808
        for (;;) { //#6814
            var _v = $k[--$j]; //#6812
            var _w = $k[--$j]; //#6812
            var _x = $k[--$j]; //#6812
            $k[$j++] = _x; //#6812
            $k[$j++] = _w; //#6812
            $k[$j++] = _v; //#6812
            if ($gt(_w, _x)) { //#6812
                break; //#6812
            } //#6812
            var _y = $k[--$j]; //#6813
            var _z = $k[--$j]; //#6813
            $k[$j++] = $f(_z + 1); //#6813
            $k[$j++] = ~~(_y / _z); //#6813
        } //#6813
        var _10 = $k[--$j]; //#6815
        var _11 = $k[--$j]; //#6815
        $k[$j++] = _10; //#6815
        $k[$j++] = _11; //#6815
        $j--; //#6815
        var _12 = $k[--$j]; //#6815
        var _13 = $k[--$j]; //#6815
        $k[$j++] = _12; //#6815
        $k[$j++] = _13; //#6815
        $j--; //#6815
    }; //#6816
    $1.getRSSwidths = function() {
        $1.oe = $k[--$j]; //#6819
        $1.el = $k[--$j]; //#6820
        $1.mw = $k[--$j]; //#6821
        $1.nm = $k[--$j]; //#6822
        $1.val = $k[--$j]; //#6823
        $1.out = $a($1.el); //#6824
        $1.mask = 0; //#6825
        for (var _1D = 0, _1C = $f($1.el - 2); _1D <= _1C; _1D += 1) { //#6852
            $1.bar = _1D; //#6827
            $1.ew = 1; //#6828
            var _1F = $1.bar; //#6829
            $1.mask = $1.mask | ((_1F < 0 ? 1 >>> -_1F : 1 << _1F)); //#6829
            for (;;) { //#6848
                $k[$j++] = 'sval'; //#6830
                $k[$j++] = $f($f($1.nm - $1.ew) - 1); //#6830
                $k[$j++] = $f($f($1.el - $1.bar) - 2); //#6830
                $1.ncr(); //#6830
                var _1K = $k[--$j]; //#6830
                $1[$k[--$j]] = _1K; //#6830
                if (($1.oe && ($1.mask == 0)) && (($f(($f($f($1.nm - $1.ew) - ($1.el * 2))) + ($1.bar * 2))) >= -2)) { //#6833
                    $k[$j++] = 'sval'; //#6832
                    $k[$j++] = $1.sval; //#6832
                    $k[$j++] = $f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar); //#6832
                    $k[$j++] = $f($f($1.el - $1.bar) - 2); //#6832
                    $1.ncr(); //#6832
                    var _1Z = $k[--$j]; //#6832
                    var _1a = $k[--$j]; //#6832
                    $1[$k[--$j]] = $f(_1a - _1Z); //#6832
                } //#6832
                if ($f($1.el - $1.bar) > 2) { //#6842
                    $1.lval = 0; //#6835
                    for (var _1k = $f(($f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar)) + 2), _1j = $f($1.mw + 1); _1k >= _1j; _1k -= 1) { //#6839
                        $k[$j++] = $f(($f($f($1.nm - _1k) - $1.ew)) - 1); //#6837
                        $k[$j++] = $f($f($1.el - $1.bar) - 3); //#6837
                        $1.ncr(); //#6837
                        $1.lval = $f($k[--$j] + $1.lval); //#6838
                    } //#6838
                    $1.sval = $f($1.sval - ($1.lval * ($f($f($1.el - $1.bar) - 1)))); //#6840
                } else { //#6842
                    if ($f($1.nm - $1.ew) > $1.mw) { //#6842
                        $1.sval = $f($1.sval - 1); //#6842
                    } //#6842
                } //#6842
                $1.val = $f($1.val - $1.sval); //#6844
                if ($1.val < 0) { //#6845
                    break; //#6845
                } //#6845
                $1.ew = $1.ew + 1; //#6846
                var _24 = $1.bar; //#6847
                $1.mask = $1.mask & (~((_24 < 0 ? 1 >>> -_24 : 1 << _24))); //#6847
            } //#6847
            $1.val = $f($1.val + $1.sval); //#6849
            $1.nm = $f($1.nm - $1.ew); //#6850
            $put($1.out, $1.bar, $1.ew); //#6851
        } //#6851
        $put($1.out, $f($1.el - 1), $1.nm); //#6853
        $k[$j++] = $1.out; //#6854
    }; //#6855
    $k[$j++] = Infinity; //#6859
    var _2H = $1.linkage ? 1 : 0; //#6858
    var _2J = $geti($1.barcode, 4, 13); //#6859
    $k[$j++] = _2H; //#6859
    for (var _2K = 0, _2L = _2J.length; _2K < _2L; _2K++) { //#6859
        $k[$j++] = $f($get(_2J, _2K) - 48); //#6859
    } //#6859
    $1.binval = $a(); //#6859
    for (var _2O = 0; _2O <= 12; _2O += 1) { //#6866
        $1.i = _2O; //#6863
        var _2P = $1.binval; //#6864
        var _2Q = $1.i; //#6864
        $put(_2P, _2Q + 1, $f($get(_2P, _2Q + 1) + (($get($1.binval, $1.i) % 4537077) * 10))); //#6864
        $put($1.binval, $1.i, ~~($get($1.binval, $1.i) / 4537077)); //#6865
    } //#6865
    $1.right = $get($1.binval, 13) % 4537077; //#6867
    var _2c = $1.binval; //#6868
    $put(_2c, 13, ~~($get(_2c, 13) / 4537077)); //#6868
    $1.left = 0; //#6870
    $1.i = true; //#6871
    for (var _2e = 0; _2e <= 13; _2e += 1) { //#6881
        $1.j = _2e; //#6873
        var _2h = $get($1.binval, $1.j); //#6874
        $k[$j++] = _2h; //#6880
        if ((_2h == 0) && $1.i) { //#6879
            $j--; //#6876
        } else { //#6879
            $1.i = false; //#6878
            $1.left = $f($1.left + ($k[--$j] * (~~Math.pow(10, 13 - $1.j)))); //#6879
        } //#6879
    } //#6879
    $1.d1 = ~~($1.left / 1597); //#6883
    $1.d2 = $1.left % 1597; //#6884
    $1.d3 = ~~($1.right / 1597); //#6885
    $1.d4 = $1.right % 1597; //#6886
    $1.tab164 = $a([160, 0, 12, 4, 8, 1, 161, 1, 960, 161, 10, 6, 6, 3, 80, 10, 2014, 961, 8, 8, 4, 5, 31, 34, 2714, 2015, 6, 10, 3, 6, 10, 70, 2840, 2715, 4, 12, 1, 8, 1, 126]); //#6894
    $1.tab154 = $a([335, 0, 5, 10, 2, 7, 4, 84, 1035, 336, 7, 8, 4, 5, 20, 35, 1515, 1036, 9, 6, 6, 3, 48, 10, 1596, 1516, 11, 4, 8, 1, 81, 1]); //#6901
    $1.i = 0; //#6903
    for (;;) { //#6913
        if ($1.d1 <= $get($1.tab164, $1.i)) { //#6911
            var _2y = $geti($1.tab164, $1.i + 1, 7); //#6905
            for (var _2z = 0, _30 = _2y.length; _2z < _30; _2z++) { //#6905
                $k[$j++] = $get(_2y, _2z); //#6905
            } //#6905
            $1.d1te = $k[--$j]; //#6906
            $1.d1to = $k[--$j]; //#6906
            $1.d1mwe = $k[--$j]; //#6907
            $1.d1mwo = $k[--$j]; //#6907
            $1.d1ele = $k[--$j]; //#6908
            $1.d1elo = $k[--$j]; //#6908
            $1.d1gs = $k[--$j]; //#6909
            break; //#6910
        } //#6910
        $1.i = $1.i + 8; //#6912
    } //#6912
    $1.i = 0; //#6915
    for (;;) { //#6925
        if ($1.d2 <= $get($1.tab154, $1.i)) { //#6923
            var _3G = $geti($1.tab154, $1.i + 1, 7); //#6917
            for (var _3H = 0, _3I = _3G.length; _3H < _3I; _3H++) { //#6917
                $k[$j++] = $get(_3G, _3H); //#6917
            } //#6917
            $1.d2te = $k[--$j]; //#6918
            $1.d2to = $k[--$j]; //#6918
            $1.d2mwe = $k[--$j]; //#6919
            $1.d2mwo = $k[--$j]; //#6919
            $1.d2ele = $k[--$j]; //#6920
            $1.d2elo = $k[--$j]; //#6920
            $1.d2gs = $k[--$j]; //#6921
            break; //#6922
        } //#6922
        $1.i = $1.i + 8; //#6924
    } //#6924
    $1.i = 0; //#6927
    for (;;) { //#6937
        if ($1.d3 <= $get($1.tab164, $1.i)) { //#6935
            var _3Y = $geti($1.tab164, $1.i + 1, 7); //#6929
            for (var _3Z = 0, _3a = _3Y.length; _3Z < _3a; _3Z++) { //#6929
                $k[$j++] = $get(_3Y, _3Z); //#6929
            } //#6929
            $1.d3te = $k[--$j]; //#6930
            $1.d3to = $k[--$j]; //#6930
            $1.d3mwe = $k[--$j]; //#6931
            $1.d3mwo = $k[--$j]; //#6931
            $1.d3ele = $k[--$j]; //#6932
            $1.d3elo = $k[--$j]; //#6932
            $1.d3gs = $k[--$j]; //#6933
            break; //#6934
        } //#6934
        $1.i = $1.i + 8; //#6936
    } //#6936
    $1.i = 0; //#6939
    for (;;) { //#6949
        if ($1.d4 <= $get($1.tab154, $1.i)) { //#6947
            var _3q = $geti($1.tab154, $1.i + 1, 7); //#6941
            for (var _3r = 0, _3s = _3q.length; _3r < _3s; _3r++) { //#6941
                $k[$j++] = $get(_3q, _3r); //#6941
            } //#6941
            $1.d4te = $k[--$j]; //#6942
            $1.d4to = $k[--$j]; //#6942
            $1.d4mwe = $k[--$j]; //#6943
            $1.d4mwo = $k[--$j]; //#6943
            $1.d4ele = $k[--$j]; //#6944
            $1.d4elo = $k[--$j]; //#6944
            $1.d4gs = $k[--$j]; //#6945
            break; //#6946
        } //#6946
        $1.i = $1.i + 8; //#6948
    } //#6948
    $k[$j++] = 'd1wo'; //#6951
    $k[$j++] = ~~($f($1.d1 - $1.d1gs) / $1.d1te); //#6951
    $k[$j++] = $1.d1elo; //#6951
    $k[$j++] = $1.d1mwo; //#6951
    $k[$j++] = 4; //#6951
    $k[$j++] = false; //#6951
    $1.getRSSwidths(); //#6951
    var _47 = $k[--$j]; //#6951
    $1[$k[--$j]] = _47; //#6951
    $k[$j++] = 'd1we'; //#6952
    $k[$j++] = $f($1.d1 - $1.d1gs) % $1.d1te; //#6952
    $k[$j++] = $1.d1ele; //#6952
    $k[$j++] = $1.d1mwe; //#6952
    $k[$j++] = 4; //#6952
    $k[$j++] = true; //#6952
    $1.getRSSwidths(); //#6952
    var _4E = $k[--$j]; //#6952
    $1[$k[--$j]] = _4E; //#6952
    $k[$j++] = 'd2wo'; //#6953
    $k[$j++] = $f($1.d2 - $1.d2gs) % $1.d2to; //#6953
    $k[$j++] = $1.d2elo; //#6953
    $k[$j++] = $1.d2mwo; //#6953
    $k[$j++] = 4; //#6953
    $k[$j++] = true; //#6953
    $1.getRSSwidths(); //#6953
    var _4L = $k[--$j]; //#6953
    $1[$k[--$j]] = _4L; //#6953
    $k[$j++] = 'd2we'; //#6954
    $k[$j++] = ~~($f($1.d2 - $1.d2gs) / $1.d2to); //#6954
    $k[$j++] = $1.d2ele; //#6954
    $k[$j++] = $1.d2mwe; //#6954
    $k[$j++] = 4; //#6954
    $k[$j++] = false; //#6954
    $1.getRSSwidths(); //#6954
    var _4S = $k[--$j]; //#6954
    $1[$k[--$j]] = _4S; //#6954
    $k[$j++] = 'd3wo'; //#6955
    $k[$j++] = ~~($f($1.d3 - $1.d3gs) / $1.d3te); //#6955
    $k[$j++] = $1.d3elo; //#6955
    $k[$j++] = $1.d3mwo; //#6955
    $k[$j++] = 4; //#6955
    $k[$j++] = false; //#6955
    $1.getRSSwidths(); //#6955
    var _4Z = $k[--$j]; //#6955
    $1[$k[--$j]] = _4Z; //#6955
    $k[$j++] = 'd3we'; //#6956
    $k[$j++] = $f($1.d3 - $1.d3gs) % $1.d3te; //#6956
    $k[$j++] = $1.d3ele; //#6956
    $k[$j++] = $1.d3mwe; //#6956
    $k[$j++] = 4; //#6956
    $k[$j++] = true; //#6956
    $1.getRSSwidths(); //#6956
    var _4g = $k[--$j]; //#6956
    $1[$k[--$j]] = _4g; //#6956
    $k[$j++] = 'd4wo'; //#6957
    $k[$j++] = $f($1.d4 - $1.d4gs) % $1.d4to; //#6957
    $k[$j++] = $1.d4elo; //#6957
    $k[$j++] = $1.d4mwo; //#6957
    $k[$j++] = 4; //#6957
    $k[$j++] = true; //#6957
    $1.getRSSwidths(); //#6957
    var _4n = $k[--$j]; //#6957
    $1[$k[--$j]] = _4n; //#6957
    $k[$j++] = 'd4we'; //#6958
    $k[$j++] = ~~($f($1.d4 - $1.d4gs) / $1.d4to); //#6958
    $k[$j++] = $1.d4ele; //#6958
    $k[$j++] = $1.d4mwe; //#6958
    $k[$j++] = 4; //#6958
    $k[$j++] = false; //#6958
    $1.getRSSwidths(); //#6958
    var _4u = $k[--$j]; //#6958
    $1[$k[--$j]] = _4u; //#6958
    $1.d1w = $a(8); //#6960
    for (var _4x = 0; _4x <= 3; _4x += 1) { //#6965
        $1.i = _4x; //#6962
        $put($1.d1w, $1.i * 2, $get($1.d1wo, $1.i)); //#6963
        $put($1.d1w, ($1.i * 2) + 1, $get($1.d1we, $1.i)); //#6964
    } //#6964
    $1.d2w = $a(8); //#6967
    for (var _59 = 0; _59 <= 3; _59 += 1) { //#6972
        $1.i = _59; //#6969
        $put($1.d2w, 7 - ($1.i * 2), $get($1.d2wo, $1.i)); //#6970
        $put($1.d2w, 6 - ($1.i * 2), $get($1.d2we, $1.i)); //#6971
    } //#6971
    $1.d3w = $a(8); //#6974
    for (var _5L = 0; _5L <= 3; _5L += 1) { //#6979
        $1.i = _5L; //#6976
        $put($1.d3w, 7 - ($1.i * 2), $get($1.d3wo, $1.i)); //#6977
        $put($1.d3w, 6 - ($1.i * 2), $get($1.d3we, $1.i)); //#6978
    } //#6978
    $1.d4w = $a(8); //#6981
    for (var _5X = 0; _5X <= 3; _5X += 1) { //#6986
        $1.i = _5X; //#6983
        $put($1.d4w, $1.i * 2, $get($1.d4wo, $1.i)); //#6984
        $put($1.d4w, ($1.i * 2) + 1, $get($1.d4we, $1.i)); //#6985
    } //#6985
    $k[$j++] = Infinity; //#6992
    var _5i = $1.d1w; //#6989
    for (var _5j = 0, _5k = _5i.length; _5j < _5k; _5j++) { //#6989
        $k[$j++] = $get(_5i, _5j); //#6989
    } //#6989
    var _5m = $1.d2w; //#6990
    for (var _5n = 0, _5o = _5m.length; _5n < _5o; _5n++) { //#6990
        $k[$j++] = $get(_5m, _5n); //#6990
    } //#6990
    var _5q = $1.d3w; //#6991
    for (var _5r = 0, _5s = _5q.length; _5r < _5s; _5r++) { //#6991
        $k[$j++] = $get(_5q, _5r); //#6991
    } //#6991
    var _5u = $1.d4w; //#6992
    for (var _5v = 0, _5w = _5u.length; _5v < _5w; _5v++) { //#6992
        $k[$j++] = $get(_5u, _5v); //#6992
    } //#6992
    $1.widths = $a(); //#6992
    $1.checkweights = $a([1, 3, 9, 27, 2, 6, 18, 54, 58, 72, 24, 8, 29, 36, 12, 4, 74, 51, 17, 32, 37, 65, 48, 16, 64, 34, 23, 69, 49, 68, 46, 59]); //#7000
    $1.checkwidths = $a([3, 8, 2, 1, 1, 3, 5, 5, 1, 1, 3, 3, 7, 1, 1, 3, 1, 9, 1, 1, 2, 7, 4, 1, 1, 2, 5, 6, 1, 1, 2, 3, 8, 1, 1, 1, 5, 7, 1, 1, 1, 3, 9, 1, 1]); //#7006
    $1.checksum = 0; //#7008
    for (var _61 = 0; _61 <= 31; _61 += 1) { //#7012
        $1.i = _61; //#7010
        $1.checksum = $f($1.checksum + ($get($1.widths, $1.i) * $get($1.checkweights, $1.i))); //#7011
    } //#7011
    $1.checksum = $1.checksum % 79; //#7013
    if ($1.checksum >= 8) { //#7014
        $1.checksum = $f($1.checksum + 1); //#7014
    } //#7014
    if ($1.checksum >= 72) { //#7015
        $1.checksum = $f($1.checksum + 1); //#7015
    } //#7015
    $1.checklt = $geti($1.checkwidths, (~~($1.checksum / 9)) * 5, 5); //#7016
    $1.checkrtrev = $geti($1.checkwidths, ($1.checksum % 9) * 5, 5); //#7017
    $1.checkrt = $a(5); //#7018
    for (var _6L = 0; _6L <= 4; _6L += 1) { //#7022
        $1.i = _6L; //#7020
        $put($1.checkrt, $1.i, $get($1.checkrtrev, 4 - $1.i)); //#7021
    } //#7021
    if ($eq($1.format, "omni") || $eq($1.format, "truncated")) { //#7144
        $k[$j++] = Infinity; //#7029
        var _6T = $1.d1w; //#7028
        $k[$j++] = 1; //#7028
        for (var _6U = 0, _6V = _6T.length; _6U < _6V; _6U++) { //#7028
            $k[$j++] = $get(_6T, _6U); //#7028
        } //#7028
        var _6X = $1.checklt; //#7028
        for (var _6Y = 0, _6Z = _6X.length; _6Y < _6Z; _6Y++) { //#7028
            $k[$j++] = $get(_6X, _6Y); //#7028
        } //#7028
        var _6b = $1.d2w; //#7028
        for (var _6c = 0, _6d = _6b.length; _6c < _6d; _6c++) { //#7028
            $k[$j++] = $get(_6b, _6c); //#7028
        } //#7028
        var _6f = $1.d4w; //#7029
        for (var _6g = 0, _6h = _6f.length; _6g < _6h; _6g++) { //#7029
            $k[$j++] = $get(_6f, _6g); //#7029
        } //#7029
        var _6j = $1.checkrt; //#7029
        for (var _6k = 0, _6l = _6j.length; _6k < _6l; _6k++) { //#7029
            $k[$j++] = $get(_6j, _6k); //#7029
        } //#7029
        var _6n = $1.d3w; //#7029
        for (var _6o = 0, _6p = _6n.length; _6o < _6p; _6o++) { //#7029
            $k[$j++] = $get(_6n, _6o); //#7029
        } //#7029
        $k[$j++] = 1; //#7029
        $k[$j++] = 1; //#7029
        $1.sbs = $a(); //#7029
        $k[$j++] = Infinity; //#7039
        var _6s = $1.sbs; //#7034
        $k[$j++] = Infinity; //#7035
        for (var _6u = 0, _6v = ~~(($1.sbs.length + 1) / 2); _6u < _6v; _6u++) { //#7035
            $k[$j++] = $1.height; //#7035
        } //#7035
        var _6x = $a(); //#7035
        $k[$j++] = Infinity; //#7036
        for (var _6z = 0, _70 = ~~(($1.sbs.length + 1) / 2); _6z < _70; _6z++) { //#7036
            $k[$j++] = 0; //#7036
        } //#7036
        var _71 = $a(); //#7036
        $k[$j++] = 'ren'; //#7039
        $k[$j++] = bwipp_renlinear; //#7039
        $k[$j++] = 'sbs'; //#7039
        $k[$j++] = _6s; //#7039
        $k[$j++] = 'bhs'; //#7039
        $k[$j++] = _6x; //#7039
        $k[$j++] = 'bbs'; //#7039
        $k[$j++] = _71; //#7039
        $k[$j++] = 'txt'; //#7039
        $k[$j++] = $1.txt; //#7039
        $k[$j++] = 'textxalign'; //#7039
        $k[$j++] = "center"; //#7039
        $k[$j++] = 'opt'; //#7039
        $k[$j++] = $1.options; //#7039
        var _74 = $d(); //#7039
        $k[$j++] = _74; //#7042
        if (!$1.dontdraw) { //#7042
            bwipp_renlinear(); //#7042
        } //#7042
    } else { //#7144
        $k[$j++] = Infinity; //#7046
        var _76 = $1.d1w; //#7046
        $k[$j++] = 1; //#7046
        $k[$j++] = 1; //#7046
        for (var _77 = 0, _78 = _76.length; _77 < _78; _77++) { //#7046
            $k[$j++] = $get(_76, _77); //#7046
        } //#7046
        var _7A = $1.checklt; //#7046
        for (var _7B = 0, _7C = _7A.length; _7B < _7C; _7B++) { //#7046
            $k[$j++] = $get(_7A, _7B); //#7046
        } //#7046
        var _7E = $1.d2w; //#7046
        for (var _7F = 0, _7G = _7E.length; _7F < _7G; _7F++) { //#7046
            $k[$j++] = $get(_7E, _7F); //#7046
        } //#7046
        $k[$j++] = 1; //#7046
        $k[$j++] = 1; //#7046
        $k[$j++] = 0; //#7046
        $1.top = $a(); //#7046
        $k[$j++] = Infinity; //#7047
        var _7J = $1.d4w; //#7047
        $k[$j++] = 1; //#7047
        $k[$j++] = 1; //#7047
        for (var _7K = 0, _7L = _7J.length; _7K < _7L; _7K++) { //#7047
            $k[$j++] = $get(_7J, _7K); //#7047
        } //#7047
        var _7N = $1.checkrt; //#7047
        for (var _7O = 0, _7P = _7N.length; _7O < _7P; _7O++) { //#7047
            $k[$j++] = $get(_7N, _7O); //#7047
        } //#7047
        var _7R = $1.d3w; //#7047
        for (var _7S = 0, _7T = _7R.length; _7S < _7T; _7S++) { //#7047
            $k[$j++] = $get(_7R, _7S); //#7047
        } //#7047
        $k[$j++] = 1; //#7047
        $k[$j++] = 1; //#7047
        $k[$j++] = 0; //#7047
        $1.bot = $a(); //#7047
        for (var _7W = 0; _7W <= 24; _7W += 2) { //#7052
            $1.i = _7W; //#7049
            for (var _7a = 0, _7b = $get($1.top, $1.i); _7a < _7b; _7a++) { //#7050
                $k[$j++] = 0; //#7050
            } //#7050
            for (var _7f = 0, _7g = $get($1.top, $1.i + 1); _7f < _7g; _7f++) { //#7051
                $k[$j++] = 1; //#7051
            } //#7051
        } //#7051
        $astore($a(50)); //#7053
        $1.top = $k[--$j]; //#7053
        for (var _7j = 0; _7j <= 24; _7j += 2) { //#7058
            $1.i = _7j; //#7055
            for (var _7n = 0, _7o = $get($1.bot, $1.i); _7n < _7o; _7n++) { //#7056
                $k[$j++] = 1; //#7056
            } //#7056
            for (var _7s = 0, _7t = $get($1.bot, $1.i + 1); _7s < _7t; _7s++) { //#7057
                $k[$j++] = 0; //#7057
            } //#7057
        } //#7057
        $astore($a(50)); //#7059
        $1.bot = $k[--$j]; //#7059
        if ($eq($1.format, "stacked")) { //#7081
            $1.sep = $a(50); //#7063
            $put($1.sep, 0, 0); //#7064
            for (var _7z = 1; _7z <= 49; _7z += 1) { //#7072
                $1.i = _7z; //#7066
                if ($eq($get($1.top, $1.i), $get($1.bot, $1.i))) { //#7070
                    $put($1.sep, $1.i, $f(1 - $get($1.top, $1.i))); //#7068
                } else { //#7070
                    $put($1.sep, $1.i, $f(1 - $get($1.sep, $1.i - 1))); //#7070
                } //#7070
            } //#7070
            $puti($1.sep, 0, $a([0, 0, 0, 0])); //#7073
            $puti($1.sep, 46, $a([0, 0, 0, 0])); //#7074
            $k[$j++] = Infinity; //#7078
            for (var _8K = 0, _8L = 5; _8K < _8L; _8K++) { //#7076
                $aload($1.top); //#7076
            } //#7076
            $aload($1.sep); //#7077
            for (var _8O = 0, _8P = 7; _8O < _8P; _8O++) { //#7078
                $aload($1.bot); //#7078
            } //#7078
            $1.pixs = $a(); //#7078
            $1.pixy = ~~($1.pixs.length / 50); //#7080
        } //#7080
        if ($eq($1.format, "stackedomni")) { //#7131
            $k[$j++] = Infinity; //#7085
            $forall($1.top, function() { //#7085
                var _8V = $k[--$j]; //#7085
                $k[$j++] = $f(1 - _8V); //#7085
            }); //#7085
            $1.sep1 = $a(); //#7085
            $puti($1.sep1, 0, $a([0, 0, 0, 0])); //#7086
            $puti($1.sep1, 46, $a([0, 0, 0, 0])); //#7087
            for (var _8b = 18; _8b <= 30; _8b += 1) { //#7100
                $1.i = _8b; //#7089
                if ($get($1.top, $1.i) == 0) { //#7097
                    if ($get($1.top, $1.i - 1) == 1) { //#7094
                        $k[$j++] = 1; //#7092
                    } else { //#7094
                        var _8l = ($get($1.sep1, $1.i - 1) == 0) ? 1 : 0; //#7094
                        $k[$j++] = _8l; //#7094
                    } //#7094
                } else { //#7097
                    $k[$j++] = 0; //#7097
                } //#7097
                $put($1.sep1, $1.i, $k[--$j]); //#7099
            } //#7099
            $k[$j++] = Infinity; //#7101
            $k[$j++] = 0; //#7101
            $k[$j++] = 0; //#7101
            $k[$j++] = 0; //#7101
            $k[$j++] = 0; //#7101
            for (var _8p = 0, _8q = 21; _8p < _8q; _8p++) { //#7101
                $k[$j++] = 0; //#7101
                $k[$j++] = 1; //#7101
            } //#7101
            $k[$j++] = 0; //#7101
            $k[$j++] = 0; //#7101
            $k[$j++] = 0; //#7101
            $k[$j++] = 0; //#7101
            $1.sep2 = $a(); //#7101
            $k[$j++] = Infinity; //#7102
            $forall($1.bot, function() { //#7102
                var _8t = $k[--$j]; //#7102
                $k[$j++] = $f(1 - _8t); //#7102
            }); //#7102
            $1.sep3 = $a(); //#7102
            $puti($1.sep3, 0, $a([0, 0, 0, 0])); //#7103
            $puti($1.sep3, 46, $a([0, 0, 0, 0])); //#7104
            for (var _8z = 19; _8z <= 31; _8z += 1) { //#7117
                $1.i = _8z; //#7106
                if ($get($1.bot, $1.i) == 0) { //#7114
                    if ($get($1.bot, $1.i - 1) == 1) { //#7111
                        $k[$j++] = 1; //#7109
                    } else { //#7111
                        var _99 = ($get($1.sep3, $1.i - 1) == 0) ? 1 : 0; //#7111
                        $k[$j++] = _99; //#7111
                    } //#7111
                } else { //#7114
                    $k[$j++] = 0; //#7114
                } //#7114
                $put($1.sep3, $1.i, $k[--$j]); //#7116
            } //#7116
            $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#7118
            $k[$j++] = true; //#7119
            for (var _9E = 0; _9E <= 12; _9E += 1) { //#7119
                var _9J = $k[--$j]; //#7119
                $k[$j++] = _9J && $eq($get($1.bot, _9E + 19), $get($1.f3, _9E)); //#7119
            } //#7119
            if ($k[--$j]) { //#7122
                $puti($1.sep3, 19, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#7121
            } //#7121
            $k[$j++] = Infinity; //#7128
            for (var _9O = 0, _9P = $1.barxmult; _9O < _9P; _9O++) { //#7124
                $aload($1.top); //#7124
            } //#7124
            $aload($1.sep1); //#7125
            $aload($1.sep2); //#7126
            $aload($1.sep3); //#7127
            for (var _9V = 0, _9W = $1.barxmult; _9V < _9W; _9V++) { //#7128
                $aload($1.bot); //#7128
            } //#7128
            $1.pixs = $a(); //#7128
            $1.pixy = ~~($1.pixs.length / 50); //#7130
        } //#7130
        var _9e = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", 50],
            ["pixy", $1.pixy],
            ["height", $1.pixy / 72],
            ["width", 50 / 72],
            ["opt", $1.options]
        ]); //#7141
        $k[$j++] = _9e; //#7144
        if (!$1.dontdraw) { //#7144
            bwipp_renmatrix(); //#7144
        } //#7144
    } //#7144
}

function bwipp_databarstacked() {
    var $1 = {}; //#7176
    $1.options = $k[--$j]; //#7178
    $1.barcode = $k[--$j]; //#7179
    $1.dontdraw = false; //#7181
    $forall($1.options, function() { //#7192
        var _3 = $k[--$j]; //#7192
        $1[$k[--$j]] = _3; //#7192
    }); //#7192
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#7197
        $k[$j++] = 'bwipp.databarstackedBadAI'; //#7196
        $k[$j++] = "GS1 DataBar Stacked must begin with (01) application identifier"; //#7196
        bwipp_raiseerror(); //#7196
    } //#7196
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#7200
        $k[$j++] = 'bwipp.databarstackedBadLength'; //#7199
        $k[$j++] = "GS1 DataBar Stacked must be 13 or 14 digits"; //#7199
        bwipp_raiseerror(); //#7199
    } //#7199
    var _B = $geti($1.barcode, 4, $1.barcode.length - 4); //#7201
    for (var _C = 0, _D = _B.length; _C < _D; _C++) { //#7205
        var _E = $get(_B, _C); //#7205
        if ((_E < 48) || (_E > 57)) { //#7204
            $k[$j++] = 'bwipp.databarstackedBadCharacter'; //#7203
            $k[$j++] = "GS1 DataBar Stacked must contain only digits"; //#7203
            bwipp_raiseerror(); //#7203
        } //#7203
    } //#7203
    $1.checksum = 0; //#7208
    for (var _F = 0; _F <= 12; _F += 1) { //#7212
        $1.i = _F; //#7210
        $k[$j++] = 'checksum'; //#7211
        $k[$j++] = $1.checksum; //#7211
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#7211
        if (($1.i % 2) == 0) { //#7211
            var _L = $k[--$j]; //#7211
            $k[$j++] = _L * 3; //#7211
        } //#7211
        var _M = $k[--$j]; //#7211
        var _N = $k[--$j]; //#7211
        $1[$k[--$j]] = $f(_N + _M); //#7211
    } //#7211
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7213
    if ($1.barcode.length == 18) { //#7218
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#7217
            $k[$j++] = 'bwipp.databarstackedBadCheckDigit'; //#7216
            $k[$j++] = "Incorrect GS1 DataBar Stacked check digit provided"; //#7216
            bwipp_raiseerror(); //#7216
        } //#7216
    } //#7216
    var _U = $s(18); //#7219
    $puti(_U, 0, $1.barcode); //#7220
    $put(_U, 17, $1.checksum + 48); //#7221
    $1.barcode = _U; //#7222
    $put($1.options, "dontdraw", true); //#7225
    $put($1.options, "format", "stacked"); //#7226
    $k[$j++] = 'args'; //#7228
    $k[$j++] = $1.barcode; //#7228
    $k[$j++] = $1.options; //#7228
    bwipp_databaromni(); //#7228
    var _b = $k[--$j]; //#7228
    $1[$k[--$j]] = _b; //#7228
    $put($1.args, "opt", $1.options); //#7230
    $k[$j++] = $1.args; //#7233
    if (!$1.dontdraw) { //#7233
        bwipp_renmatrix(); //#7233
    } //#7233
}

function bwipp_databarstackedomni() {
    var $1 = {}; //#7263
    $1.options = $k[--$j]; //#7265
    $1.barcode = $k[--$j]; //#7266
    $1.dontdraw = false; //#7268
    $forall($1.options, function() { //#7279
        var _3 = $k[--$j]; //#7279
        $1[$k[--$j]] = _3; //#7279
    }); //#7279
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#7284
        $k[$j++] = 'bwipp.databarstackedomniBadAI'; //#7283
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must begin with (01) application identifier"; //#7283
        bwipp_raiseerror(); //#7283
    } //#7283
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#7287
        $k[$j++] = 'bwipp.databarstackedomniBadLength'; //#7286
        $k[$j++] = "GS1 DataBar Stacked Omnidirectional must be 13 or 14 digits"; //#7286
        bwipp_raiseerror(); //#7286
    } //#7286
    var _B = $geti($1.barcode, 4, $1.barcode.length - 4); //#7288
    for (var _C = 0, _D = _B.length; _C < _D; _C++) { //#7292
        var _E = $get(_B, _C); //#7292
        if ((_E < 48) || (_E > 57)) { //#7291
            $k[$j++] = 'bwipp.databarstackedomniBadCharacter'; //#7290
            $k[$j++] = "GS1 DataBar Stacked Omnidirectional must contain only digits"; //#7290
            bwipp_raiseerror(); //#7290
        } //#7290
    } //#7290
    $1.checksum = 0; //#7295
    for (var _F = 0; _F <= 12; _F += 1) { //#7299
        $1.i = _F; //#7297
        $k[$j++] = 'checksum'; //#7298
        $k[$j++] = $1.checksum; //#7298
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#7298
        if (($1.i % 2) == 0) { //#7298
            var _L = $k[--$j]; //#7298
            $k[$j++] = _L * 3; //#7298
        } //#7298
        var _M = $k[--$j]; //#7298
        var _N = $k[--$j]; //#7298
        $1[$k[--$j]] = $f(_N + _M); //#7298
    } //#7298
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7300
    if ($1.barcode.length == 18) { //#7305
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#7304
            $k[$j++] = 'bwipp.databarstackedomniBadCheckDigit'; //#7303
            $k[$j++] = "Incorrect GS1 DataBar Stacked Omnidirectional check digit provided"; //#7303
            bwipp_raiseerror(); //#7303
        } //#7303
    } //#7303
    var _U = $s(18); //#7306
    $puti(_U, 0, $1.barcode); //#7307
    $put(_U, 17, $1.checksum + 48); //#7308
    $1.barcode = _U; //#7309
    $put($1.options, "dontdraw", true); //#7312
    $put($1.options, "format", "stackedomni"); //#7313
    $k[$j++] = 'args'; //#7315
    $k[$j++] = $1.barcode; //#7315
    $k[$j++] = $1.options; //#7315
    bwipp_databaromni(); //#7315
    var _b = $k[--$j]; //#7315
    $1[$k[--$j]] = _b; //#7315
    $put($1.args, "opt", $1.options); //#7317
    $k[$j++] = $1.args; //#7320
    if (!$1.dontdraw) { //#7320
        bwipp_renmatrix(); //#7320
    } //#7320
}

function bwipp_databartruncated() {
    var $1 = {}; //#7350
    $1.options = $k[--$j]; //#7352
    $1.barcode = $k[--$j]; //#7353
    $1.dontdraw = false; //#7355
    $forall($1.options, function() { //#7366
        var _3 = $k[--$j]; //#7366
        $1[$k[--$j]] = _3; //#7366
    }); //#7366
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#7371
        $k[$j++] = 'bwipp.databartruncatedBadAI'; //#7370
        $k[$j++] = "GS1 DataBar Truncated must begin with (01) application identifier"; //#7370
        bwipp_raiseerror(); //#7370
    } //#7370
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#7374
        $k[$j++] = 'bwipp.databartruncatedBadLength'; //#7373
        $k[$j++] = "GS1 DataBar Truncated must be 13 or 14 digits"; //#7373
        bwipp_raiseerror(); //#7373
    } //#7373
    var _B = $geti($1.barcode, 4, $1.barcode.length - 4); //#7375
    for (var _C = 0, _D = _B.length; _C < _D; _C++) { //#7379
        var _E = $get(_B, _C); //#7379
        if ((_E < 48) || (_E > 57)) { //#7378
            $k[$j++] = 'bwipp.databartruncatedBadCharacter'; //#7377
            $k[$j++] = "GS1 DataBar Truncated must contain only digits"; //#7377
            bwipp_raiseerror(); //#7377
        } //#7377
    } //#7377
    $1.checksum = 0; //#7382
    for (var _F = 0; _F <= 12; _F += 1) { //#7386
        $1.i = _F; //#7384
        $k[$j++] = 'checksum'; //#7385
        $k[$j++] = $1.checksum; //#7385
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#7385
        if (($1.i % 2) == 0) { //#7385
            var _L = $k[--$j]; //#7385
            $k[$j++] = _L * 3; //#7385
        } //#7385
        var _M = $k[--$j]; //#7385
        var _N = $k[--$j]; //#7385
        $1[$k[--$j]] = $f(_N + _M); //#7385
    } //#7385
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7387
    if ($1.barcode.length == 18) { //#7392
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#7391
            $k[$j++] = 'bwipp.databartruncatedBadCheckDigit'; //#7390
            $k[$j++] = "Incorrect GS1 DataBar Truncated check digit provided"; //#7390
            bwipp_raiseerror(); //#7390
        } //#7390
    } //#7390
    var _U = $s(18); //#7393
    $puti(_U, 0, $1.barcode); //#7394
    $put(_U, 17, $1.checksum + 48); //#7395
    $1.barcode = _U; //#7396
    $put($1.options, "dontdraw", true); //#7399
    $put($1.options, "format", "truncated"); //#7400
    $k[$j++] = 'args'; //#7402
    $k[$j++] = $1.barcode; //#7402
    $k[$j++] = $1.options; //#7402
    bwipp_databaromni(); //#7402
    var _b = $k[--$j]; //#7402
    $1[$k[--$j]] = _b; //#7402
    $put($1.args, "opt", $1.options); //#7404
    $k[$j++] = $1.args; //#7407
    if (!$1.dontdraw) { //#7407
        bwipp_renlinear(); //#7407
    } //#7407
}

function bwipp_databarlimited() {
    var $1 = {}; //#7436
    $1.options = $k[--$j]; //#7438
    $1.barcode = $k[--$j]; //#7439
    $1.dontdraw = false; //#7441
    $1.height = 10 / 72; //#7442
    $1.linkage = false; //#7443
    $forall($1.options, function() { //#7454
        var _3 = $k[--$j]; //#7454
        $1[$k[--$j]] = _3; //#7454
    }); //#7454
    $1.height = +$1.height; //#7456
    if ($ne($geti($1.barcode, 0, 4), "(01)")) { //#7461
        $k[$j++] = 'bwipp.databarlimitedBadAI'; //#7460
        $k[$j++] = "GS1 DataBar Limited must begin with (01) application identifier"; //#7460
        bwipp_raiseerror(); //#7460
    } //#7460
    if (($1.barcode.length != 17) && ($1.barcode.length != 18)) { //#7464
        $k[$j++] = 'bwipp.databarlimitedBadLength'; //#7463
        $k[$j++] = "GS1 DataBar Limited must be 13 or 14 digits"; //#7463
        bwipp_raiseerror(); //#7463
    } //#7463
    var _B = $get($1.barcode, 4); //#7465
    if ((_B < 48) || (_B > 49)) { //#7467
        $k[$j++] = 'bwipp.databarlimitedBadStartDigit'; //#7466
        $k[$j++] = "GS1 DataBar Limited must begin with 0 or 1"; //#7466
        bwipp_raiseerror(); //#7466
    } //#7466
    var _E = $geti($1.barcode, 5, $1.barcode.length - 5); //#7468
    for (var _F = 0, _G = _E.length; _F < _G; _F++) { //#7472
        var _H = $get(_E, _F); //#7472
        if ((_H < 48) || (_H > 57)) { //#7471
            $k[$j++] = 'bwipp.databarlimitedBadCharacter'; //#7470
            $k[$j++] = "GS1 DataBar Limited must contain only digits"; //#7470
            bwipp_raiseerror(); //#7470
        } //#7470
    } //#7470
    $1.checksum = 0; //#7475
    for (var _I = 0; _I <= 12; _I += 1) { //#7479
        $1.i = _I; //#7477
        $k[$j++] = 'checksum'; //#7478
        $k[$j++] = $1.checksum; //#7478
        $k[$j++] = $f($get($1.barcode, $1.i + 4) - 48); //#7478
        if (($1.i % 2) == 0) { //#7478
            var _O = $k[--$j]; //#7478
            $k[$j++] = _O * 3; //#7478
        } //#7478
        var _P = $k[--$j]; //#7478
        var _Q = $k[--$j]; //#7478
        $1[$k[--$j]] = $f(_Q + _P); //#7478
    } //#7478
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#7480
    if ($1.barcode.length == 18) { //#7485
        if ($get($1.barcode, 17) != ($1.checksum + 48)) { //#7484
            $k[$j++] = 'bwipp.databarlimitedBadCheckDigit'; //#7483
            $k[$j++] = "Incorrect GS1 DataBar Limited check digit provided"; //#7483
            bwipp_raiseerror(); //#7483
        } //#7483
    } //#7483
    var _X = $s(18); //#7486
    $puti(_X, 0, $1.barcode); //#7487
    $put(_X, 17, $1.checksum + 48); //#7488
    $1.barcode = _X; //#7489
    $k[$j++] = Infinity; //#7493
    var _b = $geti($1.barcode, 4, 13); //#7493
    for (var _c = 0, _d = _b.length; _c < _d; _c++) { //#7493
        $k[$j++] = $f($get(_b, _c) - 48); //#7493
    } //#7493
    $1.binval = $a(); //#7493
    if ($1.linkage) { //#7501
        $1.linkval = $a([2, 0, 1, 5, 1, 3, 3, 5, 3, 1, 0, 9, 6]); //#7496
        for (var _k = 0, _j = $1.binval.length - 1; _k <= _j; _k += 1) { //#7500
            $1.i = _k; //#7498
            $put($1.binval, $1.i, $f($get($1.binval, $1.i) + $get($1.linkval, $1.i))); //#7499
        } //#7499
    } //#7499
    $1.txt = $a($1.barcode.length); //#7504
    for (var _x = 0, _w = $1.barcode.length - 1; _x <= _w; _x += 1) { //#7508
        $1.i = _x; //#7506
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#7507
    } //#7507
    $1.ncr = function() {
        var _14 = $k[--$j]; //#7511
        var _15 = $k[--$j]; //#7511
        var _16 = $f(_15 - _14); //#7511
        if (_14 < $f(_15 - _14)) { //#7511
            var _ = _16; //#7511
            _16 = _14; //#7511
            _14 = _; //#7511
        } //#7511
        $k[$j++] = _16; //#7518
        $k[$j++] = 1; //#7518
        $k[$j++] = 1; //#7518
        for (var _18 = _15, _17 = $f(_14 + 1); _18 >= _17; _18 -= 1) { //#7518
            var _19 = $k[--$j]; //#7514
            var _1A = $k[--$j]; //#7515
            var _1B = $k[--$j]; //#7515
            $k[$j++] = _1B; //#7517
            $k[$j++] = _1A; //#7517
            $k[$j++] = _19 * _18; //#7517
            if ($le(_1A, _1B)) { //#7517
                var _1C = $k[--$j]; //#7516
                var _1D = $k[--$j]; //#7516
                $k[$j++] = $f(_1D + 1); //#7516
                $k[$j++] = ~~(_1C / _1D); //#7516
            } //#7516
        } //#7516
        for (;;) { //#7522
            var _1E = $k[--$j]; //#7520
            var _1F = $k[--$j]; //#7520
            var _1G = $k[--$j]; //#7520
            $k[$j++] = _1G; //#7520
            $k[$j++] = _1F; //#7520
            $k[$j++] = _1E; //#7520
            if ($gt(_1F, _1G)) { //#7520
                break; //#7520
            } //#7520
            var _1H = $k[--$j]; //#7521
            var _1I = $k[--$j]; //#7521
            $k[$j++] = $f(_1I + 1); //#7521
            $k[$j++] = ~~(_1H / _1I); //#7521
        } //#7521
        var _1J = $k[--$j]; //#7523
        var _1K = $k[--$j]; //#7523
        $k[$j++] = _1J; //#7523
        $k[$j++] = _1K; //#7523
        $j--; //#7523
        var _1L = $k[--$j]; //#7523
        var _1M = $k[--$j]; //#7523
        $k[$j++] = _1L; //#7523
        $k[$j++] = _1M; //#7523
        $j--; //#7523
    }; //#7524
    $1.getRSSwidths = function() {
        $1.oe = $k[--$j]; //#7527
        $1.el = $k[--$j]; //#7528
        $1.mw = $k[--$j]; //#7529
        $1.nm = $k[--$j]; //#7530
        $1.val = $k[--$j]; //#7531
        $1.out = $a($1.el); //#7532
        $1.mask = 0; //#7533
        for (var _1W = 0, _1V = $f($1.el - 2); _1W <= _1V; _1W += 1) { //#7560
            $1.bar = _1W; //#7535
            $1.ew = 1; //#7536
            var _1Y = $1.bar; //#7537
            $1.mask = $1.mask | ((_1Y < 0 ? 1 >>> -_1Y : 1 << _1Y)); //#7537
            for (;;) { //#7556
                $k[$j++] = 'sval'; //#7538
                $k[$j++] = $f($f($1.nm - $1.ew) - 1); //#7538
                $k[$j++] = $f($f($1.el - $1.bar) - 2); //#7538
                $1.ncr(); //#7538
                var _1d = $k[--$j]; //#7538
                $1[$k[--$j]] = _1d; //#7538
                if (($1.oe && ($1.mask == 0)) && (($f(($f($f($1.nm - $1.ew) - ($1.el * 2))) + ($1.bar * 2))) >= -2)) { //#7541
                    $k[$j++] = 'sval'; //#7540
                    $k[$j++] = $1.sval; //#7540
                    $k[$j++] = $f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar); //#7540
                    $k[$j++] = $f($f($1.el - $1.bar) - 2); //#7540
                    $1.ncr(); //#7540
                    var _1s = $k[--$j]; //#7540
                    var _1t = $k[--$j]; //#7540
                    $1[$k[--$j]] = $f(_1t - _1s); //#7540
                } //#7540
                if ($f($1.el - $1.bar) > 2) { //#7550
                    $1.lval = 0; //#7543
                    for (var _23 = $f(($f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar)) + 2), _22 = $f($1.mw + 1); _23 >= _22; _23 -= 1) { //#7547
                        $k[$j++] = $f(($f($f($1.nm - _23) - $1.ew)) - 1); //#7545
                        $k[$j++] = $f($f($1.el - $1.bar) - 3); //#7545
                        $1.ncr(); //#7545
                        $1.lval = $f($k[--$j] + $1.lval); //#7546
                    } //#7546
                    $1.sval = $f($1.sval - ($1.lval * ($f($f($1.el - $1.bar) - 1)))); //#7548
                } else { //#7550
                    if ($f($1.nm - $1.ew) > $1.mw) { //#7550
                        $1.sval = $f($1.sval - 1); //#7550
                    } //#7550
                } //#7550
                $1.val = $f($1.val - $1.sval); //#7552
                if ($1.val < 0) { //#7553
                    break; //#7553
                } //#7553
                $1.ew = $1.ew + 1; //#7554
                var _2N = $1.bar; //#7555
                $1.mask = $1.mask & (~((_2N < 0 ? 1 >>> -_2N : 1 << _2N))); //#7555
            } //#7555
            $1.val = $f($1.val + $1.sval); //#7557
            $1.nm = $f($1.nm - $1.ew); //#7558
            $put($1.out, $1.bar, $1.ew); //#7559
        } //#7559
        $put($1.out, $f($1.el - 1), $1.nm); //#7561
        $k[$j++] = $1.out; //#7562
    }; //#7563
    for (var _2Z = 0; _2Z <= 11; _2Z += 1) { //#7569
        $1.i = _2Z; //#7566
        var _2a = $1.binval; //#7567
        var _2b = $1.i; //#7567
        $put(_2a, _2b + 1, $f($get(_2a, _2b + 1) + (($get($1.binval, $1.i) % 2013571) * 10))); //#7567
        $put($1.binval, $1.i, ~~($get($1.binval, $1.i) / 2013571)); //#7568
    } //#7568
    $1.d2 = $get($1.binval, 12) % 2013571; //#7570
    var _2n = $1.binval; //#7571
    $put(_2n, 12, ~~($get(_2n, 12) / 2013571)); //#7571
    $1.d1 = 0; //#7573
    $1.i = true; //#7574
    for (var _2p = 0; _2p <= 12; _2p += 1) { //#7584
        $1.j = _2p; //#7576
        var _2s = $get($1.binval, $1.j); //#7577
        $k[$j++] = _2s; //#7583
        if ((_2s == 0) && $1.i) { //#7582
            $j--; //#7579
        } else { //#7582
            $1.i = false; //#7581
            $1.d1 = $f($1.d1 + ($k[--$j] * (~~Math.pow(10, 12 - $1.j)))); //#7582
        } //#7582
    } //#7582
    $1.tab267 = $a([183063, 0, 17, 9, 6, 3, 6538, 28, 820063, 183064, 13, 13, 5, 4, 875, 728, 1000775, 820064, 9, 17, 3, 6, 28, 6454, 1491020, 1000776, 15, 11, 5, 4, 2415, 203, 1979844, 1491021, 11, 15, 4, 5, 203, 2408, 1996938, 1979845, 19, 7, 8, 1, 17094, 1, 2013570, 1996939, 7, 19, 1, 8, 1, 16632]); //#7594
    $1.i = 0; //#7596
    for (;;) { //#7606
        if ($1.d1 <= $get($1.tab267, $1.i)) { //#7604
            var _34 = $geti($1.tab267, $1.i + 1, 7); //#7598
            for (var _35 = 0, _36 = _34.length; _35 < _36; _35++) { //#7598
                $k[$j++] = $get(_34, _35); //#7598
            } //#7598
            $1.d1te = $k[--$j]; //#7599
            $1.d1to = $k[--$j]; //#7599
            $1.d1mwe = $k[--$j]; //#7600
            $1.d1mwo = $k[--$j]; //#7600
            $1.d1ele = $k[--$j]; //#7601
            $1.d1elo = $k[--$j]; //#7601
            $1.d1gs = $k[--$j]; //#7602
            break; //#7603
        } //#7603
        $1.i = $1.i + 8; //#7605
    } //#7605
    $1.i = 0; //#7608
    for (;;) { //#7618
        if ($1.d2 <= $get($1.tab267, $1.i)) { //#7616
            var _3M = $geti($1.tab267, $1.i + 1, 7); //#7610
            for (var _3N = 0, _3O = _3M.length; _3N < _3O; _3N++) { //#7610
                $k[$j++] = $get(_3M, _3N); //#7610
            } //#7610
            $1.d2te = $k[--$j]; //#7611
            $1.d2to = $k[--$j]; //#7611
            $1.d2mwe = $k[--$j]; //#7612
            $1.d2mwo = $k[--$j]; //#7612
            $1.d2ele = $k[--$j]; //#7613
            $1.d2elo = $k[--$j]; //#7613
            $1.d2gs = $k[--$j]; //#7614
            break; //#7615
        } //#7615
        $1.i = $1.i + 8; //#7617
    } //#7617
    $k[$j++] = 'd1wo'; //#7620
    $k[$j++] = ~~($f($1.d1 - $1.d1gs) / $1.d1te); //#7620
    $k[$j++] = $1.d1elo; //#7620
    $k[$j++] = $1.d1mwo; //#7620
    $k[$j++] = 7; //#7620
    $k[$j++] = false; //#7620
    $1.getRSSwidths(); //#7620
    var _3d = $k[--$j]; //#7620
    $1[$k[--$j]] = _3d; //#7620
    $k[$j++] = 'd1we'; //#7621
    $k[$j++] = $f($1.d1 - $1.d1gs) % $1.d1te; //#7621
    $k[$j++] = $1.d1ele; //#7621
    $k[$j++] = $1.d1mwe; //#7621
    $k[$j++] = 7; //#7621
    $k[$j++] = true; //#7621
    $1.getRSSwidths(); //#7621
    var _3k = $k[--$j]; //#7621
    $1[$k[--$j]] = _3k; //#7621
    $k[$j++] = 'd2wo'; //#7622
    $k[$j++] = ~~($f($1.d2 - $1.d2gs) / $1.d2te); //#7622
    $k[$j++] = $1.d2elo; //#7622
    $k[$j++] = $1.d2mwo; //#7622
    $k[$j++] = 7; //#7622
    $k[$j++] = false; //#7622
    $1.getRSSwidths(); //#7622
    var _3r = $k[--$j]; //#7622
    $1[$k[--$j]] = _3r; //#7622
    $k[$j++] = 'd2we'; //#7623
    $k[$j++] = $f($1.d2 - $1.d2gs) % $1.d2te; //#7623
    $k[$j++] = $1.d2ele; //#7623
    $k[$j++] = $1.d2mwe; //#7623
    $k[$j++] = 7; //#7623
    $k[$j++] = true; //#7623
    $1.getRSSwidths(); //#7623
    var _3y = $k[--$j]; //#7623
    $1[$k[--$j]] = _3y; //#7623
    $1.d1w = $a(14); //#7625
    for (var _41 = 0; _41 <= 6; _41 += 1) { //#7630
        $1.i = _41; //#7627
        $put($1.d1w, $1.i * 2, $get($1.d1wo, $1.i)); //#7628
        $put($1.d1w, ($1.i * 2) + 1, $get($1.d1we, $1.i)); //#7629
    } //#7629
    $1.d2w = $a(14); //#7632
    for (var _4D = 0; _4D <= 6; _4D += 1) { //#7637
        $1.i = _4D; //#7634
        $put($1.d2w, $1.i * 2, $get($1.d2wo, $1.i)); //#7635
        $put($1.d2w, ($1.i * 2) + 1, $get($1.d2we, $1.i)); //#7636
    } //#7636
    $k[$j++] = Infinity; //#7641
    var _4O = $1.d1w; //#7640
    for (var _4P = 0, _4Q = _4O.length; _4P < _4Q; _4P++) { //#7640
        $k[$j++] = $get(_4O, _4P); //#7640
    } //#7640
    var _4S = $1.d2w; //#7641
    for (var _4T = 0, _4U = _4S.length; _4T < _4U; _4T++) { //#7641
        $k[$j++] = $get(_4S, _4T); //#7641
    } //#7641
    $1.widths = $a(); //#7641
    $1.checkweights = $a([1, 3, 9, 27, 81, 65, 17, 51, 64, 14, 42, 37, 22, 66, 20, 60, 2, 6, 18, 54, 73, 41, 34, 13, 39, 28, 84, 74]); //#7647
    $k[$j++] = Infinity; //#7662
    for (var _4Y = 0; _4Y <= 43; _4Y += 1) { //#7650
        $k[$j++] = _4Y; //#7650
    } //#7650
    $k[$j++] = 45; //#7652
    $k[$j++] = 52; //#7652
    $k[$j++] = 57; //#7652
    for (var _4Z = 63; _4Z <= 66; _4Z += 1) { //#7652
        $k[$j++] = _4Z; //#7652
    } //#7652
    for (var _4a = 73; _4a <= 79; _4a += 1) { //#7653
        $k[$j++] = _4a; //#7653
    } //#7653
    $k[$j++] = 82; //#7655
    for (var _4b = 126; _4b <= 130; _4b += 1) { //#7655
        $k[$j++] = _4b; //#7655
    } //#7655
    $k[$j++] = 132; //#7657
    for (var _4c = 141; _4c <= 146; _4c += 1) { //#7657
        $k[$j++] = _4c; //#7657
    } //#7657
    for (var _4d = 210; _4d <= 217; _4d += 1) { //#7658
        $k[$j++] = _4d; //#7658
    } //#7658
    $k[$j++] = 220; //#7660
    for (var _4e = 316; _4e <= 320; _4e += 1) { //#7660
        $k[$j++] = _4e; //#7660
    } //#7660
    $k[$j++] = 322; //#7662
    $k[$j++] = 323; //#7662
    $k[$j++] = 326; //#7662
    $k[$j++] = 337; //#7662
    $1.checkseq = $a(); //#7662
    $1.checksum = 0; //#7665
    for (var _4g = 0; _4g <= 27; _4g += 1) { //#7669
        $1.i = _4g; //#7667
        $1.checksum = $f($1.checksum + ($get($1.widths, $1.i) * $get($1.checkweights, $1.i))); //#7668
    } //#7668
    $1.checksum = $1.checksum % 89; //#7670
    $1.seq = $get($1.checkseq, $1.checksum); //#7671
    $k[$j++] = 'swidths'; //#7672
    $k[$j++] = ~~($1.seq / 21); //#7672
    $k[$j++] = 8; //#7672
    $k[$j++] = 3; //#7672
    $k[$j++] = 6; //#7672
    $k[$j++] = false; //#7672
    $1.getRSSwidths(); //#7672
    var _4t = $k[--$j]; //#7672
    $1[$k[--$j]] = _4t; //#7672
    $k[$j++] = 'bwidths'; //#7673
    $k[$j++] = $1.seq % 21; //#7673
    $k[$j++] = 8; //#7673
    $k[$j++] = 3; //#7673
    $k[$j++] = 6; //#7673
    $k[$j++] = false; //#7673
    $1.getRSSwidths(); //#7673
    var _4w = $k[--$j]; //#7673
    $1[$k[--$j]] = _4w; //#7673
    $1.checkwidths = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]); //#7675
    for (var _4z = 0; _4z <= 5; _4z += 1) { //#7680
        $1.i = _4z; //#7677
        $put($1.checkwidths, $1.i * 2, $get($1.swidths, $1.i)); //#7678
        $put($1.checkwidths, ($1.i * 2) + 1, $get($1.bwidths, $1.i)); //#7679
    } //#7679
    $k[$j++] = Infinity; //#7683
    var _5A = $1.d1w; //#7683
    $k[$j++] = 1; //#7683
    for (var _5B = 0, _5C = _5A.length; _5B < _5C; _5B++) { //#7683
        $k[$j++] = $get(_5A, _5B); //#7683
    } //#7683
    var _5E = $1.checkwidths; //#7683
    for (var _5F = 0, _5G = _5E.length; _5F < _5G; _5F++) { //#7683
        $k[$j++] = $get(_5E, _5F); //#7683
    } //#7683
    var _5I = $1.d2w; //#7683
    for (var _5J = 0, _5K = _5I.length; _5J < _5K; _5J++) { //#7683
        $k[$j++] = $get(_5I, _5J); //#7683
    } //#7683
    $k[$j++] = 1; //#7683
    $k[$j++] = 1; //#7683
    $k[$j++] = 5; //#7683
    $1.sbs = $a(); //#7683
    $k[$j++] = Infinity; //#7694
    var _5N = $1.sbs; //#7689
    $k[$j++] = Infinity; //#7690
    for (var _5P = 0, _5Q = ~~(($1.sbs.length + 1) / 2); _5P < _5Q; _5P++) { //#7690
        $k[$j++] = $1.height; //#7690
    } //#7690
    var _5S = $a(); //#7690
    $k[$j++] = Infinity; //#7691
    for (var _5U = 0, _5V = ~~(($1.sbs.length + 1) / 2); _5U < _5V; _5U++) { //#7691
        $k[$j++] = 0; //#7691
    } //#7691
    var _5W = $a(); //#7691
    $k[$j++] = 'ren'; //#7694
    $k[$j++] = bwipp_renlinear; //#7694
    $k[$j++] = 'sbs'; //#7694
    $k[$j++] = _5N; //#7694
    $k[$j++] = 'bhs'; //#7694
    $k[$j++] = _5S; //#7694
    $k[$j++] = 'bbs'; //#7694
    $k[$j++] = _5W; //#7694
    $k[$j++] = 'txt'; //#7694
    $k[$j++] = $1.txt; //#7694
    $k[$j++] = 'textxalign'; //#7694
    $k[$j++] = "center"; //#7694
    $k[$j++] = 'opt'; //#7694
    $k[$j++] = $1.options; //#7694
    var _5Z = $d(); //#7694
    $k[$j++] = _5Z; //#7697
    if (!$1.dontdraw) { //#7697
        bwipp_renlinear(); //#7697
    } //#7697
}

function bwipp_databarexpanded() {
    var $1 = {}; //#7729
    $1.options = $k[--$j]; //#7731
    $1.barcode = $k[--$j]; //#7732
    $1.parse = false; //#7734
    $1.dontlint = false; //#7735
    $1.dontdraw = false; //#7736
    $1.height = 34 / 72; //#7737
    $1.format = "expanded"; //#7738
    $1.segments = -1; //#7739
    $1.linkage = false; //#7740
    $1.barxmult = 34; //#7741
    $forall($1.options, function() { //#7752
        var _3 = $k[--$j]; //#7752
        $1[$k[--$j]] = _3; //#7752
    }); //#7752
    $1.height = +$1.height; //#7754
    $1.segments = ~~$1.segments; //#7755
    $1.barxmult = ~~$1.barxmult; //#7756
    if ($1.segments == -1) { //#7762
        var _A = $eq($1.format, "expandedstacked") ? 4 : 22; //#7759
        $1.segments = _A; //#7759
    } else { //#7762
        if ((($1.segments < 2) || ($1.segments > 22)) || (($1.segments % 2) != 0)) { //#7763
            $k[$j++] = 'bwipp.gs1databarexpandedBadSegments'; //#7762
            $k[$j++] = "The number of segments must be even from 2 to 22"; //#7762
            bwipp_raiseerror(); //#7762
        } //#7762
    } //#7762
    $1.expand = function() {
        var _F = new Map([
            ["parse", $1.parse],
            ["parseonly", true],
            ["parsefnc", false]
        ]); //#7771
        $1.fncvals = _F; //#7772
        $k[$j++] = $1.fncvals; //#7773
        bwipp_parseinput(); //#7773
    }; //#7774
    $1.ais = $a([]); //#7777
    $1.vals = $a([]); //#7778
    var _J = $1.barcode; //#7779
    $k[$j++] = $geti(_J, 1, _J.length - 1); //#7792
    for (;;) { //#7792
        var _L = $k[--$j]; //#7781
        $k[$j++] = _L; //#7781
        if ($eq(_L, "")) { //#7781
            break; //#7781
        } //#7781
        $search($k[--$j], ")"); //#7782
        $j--; //#7782
        var _N = $k[--$j]; //#7783
        var _O = $k[--$j]; //#7783
        $k[$j++] = _N; //#7783
        $k[$j++] = _O; //#7783
        $j--; //#7783
        var _P = $k[--$j]; //#7784
        var _Q = $k[--$j]; //#7784
        $k[$j++] = _P; //#7784
        $search(_Q, "("); //#7784
        if ($k[--$j]) { //#7787
            var _S = $k[--$j]; //#7785
            var _T = $k[--$j]; //#7785
            $k[$j++] = _S; //#7785
            $k[$j++] = _T; //#7785
            $j--; //#7785
            var _U = $k[--$j]; //#7785
            var _V = $k[--$j]; //#7785
            var _W = $k[--$j]; //#7785
            $k[$j++] = _V; //#7785
            $k[$j++] = _W; //#7785
            $k[$j++] = _U; //#7785
        } else { //#7787
            var _X = $k[--$j]; //#7787
            var _Y = $k[--$j]; //#7787
            $k[$j++] = ""; //#7787
            $k[$j++] = _Y; //#7787
            $k[$j++] = _X; //#7787
        } //#7787
        $k[$j++] = Infinity; //#7789
        $aload($1.ais); //#7789
        var _b = $k[$j - 1 - ($counttomark() + 2)]; //#7789
        $k[$j++] = _b; //#7789
        $1.ais = $a(); //#7789
        $k[$j++] = Infinity; //#7790
        $aload($1.vals); //#7790
        var _f = $k[$j - 1 - ($counttomark() + 1)]; //#7790
        $k[$j++] = _f; //#7790
        $1.expand(); //#7790
        $1.vals = $a(); //#7790
        $j -= 2; //#7791
    } //#7791
    $j--; //#7793
    if (!$1.dontlint) { //#7795
        $k[$j++] = $1.ais; //#7795
        $k[$j++] = $1.vals; //#7795
        bwipp_gs1lint(); //#7795
        $j--; //#7795
    } //#7795
    for (;;) { //#7883
        if ($1.ais.length == 2) { //#7807
            if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3103")) { //#7806
                if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 32767)) { //#7805
                    $k[$j++] = "0100"; //#7804
                    $k[$j++] = false; //#7804
                    break; //#7804
                } //#7804
            } //#7804
        } //#7804
        if ($1.ais.length == 2) { //#7816
            if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3202")) { //#7815
                if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 9999)) { //#7814
                    $k[$j++] = "0101"; //#7813
                    $k[$j++] = false; //#7813
                    break; //#7813
                } //#7813
            } //#7813
        } //#7813
        if ($1.ais.length == 2) { //#7825
            if ($eq($get($1.ais, 0), "01") && $eq($get($1.ais, 1), "3203")) { //#7824
                if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 22767)) { //#7823
                    $k[$j++] = "0101"; //#7822
                    $k[$j++] = false; //#7822
                    break; //#7822
                } //#7822
            } //#7822
        } //#7822
        var _1F = $1.ais.length; //#7828
        if ((_1F == 2) || (_1F == 3)) { //#7859
            $k[$j++] = 'ai310x'; //#7829
            $k[$j++] = false; //#7829
            for (var _1G = 3100; _1G <= 3109; _1G += 1) { //#7829
                var _1L = $k[--$j]; //#7829
                $k[$j++] = _1L || $eq($cvrs($s(4), _1G, 10), $get($1.ais, 1)); //#7829
            } //#7829
            var _1M = $k[--$j]; //#7829
            $1[$k[--$j]] = _1M; //#7829
            $k[$j++] = 'ai320x'; //#7830
            $k[$j++] = false; //#7830
            for (var _1O = 3200; _1O <= 3209; _1O += 1) { //#7830
                var _1T = $k[--$j]; //#7830
                $k[$j++] = _1T || $eq($cvrs($s(4), _1O, 10), $get($1.ais, 1)); //#7830
            } //#7830
            var _1U = $k[--$j]; //#7830
            $1[$k[--$j]] = _1U; //#7830
            if ($1.ais.length == 3) { //#7834
                var _1X = $a(["11", "13", "15", "17"]); //#7832
                $k[$j++] = 'aibad'; //#7832
                $k[$j++] = true; //#7832
                for (var _1Y = 0, _1Z = _1X.length; _1Y < _1Z; _1Y++) { //#7832
                    var _1d = $k[--$j]; //#7832
                    $k[$j++] = _1d && $ne($get(_1X, _1Y), $get($1.ais, 2)); //#7832
                } //#7832
                var _1e = $k[--$j]; //#7832
                $1[$k[--$j]] = _1e; //#7832
            } else { //#7834
                $1.aibad = false; //#7834
            } //#7834
            if (($eq($get($1.ais, 0), "01") && ($1.ai310x || $1.ai320x)) && (!$1.aibad)) { //#7858
                if ($1.ais.length == 3) { //#7855
                    var _1u = $cvi($geti($get($1.vals, 2), 2, 2)); //#7840
                    var _1y = $cvi($geti($get($1.vals, 2), 4, 2)); //#7841
                    if ((($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 99999)) && ((_1u >= 1) && (_1u <= 12))) && ((_1y >= 0) && (_1y <= 31))) { //#7850
                        if ($1.ai310x && $eq($get($1.ais, 2), "11")) { //#7842
                            $k[$j++] = "0111000"; //#7842
                            $k[$j++] = false; //#7842
                            break; //#7842
                        } //#7842
                        if ($1.ai320x && $eq($get($1.ais, 2), "11")) { //#7843
                            $k[$j++] = "0111001"; //#7843
                            $k[$j++] = false; //#7843
                            break; //#7843
                        } //#7843
                        if ($1.ai310x && $eq($get($1.ais, 2), "13")) { //#7844
                            $k[$j++] = "0111010"; //#7844
                            $k[$j++] = false; //#7844
                            break; //#7844
                        } //#7844
                        if ($1.ai320x && $eq($get($1.ais, 2), "13")) { //#7845
                            $k[$j++] = "0111011"; //#7845
                            $k[$j++] = false; //#7845
                            break; //#7845
                        } //#7845
                        if ($1.ai310x && $eq($get($1.ais, 2), "15")) { //#7846
                            $k[$j++] = "0111100"; //#7846
                            $k[$j++] = false; //#7846
                            break; //#7846
                        } //#7846
                        if ($1.ai320x && $eq($get($1.ais, 2), "15")) { //#7847
                            $k[$j++] = "0111101"; //#7847
                            $k[$j++] = false; //#7847
                            break; //#7847
                        } //#7847
                        if ($1.ai310x && $eq($get($1.ais, 2), "17")) { //#7848
                            $k[$j++] = "0111110"; //#7848
                            $k[$j++] = false; //#7848
                            break; //#7848
                        } //#7848
                        if ($1.ai320x && $eq($get($1.ais, 2), "17")) { //#7849
                            $k[$j++] = "0111111"; //#7849
                            $k[$j++] = false; //#7849
                            break; //#7849
                        } //#7849
                    } //#7849
                } else { //#7855
                    if ($eq($geti($get($1.vals, 0), 0, 1), "9") && ($cvi($get($1.vals, 1)) <= 99999)) { //#7856
                        if ($1.ai310x) { //#7854
                            $k[$j++] = "0111000"; //#7854
                            $k[$j++] = false; //#7854
                            break; //#7854
                        } //#7854
                        if ($1.ai320x) { //#7855
                            $k[$j++] = "0111001"; //#7855
                            $k[$j++] = false; //#7855
                            break; //#7855
                        } //#7855
                    } //#7855
                } //#7855
            } //#7855
        } //#7855
        if ($1.ais.length >= 2) { //#7867
            $k[$j++] = 'ai392x'; //#7863
            $k[$j++] = false; //#7863
            for (var _2V = 3920; _2V <= 3923; _2V += 1) { //#7863
                var _2a = $k[--$j]; //#7863
                $k[$j++] = _2a || $eq($cvrs($s(4), _2V, 10), $get($1.ais, 1)); //#7863
            } //#7863
            var _2b = $k[--$j]; //#7863
            $1[$k[--$j]] = _2b; //#7863
            if ($eq($get($1.ais, 0), "01") && $1.ai392x) { //#7866
                if ($eq($geti($get($1.vals, 0), 0, 1), "9")) { //#7865
                    $k[$j++] = "01100"; //#7865
                    $k[$j++] = true; //#7865
                    break; //#7865
                } //#7865
            } //#7865
        } //#7865
        if ($1.ais.length >= 2) { //#7875
            $k[$j++] = 'ai393x'; //#7871
            $k[$j++] = false; //#7871
            for (var _2k = 3930; _2k <= 3933; _2k += 1) { //#7871
                var _2p = $k[--$j]; //#7871
                $k[$j++] = _2p || $eq($cvrs($s(4), _2k, 10), $get($1.ais, 1)); //#7871
            } //#7871
            var _2q = $k[--$j]; //#7871
            $1[$k[--$j]] = _2q; //#7871
            if ($eq($get($1.ais, 0), "01") && $1.ai393x) { //#7874
                if ($eq($geti($get($1.vals, 0), 0, 1), "9")) { //#7873
                    $k[$j++] = "01101"; //#7873
                    $k[$j++] = true; //#7873
                    break; //#7873
                } //#7873
            } //#7873
        } //#7873
        if ($eq($get($1.ais, 0), "01")) { //#7878
            $k[$j++] = "1"; //#7878
            $k[$j++] = true; //#7878
            break; //#7878
        } //#7878
        $k[$j++] = "00"; //#7881
        $k[$j++] = true; //#7881
        break; //#7881
    } //#7881
    $1.gpfallow = $k[--$j]; //#7884
    $1.method = $k[--$j]; //#7885
    $1.conv12to40 = function() {
        var _33 = $strcpy($s(40), "0000000000000000000000000000000000000000"); //#7888
        var _34 = $k[--$j]; //#7889
        var _38 = $cvrs($s(10), $cvi($geti(_34, 0, 3)), 2); //#7889
        $puti($geti(_33, 0, 10), 10 - _38.length, _38); //#7889
        var _3C = $cvrs($s(10), $cvi($geti(_34, 3, 3)), 2); //#7890
        $puti($geti(_33, 10, 10), 10 - _3C.length, _3C); //#7890
        var _3G = $cvrs($s(10), $cvi($geti(_34, 6, 3)), 2); //#7891
        $puti($geti(_33, 20, 10), 10 - _3G.length, _3G); //#7891
        var _3K = $cvrs($s(10), $cvi($geti(_34, 9, 3)), 2); //#7892
        $puti($geti(_33, 30, 10), 10 - _3K.length, _3K); //#7892
        $k[$j++] = _33; //#7893
        $k[$j++] = _34; //#7893
        $j--; //#7893
    }; //#7894
    $1.conv13to44 = function() {
        var _3M = $strcpy($s(44), "00000000000000000000000000000000000000000000"); //#7897
        var _3N = $k[--$j]; //#7898
        var _3R = $cvrs($s(4), $cvi($geti(_3N, 0, 1)), 2); //#7898
        $puti($geti(_3M, 0, 4), 4 - _3R.length, _3R); //#7898
        $k[$j++] = _3M; //#7899
        $k[$j++] = _3M; //#7899
        $k[$j++] = $geti(_3N, 1, 12); //#7899
        $1.conv12to40(); //#7899
        var _3T = $k[--$j]; //#7899
        $puti($k[--$j], 4, _3T); //#7899
    }; //#7900
    $1.tobin = function() {
        var _3W = $s($k[--$j]); //#7903
        $k[$j++] = _3W; //#7903
        for (var _3Y = 0, _3X = _3W.length - 1; _3Y <= _3X; _3Y += 1) { //#7903
            var _3Z = $k[--$j]; //#7903
            $put(_3Z, _3Y, 48); //#7903
            $k[$j++] = _3Z; //#7903
        } //#7903
        var _3a = $k[--$j]; //#7904
        var _3d = $cvrs($s(_3a.length), $k[--$j], 2); //#7904
        $puti(_3a, _3a.length - _3d.length, _3d); //#7904
        $k[$j++] = _3a; //#7904
    }; //#7905
    $1.fnc1 = -1; //#7907
    $1.lnumeric = -2; //#7907
    $1.lalphanumeric = -3; //#7907
    $1.liso646 = -4; //#7907
    if ($eq($1.method, "00")) { //#7912
        $1.cdf = $a([]); //#7910
        $1.gpf = $a([]); //#7911
    } //#7911
    if ($eq($1.method, "1")) { //#7920
        $k[$j++] = 'cdf'; //#7915
        $k[$j++] = $geti($get($1.vals, 0), 0, 13); //#7915
        $1.conv13to44(); //#7915
        var _3l = $k[--$j]; //#7915
        $1[$k[--$j]] = _3l; //#7915
        $k[$j++] = Infinity; //#7916
        var _3n = $1.cdf; //#7916
        for (var _3o = 0, _3p = _3n.length; _3o < _3p; _3o++) { //#7916
            $k[$j++] = $f($get(_3n, _3o) - 48); //#7916
        } //#7916
        $1.cdf = $a(); //#7916
        $1.gpf = $a([]); //#7917
        $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#7918
        $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#7919
    } //#7919
    if ($eq($1.method, "0100")) { //#7930
        $1.cdf = $s(55); //#7923
        $k[$j++] = $1.cdf; //#7924
        $k[$j++] = 0; //#7924
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#7924
        $1.conv12to40(); //#7924
        var _45 = $k[--$j]; //#7924
        var _46 = $k[--$j]; //#7924
        $puti($k[--$j], _46, _45); //#7924
        $k[$j++] = $1.cdf; //#7925
        $k[$j++] = 40; //#7925
        $k[$j++] = $cvi($get($1.vals, 1)); //#7925
        $k[$j++] = 15; //#7925
        $1.tobin(); //#7925
        var _4B = $k[--$j]; //#7925
        var _4C = $k[--$j]; //#7925
        $puti($k[--$j], _4C, _4B); //#7925
        $k[$j++] = Infinity; //#7926
        var _4E = $1.cdf; //#7926
        for (var _4F = 0, _4G = _4E.length; _4F < _4G; _4F++) { //#7926
            $k[$j++] = $get(_4E, _4F) - 48; //#7926
        } //#7926
        $1.cdf = $a(); //#7926
        $1.gpf = $a([]); //#7927
        $1.ais = $a([]); //#7928
        $1.vals = $a([]); //#7929
    } //#7929
    if ($eq($1.method, "0101")) { //#7945
        $1.cdf = $s(55); //#7933
        $k[$j++] = $1.cdf; //#7934
        $k[$j++] = 0; //#7934
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#7934
        $1.conv12to40(); //#7934
        var _4S = $k[--$j]; //#7934
        var _4T = $k[--$j]; //#7934
        $puti($k[--$j], _4T, _4S); //#7934
        if ($eq($get($1.ais, 1), "3202")) { //#7938
            $k[$j++] = $cvi($get($1.vals, 1)); //#7936
            $k[$j++] = 15; //#7936
            $1.tobin(); //#7936
        } else { //#7938
            $k[$j++] = $cvi($get($1.vals, 1)) + 10000; //#7938
            $k[$j++] = 15; //#7938
            $1.tobin(); //#7938
        } //#7938
        $puti($1.cdf, 40, $k[--$j]); //#7940
        $k[$j++] = Infinity; //#7941
        var _4d = $1.cdf; //#7941
        for (var _4e = 0, _4f = _4d.length; _4e < _4f; _4e++) { //#7941
            $k[$j++] = $get(_4d, _4e) - 48; //#7941
        } //#7941
        $1.cdf = $a(); //#7941
        $1.gpf = $a([]); //#7942
        $1.ais = $a([]); //#7943
        $1.vals = $a([]); //#7944
    } //#7944
    if ($1.method.length == 7) { //#7966
        $1.cdf = $s(76); //#7948
        $k[$j++] = $1.cdf; //#7949
        $k[$j++] = 0; //#7949
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#7949
        $1.conv12to40(); //#7949
        var _4r = $k[--$j]; //#7949
        var _4s = $k[--$j]; //#7949
        $puti($k[--$j], _4s, _4r); //#7949
        var _4u = $s(6); //#7950
        $puti(_4u, 0, $geti($get($1.ais, 1), 3, 1)); //#7950
        $puti(_4u, 1, $geti($get($1.vals, 1), 1, 5)); //#7951
        $k[$j++] = $cvi(_4u); //#7951
        $k[$j++] = 20; //#7951
        $1.tobin(); //#7951
        $puti($1.cdf, 40, $k[--$j]); //#7952
        if ($1.ais.length == 3) { //#7959
            var _55 = $get($1.vals, 2); //#7954
            $k[$j++] = ($cvi($geti(_55, 0, 2)) * 384) + ((($cvi($geti(_55, 2, 2)) - 1) * 32) + $cvi($geti(_55, 4, 2))); //#7957
        } else { //#7959
            $k[$j++] = 38400; //#7959
        } //#7959
        $k[$j++] = 16; //#7961
        $1.tobin(); //#7961
        $puti($1.cdf, 60, $k[--$j]); //#7961
        $k[$j++] = Infinity; //#7962
        var _5B = $1.cdf; //#7962
        for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#7962
            $k[$j++] = $get(_5B, _5C) - 48; //#7962
        } //#7962
        $1.cdf = $a(); //#7962
        $1.gpf = $a([]); //#7963
        $1.ais = $a([]); //#7964
        $1.vals = $a([]); //#7965
    } //#7965
    if ($eq($1.method, "01100")) { //#7976
        $1.cdf = $s(42); //#7969
        $k[$j++] = $1.cdf; //#7970
        $k[$j++] = 0; //#7970
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#7970
        $1.conv12to40(); //#7970
        var _5P = $k[--$j]; //#7970
        var _5Q = $k[--$j]; //#7970
        $puti($k[--$j], _5Q, _5P); //#7970
        $k[$j++] = $1.cdf; //#7971
        $k[$j++] = 40; //#7971
        $k[$j++] = $cvi($geti($get($1.ais, 1), 3, 1)); //#7971
        $k[$j++] = 2; //#7971
        $1.tobin(); //#7971
        var _5W = $k[--$j]; //#7971
        var _5X = $k[--$j]; //#7971
        $puti($k[--$j], _5X, _5W); //#7971
        $k[$j++] = Infinity; //#7972
        var _5Z = $1.cdf; //#7972
        for (var _5a = 0, _5b = _5Z.length; _5a < _5b; _5a++) { //#7972
            $k[$j++] = $get(_5Z, _5a) - 48; //#7972
        } //#7972
        $1.cdf = $a(); //#7972
        $k[$j++] = Infinity; //#7973
        $forall($get($1.vals, 1)); //#7973
        if ($1.ais.length > 2) { //#7973
            $k[$j++] = $1.fnc1; //#7973
        } //#7973
        $1.gpf = $a(); //#7973
        $1.ais = $geti($1.ais, 2, $1.ais.length - 2); //#7974
        $1.vals = $geti($1.vals, 2, $1.vals.length - 2); //#7975
    } //#7975
    if ($eq($1.method, "01101")) { //#7987
        $1.cdf = $s(52); //#7979
        $k[$j++] = $1.cdf; //#7980
        $k[$j++] = 0; //#7980
        $k[$j++] = $geti($get($1.vals, 0), 1, 12); //#7980
        $1.conv12to40(); //#7980
        var _5v = $k[--$j]; //#7980
        var _5w = $k[--$j]; //#7980
        $puti($k[--$j], _5w, _5v); //#7980
        $k[$j++] = $1.cdf; //#7981
        $k[$j++] = 40; //#7981
        $k[$j++] = $cvi($geti($get($1.ais, 1), 3, 1)); //#7981
        $k[$j++] = 2; //#7981
        $1.tobin(); //#7981
        var _62 = $k[--$j]; //#7981
        var _63 = $k[--$j]; //#7981
        $puti($k[--$j], _63, _62); //#7981
        $k[$j++] = $1.cdf; //#7982
        $k[$j++] = 42; //#7982
        $k[$j++] = $cvi($geti($get($1.vals, 1), 0, 3)); //#7982
        $k[$j++] = 10; //#7982
        $1.tobin(); //#7982
        var _69 = $k[--$j]; //#7982
        var _6A = $k[--$j]; //#7982
        $puti($k[--$j], _6A, _69); //#7982
        $k[$j++] = Infinity; //#7983
        var _6C = $1.cdf; //#7983
        for (var _6D = 0, _6E = _6C.length; _6D < _6E; _6D++) { //#7983
            $k[$j++] = $get(_6C, _6D) - 48; //#7983
        } //#7983
        $1.cdf = $a(); //#7983
        $k[$j++] = Infinity; //#7984
        var _6I = $get($1.vals, 1); //#7984
        var _6J = $geti(_6I, 3, _6I.length - 3); //#7984
        for (var _6K = 0, _6L = _6J.length; _6K < _6L; _6K++) { //#7984
            $k[$j++] = $get(_6J, _6K); //#7984
        } //#7984
        if ($1.ais.length > 2) { //#7984
            $k[$j++] = $1.fnc1; //#7984
        } //#7984
        $1.gpf = $a(); //#7984
        $1.ais = $geti($1.ais, 2, $1.ais.length - 2); //#7985
        $1.vals = $geti($1.vals, 2, $1.vals.length - 2); //#7986
    } //#7986
    if ($1.gpfallow) { //#7993
        $1.vlf = $a(2); //#7991
    } else { //#7993
        $1.vlf = $a([]); //#7993
    } //#7993
    $1.aifixed = new Map; //#7999
    $k[$j++] = Infinity; //#8001
    for (var _6Z = 0; _6Z <= 4; _6Z += 1) { //#8001
        $k[$j++] = _6Z; //#8001
    } //#8001
    var _6a = $a(); //#8001
    for (var _6b = 0, _6c = _6a.length; _6b < _6c; _6b++) { //#8004
        var _6f = $strcpy($s(2), "00"); //#8003
        $put(_6f, 1, $f($get(_6a, _6b) + 48)); //#8003
        $put($1.aifixed, _6f, _6f); //#8003
    } //#8003
    $k[$j++] = Infinity; //#8009
    for (var _6h = 11; _6h <= 20; _6h += 1) { //#8006
        $k[$j++] = _6h; //#8006
    } //#8006
    $k[$j++] = 23; //#8008
    for (var _6i = 31; _6i <= 36; _6i += 1) { //#8008
        $k[$j++] = _6i; //#8008
    } //#8008
    $k[$j++] = 41; //#8009
    var _6j = $a(); //#8009
    for (var _6k = 0, _6l = _6j.length; _6k < _6l; _6k++) { //#8012
        var _6o = $cvrs($s(2), $get(_6j, _6k), 10); //#8011
        $put($1.aifixed, _6o, _6o); //#8011
    } //#8011
    $k[$j++] = Infinity; //#8024
    for (var _6q = 0; _6q <= 119; _6q += 1) { //#8023
        var _6s = $strcpy($s(2), "00"); //#8016
        var _6u = $cvrs($s(2), _6q, 11); //#8016
        $puti(_6s, 2 - _6u.length, _6u); //#8017
        $k[$j++] = _6q; //#8018
        $k[$j++] = _6s; //#8018
        if ($get(_6s, 0) == 65) { //#8018
            var _6w = $k[--$j]; //#8018
            $put(_6w, 0, 94); //#8018
            $k[$j++] = _6w; //#8018
        } //#8018
        var _6x = $k[--$j]; //#8019
        $k[$j++] = _6x; //#8019
        if ($get(_6x, 1) == 65) { //#8019
            var _6z = $k[--$j]; //#8019
            $put(_6z, 1, 94); //#8019
            $k[$j++] = _6z; //#8019
        } //#8019
        var _70 = $k[--$j]; //#8020
        var _73 = $strcpy($s(7), "0000000"); //#8021
        var _75 = $cvrs($s(7), $f($k[--$j] + 8), 2); //#8021
        $puti(_73, 7 - _75.length, _75); //#8022
        $k[$j++] = _70; //#8022
        $k[$j++] = _73; //#8022
    } //#8022
    $k[$j++] = $1.lalphanumeric; //#8024
    $k[$j++] = "0000"; //#8024
    $1.numeric = $d(); //#8025
    $k[$j++] = Infinity; //#8034
    for (var _78 = 48; _78 <= 57; _78 += 1) { //#8028
        $k[$j++] = _78; //#8028
        $k[$j++] = _78 - 43; //#8028
        $k[$j++] = 5; //#8028
        $1.tobin(); //#8028
    } //#8028
    $k[$j++] = $1.fnc1; //#8030
    $k[$j++] = "01111"; //#8030
    for (var _7A = 65; _7A <= 90; _7A += 1) { //#8030
        $k[$j++] = _7A; //#8030
        $k[$j++] = _7A - 33; //#8030
        $k[$j++] = 6; //#8030
        $1.tobin(); //#8030
    } //#8030
    $k[$j++] = 42; //#8032
    $k[$j++] = "111010"; //#8032
    for (var _7B = 44; _7B <= 47; _7B += 1) { //#8032
        $k[$j++] = _7B; //#8032
        $k[$j++] = _7B + 15; //#8032
        $k[$j++] = 6; //#8032
        $1.tobin(); //#8032
    } //#8032
    $k[$j++] = $1.lnumeric; //#8034
    $k[$j++] = "000"; //#8034
    $k[$j++] = $1.liso646; //#8034
    $k[$j++] = "00100"; //#8034
    $1.alphanumeric = $d(); //#8035
    $k[$j++] = Infinity; //#8049
    for (var _7F = 48; _7F <= 57; _7F += 1) { //#8038
        $k[$j++] = _7F; //#8038
        $k[$j++] = _7F - 43; //#8038
        $k[$j++] = 5; //#8038
        $1.tobin(); //#8038
    } //#8038
    $k[$j++] = $1.fnc1; //#8040
    $k[$j++] = "01111"; //#8040
    for (var _7H = 65; _7H <= 90; _7H += 1) { //#8040
        $k[$j++] = _7H; //#8040
        $k[$j++] = _7H - 1; //#8040
        $k[$j++] = 7; //#8040
        $1.tobin(); //#8040
    } //#8040
    for (var _7I = 97; _7I <= 122; _7I += 1) { //#8041
        $k[$j++] = _7I; //#8041
        $k[$j++] = _7I - 7; //#8041
        $k[$j++] = 7; //#8041
        $1.tobin(); //#8041
    } //#8041
    $k[$j++] = 33; //#8044
    $k[$j++] = "11101000"; //#8044
    $k[$j++] = 34; //#8044
    $k[$j++] = "11101001"; //#8044
    for (var _7J = 37; _7J <= 47; _7J += 1) { //#8044
        $k[$j++] = _7J; //#8044
        $k[$j++] = _7J + 197; //#8044
        $k[$j++] = 8; //#8044
        $1.tobin(); //#8044
    } //#8044
    for (var _7K = 58; _7K <= 63; _7K += 1) { //#8045
        $k[$j++] = _7K; //#8045
        $k[$j++] = _7K + 187; //#8045
        $k[$j++] = 8; //#8045
        $1.tobin(); //#8045
    } //#8045
    $k[$j++] = 95; //#8049
    $k[$j++] = "11111011"; //#8049
    $k[$j++] = 32; //#8049
    $k[$j++] = "11111100"; //#8049
    $k[$j++] = $1.lnumeric; //#8049
    $k[$j++] = "000"; //#8049
    $k[$j++] = $1.lalphanumeric; //#8049
    $k[$j++] = "00100"; //#8049
    $1.iso646 = $d(); //#8050
    for (var _7Q = 0, _7P = $1.ais.length - 1; _7Q <= _7P; _7Q += 1) { //#8068
        $1.i = _7Q; //#8054
        $1.ai = $get($1.ais, $1.i); //#8055
        $1.val = $get($1.vals, $1.i); //#8056
        var _7a = $a(($1.gpf.length + $1.ai.length) + $1.val.length); //#8057
        $puti(_7a, 0, $1.gpf); //#8058
        $k[$j++] = _7a; //#8059
        $k[$j++] = _7a; //#8059
        $k[$j++] = $1.gpf.length; //#8059
        $k[$j++] = $1.ai; //#8059
        $k[$j++] = Infinity; //#8059
        var _7e = $k[--$j]; //#8059
        var _7f = $k[--$j]; //#8059
        $k[$j++] = _7e; //#8059
        $forall(_7f); //#8059
        var _7g = $a(); //#8059
        var _7h = $k[--$j]; //#8059
        $puti($k[--$j], _7h, _7g); //#8059
        var _7j = $k[--$j]; //#8060
        $k[$j++] = _7j; //#8060
        $k[$j++] = _7j; //#8060
        $k[$j++] = $1.gpf.length + $1.ai.length; //#8060
        $k[$j++] = $1.val; //#8060
        $k[$j++] = Infinity; //#8060
        var _7n = $k[--$j]; //#8060
        var _7o = $k[--$j]; //#8060
        $k[$j++] = _7n; //#8060
        $forall(_7o); //#8060
        var _7p = $a(); //#8060
        var _7q = $k[--$j]; //#8060
        $puti($k[--$j], _7q, _7p); //#8060
        $1.gpf = $k[--$j]; //#8061
        var _7y = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; //#8062
        if (($1.i != ($1.ais.length - 1)) && (!_7y)) { //#8067
            var _80 = $a($1.gpf.length + 1); //#8063
            $puti(_80, 0, $1.gpf); //#8064
            $put(_80, $1.gpf.length, $1.fnc1); //#8065
            $1.gpf = _80; //#8066
        } //#8066
    } //#8066
    $1.rembits = function() {
        var _84 = $k[--$j]; //#8072
        var _85 = 48; //#8074
        var _86 = (~~Math.ceil(_84 / 12)) * 12; //#8074
        if (((~~Math.ceil(_84 / 12)) * 12) < 48) { //#8074
            var _ = _85; //#8074
            _85 = _86; //#8074
            _86 = _; //#8074
        } //#8074
        var _87 = ~~(_86 / 12); //#8075
        $k[$j++] = _84; //#8079
        $k[$j++] = _86; //#8079
        $k[$j++] = _87; //#8079
        if ((_87 % $1.segments) == 1) { //#8078
            var _89 = $k[--$j]; //#8076
            var _8A = $k[--$j]; //#8076
            $k[$j++] = $f(_89 + 1) * 12; //#8076
            $k[$j++] = _8A; //#8076
            $j--; //#8076
        } else { //#8078
            $j--; //#8078
        } //#8078
        var _8B = $k[--$j]; //#8080
        var _8C = $k[--$j]; //#8080
        $k[$j++] = $f(_8B - _8C); //#8080
    }; //#8081
    $1.encode = function() {
        var _8D = $k[--$j]; //#8084
        $k[$j++] = _8D; //#8084
        if ($ne(_8D, 'raw')) { //#8084
            var _8E = $k[--$j]; //#8084
            var _8G = $get(_8E, $k[--$j]); //#8084
            $k[$j++] = _8G; //#8084
        } else { //#8084
            $j--; //#8084
        } //#8084
        $k[$j++] = Infinity; //#8085
        var _8H = $k[--$j]; //#8085
        var _8I = $k[--$j]; //#8085
        $k[$j++] = _8H; //#8085
        $forall(_8I, function() { //#8085
            var _8J = $k[--$j]; //#8085
            $k[$j++] = $f(_8J - 48); //#8085
        }); //#8085
        var _8K = $a(); //#8085
        $puti($1.gpfenc, $1.j, _8K); //#8087
        $1.j = _8K.length + $1.j; //#8088
    }; //#8089
    $k[$j++] = Infinity; //#8092
    for (var _8P = 0, _8Q = $1.gpf.length; _8P < _8Q; _8P++) { //#8092
        $k[$j++] = 0; //#8092
    } //#8092
    $k[$j++] = 0; //#8092
    $k[$j++] = -1; //#8092
    $1.numericruns = $a(); //#8092
    $k[$j++] = Infinity; //#8093
    for (var _8T = 0, _8U = $1.gpf.length; _8T < _8U; _8T++) { //#8093
        $k[$j++] = 0; //#8093
    } //#8093
    $k[$j++] = 0; //#8093
    $1.alphanumericruns = $a(); //#8093
    $k[$j++] = Infinity; //#8094
    for (var _8X = 0, _8Y = $1.gpf.length; _8X < _8Y; _8X++) { //#8094
        $k[$j++] = 0; //#8094
    } //#8094
    $k[$j++] = 9999; //#8094
    $1.nextiso646only = $a(); //#8094
    for (var _8b = $1.gpf.length - 1; _8b >= 0; _8b -= 1) { //#8116
        $1.i = _8b; //#8096
        var _8g = $strcpy($s(2), "00"); //#8098
        var _8j = $get($1.gpf, $1.i); //#8099
        $k[$j++] = $get($1.gpf, $1.i); //#8099
        $k[$j++] = _8g; //#8099
        $k[$j++] = _8g; //#8099
        $k[$j++] = 0; //#8099
        $k[$j++] = _8j; //#8099
        if (_8j == $1.fnc1) { //#8099
            $j--; //#8099
            $k[$j++] = 94; //#8099
        } //#8099
        var _8l = $k[--$j]; //#8099
        var _8m = $k[--$j]; //#8099
        $put($k[--$j], _8m, _8l); //#8099
        if ($1.i < ($1.gpf.length - 1)) { //#8100
            var _8q = $k[--$j]; //#8100
            var _8t = $get($1.gpf, $1.i + 1); //#8100
            $k[$j++] = _8q; //#8100
            $k[$j++] = _8q; //#8100
            $k[$j++] = 1; //#8100
            $k[$j++] = _8t; //#8100
            if (_8t == $1.fnc1) { //#8100
                $j--; //#8100
                $k[$j++] = 94; //#8100
            } //#8100
            var _8v = $k[--$j]; //#8100
            var _8w = $k[--$j]; //#8100
            $put($k[--$j], _8w, _8v); //#8100
        } //#8100
        var _90 = $get($1.numeric, $k[--$j]) !== undefined; //#8101
        if (_90) { //#8104
            $put($1.numericruns, $1.i, $f($get($1.numericruns, $1.i + 2) + 2)); //#8102
        } else { //#8104
            $put($1.numericruns, $1.i, 0); //#8104
        } //#8104
        var _98 = $k[--$j]; //#8106
        var _9A = $get($1.alphanumeric, _98) !== undefined; //#8106
        $k[$j++] = _98; //#8110
        if (_9A) { //#8109
            $put($1.alphanumericruns, $1.i, $f($get($1.alphanumericruns, $1.i + 1) + 1)); //#8107
        } else { //#8109
            $put($1.alphanumericruns, $1.i, 0); //#8109
        } //#8109
        var _9I = $k[--$j]; //#8111
        var _9K = $get($1.iso646, _9I) !== undefined; //#8111
        var _9M = $get($1.alphanumeric, _9I) !== undefined; //#8111
        if (_9K && (!_9M)) { //#8114
            $put($1.nextiso646only, $1.i, 0); //#8112
        } else { //#8114
            $put($1.nextiso646only, $1.i, $f($get($1.nextiso646only, $1.i + 1) + 1)); //#8114
        } //#8114
    } //#8114
    $1.gpfenc = $a(252); //#8119
    $1.i = 0; //#8120
    $1.j = 0; //#8120
    $1.mode = "numeric"; //#8120
    for (;;) { //#8210
        if ($1.i == $1.gpf.length) { //#8122
            break; //#8122
        } //#8122
        for (;;) { //#8209
            if ($eq($1.mode, "numeric")) { //#8158
                if ($1.i <= ($1.gpf.length - 2)) { //#8155
                    var _9a = $s(2); //#8127
                    var _9d = $get($1.gpf, $1.i); //#8128
                    $k[$j++] = _9a; //#8128
                    $k[$j++] = _9a; //#8128
                    $k[$j++] = 0; //#8128
                    $k[$j++] = _9d; //#8128
                    if (_9d == $1.fnc1) { //#8128
                        $j--; //#8128
                        $k[$j++] = 94; //#8128
                    } //#8128
                    var _9f = $k[--$j]; //#8128
                    var _9g = $k[--$j]; //#8128
                    $put($k[--$j], _9g, _9f); //#8128
                    var _9i = $k[--$j]; //#8129
                    var _9l = $get($1.gpf, $1.i + 1); //#8129
                    $k[$j++] = _9i; //#8129
                    $k[$j++] = _9i; //#8129
                    $k[$j++] = 1; //#8129
                    $k[$j++] = _9l; //#8129
                    if (_9l == $1.fnc1) { //#8129
                        $j--; //#8129
                        $k[$j++] = 94; //#8129
                    } //#8129
                    var _9n = $k[--$j]; //#8129
                    var _9o = $k[--$j]; //#8129
                    $put($k[--$j], _9o, _9n); //#8129
                    var _9q = $k[--$j]; //#8130
                    var _9s = $get($1.numeric, _9q) !== undefined; //#8130
                    $k[$j++] = _9q; //#8134
                    if (_9s) { //#8134
                        $k[$j++] = $1.numeric; //#8131
                        $1.encode(); //#8131
                        $1.i = $1.i + 2; //#8132
                        break; //#8133
                    } //#8133
                    $j--; //#8135
                    $k[$j++] = $1.lalphanumeric; //#8136
                    $k[$j++] = $1.numeric; //#8136
                    $1.encode(); //#8136
                    $1.mode = "alphanumeric"; //#8137
                    break; //#8138
                } else { //#8155
                    var _9z = $get($1.gpf, $1.i); //#8140
                    if ((_9z < 48) || (_9z > 57)) { //#8144
                        $k[$j++] = $1.lalphanumeric; //#8141
                        $k[$j++] = $1.numeric; //#8141
                        $1.encode(); //#8141
                        $1.mode = "alphanumeric"; //#8142
                        break; //#8143
                    } //#8143
                    $k[$j++] = 'rem'; //#8145
                    $k[$j++] = ((((12 + 1) + $1.method.length) + $1.vlf.length) + $1.cdf.length) + $1.j; //#8145
                    $1.rembits(); //#8145
                    var _A6 = $k[--$j]; //#8145
                    $1[$k[--$j]] = _A6; //#8145
                    if (($1.rem >= 4) && ($1.rem <= 6)) { //#8155
                        var _AD = $geti($strcpy($s(6), "000000"), 0, $1.rem); //#8147
                        var _AI = $cvrs($s(4), $f($get($1.gpf, $1.i) - 47), 2); //#8148
                        $puti(_AD, 4 - _AI.length, _AI); //#8149
                        $k[$j++] = _AD; //#8149
                        $k[$j++] = 'raw'; //#8149
                        $1.encode(); //#8149
                        $1.i = $1.i + 1; //#8150
                        break; //#8151
                    } else { //#8155
                        var _AK = $s(2); //#8153
                        $put(_AK, 0, $get($1.gpf, $1.i)); //#8153
                        $put(_AK, 1, 94); //#8153
                        $k[$j++] = _AK; //#8153
                        $k[$j++] = $1.numeric; //#8153
                        $1.encode(); //#8153
                        $1.i = $1.i + 1; //#8154
                        break; //#8155
                    } //#8155
                } //#8155
            } //#8155
            if ($eq($1.mode, "alphanumeric")) { //#8185
                if ($get($1.gpf, $1.i) == $1.fnc1) { //#8166
                    $k[$j++] = $1.fnc1; //#8162
                    $k[$j++] = $1.alphanumeric; //#8162
                    $1.encode(); //#8162
                    $1.mode = "numeric"; //#8163
                    $1.i = $1.i + 1; //#8164
                    break; //#8165
                } //#8165
                var _Aa = $get($1.gpf, $1.i); //#8167
                var _Ac = $get($1.iso646, _Aa) !== undefined; //#8167
                var _Ae = $get($1.alphanumeric, _Aa) !== undefined; //#8167
                if (_Ac && (!_Ae)) { //#8171
                    $k[$j++] = $1.liso646; //#8168
                    $k[$j++] = $1.alphanumeric; //#8168
                    $1.encode(); //#8168
                    $1.mode = "iso646"; //#8169
                    break; //#8170
                } //#8170
                if ($get($1.numericruns, $1.i) >= 6) { //#8176
                    $k[$j++] = $1.lnumeric; //#8173
                    $k[$j++] = $1.alphanumeric; //#8173
                    $1.encode(); //#8173
                    $1.mode = "numeric"; //#8174
                    break; //#8175
                } //#8175
                var _Ao = $get($1.numericruns, $1.i); //#8177
                if ((_Ao >= 4) && ($f(_Ao + $1.i) == $1.gpf.length)) { //#8181
                    $k[$j++] = $1.lnumeric; //#8178
                    $k[$j++] = $1.alphanumeric; //#8178
                    $1.encode(); //#8178
                    $1.mode = "numeric"; //#8179
                    break; //#8180
                } //#8180
                $k[$j++] = $get($1.gpf, $1.i); //#8182
                $k[$j++] = $1.alphanumeric; //#8182
                $1.encode(); //#8182
                $1.i = $1.i + 1; //#8183
                break; //#8184
            } //#8184
            if ($eq($1.mode, "iso646")) { //#8207
                if ($get($1.gpf, $1.i) == $1.fnc1) { //#8193
                    $k[$j++] = $1.fnc1; //#8189
                    $k[$j++] = $1.iso646; //#8189
                    $1.encode(); //#8189
                    $1.mode = "numeric"; //#8190
                    $1.i = $1.i + 1; //#8191
                    break; //#8192
                } //#8192
                if (($get($1.numericruns, $1.i) >= 4) && ($get($1.nextiso646only, $1.i) >= 10)) { //#8198
                    $k[$j++] = $1.lnumeric; //#8195
                    $k[$j++] = $1.iso646; //#8195
                    $1.encode(); //#8195
                    $1.mode = "numeric"; //#8196
                    break; //#8197
                } //#8197
                if (($get($1.alphanumericruns, $1.i) >= 5) && ($get($1.nextiso646only, $1.i) >= 10)) { //#8203
                    $k[$j++] = $1.lalphanumeric; //#8200
                    $k[$j++] = $1.iso646; //#8200
                    $1.encode(); //#8200
                    $1.mode = "alphanumeric"; //#8201
                    break; //#8202
                } //#8202
                $k[$j++] = $get($1.gpf, $1.i); //#8204
                $k[$j++] = $1.iso646; //#8204
                $1.encode(); //#8204
                $1.i = $1.i + 1; //#8205
                break; //#8206
            } //#8206
        } //#8206
    } //#8206
    $1.gpf = $geti($1.gpfenc, 0, $1.j); //#8211
    var _BY = ((((1 + 12) + $1.method.length) + $1.vlf.length) + $1.cdf.length) + $1.gpf.length; //#8215
    $k[$j++] = _BY; //#8215
    $k[$j++] = _BY; //#8215
    $1.rembits(); //#8215
    var _BZ = $k[--$j]; //#8215
    $1.pad = $a(_BZ); //#8215
    $k[$j++] = _BZ; //#8222
    if ($1.vlf.length != 0) { //#8221
        var _Bc = $k[--$j]; //#8217
        var _Be = ~~($f($k[--$j] + _Bc) / 12); //#8218
        $put($1.vlf, 0, _Be % 2); //#8218
        var _Bg = (_Be <= 14) ? 0 : 1; //#8219
        $put($1.vlf, 1, _Bg); //#8219
    } else { //#8221
        $j -= 2; //#8221
    } //#8221
    if ($1.pad.length > 0) { //#8231
        for (var _Bl = 0, _Bk = $1.pad.length - 1; _Bl <= _Bk; _Bl += 5) { //#8227
            $1.i = _Bl; //#8225
            var _Bm = $1.pad; //#8226
            var _Bn = $1.i; //#8226
            var _Bo = $a([0, 0, 1, 0, 0]); //#8226
            var _Bp = $1.pad; //#8226
            var _Bq = $1.i; //#8226
            var _Br = 5; //#8226
            var _Bs = _Bp.length - _Bq; //#8226
            if ((_Bp.length - _Bq) > 5) { //#8226
                var _ = _Br; //#8226
                _Br = _Bs; //#8226
                _Bs = _; //#8226
            } //#8226
            $puti(_Bm, _Bn, $geti(_Bo, 0, _Bs)); //#8226
        } //#8226
        if ($eq($1.mode, "numeric")) { //#8230
            $k[$j++] = Infinity; //#8229
            $k[$j++] = 0; //#8229
            $k[$j++] = 0; //#8229
            $k[$j++] = 0; //#8229
            $k[$j++] = 0; //#8229
            $aload($1.pad); //#8229
            $1.pad = $geti($a(), 0, $1.pad.length); //#8229
        } //#8229
    } //#8229
    $k[$j++] = Infinity; //#8240
    var _C0 = $1.linkage ? 1 : 0; //#8235
    $k[$j++] = _C0; //#8236
    $forall($1.method, function() { //#8236
        var _C2 = $k[--$j]; //#8236
        $k[$j++] = $f(_C2 - 48); //#8236
    }); //#8236
    $aload($1.vlf); //#8237
    $aload($1.cdf); //#8238
    $aload($1.gpf); //#8239
    $aload($1.pad); //#8240
    $1.binval = $a(); //#8240
    $1.datalen = ~~($1.binval.length / 12); //#8242
    $1.ncr = function() {
        var _C9 = $k[--$j]; //#8245
        var _CA = $k[--$j]; //#8245
        var _CB = $f(_CA - _C9); //#8245
        if (_C9 < $f(_CA - _C9)) { //#8245
            var _ = _CB; //#8245
            _CB = _C9; //#8245
            _C9 = _; //#8245
        } //#8245
        $k[$j++] = _CB; //#8252
        $k[$j++] = 1; //#8252
        $k[$j++] = 1; //#8252
        for (var _CD = _CA, _CC = $f(_C9 + 1); _CD >= _CC; _CD -= 1) { //#8252
            var _CE = $k[--$j]; //#8248
            var _CF = $k[--$j]; //#8249
            var _CG = $k[--$j]; //#8249
            $k[$j++] = _CG; //#8251
            $k[$j++] = _CF; //#8251
            $k[$j++] = _CE * _CD; //#8251
            if ($le(_CF, _CG)) { //#8251
                var _CH = $k[--$j]; //#8250
                var _CI = $k[--$j]; //#8250
                $k[$j++] = $f(_CI + 1); //#8250
                $k[$j++] = ~~(_CH / _CI); //#8250
            } //#8250
        } //#8250
        for (;;) { //#8256
            var _CJ = $k[--$j]; //#8254
            var _CK = $k[--$j]; //#8254
            var _CL = $k[--$j]; //#8254
            $k[$j++] = _CL; //#8254
            $k[$j++] = _CK; //#8254
            $k[$j++] = _CJ; //#8254
            if ($gt(_CK, _CL)) { //#8254
                break; //#8254
            } //#8254
            var _CM = $k[--$j]; //#8255
            var _CN = $k[--$j]; //#8255
            $k[$j++] = $f(_CN + 1); //#8255
            $k[$j++] = ~~(_CM / _CN); //#8255
        } //#8255
        var _CO = $k[--$j]; //#8257
        var _CP = $k[--$j]; //#8257
        $k[$j++] = _CO; //#8257
        $k[$j++] = _CP; //#8257
        $j--; //#8257
        var _CQ = $k[--$j]; //#8257
        var _CR = $k[--$j]; //#8257
        $k[$j++] = _CQ; //#8257
        $k[$j++] = _CR; //#8257
        $j--; //#8257
    }; //#8258
    $1.getRSSwidths = function() {
        $1.oe = $k[--$j]; //#8261
        $1.el = $k[--$j]; //#8262
        $1.mw = $k[--$j]; //#8263
        $1.nm = $k[--$j]; //#8264
        $1.val = $k[--$j]; //#8265
        $1.out = $a($1.el); //#8266
        $1.mask = 0; //#8267
        for (var _Cb = 0, _Ca = $f($1.el - 2); _Cb <= _Ca; _Cb += 1) { //#8294
            $1.bar = _Cb; //#8269
            $1.ew = 1; //#8270
            var _Cd = $1.bar; //#8271
            $1.mask = $1.mask | ((_Cd < 0 ? 1 >>> -_Cd : 1 << _Cd)); //#8271
            for (;;) { //#8290
                $k[$j++] = 'sval'; //#8272
                $k[$j++] = $f($f($1.nm - $1.ew) - 1); //#8272
                $k[$j++] = $f($f($1.el - $1.bar) - 2); //#8272
                $1.ncr(); //#8272
                var _Ci = $k[--$j]; //#8272
                $1[$k[--$j]] = _Ci; //#8272
                if (($1.oe && ($1.mask == 0)) && (($f(($f($f($1.nm - $1.ew) - ($1.el * 2))) + ($1.bar * 2))) >= -2)) { //#8275
                    $k[$j++] = 'sval'; //#8274
                    $k[$j++] = $1.sval; //#8274
                    $k[$j++] = $f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar); //#8274
                    $k[$j++] = $f($f($1.el - $1.bar) - 2); //#8274
                    $1.ncr(); //#8274
                    var _Cx = $k[--$j]; //#8274
                    var _Cy = $k[--$j]; //#8274
                    $1[$k[--$j]] = $f(_Cy - _Cx); //#8274
                } //#8274
                if ($f($1.el - $1.bar) > 2) { //#8284
                    $1.lval = 0; //#8277
                    for (var _D8 = $f(($f(($f($f($1.nm - $1.ew) - $1.el)) + $1.bar)) + 2), _D7 = $f($1.mw + 1); _D8 >= _D7; _D8 -= 1) { //#8281
                        $k[$j++] = $f(($f($f($1.nm - _D8) - $1.ew)) - 1); //#8279
                        $k[$j++] = $f($f($1.el - $1.bar) - 3); //#8279
                        $1.ncr(); //#8279
                        $1.lval = $f($k[--$j] + $1.lval); //#8280
                    } //#8280
                    $1.sval = $f($1.sval - ($1.lval * ($f($f($1.el - $1.bar) - 1)))); //#8282
                } else { //#8284
                    if ($f($1.nm - $1.ew) > $1.mw) { //#8284
                        $1.sval = $f($1.sval - 1); //#8284
                    } //#8284
                } //#8284
                $1.val = $f($1.val - $1.sval); //#8286
                if ($1.val < 0) { //#8287
                    break; //#8287
                } //#8287
                $1.ew = $1.ew + 1; //#8288
                var _DS = $1.bar; //#8289
                $1.mask = $1.mask & (~((_DS < 0 ? 1 >>> -_DS : 1 << _DS))); //#8289
            } //#8289
            $1.val = $f($1.val + $1.sval); //#8291
            $1.nm = $f($1.nm - $1.ew); //#8292
            $put($1.out, $1.bar, $1.ew); //#8293
        } //#8293
        $put($1.out, $f($1.el - 1), $1.nm); //#8295
        $k[$j++] = $1.out; //#8296
    }; //#8297
    $1.tab174 = $a([347, 0, 12, 5, 7, 2, 87, 4, 1387, 348, 10, 7, 5, 4, 52, 20, 2947, 1388, 8, 9, 4, 5, 30, 52, 3987, 2948, 6, 11, 3, 6, 10, 104, 4191, 3988, 4, 13, 1, 8, 1, 204]); //#8305
    $1.dxw = $a($1.datalen); //#8307
    for (var _Dj = 0, _Di = $1.datalen - 1; _Dj <= _Di; _Dj += 1) { //#8348
        $1.x = _Dj; //#8311
        $1.d = $geti($1.binval, $1.x * 12, 12); //#8313
        $k[$j++] = 'd'; //#8314
        $k[$j++] = 0; //#8314
        for (var _Dn = 0; _Dn <= 11; _Dn += 1) { //#8314
            $1.j = _Dn; //#8314
            var _Ds = $k[--$j]; //#8314
            $k[$j++] = $f(_Ds + ((~~Math.pow(2, 11 - $1.j)) * $get($1.d, $1.j))); //#8314
        } //#8314
        var _Dt = $k[--$j]; //#8314
        $1[$k[--$j]] = _Dt; //#8314
        $1.j = 0; //#8316
        for (;;) { //#8326
            if ($le($1.d, $get($1.tab174, $1.j))) { //#8324
                var _E1 = $geti($1.tab174, $1.j + 1, 7); //#8318
                for (var _E2 = 0, _E3 = _E1.length; _E2 < _E3; _E2++) { //#8318
                    $k[$j++] = $get(_E1, _E2); //#8318
                } //#8318
                $1.dte = $k[--$j]; //#8319
                $1.dto = $k[--$j]; //#8319
                $1.dmwe = $k[--$j]; //#8320
                $1.dmwo = $k[--$j]; //#8320
                $1.dele = $k[--$j]; //#8321
                $1.delo = $k[--$j]; //#8321
                $1.dgs = $k[--$j]; //#8322
                break; //#8323
            } //#8323
            $1.j = $1.j + 8; //#8325
        } //#8325
        $k[$j++] = 'dwo'; //#8328
        $k[$j++] = ~~($f($1.d - $1.dgs) / $1.dte); //#8328
        $k[$j++] = $1.delo; //#8328
        $k[$j++] = $1.dmwo; //#8328
        $k[$j++] = 4; //#8328
        $k[$j++] = true; //#8328
        $1.getRSSwidths(); //#8328
        var _EI = $k[--$j]; //#8328
        $1[$k[--$j]] = _EI; //#8328
        $k[$j++] = 'dwe'; //#8329
        $k[$j++] = $f($1.d - $1.dgs) % $1.dte; //#8329
        $k[$j++] = $1.dele; //#8329
        $k[$j++] = $1.dmwe; //#8329
        $k[$j++] = 4; //#8329
        $k[$j++] = false; //#8329
        $1.getRSSwidths(); //#8329
        var _EP = $k[--$j]; //#8329
        $1[$k[--$j]] = _EP; //#8329
        $1.dw = $a(8); //#8331
        if (($1.x % 2) == 0) { //#8342
            for (var _ET = 0; _ET <= 3; _ET += 1) { //#8337
                $1.j = _ET; //#8334
                $put($1.dw, 7 - ($1.j * 2), $get($1.dwo, $1.j)); //#8335
                $put($1.dw, 6 - ($1.j * 2), $get($1.dwe, $1.j)); //#8336
            } //#8336
        } else { //#8342
            for (var _Ee = 0; _Ee <= 3; _Ee += 1) { //#8343
                $1.j = _Ee; //#8340
                $put($1.dw, $1.j * 2, $get($1.dwo, $1.j)); //#8341
                $put($1.dw, ($1.j * 2) + 1, $get($1.dwe, $1.j)); //#8342
            } //#8342
        } //#8342
        $put($1.dxw, $1.x, $1.dw); //#8346
    } //#8346
    $1.finderwidths = $a([1, 8, 4, 1, 1, 1, 1, 4, 8, 1, 3, 6, 4, 1, 1, 1, 1, 4, 6, 3, 3, 4, 6, 1, 1, 1, 1, 6, 4, 3, 3, 2, 8, 1, 1, 1, 1, 8, 2, 3, 2, 6, 5, 1, 1, 1, 1, 5, 6, 2, 2, 2, 9, 1, 1, 1, 1, 9, 2, 2]); //#8357
    $1.finderseq = $a([$a([0, 1]), $a([0, 3, 2]), $a([0, 5, 2, 7]), $a([0, 9, 2, 7, 4]), $a([0, 9, 2, 7, 6, 11]), $a([0, 9, 2, 7, 8, 11, 10]), $a([0, 1, 2, 3, 4, 5, 6, 7]), $a([0, 1, 2, 3, 4, 5, 6, 9, 8]), $a([0, 1, 2, 3, 4, 5, 6, 9, 10, 11]), $a([0, 1, 2, 3, 4, 7, 6, 9, 8, 11, 10])]); //#8370
    $1.seq = $get($1.finderseq, ~~(($1.datalen - 2) / 2)); //#8372
    $1.fxw = $a($1.seq.length); //#8373
    for (var _FB = 0, _FA = $1.seq.length - 1; _FB <= _FA; _FB += 1) { //#8377
        $1.x = _FB; //#8375
        $put($1.fxw, $1.x, $geti($1.finderwidths, $get($1.seq, $1.x) * 5, 5)); //#8376
    } //#8376
    $1.checkweights = $a([-1, -1, -1, -1, -1, -1, -1, -1, 77, 96, 32, 81, 27, 9, 3, 1, 20, 60, 180, 118, 143, 7, 21, 63, 205, 209, 140, 117, 39, 13, 145, 189, 193, 157, 49, 147, 19, 57, 171, 91, 132, 44, 85, 169, 197, 136, 186, 62, 185, 133, 188, 142, 4, 12, 36, 108, 50, 87, 29, 80, 97, 173, 128, 113, 150, 28, 84, 41, 123, 158, 52, 156, 166, 196, 206, 139, 187, 203, 138, 46, 76, 17, 51, 153, 37, 111, 122, 155, 146, 119, 110, 107, 106, 176, 129, 43, 16, 48, 144, 10, 30, 90, 59, 177, 164, 125, 112, 178, 200, 137, 116, 109, 70, 210, 208, 202, 184, 130, 179, 115, 190, 204, 68, 93, 31, 151, 191, 134, 148, 22, 66, 198, 172, 94, 71, 2, 40, 154, 192, 64, 162, 54, 18, 6, 120, 149, 25, 75, 14, 42, 126, 167, 175, 199, 207, 69, 23, 78, 26, 79, 103, 98, 83, 38, 114, 131, 182, 124, 159, 53, 88, 170, 127, 183, 61, 161, 55, 165, 73, 8, 24, 72, 5, 15, 89, 100, 174, 58, 160, 194, 135, 45]); //#8404
    $k[$j++] = Infinity; //#8407
    $forall($1.seq, function() { //#8407
        $aload($geti($1.checkweights, $k[--$j] * 16, 16)); //#8407
    }); //#8407
    var _FO = $a(); //#8407
    $1.checkweightseq = $geti(_FO, 8, _FO.length - 8); //#8408
    $k[$j++] = Infinity; //#8411
    var _FQ = $1.dxw; //#8411
    for (var _FR = 0, _FS = _FQ.length; _FR < _FS; _FR++) { //#8411
        $forall($get(_FQ, _FR)); //#8411
    } //#8411
    $1.widths = $a(); //#8411
    $1.checksum = 0; //#8414
    for (var _FX = 0, _FW = $1.widths.length - 1; _FX <= _FW; _FX += 1) { //#8418
        $1.i = _FX; //#8416
        $1.checksum = $f($1.checksum + ($get($1.widths, $1.i) * $get($1.checkweightseq, $1.i))); //#8417
    } //#8417
    $1.checksum = $f(($1.checksum % 211) + (($1.datalen - 3) * 211)); //#8419
    $1.i = 0; //#8421
    for (;;) { //#8431
        if ($1.checksum <= $get($1.tab174, $1.i)) { //#8429
            var _Fn = $geti($1.tab174, $1.i + 1, 7); //#8423
            for (var _Fo = 0, _Fp = _Fn.length; _Fo < _Fp; _Fo++) { //#8423
                $k[$j++] = $get(_Fn, _Fo); //#8423
            } //#8423
            $1.cte = $k[--$j]; //#8424
            $1.cto = $k[--$j]; //#8424
            $1.cmwe = $k[--$j]; //#8425
            $1.cmwo = $k[--$j]; //#8425
            $1.cele = $k[--$j]; //#8426
            $1.celo = $k[--$j]; //#8426
            $1.cgs = $k[--$j]; //#8427
            break; //#8428
        } //#8428
        $1.i = $1.i + 8; //#8430
    } //#8430
    $k[$j++] = 'cwo'; //#8433
    $k[$j++] = ~~($f($1.checksum - $1.cgs) / $1.cte); //#8433
    $k[$j++] = $1.celo; //#8433
    $k[$j++] = $1.cmwo; //#8433
    $k[$j++] = 4; //#8433
    $k[$j++] = true; //#8433
    $1.getRSSwidths(); //#8433
    var _G4 = $k[--$j]; //#8433
    $1[$k[--$j]] = _G4; //#8433
    $k[$j++] = 'cwe'; //#8434
    $k[$j++] = $f($1.checksum - $1.cgs) % $1.cte; //#8434
    $k[$j++] = $1.cele; //#8434
    $k[$j++] = $1.cmwe; //#8434
    $k[$j++] = 4; //#8434
    $k[$j++] = false; //#8434
    $1.getRSSwidths(); //#8434
    var _GB = $k[--$j]; //#8434
    $1[$k[--$j]] = _GB; //#8434
    $1.cw = $a(8); //#8436
    for (var _GE = 0; _GE <= 3; _GE += 1) { //#8441
        $1.i = _GE; //#8438
        $put($1.cw, $1.i * 2, $get($1.cwo, $1.i)); //#8439
        $put($1.cw, ($1.i * 2) + 1, $get($1.cwe, $1.i)); //#8440
    } //#8440
    var _GP = $a(22); //#8443
    $put(_GP, 0, $1.cw); //#8444
    $puti(_GP, 1, $1.dxw); //#8444
    $1.dxw = $geti(_GP, 0, $1.datalen + 1); //#8445
    $1.datalen = $1.dxw.length; //#8446
    $1.rows = $a(~~Math.ceil($1.datalen / $1.segments)); //#8449
    $1.numrows = $1.rows.length; //#8450
    for (var _Gb = 0, _Ga = $1.numrows - 1; _Gb <= _Ga; _Gb += 1) { //#8465
        $1.r = _Gb; //#8452
        $k[$j++] = Infinity; //#8453
        if ((($1.segments % 4) != 0) && (($1.r % 2) == 1)) { //#8454
            $k[$j++] = 0; //#8454
        } //#8454
        $k[$j++] = 1; //#8462
        $k[$j++] = 1; //#8462
        for (var _Gg = 0, _Gf = $1.segments - 1; _Gg <= _Gf; _Gg += 1) { //#8462
            $1.pos = _Gg + ($1.r * $1.segments); //#8457
            if ($1.pos < $1.datalen) { //#8461
                $forall($get($1.dxw, $1.pos)); //#8459
                if (($1.pos % 2) == 0) { //#8460
                    $forall($get($1.fxw, ~~($1.pos / 2))); //#8460
                } //#8460
            } //#8460
        } //#8460
        var _Gs = $counttomark() + 2; //#8464
        $k[$j++] = 1; //#8464
        $k[$j++] = 1; //#8464
        $astore($a(_Gs)); //#8464
        $put($1.rows, $1.r, $k[--$j]); //#8464
        $j--; //#8464
    } //#8464
    if ($ne($1.format, "expandedstacked")) { //#8593
        var _Gz = $get($1.rows, 0); //#8470
        $1.sbs = $geti(_Gz, 1, _Gz.length - 1); //#8470
        $k[$j++] = Infinity; //#8479
        $k[$j++] = 1; //#8478
        for (var _H3 = 0, _H2 = $1.datalen - 1; _H3 <= _H2; _H3 += 1) { //#8478
            $1.i = _H3; //#8475
            $forall($get($1.dxw, $1.i)); //#8476
            if (($1.i % 2) == 0) { //#8477
                $forall($get($1.fxw, ~~($1.i / 2))); //#8477
            } //#8477
        } //#8477
        $k[$j++] = 1; //#8479
        $k[$j++] = 1; //#8479
        $1.sbs = $a(); //#8479
        delete $1.options["parse"]; //#8482
        $k[$j++] = Infinity; //#8489
        var _HD = $1.sbs; //#8486
        $k[$j++] = Infinity; //#8487
        for (var _HF = 0, _HG = ~~(($1.sbs.length + 1) / 2); _HF < _HG; _HF++) { //#8487
            $k[$j++] = $1.height; //#8487
        } //#8487
        var _HI = $a(); //#8487
        $k[$j++] = Infinity; //#8488
        for (var _HK = 0, _HL = ~~(($1.sbs.length + 1) / 2); _HK < _HL; _HK++) { //#8488
            $k[$j++] = 0; //#8488
        } //#8488
        var _HM = $a(); //#8488
        $k[$j++] = 'ren'; //#8489
        $k[$j++] = bwipp_renlinear; //#8489
        $k[$j++] = 'sbs'; //#8489
        $k[$j++] = _HD; //#8489
        $k[$j++] = 'bhs'; //#8489
        $k[$j++] = _HI; //#8489
        $k[$j++] = 'bbs'; //#8489
        $k[$j++] = _HM; //#8489
        $k[$j++] = 'opt'; //#8489
        $k[$j++] = $1.options; //#8489
        var _HO = $d(); //#8489
        $k[$j++] = _HO; //#8492
        if (!$1.dontdraw) { //#8492
            bwipp_renlinear(); //#8492
        } //#8492
    } else { //#8593
        $1.seps = $a($1.numrows); //#8496
        for (var _HU = 0, _HT = $1.numrows - 1; _HU <= _HT; _HU += 1) { //#8552
            $1.r = _HU; //#8499
            $1.row = $get($1.rows, $1.r); //#8500
            $k[$j++] = Infinity; //#8503
            for (var _Ha = 0, _HZ = $1.row.length - 1; _Ha <= _HZ; _Ha += 2) { //#8508
                $1.i = _Ha; //#8505
                for (var _He = 0, _Hf = $get($1.row, $1.i); _He < _Hf; _He++) { //#8506
                    $k[$j++] = 0; //#8506
                } //#8506
                if ($1.i < ($1.row.length - 1)) { //#8507
                    for (var _Hl = 0, _Hm = $get($1.row, $1.i + 1); _Hl < _Hm; _Hl++) { //#8507
                        $k[$j++] = 1; //#8507
                    } //#8507
                } //#8507
            } //#8507
            $astore($a($counttomark())); //#8509
            $1.row = $k[--$j]; //#8509
            $j--; //#8509
            $k[$j++] = Infinity; //#8512
            $forall($1.row, function() { //#8512
                var _Hr = $k[--$j]; //#8512
                $k[$j++] = $f(1 - _Hr); //#8512
            }); //#8512
            $1.sep = $a(); //#8512
            $k[$j++] = Infinity; //#8515
            for (var _Hv = 19, _Hu = $1.row.length - 13; _Hv <= _Hu; _Hv += 98) { //#8514
                $k[$j++] = _Hv; //#8514
            } //#8514
            for (var _Hy = 68, _Hx = $1.row.length - 13; _Hy <= _Hx; _Hy += 98) { //#8515
                $k[$j++] = _Hy; //#8515
            } //#8515
            $1.finderpos = $a(); //#8515
            var _I0 = $1.finderpos; //#8517
            for (var _I1 = 0, _I2 = _I0.length; _I1 < _I2; _I1++) { //#8531
                var _I3 = $get(_I0, _I1); //#8531
                for (var _I5 = _I3, _I4 = $f(_I3 + 14); _I5 <= _I4; _I5 += 1) { //#8530
                    $1.i = _I5; //#8519
                    if ($get($1.row, $1.i) == 0) { //#8527
                        if ($get($1.row, $1.i - 1) == 1) { //#8524
                            $k[$j++] = 1; //#8522
                        } else { //#8524
                            var _IF = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#8524
                            $k[$j++] = _IF; //#8524
                        } //#8524
                    } else { //#8527
                        $k[$j++] = 0; //#8527
                    } //#8527
                    $put($1.sep, $1.i, $k[--$j]); //#8529
                } //#8529
            } //#8529
            $puti($1.sep, 0, $a([0, 0, 0, 0])); //#8532
            $puti($1.sep, $1.row.length - 4, $a([0, 0, 0, 0])); //#8533
            if ((($1.segments % 4) == 0) && (($1.r % 2) == 1)) { //#8547
                if (($get($1.rows, $1.r).length != $get($1.rows, 0).length) && (($1.finderpos.length % 2) == 1)) { //#8545
                    $k[$j++] = Infinity; //#8539
                    $k[$j++] = 0; //#8539
                    $aload($1.row); //#8539
                    $1.row = $a(); //#8539
                    $k[$j++] = Infinity; //#8540
                    $k[$j++] = 0; //#8540
                    $aload($1.sep); //#8540
                    $1.sep = $a(); //#8540
                } else { //#8545
                    for (var _Ib = $1.row.length - 1; _Ib >= 0; _Ib -= 1) { //#8542
                        $k[$j++] = $get($1.row, _Ib); //#8542
                    } //#8542
                    $astore($1.row); //#8543
                    $j--; //#8543
                    for (var _Ig = $1.sep.length - 1; _Ig >= 0; _Ig -= 1) { //#8544
                        $k[$j++] = $get($1.sep, _Ig); //#8544
                    } //#8544
                    $astore($1.sep); //#8545
                    $j--; //#8545
                } //#8545
            } //#8545
            $put($1.rows, $1.r, $1.row); //#8549
            $put($1.seps, $1.r, $1.sep); //#8550
        } //#8550
        $1.pixx = $get($1.rows, 0).length; //#8555
        $k[$j++] = Infinity; //#8556
        for (var _It = 0, _Iu = $1.pixx; _It < _Iu; _It++) { //#8556
            $k[$j++] = 0; //#8556
        } //#8556
        var _Iv = $a(); //#8556
        $puti(_Iv, 0, $get($1.rows, $1.numrows - 1)); //#8556
        $put($1.rows, $1.numrows - 1, _Iv); //#8557
        $k[$j++] = Infinity; //#8558
        for (var _J2 = 0, _J3 = $1.pixx; _J2 < _J3; _J2++) { //#8558
            $k[$j++] = 0; //#8558
        } //#8558
        var _J4 = $a(); //#8558
        $puti(_J4, 0, $get($1.seps, $1.numrows - 1)); //#8558
        $put($1.seps, $1.numrows - 1, _J4); //#8559
        $k[$j++] = Infinity; //#8562
        for (var _JB = 0, _JC = (~~($1.pixx / 2)) + 1; _JB < _JC; _JB++) { //#8562
            $k[$j++] = 0; //#8562
            $k[$j++] = 1; //#8562
        } //#8562
        $1.sep = $geti($a(), 0, $1.pixx); //#8562
        $puti($1.sep, 0, $a([0, 0, 0, 0])); //#8563
        $puti($1.sep, $1.pixx - 4, $a([0, 0, 0, 0])); //#8564
        $k[$j++] = Infinity; //#8576
        for (var _JN = 0, _JM = $1.numrows - 1; _JN <= _JM; _JN += 1) { //#8578
            $1.r = _JN; //#8569
            if ($1.r != 0) { //#8572
                $aload($get($1.seps, $1.r)); //#8571
            } //#8571
            for (var _JT = 0, _JU = $1.barxmult; _JT < _JU; _JT++) { //#8573
                $aload($get($1.rows, $1.r)); //#8573
            } //#8573
            if ($1.r != ($1.numrows - 1)) { //#8577
                $aload($get($1.seps, $1.r)); //#8575
                $aload($1.sep); //#8576
            } //#8576
        } //#8576
        $1.pixs = $a(); //#8576
        delete $1.options["parse"]; //#8581
        var _Jo = new Map([
            ["ren", bwipp_renmatrix],
            ["pixs", $1.pixs],
            ["pixx", $1.pixx],
            ["pixy", ~~($1.pixs.length / $1.pixx)],
            ["height", (~~($1.pixs.length / $1.pixx)) / 72],
            ["width", $1.pixx / 72],
            ["opt", $1.options]
        ]); //#8590
        $k[$j++] = _Jo; //#8593
        if (!$1.dontdraw) { //#8593
            bwipp_renmatrix(); //#8593
        } //#8593
    } //#8593
}

function bwipp_databarexpandedstacked() {
    var $1 = {}; //#8625
    $1.options = $k[--$j]; //#8627
    $1.barcode = $k[--$j]; //#8628
    $1.dontdraw = false; //#8630
    $forall($1.options, function() { //#8641
        var _3 = $k[--$j]; //#8641
        $1[$k[--$j]] = _3; //#8641
    }); //#8641
    $put($1.options, "dontdraw", true); //#8644
    $put($1.options, "format", "expandedstacked"); //#8645
    $k[$j++] = 'args'; //#8647
    $k[$j++] = $1.barcode; //#8647
    $k[$j++] = $1.options; //#8647
    bwipp_databarexpanded(); //#8647
    var _9 = $k[--$j]; //#8647
    $1[$k[--$j]] = _9; //#8647
    $put($1.args, "opt", $1.options); //#8649
    $k[$j++] = $1.args; //#8652
    if (!$1.dontdraw) { //#8652
        bwipp_renmatrix(); //#8652
    } //#8652
}

function bwipp_gs1northamericancoupon() {
    var $1 = {}; //#8684
    $1.options = $k[--$j]; //#8686
    $1.barcode = $k[--$j]; //#8687
    $1.dontdraw = false; //#8689
    $1.includetext = false; //#8691
    $1.coupontextfont = "OCR-B"; //#8692
    $1.coupontextsize = 9; //#8693
    $1.coupontextxoffset = "unset"; //#8694
    $1.coupontextyoffset = "unset"; //#8695
    $1.parse = false; //#8696
    $1.dontlint = false; //#8697
    $forall($1.options, function() { //#8708
        var _3 = $k[--$j]; //#8708
        $1[$k[--$j]] = _3; //#8708
    }); //#8708
    $1.coupontextfont = "" + $1.coupontextfont; //#8710
    $1.coupontextsize = +$1.coupontextsize; //#8711
    if ($ne($1.coupontextxoffset, "unset")) { //#8712
        $1.coupontextxoffset = +$1.coupontextxoffset; //#8712
    } //#8712
    if ($ne($1.coupontextyoffset, "unset")) { //#8713
        $1.coupontextyoffset = +$1.coupontextyoffset; //#8713
    } //#8713
    $1.expand = function() {
        var _C = new Map([
            ["parse", $1.parse],
            ["parseonly", true],
            ["parsefnc", false]
        ]); //#8720
        $1.fncvals = _C; //#8721
        $k[$j++] = $1.fncvals; //#8722
        bwipp_parseinput(); //#8722
    }; //#8723
    $1.ais = $a([]); //#8726
    $1.vals = $a([]); //#8727
    var _G = $1.barcode; //#8728
    $k[$j++] = $geti(_G, 1, _G.length - 1); //#8741
    for (;;) { //#8741
        var _I = $k[--$j]; //#8730
        $k[$j++] = _I; //#8730
        if ($eq(_I, "")) { //#8730
            break; //#8730
        } //#8730
        $search($k[--$j], ")"); //#8731
        $j--; //#8731
        var _K = $k[--$j]; //#8732
        var _L = $k[--$j]; //#8732
        $k[$j++] = _K; //#8732
        $k[$j++] = _L; //#8732
        $j--; //#8732
        var _M = $k[--$j]; //#8733
        var _N = $k[--$j]; //#8733
        $k[$j++] = _M; //#8733
        $search(_N, "("); //#8733
        if ($k[--$j]) { //#8736
            var _P = $k[--$j]; //#8734
            var _Q = $k[--$j]; //#8734
            $k[$j++] = _P; //#8734
            $k[$j++] = _Q; //#8734
            $j--; //#8734
            var _R = $k[--$j]; //#8734
            var _S = $k[--$j]; //#8734
            var _T = $k[--$j]; //#8734
            $k[$j++] = _S; //#8734
            $k[$j++] = _T; //#8734
            $k[$j++] = _R; //#8734
        } else { //#8736
            var _U = $k[--$j]; //#8736
            var _V = $k[--$j]; //#8736
            $k[$j++] = ""; //#8736
            $k[$j++] = _V; //#8736
            $k[$j++] = _U; //#8736
        } //#8736
        $k[$j++] = Infinity; //#8738
        $aload($1.ais); //#8738
        var _Y = $k[$j - 1 - ($counttomark() + 2)]; //#8738
        $k[$j++] = _Y; //#8738
        $1.ais = $a(); //#8738
        $k[$j++] = Infinity; //#8739
        $aload($1.vals); //#8739
        var _c = $k[$j - 1 - ($counttomark() + 1)]; //#8739
        $k[$j++] = _c; //#8739
        $1.expand(); //#8739
        $1.vals = $a(); //#8739
        $j -= 2; //#8740
    } //#8740
    $j--; //#8742
    if ($1.ais.length != 1) { //#8747
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure'; //#8746
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#8746
        bwipp_raiseerror(); //#8746
    } //#8746
    if ($ne($get($1.ais, 0), "8110")) { //#8750
        $k[$j++] = 'bwipp.gs1northamericancouponBadAIStructure'; //#8749
        $k[$j++] = "A GS1 North American Coupon should consist of a single AI (8110)"; //#8749
        bwipp_raiseerror(); //#8749
    } //#8749
    if (!$1.dontlint) { //#8752
        $k[$j++] = $1.ais; //#8752
        $k[$j++] = $1.vals; //#8752
        bwipp_gs1lint(); //#8752
        $j--; //#8752
    } //#8752
    $1.val = $get($1.vals, 0); //#8755
    $1.vli = $f($get($1.val, 0) - 48); //#8756
    if (($1.vli < 0) || ($1.vli > 6)) { //#8759
        $k[$j++] = 'bwipp.gs1northamericancouponBadVLI'; //#8758
        $k[$j++] = "The AI (8110) data should start with a Company Prefix length indicator in the range 0 to 6"; //#8758
        bwipp_raiseerror(); //#8758
    } //#8758
    $1.gcp = $geti($1.val, 1, $f($1.vli + 6)); //#8760
    $1.cod = $geti($1.val, $f($1.vli + 7), 6); //#8761
    $1.coupontext = $s($1.gcp.length + 7); //#8762
    $puti($1.coupontext, 0, $1.gcp); //#8763
    $puti($1.coupontext, $1.gcp.length, "-"); //#8764
    $puti($1.coupontext, $1.gcp.length + 1, $1.cod); //#8765
    delete $1.options["parse"]; //#8768
    $put($1.options, "dontdraw", true); //#8769
    $k[$j++] = 'args'; //#8771
    $k[$j++] = $1.barcode; //#8771
    $k[$j++] = $1.options; //#8771
    bwipp_databarexpandedstacked(); //#8771
    var _19 = $k[--$j]; //#8771
    $1[$k[--$j]] = _19; //#8771
    if ($1.includetext) { //#8790
        if ($1.coupontextxoffset == "unset") { //#8777
            $1.coupontextxoffset = 0; //#8776
        } //#8776
        if ($1.coupontextyoffset == "unset") { //#8780
            $1.coupontextyoffset = $f(($get($1.args, "height") * 72) + 3); //#8779
        } //#8779
        var _1H = $get($1.args, "txt") !== undefined; //#8781
        if (_1H) { //#8788
            $1.txt = $get($1.args, "txt"); //#8782
            $1.newtxt = $a($1.txt.length + 1); //#8783
            $puti($1.newtxt, 0, $1.txt); //#8784
            $put($1.newtxt, $1.newtxt.length - 1, $a([$1.coupontext, $1.coupontextxoffset, $1.coupontextyoffset, $1.coupontextfont, $1.coupontextsize])); //#8785
            $put($1.args, "txt", $1.newtxt); //#8786
        } else { //#8788
            $put($1.args, "txt", $a([$a([$1.coupontext, $1.coupontextxoffset, $1.coupontextyoffset, $1.coupontextfont, $1.coupontextsize])])); //#8788
        } //#8788
    } //#8788
    $put($1.args, "opt", $1.options); //#8792
    $k[$j++] = $1.args; //#8795
    if (!$1.dontdraw) { //#8795
        bwipp_renmatrix(); //#8795
    } //#8795
}

function bwipp_pharmacode() {
    var $1 = {}; //#8824
    $1.options = $k[--$j]; //#8826
    $1.barcode = $k[--$j]; //#8827
    $1.dontdraw = false; //#8829
    $1.height = (8 * 2.835) / 72; //#8830
    $1.nwidth = 0.5 * 2.835; //#8831
    $1.wwidth = 1.5 * 2.835; //#8832
    $1.swidth = 1 * 2.835; //#8833
    $forall($1.options, function() { //#8844
        var _3 = $k[--$j]; //#8844
        $1[$k[--$j]] = _3; //#8844
    }); //#8844
    $1.height = +$1.height; //#8846
    $1.nwidth = +$1.nwidth; //#8847
    $1.wwidth = +$1.wwidth; //#8848
    $1.swidth = +$1.swidth; //#8849
    if (($1.barcode.length < 1) || ($1.barcode.length > 6)) { //#8854
        $k[$j++] = 'bwipp.pharmacodeBadLength'; //#8853
        $k[$j++] = "Pharmacode must be 1 to 6 digits"; //#8853
        bwipp_raiseerror(); //#8853
    } //#8853
    $forall($1.barcode, function() { //#8859
        var _C = $k[--$j]; //#8856
        if ((_C < 48) || (_C > 57)) { //#8858
            $k[$j++] = 'bwipp.pharmacodeBadCharacter'; //#8857
            $k[$j++] = "Pharmacode must contain only digits"; //#8857
            bwipp_raiseerror(); //#8857
        } //#8857
    }); //#8857
    var _E = $cvi($1.barcode); //#8860
    if ((_E < 3) || (_E > 131070)) { //#8862
        $k[$j++] = 'bwipp.pharmacodeBadValue'; //#8861
        $k[$j++] = "Pharmacode value must be between 3 and 131070"; //#8861
        bwipp_raiseerror(); //#8861
    } //#8861
    $1.txt = $a($1.barcode.length); //#8865
    for (var _J = 0, _I = $1.barcode.length - 1; _J <= _I; _J += 1) { //#8869
        $1.i = _J; //#8867
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#8868
    } //#8868
    $1.barcode = $cvrs($s(17), $cvi($1.barcode) + 1, 2); //#8872
    $1.barcode = $geti($1.barcode, 1, $1.barcode.length - 1); //#8873
    $1.barlen = $1.barcode.length; //#8875
    $1.sbs = $a($1.barlen * 2); //#8876
    for (var _b = 0, _a = $1.barlen - 1; _b <= _a; _b += 1) { //#8887
        $1.i = _b; //#8879
        $1.enc = $geti($1.barcode, $1.i, 1); //#8880
        if ($eq($1.enc, "0")) { //#8884
            $put($1.sbs, $1.i * 2, $1.nwidth); //#8882
        } else { //#8884
            $put($1.sbs, $1.i * 2, $1.wwidth); //#8884
        } //#8884
        $put($1.sbs, ($1.i * 2) + 1, $1.swidth); //#8886
    } //#8886
    $k[$j++] = Infinity; //#8897
    var _p = $1.sbs; //#8892
    $k[$j++] = Infinity; //#8893
    for (var _r = 0, _s = ~~(($1.sbs.length + 1) / 2); _r < _s; _r++) { //#8893
        $k[$j++] = $1.height; //#8893
    } //#8893
    var _u = $a(); //#8893
    $k[$j++] = Infinity; //#8894
    for (var _w = 0, _x = ~~(($1.sbs.length + 1) / 2); _w < _x; _w++) { //#8894
        $k[$j++] = 0; //#8894
    } //#8894
    var _y = $a(); //#8894
    $k[$j++] = 'ren'; //#8897
    $k[$j++] = bwipp_renlinear; //#8897
    $k[$j++] = 'sbs'; //#8897
    $k[$j++] = _p; //#8897
    $k[$j++] = 'bhs'; //#8897
    $k[$j++] = _u; //#8897
    $k[$j++] = 'bbs'; //#8897
    $k[$j++] = _y; //#8897
    $k[$j++] = 'txt'; //#8897
    $k[$j++] = $1.txt; //#8897
    $k[$j++] = 'textxalign'; //#8897
    $k[$j++] = "center"; //#8897
    $k[$j++] = 'opt'; //#8897
    $k[$j++] = $1.options; //#8897
    var _11 = $d(); //#8897
    $k[$j++] = _11; //#8900
    if (!$1.dontdraw) { //#8900
        bwipp_renlinear(); //#8900
    } //#8900
}

function bwipp_pharmacode2() {
    var $1 = {}; //#8929
    $1.options = $k[--$j]; //#8931
    $1.barcode = $k[--$j]; //#8932
    $1.dontdraw = false; //#8934
    $1.includetext = false; //#8935
    $1.height = 4; //#8936
    $forall($1.options, function() { //#8947
        var _3 = $k[--$j]; //#8947
        $1[$k[--$j]] = _3; //#8947
    }); //#8947
    $1.height = +$1.height; //#8949
    if (($1.barcode.length < 1) || ($1.barcode.length > 8)) { //#8954
        $k[$j++] = 'bwipp.pharmacode2BadLength'; //#8953
        $k[$j++] = "Two-track Pharmacode must be 1 to 6 digits"; //#8953
        bwipp_raiseerror(); //#8953
    } //#8953
    $forall($1.barcode, function() { //#8959
        var _9 = $k[--$j]; //#8956
        if ((_9 < 48) || (_9 > 57)) { //#8958
            $k[$j++] = 'bwipp.pharmacode2badCharacter'; //#8957
            $k[$j++] = "Two-track Pharmacode must contain only digits"; //#8957
            bwipp_raiseerror(); //#8957
        } //#8957
    }); //#8957
    var _B = $cvi($1.barcode); //#8960
    if ((_B < 4) || (_B > 64570080)) { //#8962
        $k[$j++] = 'bwipp.pharmacode2badValue'; //#8961
        $k[$j++] = "Two-track Pharmacode value must be between 4 and 64570080"; //#8961
        bwipp_raiseerror(); //#8961
    } //#8961
    $1.txt = $a($1.barcode.length); //#8965
    for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) { //#8969
        $1.i = _G; //#8967
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#8968
    } //#8968
    $1.encstr = $s(16); //#8971
    $1.sbs = $a(32); //#8972
    $1.bar = (1 / 25.4) * $1.height; //#8973
    $1.spc = (1 / 25.4) * 72; //#8974
    $1.i = 15; //#8977
    $1.val = $cvi($1.barcode); //#8978
    for (;;) { //#8985
        if ($1.val == 0) { //#8980
            break; //#8980
        } //#8980
        var _T = $1.val % 3; //#8981
        $1.val = ~~($f($1.val - $get($a([3, 1, 2]), _T)) / 3); //#8982
        $put($1.encstr, $1.i, $get($a([2, 0, 1]), _T)); //#8983
        $1.i = $1.i - 1; //#8984
    } //#8984
    $1.encstr = $geti($1.encstr, $1.i + 1, 15 - $1.i); //#8986
    $1.bhs = $a($1.encstr.length); //#8989
    $1.bbs = $a($1.encstr.length); //#8990
    for (var _m = 0, _l = $1.encstr.length - 1; _m <= _l; _m += 1) { //#8996
        $1.i = _m; //#8992
        var _p = $get($1.encstr, $1.i); //#8993
        $put($1.bhs, $1.i, $1.bar * $get($a([1, 1, 2]), _p)); //#8994
        $put($1.bbs, $1.i, $get($a([0, $1.bar, 0]), _p)); //#8995
    } //#8995
    $k[$j++] = Infinity; //#9007
    var _10 = $1.bhs; //#9001
    var _11 = $1.bbs; //#9002
    $k[$j++] = Infinity; //#9003
    for (var _13 = 0, _14 = $1.encstr.length * 2; _13 < _14; _13++) { //#9003
        $k[$j++] = $1.spc; //#9003
    } //#9003
    var _16 = $a(); //#9003
    $k[$j++] = 'ren'; //#9007
    $k[$j++] = bwipp_renlinear; //#9007
    $k[$j++] = 'bhs'; //#9007
    $k[$j++] = _10; //#9007
    $k[$j++] = 'bbs'; //#9007
    $k[$j++] = _11; //#9007
    $k[$j++] = 'sbs'; //#9007
    $k[$j++] = _16; //#9007
    $k[$j++] = 'txt'; //#9007
    $k[$j++] = $1.txt; //#9007
    $k[$j++] = 'textxalign'; //#9007
    $k[$j++] = "center"; //#9007
    $k[$j++] = 'textyoffset'; //#9007
    $k[$j++] = 4; //#9007
    $k[$j++] = 'opt'; //#9007
    $k[$j++] = $1.options; //#9007
    var _19 = $d(); //#9007
    $k[$j++] = _19; //#9010
    if (!$1.dontdraw) { //#9010
        bwipp_renlinear(); //#9010
    } //#9010
}

function bwipp_code2of5() {
    var $1 = {}; //#9039
    $1.options = $k[--$j]; //#9041
    $1.barcode = $k[--$j]; //#9042
    $1.dontdraw = false; //#9044
    $1.includecheck = false; //#9045
    $1.validatecheck = false; //#9046
    $1.includetext = false; //#9047
    $1.includecheckintext = false; //#9048
    $1.textfont = "OCR-B"; //#9049
    $1.textsize = 10; //#9050
    $1.textyoffset = -8; //#9051
    $1.height = 1; //#9052
    $1.version = "industrial"; //#9053
    $forall($1.options, function() { //#9064
        var _3 = $k[--$j]; //#9064
        $1[$k[--$j]] = _3; //#9064
    }); //#9064
    $1.textfont = "" + $1.textfont; //#9066
    $1.textsize = +$1.textsize; //#9067
    $1.textyoffset = +$1.textyoffset; //#9068
    $1.height = +$1.height; //#9069
    $forall($1.barcode, function() { //#9076
        var _A = $k[--$j]; //#9073
        if ((_A < 48) || (_A > 57)) { //#9075
            $k[$j++] = 'bwipp.code2of5badCharacter'; //#9074
            $k[$j++] = "Code 25 must contain only digits"; //#9074
            bwipp_raiseerror(); //#9074
        } //#9074
    }); //#9074
    $k[$j++] = 'barlen'; //#9078
    $k[$j++] = $1.barcode.length; //#9078
    if ($1.validatecheck) { //#9078
        var _D = $k[--$j]; //#9078
        $k[$j++] = $f(_D - 1); //#9078
    } //#9078
    var _E = $k[--$j]; //#9078
    $1[$k[--$j]] = _E; //#9078
    $1.checksum = 0; //#9080
    for (var _I = 0, _H = $f($1.barlen - 1); _I <= _H; _I += 1) { //#9084
        $1.i = _I; //#9082
        $k[$j++] = 'checksum'; //#9083
        $k[$j++] = $1.checksum; //#9083
        $k[$j++] = $f($get($1.barcode, $1.i) - 48); //#9083
        if (($f($1.barlen - $1.i) % 2) != 0) { //#9083
            var _P = $k[--$j]; //#9083
            $k[$j++] = _P * 3; //#9083
        } //#9083
        var _Q = $k[--$j]; //#9083
        var _R = $k[--$j]; //#9083
        $1[$k[--$j]] = $f(_R + _Q); //#9083
    } //#9083
    $1.checksum = (10 - ($1.checksum % 10)) % 10; //#9085
    if ($1.validatecheck) { //#9092
        if ($get($1.barcode, $1.barlen) != ($1.checksum + 48)) { //#9089
            $k[$j++] = 'bwipp.code2of5badCheckDigit'; //#9088
            $k[$j++] = "Incorrect Code 25 check digit provided"; //#9088
            bwipp_raiseerror(); //#9088
        } //#9088
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#9090
        $1.includecheck = true; //#9091
    } //#9091
    var _h = new Map([
        ["industrial", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "313111", "31113"])],
        ["iata", $a(["1111313111", "3111111131", "1131111131", "3131111111", "1111311131", "3111311111", "1131311111", "1111113131", "3111113111", "1131113111", "1111", "311"])],
        ["matrix", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "311111", "31111"])],
        ["coop", $a(["331111", "111331", "113131", "113311", "131131", "131311", "133111", "311131", "311311", "313111", "3131", "133"])],
        ["datalogic", $a(["113311", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "131311", "1111", "311"])]
    ]); //#9116
    $1.versions = _h; //#9118
    var _k = $get($1.versions, $1.version) !== undefined; //#9119
    if (!_k) { //#9121
        $k[$j++] = 'bwipp.code2of5badVersion'; //#9120
        $k[$j++] = "Unrecognised Code 25 version"; //#9120
        bwipp_raiseerror(); //#9120
    } //#9120
    $1.encs = $get($1.versions, $1.version); //#9122
    $1.cs = $get($1.encs, 0).length; //#9124
    $k[$j++] = 'cw'; //#9125
    $k[$j++] = 0; //#9125
    $forall($get($1.encs, 0), function() { //#9125
        var _s = $k[--$j]; //#9125
        var _t = $k[--$j]; //#9125
        $k[$j++] = $f(_t + $f(_s - 48)); //#9125
    }); //#9125
    var _u = $k[--$j]; //#9125
    $1[$k[--$j]] = _u; //#9125
    $1.ss = $get($1.encs, 10).length; //#9126
    $k[$j++] = 'sw'; //#9127
    $k[$j++] = 0; //#9127
    $forall($get($1.encs, 10), function() { //#9127
        var _10 = $k[--$j]; //#9127
        var _11 = $k[--$j]; //#9127
        $k[$j++] = $f(_11 + $f(_10 - 48)); //#9127
    }); //#9127
    var _12 = $k[--$j]; //#9127
    $1[$k[--$j]] = _12; //#9127
    $1.es = $get($1.encs, 11).length; //#9128
    $1.barchars = "0123456789"; //#9131
    $k[$j++] = 'sbs'; //#9133
    $k[$j++] = $1.barlen; //#9133
    if ($1.includecheck) { //#9133
        var _18 = $k[--$j]; //#9133
        $k[$j++] = $f(_18 + 1); //#9133
    } //#9133
    var _1D = $s($f(($f(($k[--$j] * $1.cs) + $1.ss)) + $1.es)); //#9133
    $1[$k[--$j]] = _1D; //#9133
    $k[$j++] = 'txt'; //#9134
    $k[$j++] = $1.barlen; //#9134
    if ($1.includecheck) { //#9134
        var _1H = $k[--$j]; //#9134
        $k[$j++] = $f(_1H + 1); //#9134
    } //#9134
    var _1J = $a($k[--$j]); //#9134
    $1[$k[--$j]] = _1J; //#9134
    $puti($1.sbs, 0, $get($1.encs, 10)); //#9137
    for (var _1Q = 0, _1P = $f($1.barlen - 1); _1Q <= _1P; _1Q += 1) { //#9148
        $1.i = _1Q; //#9139
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#9141
        $j--; //#9142
        $1.indx = $k[--$j].length; //#9143
        $j -= 2; //#9144
        $1.enc = $get($1.encs, $1.indx); //#9145
        $puti($1.sbs, ($1.i * $1.cs) + $1.ss, $1.enc); //#9146
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $f(($1.i * $1.cw) + $1.sw), $1.textyoffset, $1.textfont, $1.textsize])); //#9147
    } //#9147
    if ($1.includecheck) { //#9160
        $puti($1.sbs, $f(($1.barlen * $1.cs) + $1.ss), $get($1.encs, $1.checksum)); //#9152
        $puti($1.sbs, $f(($f(($1.barlen * $1.cs) + $1.cs)) + $1.ss), $get($1.encs, 11)); //#9153
        if ($1.includecheckintext) { //#9157
            $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), $f(($1.barlen * $1.cw) + $1.sw), $1.textyoffset, $1.textfont, $1.textsize])); //#9155
        } else { //#9157
            $put($1.txt, $1.barlen, $a([" ", $f(($1.barlen * $1.cw) + $1.sw), $1.textyoffset, $1.textfont, $1.textsize])); //#9157
        } //#9157
    } else { //#9160
        $puti($1.sbs, $f(($1.barlen * $1.cs) + $1.ss), $get($1.encs, 11)); //#9160
    } //#9160
    $k[$j++] = Infinity; //#9172
    $k[$j++] = Infinity; //#9166
    $forall($1.sbs, function() { //#9166
        var _2Y = $k[--$j]; //#9166
        $k[$j++] = $f(_2Y - 48); //#9166
    }); //#9166
    var _2Z = $a(); //#9166
    $k[$j++] = Infinity; //#9167
    for (var _2b = 0, _2c = ~~(($1.sbs.length + 1) / 2); _2b < _2c; _2b++) { //#9167
        $k[$j++] = $1.height; //#9167
    } //#9167
    var _2e = $a(); //#9167
    $k[$j++] = Infinity; //#9168
    for (var _2g = 0, _2h = ~~(($1.sbs.length + 1) / 2); _2g < _2h; _2g++) { //#9168
        $k[$j++] = 0; //#9168
    } //#9168
    var _2i = $a(); //#9168
    $k[$j++] = 'ren'; //#9171
    $k[$j++] = bwipp_renlinear; //#9171
    $k[$j++] = 'sbs'; //#9171
    $k[$j++] = _2Z; //#9171
    $k[$j++] = 'bhs'; //#9171
    $k[$j++] = _2e; //#9171
    $k[$j++] = 'bbs'; //#9171
    $k[$j++] = _2i; //#9171
    if ($1.includetext) { //#9171
        $k[$j++] = 'txt'; //#9170
        $k[$j++] = $1.txt; //#9170
    } //#9170
    $k[$j++] = 'opt'; //#9172
    $k[$j++] = $1.options; //#9172
    var _2m = $d(); //#9172
    $k[$j++] = _2m; //#9175
    if (!$1.dontdraw) { //#9175
        bwipp_renlinear(); //#9175
    } //#9175
}

function bwipp_industrial2of5() {
    var $1 = {}; //#9205
    $1.options = $k[--$j]; //#9207
    $1.barcode = $k[--$j]; //#9208
    $1.dontdraw = false; //#9210
    $1.includetext = false; //#9211
    $1.textfont = "OCR-B"; //#9212
    $1.textsize = 10; //#9213
    $1.textxoffset = 0; //#9214
    $1.textyoffset = -8; //#9215
    $1.height = 1; //#9216
    $forall($1.options, function() { //#9227
        var _3 = $k[--$j]; //#9227
        $1[$k[--$j]] = _3; //#9227
    }); //#9227
    $1.textfont = "" + $1.textfont; //#9229
    $1.textsize = +$1.textsize; //#9230
    $1.textxoffset = +$1.textxoffset; //#9231
    $1.textyoffset = +$1.textyoffset; //#9232
    $1.height = +$1.height; //#9233
    $put($1.options, "dontdraw", true); //#9236
    $put($1.options, "version", "industrial"); //#9237
    $k[$j++] = 'args'; //#9239
    $k[$j++] = $1.barcode; //#9239
    $k[$j++] = $1.options; //#9239
    bwipp_code2of5(); //#9239
    var _E = $k[--$j]; //#9239
    $1[$k[--$j]] = _E; //#9239
    $put($1.args, "opt", $1.options); //#9241
    $k[$j++] = $1.args; //#9244
    if (!$1.dontdraw) { //#9244
        bwipp_renlinear(); //#9244
    } //#9244
}

function bwipp_iata2of5() {
    var $1 = {}; //#9274
    $1.options = $k[--$j]; //#9276
    $1.barcode = $k[--$j]; //#9277
    $1.dontdraw = false; //#9279
    $1.includetext = false; //#9280
    $1.textfont = "OCR-B"; //#9281
    $1.textsize = 10; //#9282
    $1.textxoffset = 0; //#9283
    $1.textyoffset = -8; //#9284
    $1.height = 1; //#9285
    $forall($1.options, function() { //#9296
        var _3 = $k[--$j]; //#9296
        $1[$k[--$j]] = _3; //#9296
    }); //#9296
    $1.textfont = "" + $1.textfont; //#9298
    $1.textsize = +$1.textsize; //#9299
    $1.textxoffset = +$1.textxoffset; //#9300
    $1.textyoffset = +$1.textyoffset; //#9301
    $1.height = +$1.height; //#9302
    $put($1.options, "dontdraw", true); //#9305
    $put($1.options, "version", "iata"); //#9306
    $k[$j++] = 'args'; //#9308
    $k[$j++] = $1.barcode; //#9308
    $k[$j++] = $1.options; //#9308
    bwipp_code2of5(); //#9308
    var _E = $k[--$j]; //#9308
    $1[$k[--$j]] = _E; //#9308
    $put($1.args, "opt", $1.options); //#9310
    $k[$j++] = $1.args; //#9313
    if (!$1.dontdraw) { //#9313
        bwipp_renlinear(); //#9313
    } //#9313
}

function bwipp_matrix2of5() {
    var $1 = {}; //#9343
    $1.options = $k[--$j]; //#9345
    $1.barcode = $k[--$j]; //#9346
    $1.dontdraw = false; //#9348
    $1.includetext = false; //#9349
    $1.textfont = "OCR-B"; //#9350
    $1.textsize = 10; //#9351
    $1.textxoffset = 0; //#9352
    $1.textyoffset = -8; //#9353
    $1.height = 1; //#9354
    $forall($1.options, function() { //#9365
        var _3 = $k[--$j]; //#9365
        $1[$k[--$j]] = _3; //#9365
    }); //#9365
    $1.textfont = "" + $1.textfont; //#9367
    $1.textsize = +$1.textsize; //#9368
    $1.textxoffset = +$1.textxoffset; //#9369
    $1.textyoffset = +$1.textyoffset; //#9370
    $1.height = +$1.height; //#9371
    $put($1.options, "dontdraw", true); //#9374
    $put($1.options, "version", "matrix"); //#9375
    $k[$j++] = 'args'; //#9377
    $k[$j++] = $1.barcode; //#9377
    $k[$j++] = $1.options; //#9377
    bwipp_code2of5(); //#9377
    var _E = $k[--$j]; //#9377
    $1[$k[--$j]] = _E; //#9377
    $put($1.args, "opt", $1.options); //#9379
    $k[$j++] = $1.args; //#9382
    if (!$1.dontdraw) { //#9382
        bwipp_renlinear(); //#9382
    } //#9382
}

function bwipp_coop2of5() {
    var $1 = {}; //#9412
    $1.options = $k[--$j]; //#9414
    $1.barcode = $k[--$j]; //#9415
    $1.dontdraw = false; //#9417
    $1.includetext = false; //#9418
    $1.textfont = "OCR-B"; //#9419
    $1.textsize = 10; //#9420
    $1.textxoffset = 0; //#9421
    $1.textyoffset = -8; //#9422
    $1.height = 1; //#9423
    $forall($1.options, function() { //#9434
        var _3 = $k[--$j]; //#9434
        $1[$k[--$j]] = _3; //#9434
    }); //#9434
    $1.textfont = "" + $1.textfont; //#9436
    $1.textsize = +$1.textsize; //#9437
    $1.textxoffset = +$1.textxoffset; //#9438
    $1.textyoffset = +$1.textyoffset; //#9439
    $1.height = +$1.height; //#9440
    $put($1.options, "dontdraw", true); //#9443
    $put($1.options, "version", "coop"); //#9444
    $k[$j++] = 'args'; //#9446
    $k[$j++] = $1.barcode; //#9446
    $k[$j++] = $1.options; //#9446
    bwipp_code2of5(); //#9446
    var _E = $k[--$j]; //#9446
    $1[$k[--$j]] = _E; //#9446
    $put($1.args, "opt", $1.options); //#9448
    $k[$j++] = $1.args; //#9451
    if (!$1.dontdraw) { //#9451
        bwipp_renlinear(); //#9451
    } //#9451
}

function bwipp_datalogic2of5() {
    var $1 = {}; //#9481
    $1.options = $k[--$j]; //#9483
    $1.barcode = $k[--$j]; //#9484
    $1.dontdraw = false; //#9486
    $1.includetext = false; //#9487
    $1.textfont = "OCR-B"; //#9488
    $1.textsize = 10; //#9489
    $1.textxoffset = 0; //#9490
    $1.textyoffset = -8; //#9491
    $1.height = 1; //#9492
    $forall($1.options, function() { //#9503
        var _3 = $k[--$j]; //#9503
        $1[$k[--$j]] = _3; //#9503
    }); //#9503
    $1.textfont = "" + $1.textfont; //#9505
    $1.textsize = +$1.textsize; //#9506
    $1.textxoffset = +$1.textxoffset; //#9507
    $1.textyoffset = +$1.textyoffset; //#9508
    $1.height = +$1.height; //#9509
    $put($1.options, "dontdraw", true); //#9512
    $put($1.options, "version", "datalogic"); //#9513
    $k[$j++] = 'args'; //#9515
    $k[$j++] = $1.barcode; //#9515
    $k[$j++] = $1.options; //#9515
    bwipp_code2of5(); //#9515
    var _E = $k[--$j]; //#9515
    $1[$k[--$j]] = _E; //#9515
    $put($1.args, "opt", $1.options); //#9517
    $k[$j++] = $1.args; //#9520
    if (!$1.dontdraw) { //#9520
        bwipp_renlinear(); //#9520
    } //#9520
}

function bwipp_code11() {
    var $1 = {}; //#9549
    $1.options = $k[--$j]; //#9551
    $1.barcode = $k[--$j]; //#9552
    $1.dontdraw = false; //#9554
    $1.includecheck = false; //#9555
    $1.validatecheck = false; //#9556
    $1.includetext = false; //#9557
    $1.includecheckintext = false; //#9558
    $1.textfont = "OCR-B"; //#9559
    $1.textsize = 10; //#9560
    $1.textyoffset = -8; //#9561
    $1.height = 1; //#9562
    $forall($1.options, function() { //#9573
        var _3 = $k[--$j]; //#9573
        $1[$k[--$j]] = _3; //#9573
    }); //#9573
    $1.textfont = "" + $1.textfont; //#9575
    $1.textsize = +$1.textsize; //#9576
    $1.textyoffset = +$1.textyoffset; //#9577
    $1.height = +$1.height; //#9578
    $1.encs = $a(["111131", "311131", "131131", "331111", "113131", "313111", "133111", "111331", "311311", "311111", "113111", "113311"]); //#9585
    $1.barchars = "0123456789-"; //#9588
    $1.charvals = new Map; //#9589
    for (var _A = 0; _A <= 10; _A += 1) { //#9590
        $put($1.charvals, $geti($1.barchars, _A, 1), _A); //#9590
    } //#9590
    for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) { //#9597
        var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; //#9594
        if (!_K) { //#9596
            $k[$j++] = 'bwipp.code11badCharacter'; //#9595
            $k[$j++] = "Code 11 must contain only digits and dashes"; //#9595
            bwipp_raiseerror(); //#9595
        } //#9595
    } //#9595
    $1.barlen = $1.barcode.length; //#9599
    if ($1.validatecheck) { //#9605
        if ($1.barlen == 11) { //#9603
            $k[$j++] = 'bwipp.code11badLength'; //#9602
            $k[$j++] = "Code 11 cannot be 11 characters using check digits"; //#9602
            bwipp_raiseerror(); //#9602
        } //#9602
        var _Q = ($1.barlen <= 10) ? 1 : 2; //#9604
        $1.barlen = $1.barlen - _Q; //#9604
    } //#9604
    $k[$j++] = 'numchecks'; //#9607
    if ($1.includecheck || $1.validatecheck) { //#9607
        var _U = ($1.barlen >= 10) ? 2 : 1; //#9607
        $k[$j++] = _U; //#9607
    } else { //#9607
        $k[$j++] = 0; //#9607
    } //#9607
    var _V = $k[--$j]; //#9607
    $1[$k[--$j]] = _V; //#9607
    $1.checksum1 = 0; //#9608
    $1.checksum2 = 0; //#9608
    for (var _Z = 0, _Y = $1.barlen - 1; _Z <= _Y; _Z += 1) { //#9614
        $1.i = _Z; //#9610
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#9611
        $1.checksum1 = $f($1.checksum1 + ((((($1.barlen - $1.i) - 1) % 10) + 1) * $1.indx)); //#9612
        $1.checksum2 = $f($1.checksum2 + (((($1.barlen - $1.i) % 9) + 1) * $1.indx)); //#9613
    } //#9613
    $1.checksum1 = $1.checksum1 % 11; //#9615
    $1.checksum2 = $f($1.checksum2 + $1.checksum1) % 11; //#9616
    if ($1.validatecheck) { //#9630
        var _r = $1.numchecks; //#9618
        if (_r == 1) { //#9625
            if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) { //#9621
                $k[$j++] = 'bwipp.code11badCheckDigit'; //#9620
                $k[$j++] = "Incorrect Code 11 check digit provided"; //#9620
                bwipp_raiseerror(); //#9620
            } //#9620
        } else { //#9625
            if (($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) || ($get($1.barcode, $1.barlen + 1) != $get($1.barchars, $1.checksum2))) { //#9626
                $k[$j++] = 'bwipp.code11badCheckDigits'; //#9625
                $k[$j++] = "Incorrect Code 11 check digits provided"; //#9625
                bwipp_raiseerror(); //#9625
            } //#9625
        } //#9625
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#9628
        $1.includecheck = true; //#9629
    } //#9629
    $1.sbs = $s($f(($f($1.barlen + $1.numchecks) * 6) + 12)); //#9632
    $1.txt = $a($f($1.barlen + $1.numchecks)); //#9633
    $puti($1.sbs, 0, $get($1.encs, 11)); //#9636
    $1.xpos = 8; //#9638
    for (var _1O = 0, _1N = $1.barlen - 1; _1O <= _1N; _1O += 1) { //#9648
        $1.i = _1O; //#9640
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#9641
        $1.enc = $get($1.encs, $1.indx); //#9642
        $puti($1.sbs, ($1.i * 6) + 6, $1.enc); //#9643
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9644
        for (var _1k = 0; _1k <= 5; _1k += 1) { //#9647
            $1.xpos = $f($f($get($1.enc, _1k) - 48) + $1.xpos); //#9646
        } //#9646
    } //#9646
    if ($1.includecheck) { //#9677
        if ($1.barlen >= 10) { //#9674
            $puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, $1.checksum1)); //#9653
            $puti($1.sbs, ($1.barlen * 6) + 12, $get($1.encs, $1.checksum2)); //#9654
            if ($1.includecheckintext) { //#9664
                $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9656
                $1.enc = $get($1.encs, $1.checksum1); //#9657
                for (var _2E = 0; _2E <= 5; _2E += 1) { //#9660
                    $1.xpos = $f($f($get($1.enc, _2E) - 48) + $1.xpos); //#9659
                } //#9659
                $put($1.txt, $1.barlen + 1, $a([$geti($1.barchars, $1.checksum2, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9661
            } else { //#9664
                $put($1.txt, $1.barlen, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9663
                $put($1.txt, $1.barlen + 1, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9664
            } //#9664
            $puti($1.sbs, ($1.barlen * 6) + 18, $get($1.encs, 11)); //#9666
        } else { //#9674
            $puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, $1.checksum1)); //#9668
            if ($1.includecheckintext) { //#9672
                $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9670
            } else { //#9672
                $put($1.txt, $1.barlen, $a(["", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9672
            } //#9672
            $puti($1.sbs, ($1.barlen * 6) + 12, $get($1.encs, 11)); //#9674
        } //#9674
    } else { //#9677
        $puti($1.sbs, ($1.barlen * 6) + 6, $get($1.encs, 11)); //#9677
    } //#9677
    $k[$j++] = Infinity; //#9689
    $k[$j++] = Infinity; //#9683
    var _3F = $1.sbs; //#9683
    for (var _3G = 0, _3H = _3F.length; _3G < _3H; _3G++) { //#9683
        $k[$j++] = $get(_3F, _3G) - 48; //#9683
    } //#9683
    var _3J = $a(); //#9683
    $k[$j++] = Infinity; //#9684
    for (var _3L = 0, _3M = ~~(($1.sbs.length + 1) / 2); _3L < _3M; _3L++) { //#9684
        $k[$j++] = $1.height; //#9684
    } //#9684
    var _3O = $a(); //#9684
    $k[$j++] = Infinity; //#9685
    for (var _3Q = 0, _3R = ~~(($1.sbs.length + 1) / 2); _3Q < _3R; _3Q++) { //#9685
        $k[$j++] = 0; //#9685
    } //#9685
    var _3S = $a(); //#9685
    $k[$j++] = 'ren'; //#9688
    $k[$j++] = bwipp_renlinear; //#9688
    $k[$j++] = 'sbs'; //#9688
    $k[$j++] = _3J; //#9688
    $k[$j++] = 'bhs'; //#9688
    $k[$j++] = _3O; //#9688
    $k[$j++] = 'bbs'; //#9688
    $k[$j++] = _3S; //#9688
    if ($1.includetext) { //#9688
        $k[$j++] = 'txt'; //#9687
        $k[$j++] = $1.txt; //#9687
    } //#9687
    $k[$j++] = 'opt'; //#9689
    $k[$j++] = $1.options; //#9689
    var _3W = $d(); //#9689
    $k[$j++] = _3W; //#9692
    if (!$1.dontdraw) { //#9692
        bwipp_renlinear(); //#9692
    } //#9692
}

function bwipp_bc412() {
    var $1 = {}; //#9721
    $1.options = $k[--$j]; //#9723
    $1.barcode = $k[--$j]; //#9724
    $1.dontdraw = false; //#9726
    $1.includecheck = false; //#9727
    $1.validatecheck = false; //#9728
    $1.includetext = false; //#9729
    $1.includecheckintext = false; //#9730
    $1.includestartstop = false; //#9731
    $1.semi = false; //#9732
    $1.textfont = "OCR-B"; //#9733
    $1.textsize = 10; //#9734
    $1.textyoffset = -8; //#9735
    $1.height = 1; //#9736
    $forall($1.options, function() { //#9747
        var _3 = $k[--$j]; //#9747
        $1[$k[--$j]] = _3; //#9747
    }); //#9747
    $1.textfont = "" + $1.textfont; //#9749
    $1.textsize = +$1.textsize; //#9750
    $1.textyoffset = +$1.textyoffset; //#9751
    $1.height = +$1.height; //#9752
    if ($1.semi) { //#9757
        $1.includecheck = true; //#9755
        $1.includestartstop = true; //#9756
    } //#9756
    $1.barchars = "0R9GLVHA8EZ4NTS1J2Q6C7DYKBUIX3FWP5M"; //#9760
    $1.charvals = new Map; //#9761
    for (var _A = 0; _A <= 34; _A += 1) { //#9762
        $put($1.charvals, $geti($1.barchars, _A, 1), _A); //#9762
    } //#9762
    for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) { //#9769
        var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; //#9766
        if (!_K) { //#9768
            $k[$j++] = 'bwipp.bc412badCharacter'; //#9767
            $k[$j++] = "BC412 must contain only digits and capital letters except O"; //#9767
            bwipp_raiseerror(); //#9767
        } //#9767
    } //#9767
    $k[$j++] = 'barlen'; //#9771
    $k[$j++] = $1.barcode.length; //#9771
    if ($1.validatecheck) { //#9771
        var _N = $k[--$j]; //#9771
        $k[$j++] = $f(_N - 1); //#9771
    } //#9771
    var _O = $k[--$j]; //#9771
    $1[$k[--$j]] = _O; //#9771
    $1.checksum = 0; //#9773
    for (var _S = 0, _R = $f($1.barlen - 1); _S <= _R; _S += 1) { //#9777
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _S, 1)) + $1.checksum); //#9776
    } //#9776
    $1.checksum = $1.checksum % 35; //#9778
    if ($1.validatecheck) { //#9785
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#9782
            $k[$j++] = 'bwipp.bc412badCheckDigit'; //#9781
            $k[$j++] = "Incorrect BC412 check digit provided"; //#9781
            bwipp_raiseerror(); //#9781
        } //#9781
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#9783
        $1.includecheck = true; //#9784
    } //#9784
    $1.encs = $a(["11111115", "13111212", "11131113", "12111213", "12121311", "13131111", "12111312", "11131212", "11121411", "11151111", "15111111", "11111511", "12131211", "13121112", "13111212", "11111214", "12121113", "11111313", "13111113", "11121213", "11141112", "11121312", "11141211", "14121111", "12121212", "11131311", "13121211", "12111411", "14111211", "11111412", "12111114", "14111112", "12141111", "11121114", "12131112", "12", "111"]); //#9797
    $1.sbs = $s($f(($f($1.barlen + 1) * 8) + 5)); //#9799
    if ($1.includecheck) { //#9803
        $1.txt = $a($f($1.barlen + 1)); //#9801
    } else { //#9803
        $1.txt = $a($1.barlen); //#9803
    } //#9803
    if ($1.includestartstop) { //#9813
        $puti($1.sbs, 0, $get($1.encs, 35)); //#9808
        $1.pos = 2; //#9809
        $1.txtpos = 3; //#9810
    } else { //#9813
        $1.pos = 0; //#9812
        $1.txtpos = 0; //#9813
    } //#9813
    for (var _x = 0, _w = $f($1.barlen - 1); _x <= _w; _x += 1) { //#9822
        $1.i = _x; //#9817
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#9818
        $puti($1.sbs, $1.pos, $get($1.encs, $1.indx)); //#9819
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 12) + $1.txtpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9820
        $1.pos = $1.pos + 8; //#9821
    } //#9821
    if ($1.includecheck) { //#9833
        $puti($1.sbs, $1.pos, $get($1.encs, $1.checksum)); //#9826
        if ($1.includecheckintext) { //#9830
            $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), $f(($1.barlen * 12) + $1.txtpos), $1.textyoffset, $1.textfont, $1.textsize])); //#9828
        } else { //#9830
            $put($1.txt, $1.barlen, $a(["", $f(($1.barlen * 12) + $1.txtpos), $1.textyoffset, $1.textfont, $1.textsize])); //#9830
        } //#9830
        $1.pos = $1.pos + 8; //#9832
    } //#9832
    if ($1.includestartstop) { //#9839
        $puti($1.sbs, $1.pos, $get($1.encs, 36)); //#9837
        $1.pos = $1.pos + 2; //#9838
    } //#9838
    $1.sbs = $geti($1.sbs, 0, $1.pos); //#9842
    $k[$j++] = Infinity; //#9851
    $k[$j++] = Infinity; //#9845
    var _1u = $1.sbs; //#9845
    for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#9845
        $k[$j++] = $f($get(_1u, _1v) - 48); //#9845
    } //#9845
    var _1y = $a(); //#9845
    $k[$j++] = Infinity; //#9846
    for (var _20 = 0, _21 = ~~(($1.sbs.length + 1) / 2); _20 < _21; _20++) { //#9846
        $k[$j++] = $1.height; //#9846
    } //#9846
    var _23 = $a(); //#9846
    $k[$j++] = Infinity; //#9847
    for (var _25 = 0, _26 = ~~(($1.sbs.length + 1) / 2); _25 < _26; _25++) { //#9847
        $k[$j++] = 0; //#9847
    } //#9847
    var _27 = $a(); //#9847
    $k[$j++] = 'ren'; //#9850
    $k[$j++] = bwipp_renlinear; //#9850
    $k[$j++] = 'sbs'; //#9850
    $k[$j++] = _1y; //#9850
    $k[$j++] = 'bhs'; //#9850
    $k[$j++] = _23; //#9850
    $k[$j++] = 'bbs'; //#9850
    $k[$j++] = _27; //#9850
    if ($1.includetext) { //#9850
        $k[$j++] = 'txt'; //#9849
        $k[$j++] = $1.txt; //#9849
    } //#9849
    $k[$j++] = 'opt'; //#9851
    $k[$j++] = $1.options; //#9851
    var _2B = $d(); //#9851
    $k[$j++] = _2B; //#9854
    if (!$1.dontdraw) { //#9854
        bwipp_renlinear(); //#9854
    } //#9854
}

function bwipp_rationalizedCodabar() {
    var $1 = {}; //#9883
    $1.options = $k[--$j]; //#9885
    $1.barcode = $k[--$j]; //#9886
    $1.dontdraw = false; //#9888
    $1.altstartstop = false; //#9889
    $1.includecheck = false; //#9890
    $1.validatecheck = false; //#9891
    $1.includetext = false; //#9892
    $1.includecheckintext = false; //#9893
    $1.textfont = "OCR-B"; //#9894
    $1.textsize = 10; //#9895
    $1.textyoffset = -8; //#9896
    $1.height = 1; //#9897
    $forall($1.options, function() { //#9908
        var _3 = $k[--$j]; //#9908
        $1[$k[--$j]] = _3; //#9908
    }); //#9908
    $1.textfont = "" + $1.textfont; //#9910
    $1.textsize = +$1.textsize; //#9911
    $1.textyoffset = +$1.textyoffset; //#9912
    $1.height = +$1.height; //#9913
    $1.encs = $a(["11111331", "11113311", "11131131", "33111111", "11311311", "31111311", "13111131", "13113111", "13311111", "31131111", "11133111", "11331111", "31113131", "31311131", "31313111", "11313131", "11331311", "13131131", "11131331", "11133311"]); //#9921
    if ($1.altstartstop) { //#9927
        $1.barchars = "0123456789-$:/.+TN*E"; //#9925
    } else { //#9927
        $1.barchars = "0123456789-$:/.+ABCD"; //#9927
    } //#9927
    $1.charvals = new Map; //#9929
    for (var _B = 0; _B <= 19; _B += 1) { //#9930
        $put($1.charvals, $geti($1.barchars, _B, 1), _B); //#9930
    } //#9930
    $1.bodyvals = new Map; //#9931
    for (var _F = 0; _F <= 15; _F += 1) { //#9932
        $put($1.bodyvals, $geti($1.barchars, _F, 1), _F); //#9932
    } //#9932
    $1.ssvals = new Map; //#9933
    for (var _J = 16; _J <= 19; _J += 1) { //#9934
        $put($1.ssvals, $geti($1.barchars, _J, 1), _J); //#9934
    } //#9934
    var _Q = $get($1.ssvals, $geti($1.barcode, 0, 1)) !== undefined; //#9937
    var _V = $get($1.ssvals, $geti($1.barcode, $1.barcode.length - 1, 1)) !== undefined; //#9938
    if ((!_Q) || (!_V)) { //#9944
        if ($1.altstartstop) { //#9942
            $k[$j++] = 'bwipp.rationalizedCodabarBadAltStartStop'; //#9940
            $k[$j++] = "Codabar start and stop characters must be one of E N T or *"; //#9940
            bwipp_raiseerror(); //#9940
        } else { //#9942
            $k[$j++] = 'bwipp.rationalizedCodabarBadStartStop'; //#9942
            $k[$j++] = "Codabar start and stop characters must be one of A B C or D"; //#9942
            bwipp_raiseerror(); //#9942
        } //#9942
    } //#9942
    for (var _Z = 1, _Y = $1.barcode.length - 2; _Z <= _Y; _Z += 1) { //#9949
        var _d = $get($1.bodyvals, $geti($1.barcode, _Z, 1)) !== undefined; //#9946
        if (!_d) { //#9948
            $k[$j++] = 'bwipp.rationalizedCodabarBadCharacter'; //#9947
            $k[$j++] = "Codabar body must contain only digits and symbols - $ : / . +"; //#9947
            bwipp_raiseerror(); //#9947
        } //#9947
    } //#9947
    $k[$j++] = 'barlen'; //#9951
    $k[$j++] = $1.barcode.length; //#9951
    if ($1.validatecheck) { //#9951
        var _g = $k[--$j]; //#9951
        $k[$j++] = $f(_g - 1); //#9951
    } //#9951
    var _h = $k[--$j]; //#9951
    $1[$k[--$j]] = _h; //#9951
    $1.checksum = 0; //#9953
    for (var _l = 0, _k = $f($1.barlen - 2); _l <= _k; _l += 1) { //#9957
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _l, 1)) + $1.checksum); //#9956
    } //#9956
    var _r = $1.barcode; //#9958
    $1.checksum = $f($get($1.charvals, $geti(_r, $1.barcode.length - 1, 1)) + $1.checksum); //#9959
    $1.checksum = ($f(16 - ($1.checksum % 16))) % 16; //#9960
    if ($1.validatecheck) { //#9970
        if ($get($1.barcode, $f($1.barlen - 1)) != $get($1.barchars, $1.checksum)) { //#9964
            $k[$j++] = 'bwipp.rationalizedCodabarBadCheckDigit'; //#9963
            $k[$j++] = "Incorrect Codabar check digit provided"; //#9963
            bwipp_raiseerror(); //#9963
        } //#9963
        var _16 = $s($1.barlen); //#9965
        $puti(_16, 0, $geti($1.barcode, 0, $f($1.barlen - 1))); //#9966
        $puti(_16, $f($1.barlen - 1), $geti($1.barcode, $1.barlen, 1)); //#9967
        $1.barcode = _16; //#9968
        $1.includecheck = true; //#9969
    } //#9969
    $k[$j++] = 'sbs'; //#9972
    $k[$j++] = $1.barlen; //#9972
    if ($1.includecheck) { //#9972
        var _1G = $k[--$j]; //#9972
        $k[$j++] = $f(_1G + 1); //#9972
    } //#9972
    var _1I = $s($k[--$j] * 8); //#9972
    $1[$k[--$j]] = _1I; //#9972
    $k[$j++] = 'txt'; //#9973
    $k[$j++] = $1.barlen; //#9973
    if ($1.includecheck) { //#9973
        var _1M = $k[--$j]; //#9973
        $k[$j++] = $f(_1M + 1); //#9973
    } //#9973
    var _1O = $a($k[--$j]); //#9973
    $1[$k[--$j]] = _1O; //#9973
    $1.xpos = 0; //#9975
    for (var _1S = 0, _1R = $f($1.barlen - 2); _1S <= _1R; _1S += 1) { //#9985
        $1.i = _1S; //#9977
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#9978
        $1.enc = $get($1.encs, $1.indx); //#9979
        $puti($1.sbs, $1.i * 8, $1.enc); //#9980
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9981
        for (var _1o = 0; _1o <= 7; _1o += 1) { //#9984
            $1.xpos = $f($f($get($1.enc, _1o) - 48) + $1.xpos); //#9983
        } //#9983
    } //#9983
    if ($1.includecheck) { //#10009
        $puti($1.sbs, $f(($1.barlen * 8) - 8), $get($1.encs, $1.checksum)); //#9990
        if ($1.includecheckintext) { //#9994
            $put($1.txt, $f($1.barlen - 1), $a([$geti($1.barchars, $1.checksum, 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9992
        } else { //#9994
            $put($1.txt, $f($1.barlen - 1), $a([" ", $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#9994
        } //#9994
        for (var _2G = 0; _2G <= 7; _2G += 1) { //#9998
            $1.xpos = $f($f($get($get($1.encs, $1.checksum), _2G) - 48) + $1.xpos); //#9997
        } //#9997
        $1.indx = $get($1.charvals, $geti($1.barcode, $f($1.barlen - 1), 1)); //#10000
        $1.enc = $get($1.encs, $1.indx); //#10001
        $puti($1.sbs, $1.barlen * 8, $1.enc); //#10002
        $put($1.txt, $1.barlen, $a([$geti($1.barcode, $f($1.barlen - 1), 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10003
    } else { //#10009
        $1.indx = $get($1.charvals, $geti($1.barcode, $f($1.barlen - 1), 1)); //#10006
        $1.enc = $get($1.encs, $1.indx); //#10007
        $puti($1.sbs, $f(($1.barlen * 8) - 8), $1.enc); //#10008
        $put($1.txt, $f($1.barlen - 1), $a([$geti($1.barcode, $f($1.barlen - 1), 1), $1.xpos, $1.textyoffset, $1.textfont, $1.textsize])); //#10009
    } //#10009
    $k[$j++] = Infinity; //#10021
    $k[$j++] = Infinity; //#10015
    $forall($1.sbs, function() { //#10015
        var _33 = $k[--$j]; //#10015
        $k[$j++] = $f(_33 - 48); //#10015
    }); //#10015
    var _34 = $a(); //#10015
    $k[$j++] = Infinity; //#10016
    for (var _36 = 0, _37 = ~~(($1.sbs.length + 1) / 2); _36 < _37; _36++) { //#10016
        $k[$j++] = $1.height; //#10016
    } //#10016
    var _39 = $a(); //#10016
    $k[$j++] = Infinity; //#10017
    for (var _3B = 0, _3C = ~~(($1.sbs.length + 1) / 2); _3B < _3C; _3B++) { //#10017
        $k[$j++] = 0; //#10017
    } //#10017
    var _3D = $a(); //#10017
    $k[$j++] = 'ren'; //#10020
    $k[$j++] = bwipp_renlinear; //#10020
    $k[$j++] = 'sbs'; //#10020
    $k[$j++] = _34; //#10020
    $k[$j++] = 'bhs'; //#10020
    $k[$j++] = _39; //#10020
    $k[$j++] = 'bbs'; //#10020
    $k[$j++] = _3D; //#10020
    if ($1.includetext) { //#10020
        $k[$j++] = 'txt'; //#10019
        $k[$j++] = $1.txt; //#10019
    } //#10019
    $k[$j++] = 'opt'; //#10021
    $k[$j++] = $1.options; //#10021
    var _3H = $d(); //#10021
    $k[$j++] = _3H; //#10024
    if (!$1.dontdraw) { //#10024
        bwipp_renlinear(); //#10024
    } //#10024
}

function bwipp_onecode() {
    var $1 = {}; //#10053
    $1.options = $k[--$j]; //#10055
    $1.barcode = $k[--$j]; //#10056
    $1.dontdraw = false; //#10058
    $1.height = 0.15; //#10059
    $forall($1.options, function() { //#10070
        var _3 = $k[--$j]; //#10070
        $1[$k[--$j]] = _3; //#10070
    }); //#10070
    $1.height = +$1.height; //#10072
    $1.barlen = $1.barcode.length; //#10074
    $k[$j++] = Infinity; //#10083
    var _9 = $eq($geti($1.barcode, 5, 1), "9") ? 14 : 11; //#10080
    $k[$j++] = 2; //#10083
    $k[$j++] = 2; //#10083
    $k[$j++] = 5; //#10083
    $k[$j++] = 5; //#10083
    $k[$j++] = _9; //#10083
    $k[$j++] = _9; //#10083
    $k[$j++] = 20; //#10083
    $k[$j++] = 20; //#10083
    $k[$j++] = 25; //#10083
    $k[$j++] = 25; //#10083
    $k[$j++] = 29; //#10083
    $k[$j++] = 29; //#10083
    $1.txtdict = $d(); //#10084
    $1.txt = $a($1.barlen + 6); //#10085
    $1.spacecnt = 0; //#10086
    for (var _F = 0, _E = $1.barlen - 1; _F <= _E; _F += 1) { //#10094
        $1.i = _F; //#10088
        var _I = $get($1.txtdict, $1.i) !== undefined; //#10089
        if (_I) { //#10092
            $put($1.txt, $1.i + $1.spacecnt, $a([" ", 0, 0, "", 0])); //#10090
            $1.spacecnt = $1.spacecnt + 1; //#10091
        } //#10091
        $put($1.txt, $1.i + $1.spacecnt, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#10093
    } //#10093
    $1.txt = $geti($1.txt, 0, $1.barcode.length + $1.spacecnt); //#10095
    $1.normalize = function() {
        $1.base = $k[--$j]; //#10098
        $1.num = $k[--$j]; //#10099
        for (var _c = $1.num.length - 1; _c >= 1; _c -= 1) { //#10104
            $1.i = _c; //#10101
            var _d = $1.num; //#10102
            var _e = $1.i; //#10102
            $put(_d, _e - 1, $f($get(_d, _e - 1) + (~~($get($1.num, $1.i) / $1.base)))); //#10102
            $put($1.num, $1.i, $get($1.num, $1.i) % $1.base); //#10103
        } //#10103
        for (;;) { //#10110
            if ($lt($get($1.num, 0), $1.base)) { //#10106
                break; //#10106
            } //#10106
            $k[$j++] = Infinity; //#10107
            $k[$j++] = 0; //#10107
            $forall($1.num); //#10107
            $1.num = $a(); //#10107
            $put($1.num, 0, $f($get($1.num, 0) + (~~($get($1.num, 1) / $1.base)))); //#10108
            $put($1.num, 1, $get($1.num, 1) % $1.base); //#10109
        } //#10109
        $k[$j++] = Infinity; //#10112
        $1.i = true; //#10112
        var _15 = $1.num; //#10112
        for (var _16 = 0, _17 = _15.length; _16 < _17; _16++) { //#10112
            var _18 = $get(_15, _16); //#10112
            $k[$j++] = _18; //#10112
            if ((_18 == 0) && $1.i) { //#10112
                $j--; //#10112
            } else { //#10112
                $1.i = false; //#10112
            } //#10112
        } //#10112
        $1.num = $a(); //#10112
        if ($1.num.length == 0) { //#10113
            $1.num = $a([0]); //#10113
        } //#10113
        $k[$j++] = $1.num; //#10114
    }; //#10115
    $1.bigadd = function() {
        var _1E = $k[--$j]; //#10118
        var _1F = $k[--$j]; //#10118
        $1.offset = Math.abs(_1E.length - _1F.length); //#10119
        if (_1E.length < _1F.length) { //#10120
            var _ = _1E; //#10120
            _1E = _1F; //#10120
            _1F = _; //#10120
        } //#10120
        $1.a = _1E; //#10121
        $1.b = _1F; //#10121
        for (var _1I = 0, _1H = $1.b.length - 1; _1I <= _1H; _1I += 1) { //#10124
            var _1J = $1.a; //#10123
            var _1K = $1.offset; //#10123
            $put(_1J, _1I + _1K, $f($get(_1J, _1I + _1K) + $get($1.b, _1I))); //#10123
        } //#10123
        $k[$j++] = $1.a; //#10125
    }; //#10126
    if ($1.barlen == 20) { //#10129
        $k[$j++] = $a([0]); //#10129
    } //#10129
    if ($1.barlen == 25) { //#10130
        $k[$j++] = $a([1]); //#10130
    } //#10130
    if ($1.barlen == 29) { //#10131
        $k[$j++] = $a([1, 0, 0, 0, 0, 1]); //#10131
    } //#10131
    if ($1.barlen == 31) { //#10132
        $k[$j++] = $a([1, 0, 0, 0, 1, 0, 0, 0, 0, 1]); //#10132
    } //#10132
    var _1X = $k[--$j]; //#10133
    $k[$j++] = 'binval'; //#10133
    $k[$j++] = _1X; //#10133
    $k[$j++] = Infinity; //#10133
    var _1a = $geti($1.barcode, 20, $1.barlen - 20); //#10133
    for (var _1b = 0, _1c = _1a.length; _1b < _1c; _1b++) { //#10133
        $k[$j++] = $f($get(_1a, _1b) - 48); //#10133
    } //#10133
    var _1e = $a(); //#10133
    $k[$j++] = _1e; //#10133
    $1.bigadd(); //#10133
    var _1f = $k[--$j]; //#10133
    $1[$k[--$j]] = _1f; //#10133
    $k[$j++] = Infinity; //#10134
    var _1h = $1.binval; //#10134
    for (var _1i = 0, _1j = _1h.length; _1i < _1j; _1i++) { //#10134
        $k[$j++] = $get(_1h, _1i); //#10134
    } //#10134
    $k[$j++] = $f($get($1.barcode, 0) - 48); //#10134
    $1.binval = $a(); //#10134
    $k[$j++] = Infinity; //#10135
    var _1o = $1.binval; //#10135
    for (var _1p = 0, _1q = _1o.length; _1p < _1q; _1p++) { //#10135
        $k[$j++] = $get(_1o, _1p) * 5; //#10135
    } //#10135
    var _1s = $a(); //#10135
    $k[$j++] = 'binval'; //#10135
    $k[$j++] = _1s; //#10135
    $k[$j++] = $a([$f($get($1.barcode, 1) - 48)]); //#10135
    $1.bigadd(); //#10135
    $k[$j++] = 10; //#10135
    $1.normalize(); //#10135
    var _1w = $k[--$j]; //#10135
    $1[$k[--$j]] = _1w; //#10135
    $k[$j++] = Infinity; //#10136
    var _1y = $1.binval; //#10136
    for (var _1z = 0, _20 = _1y.length; _1z < _20; _1z++) { //#10136
        $k[$j++] = $get(_1y, _1z); //#10136
    } //#10136
    var _23 = $geti($1.barcode, 2, 18); //#10136
    for (var _24 = 0, _25 = _23.length; _24 < _25; _24++) { //#10136
        $k[$j++] = $f($get(_23, _24) - 48); //#10136
    } //#10136
    $1.binval = $a(); //#10136
    $1.bytes = $a(13); //#10139
    $k[$j++] = Infinity; //#10140
    var _29 = $1.binval; //#10140
    for (var _2A = 0, _2B = _29.length; _2A < _2B; _2A++) { //#10140
        $k[$j++] = $get(_29, _2A); //#10140
    } //#10140
    $1.bintmp = $a(); //#10140
    for (var _2E = 12; _2E >= 0; _2E -= 1) { //#10150
        $1.i = _2E; //#10142
        for (var _2H = 0, _2G = $1.bintmp.length - 2; _2H <= _2G; _2H += 1) { //#10147
            $1.j = _2H; //#10144
            var _2I = $1.bintmp; //#10145
            var _2J = $1.j; //#10145
            $put(_2I, _2J + 1, $f($get(_2I, _2J + 1) + (($get($1.bintmp, $1.j) % 256) * 10))); //#10145
            $put($1.bintmp, $1.j, ~~($get($1.bintmp, $1.j) / 256)); //#10146
        } //#10146
        $put($1.bytes, $1.i, $get($1.bintmp, $1.bintmp.length - 1) % 256); //#10148
        var _2Y = $1.bintmp; //#10149
        var _2Z = $1.bintmp; //#10149
        $put(_2Y, _2Z.length - 1, ~~($get(_2Y, _2Z.length - 1) / 256)); //#10149
    } //#10149
    $1.fcs = 2047; //#10153
    $1.dat = $get($1.bytes, 0) << 5; //#10154
    for (var _2d = 0, _2e = 6; _2d < _2e; _2d++) { //#10163
        if ((($1.fcs ^ $1.dat) & 1024) != 0) { //#10159
            $1.fcs = ($1.fcs << 1) ^ 3893; //#10157
        } else { //#10159
            $1.fcs = $1.fcs << 1; //#10159
        } //#10159
        $1.fcs = $1.fcs & 2047; //#10161
        $1.dat = $1.dat << 1; //#10162
    } //#10162
    for (var _2l = 1; _2l <= 12; _2l += 1) { //#10175
        $1.dat = $get($1.bytes, _2l) << 3; //#10165
        for (var _2o = 0, _2p = 8; _2o < _2p; _2o++) { //#10174
            if ((($1.fcs ^ $1.dat) & 1024) != 0) { //#10170
                $1.fcs = ($1.fcs << 1) ^ 3893; //#10168
            } else { //#10170
                $1.fcs = $1.fcs << 1; //#10170
            } //#10170
            $1.fcs = $1.fcs & 2047; //#10172
            $1.dat = $1.dat << 1; //#10173
        } //#10173
    } //#10173
    $1.codewords = $a(10); //#10178
    for (var _2x = 9; _2x >= 0; _2x -= 1) { //#10193
        $1.i = _2x; //#10180
        if ($1.i == 9) { //#10184
            $1.b = 636; //#10182
        } else { //#10184
            $1.b = 1365; //#10184
        } //#10184
        for (var _31 = 0, _30 = $1.binval.length - 2; _31 <= _30; _31 += 1) { //#10190
            $1.j = _31; //#10187
            var _32 = $1.binval; //#10188
            var _33 = $1.j; //#10188
            $put(_32, _33 + 1, $f($get(_32, _33 + 1) + (($get($1.binval, $1.j) % $1.b) * 10))); //#10188
            $put($1.binval, $1.j, ~~($get($1.binval, $1.j) / $1.b)); //#10189
        } //#10189
        $put($1.codewords, $1.i, $get($1.binval, $1.binval.length - 1) % $1.b); //#10191
        var _3L = $1.binval; //#10192
        var _3M = $1.binval; //#10192
        $put(_3L, _3M.length - 1, ~~($get(_3L, _3M.length - 1) / $1.b)); //#10192
    } //#10192
    $put($1.codewords, 9, $get($1.codewords, 9) * 2); //#10196
    if (($1.fcs & 1024) != 0) { //#10199
        $put($1.codewords, 0, $f($get($1.codewords, 0) + 659)); //#10198
    } //#10198
    $1.tab513 = $a([31, 7936, 47, 7808, 55, 7552, 59, 7040, 61, 6016, 62, 3968, 79, 7744, 87, 7488, 91, 6976, 93, 5952, 94, 3904, 103, 7360, 107, 6848, 109, 5824, 110, 3776, 115, 6592, 117, 5568, 118, 3520, 121, 5056, 122, 3008, 124, 1984, 143, 7712, 151, 7456, 155, 6944, 157, 5920, 158, 3872, 167, 7328, 171, 6816, 173, 5792, 174, 3744, 179, 6560, 181, 5536, 182, 3488, 185, 5024, 186, 2976, 188, 1952, 199, 7264, 203, 6752, 205, 5728, 206, 3680, 211, 6496, 213, 5472, 214, 3424, 217, 4960, 218, 2912, 220, 1888, 227, 6368, 229, 5344, 230, 3296, 233, 4832, 234, 2784, 236, 1760, 241, 4576, 242, 2528, 244, 1504, 248, 992, 271, 7696, 279, 7440, 283, 6928, 285, 5904, 286, 3856, 295, 7312, 299, 6800, 301, 5776, 302, 3728, 307, 6544, 309, 5520, 310, 3472, 313, 5008, 314, 2960, 316, 1936, 327, 7248, 331, 6736, 333, 5712, 334, 3664, 339, 6480, 341, 5456, 342, 3408, 345, 4944, 346, 2896, 348, 1872, 355, 6352, 357, 5328, 358, 3280, 361, 4816, 362, 2768, 364, 1744, 369, 4560, 370, 2512, 372, 1488, 376, 976, 391, 7216, 395, 6704, 397, 5680, 398, 3632, 403, 6448, 405, 5424, 406, 3376, 409, 4912, 410, 2864, 412, 1840, 419, 6320, 421, 5296, 422, 3248, 425, 4784, 426, 2736, 428, 1712, 433, 4528, 434, 2480, 436, 1456, 440, 944, 451, 6256, 453, 5232, 454, 3184, 457, 4720, 458, 2672, 460, 1648, 465, 4464, 466, 2416, 468, 1392, 472, 880, 481, 4336, 482, 2288, 484, 1264, 488, 752, 527, 7688, 535, 7432, 539, 6920, 541, 5896, 542, 3848, 551, 7304, 555, 6792, 557, 5768, 558, 3720, 563, 6536, 565, 5512, 566, 3464, 569, 5000, 570, 2952, 572, 1928, 583, 7240, 587, 6728, 589, 5704, 590, 3656, 595, 6472, 597, 5448, 598, 3400, 601, 4936, 602, 2888, 604, 1864, 611, 6344, 613, 5320, 614, 3272, 617, 4808, 618, 2760, 620, 1736, 625, 4552, 626, 2504, 628, 1480, 632, 968, 647, 7208, 651, 6696, 653, 5672, 654, 3624, 659, 6440, 661, 5416, 662, 3368, 665, 4904, 666, 2856, 668, 1832, 675, 6312, 677, 5288, 678, 3240, 681, 4776, 682, 2728, 684, 1704, 689, 4520, 690, 2472, 692, 1448, 696, 936, 707, 6248, 709, 5224, 710, 3176, 713, 4712, 714, 2664, 716, 1640, 721, 4456, 722, 2408, 724, 1384, 728, 872, 737, 4328, 738, 2280, 740, 1256, 775, 7192, 779, 6680, 781, 5656, 782, 3608, 787, 6424, 789, 5400, 790, 3352, 793, 4888, 794, 2840, 796, 1816, 803, 6296, 805, 5272, 806, 3224, 809, 4760, 810, 2712, 812, 1688, 817, 4504, 818, 2456, 820, 1432, 824, 920, 835, 6232, 837, 5208, 838, 3160, 841, 4696, 842, 2648, 844, 1624, 849, 4440, 850, 2392, 852, 1368, 865, 4312, 866, 2264, 868, 1240, 899, 6200, 901, 5176, 902, 3128, 905, 4664, 906, 2616, 908, 1592, 913, 4408, 914, 2360, 916, 1336, 929, 4280, 930, 2232, 932, 1208, 961, 4216, 962, 2168, 964, 1144, 1039, 7684, 1047, 7428, 1051, 6916, 1053, 5892, 1054, 3844, 1063, 7300, 1067, 6788, 1069, 5764, 1070, 3716, 1075, 6532, 1077, 5508, 1078, 3460, 1081, 4996, 1082, 2948, 1084, 1924, 1095, 7236, 1099, 6724, 1101, 5700, 1102, 3652, 1107, 6468, 1109, 5444, 1110, 3396, 1113, 4932, 1114, 2884, 1116, 1860, 1123, 6340, 1125, 5316, 1126, 3268, 1129, 4804, 1130, 2756, 1132, 1732, 1137, 4548, 1138, 2500, 1140, 1476, 1159, 7204, 1163, 6692, 1165, 5668, 1166, 3620, 1171, 6436, 1173, 5412, 1174, 3364, 1177, 4900, 1178, 2852, 1180, 1828, 1187, 6308, 1189, 5284, 1190, 3236, 1193, 4772, 1194, 2724, 1196, 1700, 1201, 4516, 1202, 2468, 1204, 1444, 1219, 6244, 1221, 5220, 1222, 3172, 1225, 4708, 1226, 2660, 1228, 1636, 1233, 4452, 1234, 2404, 1236, 1380, 1249, 4324, 1250, 2276, 1287, 7188, 1291, 6676, 1293, 5652, 1294, 3604, 1299, 6420, 1301, 5396, 1302, 3348, 1305, 4884, 1306, 2836, 1308, 1812, 1315, 6292, 1317, 5268, 1318, 3220, 1321, 4756, 1322, 2708, 1324, 1684, 1329, 4500, 1330, 2452, 1332, 1428, 1347, 6228, 1349, 5204, 1350, 3156, 1353, 4692, 1354, 2644, 1356, 1620, 1361, 4436, 1362, 2388, 1377, 4308, 1378, 2260, 1411, 6196, 1413, 5172, 1414, 3124, 1417, 4660, 1418, 2612, 1420, 1588, 1425, 4404, 1426, 2356, 1441, 4276, 1442, 2228, 1473, 4212, 1474, 2164, 1543, 7180, 1547, 6668, 1549, 5644, 1550, 3596, 1555, 6412, 1557, 5388, 1558, 3340, 1561, 4876, 1562, 2828, 1564, 1804, 1571, 6284, 1573, 5260, 1574, 3212, 1577, 4748, 1578, 2700, 1580, 1676, 1585, 4492, 1586, 2444, 1603, 6220, 1605, 5196, 1606, 3148, 1609, 4684, 1610, 2636, 1617, 4428, 1618, 2380, 1633, 4300, 1634, 2252, 1667, 6188, 1669, 5164, 1670, 3116, 1673, 4652, 1674, 2604, 1681, 4396, 1682, 2348, 1697, 4268, 1698, 2220, 1729, 4204, 1730, 2156, 1795, 6172, 1797, 5148, 1798, 3100, 1801, 4636, 1802, 2588, 1809, 4380, 1810, 2332, 1825, 4252, 1826, 2204, 1857, 4188, 1858, 2140, 1921, 4156, 1922, 2108, 2063, 7682, 2071, 7426, 2075, 6914, 2077, 5890, 2078, 3842, 2087, 7298, 2091, 6786, 2093, 5762, 2094, 3714, 2099, 6530, 2101, 5506, 2102, 3458, 2105, 4994, 2106, 2946, 2119, 7234, 2123, 6722, 2125, 5698, 2126, 3650, 2131, 6466, 2133, 5442, 2134, 3394, 2137, 4930, 2138, 2882, 2147, 6338, 2149, 5314, 2150, 3266, 2153, 4802, 2154, 2754, 2161, 4546, 2162, 2498, 2183, 7202, 2187, 6690, 2189, 5666, 2190, 3618, 2195, 6434, 2197, 5410, 2198, 3362, 2201, 4898, 2202, 2850, 2211, 6306, 2213, 5282, 2214, 3234, 2217, 4770, 2218, 2722, 2225, 4514, 2226, 2466, 2243, 6242, 2245, 5218, 2246, 3170, 2249, 4706, 2250, 2658, 2257, 4450, 2258, 2402, 2273, 4322, 2311, 7186, 2315, 6674, 2317, 5650, 2318, 3602, 2323, 6418, 2325, 5394, 2326, 3346, 2329, 4882, 2330, 2834, 2339, 6290, 2341, 5266, 2342, 3218, 2345, 4754, 2346, 2706, 2353, 4498, 2354, 2450, 2371, 6226, 2373, 5202, 2374, 3154, 2377, 4690, 2378, 2642, 2385, 4434, 2401, 4306, 2435, 6194, 2437, 5170, 2438, 3122, 2441, 4658, 2442, 2610, 2449, 4402, 2465, 4274, 2497, 4210, 2567, 7178, 2571, 6666, 2573, 5642, 2574, 3594, 2579, 6410, 2581, 5386, 2582, 3338, 2585, 4874, 2586, 2826, 2595, 6282, 2597, 5258, 2598, 3210, 2601, 4746, 2602, 2698, 2609, 4490, 2627, 6218, 2629, 5194, 2630, 3146, 2633, 4682, 2641, 4426, 2657, 4298, 2691, 6186, 2693, 5162, 2694, 3114, 2697, 4650, 2705, 4394, 2721, 4266, 2753, 4202, 2819, 6170, 2821, 5146, 2822, 3098, 2825, 4634, 2833, 4378, 2849, 4250, 2881, 4186, 2945, 4154, 3079, 7174, 3083, 6662, 3085, 5638, 3086, 3590, 3091, 6406, 3093, 5382, 3094, 3334, 3097, 4870, 3107, 6278, 3109, 5254, 3110, 3206, 3113, 4742, 3121, 4486, 3139, 6214, 3141, 5190, 3145, 4678, 3153, 4422, 3169, 4294, 3203, 6182, 3205, 5158, 3209, 4646, 3217, 4390, 3233, 4262, 3265, 4198, 3331, 6166, 3333, 5142, 3337, 4630, 3345, 4374, 3361, 4246, 3393, 4182, 3457, 4150, 3587, 6158, 3589, 5134, 3593, 4622, 3601, 4366, 3617, 4238, 3649, 4174, 3713, 4142, 3841, 4126, 4111, 7681, 4119, 7425, 4123, 6913, 4125, 5889, 4135, 7297, 4139, 6785, 4141, 5761, 4147, 6529, 4149, 5505, 4153, 4993, 4167, 7233, 4171, 6721, 4173, 5697, 4179, 6465, 4181, 5441, 4185, 4929, 4195, 6337, 4197, 5313, 4201, 4801, 4209, 4545, 4231, 7201, 4235, 6689, 4237, 5665, 4243, 6433, 4245, 5409, 4249, 4897, 4259, 6305, 4261, 5281, 4265, 4769, 4273, 4513, 4291, 6241, 4293, 5217, 4297, 4705, 4305, 4449, 4359, 7185, 4363, 6673, 4365, 5649, 4371, 6417, 4373, 5393, 4377, 4881, 4387, 6289, 4389, 5265, 4393, 4753, 4401, 4497, 4419, 6225, 4421, 5201, 4425, 4689, 4483, 6193, 4485, 5169, 4489, 4657, 4615, 7177, 4619, 6665, 4621, 5641, 4627, 6409, 4629, 5385, 4633, 4873, 4643, 6281, 4645, 5257, 4649, 4745, 4675, 6217, 4677, 5193, 4739, 6185, 4741, 5161, 4867, 6169, 4869, 5145, 5127, 7173, 5131, 6661, 5133, 5637, 5139, 6405, 5141, 5381, 5155, 6277, 5157, 5253, 5187, 6213, 5251, 6181, 5379, 6165, 5635, 6157, 6151, 7171, 6155, 6659, 6163, 6403, 6179, 6275, 6211, 5189, 4681, 4433, 4321, 3142, 2634, 2386, 2274, 1612, 1364, 1252, 856, 744, 496]); //#10289
    $1.tab213 = $a([3, 6144, 5, 5120, 6, 3072, 9, 4608, 10, 2560, 12, 1536, 17, 4352, 18, 2304, 20, 1280, 24, 768, 33, 4224, 34, 2176, 36, 1152, 40, 640, 48, 384, 65, 4160, 66, 2112, 68, 1088, 72, 576, 80, 320, 96, 192, 129, 4128, 130, 2080, 132, 1056, 136, 544, 144, 288, 257, 4112, 258, 2064, 260, 1040, 264, 528, 513, 4104, 514, 2056, 516, 1032, 1025, 4100, 1026, 2052, 2049, 4098, 4097, 2050, 1028, 520, 272, 160]); //#10298
    $1.chars = $a(10); //#10300
    for (var _3Z = 0; _3Z <= 9; _3Z += 1) { //#10309
        $1.i = _3Z; //#10302
        var _3c = $get($1.codewords, $1.i); //#10303
        $k[$j++] = _3c; //#10307
        if (_3c <= 1286) { //#10306
            var _3f = $get($1.tab513, $k[--$j]); //#10304
            $k[$j++] = _3f; //#10304
        } else { //#10306
            var _3i = $get($1.tab213, $f($k[--$j] - 1287)); //#10306
            $k[$j++] = _3i; //#10306
        } //#10306
        $put($1.chars, $1.i, $k[--$j]); //#10308
    } //#10308
    for (var _3m = 9; _3m >= 0; _3m -= 1) { //#10316
        $1.i = _3m; //#10312
        if (((~~Math.pow(2, $1.i)) & $1.fcs) != 0) { //#10315
            $put($1.chars, $1.i, $get($1.chars, $1.i) ^ 8191); //#10314
        } //#10314
    } //#10314
    $1.barmap = $a([7, 2, 4, 3, 1, 10, 0, 0, 9, 12, 2, 8, 5, 5, 6, 11, 8, 9, 3, 1, 0, 1, 5, 12, 2, 5, 1, 8, 4, 4, 9, 11, 6, 3, 8, 10, 3, 9, 7, 6, 5, 11, 1, 4, 8, 5, 2, 12, 9, 10, 0, 2, 7, 1, 6, 7, 3, 6, 4, 9, 0, 3, 8, 6, 6, 4, 2, 7, 1, 1, 9, 9, 7, 10, 5, 2, 4, 0, 3, 8, 6, 2, 0, 4, 8, 11, 1, 0, 9, 8, 3, 12, 2, 6, 7, 7, 5, 1, 4, 10, 1, 12, 6, 9, 7, 3, 8, 0, 5, 8, 9, 7, 4, 6, 2, 10, 3, 4, 0, 5, 8, 4, 5, 7, 7, 11, 1, 9, 6, 0, 9, 6, 0, 6, 4, 8, 2, 1, 3, 2, 5, 9, 8, 12, 4, 11, 6, 1, 9, 5, 7, 4, 3, 3, 1, 2, 0, 7, 2, 0, 1, 3, 4, 1, 6, 10, 3, 5, 8, 7, 9, 4, 2, 11, 5, 6, 0, 8, 7, 12, 4, 2, 8, 1, 5, 10, 3, 0, 9, 3, 0, 9, 6, 5, 2, 4, 7, 8, 1, 7, 5, 0, 4, 5, 2, 3, 0, 10, 6, 12, 9, 2, 3, 11, 1, 6, 8, 8, 7, 9, 5, 4, 0, 11, 1, 5, 2, 2, 9, 1, 4, 12, 8, 3, 6, 6, 7, 0, 3, 7, 4, 7, 7, 5, 0, 12, 1, 11, 2, 9, 9, 0, 6, 8, 5, 3, 3, 10, 8, 2]); //#10333
    $1.bbs = $a(65); //#10335
    $1.bhs = $a(65); //#10336
    for (var _3x = 0; _3x <= 64; _3x += 1) { //#10357
        $1.i = _3x; //#10338
        $1.dec = ($get($1.chars, $get($1.barmap, $1.i * 4)) & (~~Math.pow(2, $get($1.barmap, ($1.i * 4) + 1)))) != 0; //#10339
        $1.asc = ($get($1.chars, $get($1.barmap, ($1.i * 4) + 2)) & (~~Math.pow(2, $get($1.barmap, ($1.i * 4) + 3)))) != 0; //#10340
        if ((!$1.dec) && (!$1.asc)) { //#10344
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#10342
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#10343
        } //#10343
        if ((!$1.dec) && $1.asc) { //#10348
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#10346
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#10347
        } //#10347
        if ($1.dec && (!$1.asc)) { //#10352
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#10350
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#10351
        } //#10351
        if ($1.dec && $1.asc) { //#10356
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#10354
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#10355
        } //#10355
    } //#10355
    $k[$j++] = Infinity; //#10370
    var _4k = $1.bbs; //#10362
    var _4l = $1.bhs; //#10363
    $k[$j++] = Infinity; //#10364
    for (var _4n = 0, _4o = $1.bhs.length - 1; _4n < _4o; _4n++) { //#10364
        $k[$j++] = 1.44; //#10364
        $k[$j++] = 1.872; //#10364
    } //#10364
    $k[$j++] = 1.44; //#10364
    var _4p = $a(); //#10364
    $k[$j++] = 'ren'; //#10370
    $k[$j++] = bwipp_renlinear; //#10370
    $k[$j++] = 'bbs'; //#10370
    $k[$j++] = _4k; //#10370
    $k[$j++] = 'bhs'; //#10370
    $k[$j++] = _4l; //#10370
    $k[$j++] = 'sbs'; //#10370
    $k[$j++] = _4p; //#10370
    $k[$j++] = 'txt'; //#10370
    $k[$j++] = $1.txt; //#10370
    $k[$j++] = 'textxalign'; //#10370
    $k[$j++] = "left"; //#10370
    $k[$j++] = 'textfont'; //#10370
    $k[$j++] = "OCR-B"; //#10370
    $k[$j++] = 'textyoffset'; //#10370
    $k[$j++] = 1; //#10370
    $k[$j++] = 'textxoffset'; //#10370
    $k[$j++] = -0.3; //#10370
    $k[$j++] = 'opt'; //#10370
    $k[$j++] = $1.options; //#10370
    var _4s = $d(); //#10370
    $k[$j++] = _4s; //#10373
    if (!$1.dontdraw) { //#10373
        bwipp_renlinear(); //#10373
    } //#10373
}

function bwipp_postnet() {
    var $1 = {}; //#10402
    $1.options = $k[--$j]; //#10404
    $1.barcode = $k[--$j]; //#10405
    $1.dontdraw = false; //#10407
    $1.includetext = false; //#10408
    $1.validatecheck = false; //#10409
    $1.includecheckintext = false; //#10410
    $1.textfont = "OCR-B"; //#10411
    $1.textsize = 10; //#10412
    $1.textyoffset = -8; //#10413
    $1.height = 0.125; //#10414
    $forall($1.options, function() { //#10425
        var _3 = $k[--$j]; //#10425
        $1[$k[--$j]] = _3; //#10425
    }); //#10425
    $1.textfont = "" + $1.textfont; //#10427
    $1.textsize = +$1.textsize; //#10428
    $1.textyoffset = +$1.textyoffset; //#10429
    $1.height = +$1.height; //#10430
    $k[$j++] = 'barlen'; //#10432
    $k[$j++] = $1.barcode.length; //#10432
    if ($1.validatecheck) { //#10432
        var _B = $k[--$j]; //#10432
        $k[$j++] = $f(_B - 1); //#10432
    } //#10432
    var _C = $k[--$j]; //#10432
    $1[$k[--$j]] = _C; //#10432
    if ((($1.barlen != 5) && ($1.barlen != 9)) && ($1.barlen != 11)) { //#10437
        $k[$j++] = 'bwipp.postnetBadLength'; //#10436
        $k[$j++] = "USPS POSTNET must be 5, 9 or 11 digits excluding check digit"; //#10436
        bwipp_raiseerror(); //#10436
    } //#10436
    $forall($1.barcode, function() { //#10442
        var _I = $k[--$j]; //#10439
        if ((_I < 48) || (_I > 57)) { //#10441
            $k[$j++] = 'bwipp.postnetBadCharacter'; //#10440
            $k[$j++] = "USPS POSTNET must contain only digits"; //#10440
            bwipp_raiseerror(); //#10440
        } //#10440
    }); //#10440
    $1.barchars = "0123456789"; //#10445
    $1.checksum = 0; //#10447
    for (var _L = 0, _K = $f($1.barlen - 1); _L <= _K; _L += 1) { //#10451
        $1.i = _L; //#10449
        $1.checksum = $f($1.checksum + $f($get($1.barcode, $1.i) - 48)); //#10450
    } //#10450
    $1.checksum = ($f(10 - ($1.checksum % 10))) % 10; //#10452
    if ($1.validatecheck) { //#10458
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#10456
            $k[$j++] = 'bwipp.postnetBadCheckDigit'; //#10455
            $k[$j++] = "Incorrect USPS POSTNET check digit provided"; //#10455
            bwipp_raiseerror(); //#10455
        } //#10455
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#10457
    } //#10457
    $1.encs = $a(["55222", "22255", "22525", "22552", "25225", "25252", "25522", "52225", "52252", "52522", "5", "5"]); //#10465
    $1.bhs = $a($f(($1.barlen * 5) + 7)); //#10467
    $1.txt = $a($f($1.barlen + 1)); //#10468
    $1.enc = $get($1.encs, 10); //#10471
    $1.heights = $a($1.enc.length); //#10472
    for (var _m = 0, _l = $1.enc.length - 1; _m <= _l; _m += 1) { //#10476
        $1.j = _m; //#10474
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#10475
    } //#10475
    $puti($1.bhs, 0, $1.heights); //#10477
    for (var _x = 0, _w = $f($1.barlen - 1); _x <= _w; _x += 1) { //#10489
        $1.i = _x; //#10480
        $1.enc = $get($1.encs, $f($get($1.barcode, $1.i) - 48)); //#10481
        $1.heights = $a($1.enc.length); //#10482
        for (var _17 = 0, _16 = $1.enc.length - 1; _17 <= _16; _17 += 1) { //#10486
            $1.j = _17; //#10484
            $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#10485
        } //#10485
        $puti($1.bhs, ($1.i * 5) + 1, $1.heights); //#10487
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10488
    } //#10488
    $1.enc = $get($1.encs, $1.checksum); //#10492
    $1.heights = $a($1.enc.length); //#10493
    for (var _1Y = 0, _1X = $1.enc.length - 1; _1Y <= _1X; _1Y += 1) { //#10497
        $1.j = _1Y; //#10495
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#10496
    } //#10496
    $puti($1.bhs, $f(($1.barlen * 5) + 1), $1.heights); //#10498
    if ($1.includecheckintext) { //#10503
        $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($f(($1.barlen * 5) + 1)) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10501
    } else { //#10503
        $put($1.txt, $1.barlen, $a([" ", (($f(($1.barlen * 5) + 1)) * 72) / 25, $1.textyoffset, $1.textfont, $1.textsize])); //#10503
    } //#10503
    $1.enc = $get($1.encs, 11); //#10507
    $1.heights = $a($1.enc.length); //#10508
    for (var _26 = 0, _25 = $1.enc.length - 1; _26 <= _25; _26 += 1) { //#10512
        $1.j = _26; //#10510
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#10511
    } //#10511
    $puti($1.bhs, $f(($1.barlen * 5) + 6), $1.heights); //#10513
    $k[$j++] = Infinity; //#10524
    var _2G = $1.bhs; //#10518
    $k[$j++] = Infinity; //#10519
    for (var _2I = 0, _2J = $1.bhs.length; _2I < _2J; _2I++) { //#10519
        $k[$j++] = 0; //#10519
    } //#10519
    var _2K = $a(); //#10519
    $k[$j++] = Infinity; //#10520
    for (var _2M = 0, _2N = $1.bhs.length - 1; _2M < _2N; _2M++) { //#10520
        $k[$j++] = 1.44; //#10520
        $k[$j++] = 1.872; //#10520
    } //#10520
    $k[$j++] = 1.44; //#10520
    var _2O = $a(); //#10520
    $k[$j++] = 'ren'; //#10523
    $k[$j++] = bwipp_renlinear; //#10523
    $k[$j++] = 'bhs'; //#10523
    $k[$j++] = _2G; //#10523
    $k[$j++] = 'bbs'; //#10523
    $k[$j++] = _2K; //#10523
    $k[$j++] = 'sbs'; //#10523
    $k[$j++] = _2O; //#10523
    if ($1.includetext) { //#10523
        $k[$j++] = 'txt'; //#10522
        $k[$j++] = $1.txt; //#10522
    } //#10522
    $k[$j++] = 'opt'; //#10524
    $k[$j++] = $1.options; //#10524
    var _2S = $d(); //#10524
    $k[$j++] = _2S; //#10527
    if (!$1.dontdraw) { //#10527
        bwipp_renlinear(); //#10527
    } //#10527
}

function bwipp_planet() {
    var $1 = {}; //#10556
    $1.options = $k[--$j]; //#10558
    $1.barcode = $k[--$j]; //#10559
    $1.dontdraw = false; //#10561
    $1.includetext = false; //#10562
    $1.validatecheck = false; //#10563
    $1.includecheckintext = false; //#10564
    $1.textfont = "OCR-B"; //#10565
    $1.textsize = 10; //#10566
    $1.textyoffset = -8; //#10567
    $1.height = 0.125; //#10568
    $forall($1.options, function() { //#10579
        var _3 = $k[--$j]; //#10579
        $1[$k[--$j]] = _3; //#10579
    }); //#10579
    $1.textfont = "" + $1.textfont; //#10581
    $1.textsize = +$1.textsize; //#10582
    $1.textyoffset = +$1.textyoffset; //#10583
    $1.height = +$1.height; //#10584
    $k[$j++] = 'barlen'; //#10586
    $k[$j++] = $1.barcode.length; //#10586
    if ($1.validatecheck) { //#10586
        var _B = $k[--$j]; //#10586
        $k[$j++] = $f(_B - 1); //#10586
    } //#10586
    var _C = $k[--$j]; //#10586
    $1[$k[--$j]] = _C; //#10586
    if (($1.barlen != 11) && ($1.barlen != 13)) { //#10591
        $k[$j++] = 'bwipp.planetBadLength'; //#10590
        $k[$j++] = "USPS PLANET must be 11 or 13 digits excluding check digit"; //#10590
        bwipp_raiseerror(); //#10590
    } //#10590
    $forall($1.barcode, function() { //#10596
        var _H = $k[--$j]; //#10593
        if ((_H < 48) || (_H > 57)) { //#10595
            $k[$j++] = 'bwipp.planetBadCharacter'; //#10594
            $k[$j++] = "USPS PLANET must contain only digits"; //#10594
            bwipp_raiseerror(); //#10594
        } //#10594
    }); //#10594
    $1.barchars = "0123456789"; //#10599
    $1.checksum = 0; //#10602
    for (var _K = 0, _J = $f($1.barlen - 1); _K <= _J; _K += 1) { //#10606
        $1.i = _K; //#10604
        $1.checksum = $f($1.checksum + $f($get($1.barcode, $1.i) - 48)); //#10605
    } //#10605
    $1.checksum = ($f(10 - ($1.checksum % 10))) % 10; //#10607
    if ($1.validatecheck) { //#10613
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#10611
            $k[$j++] = 'bwipp.planetBadCheckDigit'; //#10610
            $k[$j++] = "Incorrect USPS PLANET check digit provided"; //#10610
            bwipp_raiseerror(); //#10610
        } //#10610
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#10612
    } //#10612
    $1.encs = $a(["22555", "55522", "55252", "55225", "52552", "52525", "52255", "25552", "25525", "25255", "5", "5"]); //#10620
    $1.bhs = $a($f(($1.barlen * 5) + 7)); //#10622
    $1.txt = $a($f($1.barlen + 1)); //#10623
    $1.enc = $get($1.encs, 10); //#10626
    $1.heights = $a($1.enc.length); //#10627
    for (var _l = 0, _k = $1.enc.length - 1; _l <= _k; _l += 1) { //#10631
        $1.j = _l; //#10629
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#10630
    } //#10630
    $puti($1.bhs, 0, $1.heights); //#10632
    for (var _w = 0, _v = $f($1.barlen - 1); _w <= _v; _w += 1) { //#10644
        $1.i = _w; //#10635
        $1.enc = $get($1.encs, $f($get($1.barcode, $1.i) - 48)); //#10636
        $1.heights = $a($1.enc.length); //#10637
        for (var _16 = 0, _15 = $1.enc.length - 1; _16 <= _15; _16 += 1) { //#10641
            $1.j = _16; //#10639
            $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#10640
        } //#10640
        $puti($1.bhs, ($1.i * 5) + 1, $1.heights); //#10642
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 5) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10643
    } //#10643
    $1.enc = $get($1.encs, $1.checksum); //#10647
    $1.heights = $a($1.enc.length); //#10648
    for (var _1X = 0, _1W = $1.enc.length - 1; _1X <= _1W; _1X += 1) { //#10652
        $1.j = _1X; //#10650
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#10651
    } //#10651
    $puti($1.bhs, $f(($1.barlen * 5) + 1), $1.heights); //#10653
    if ($1.includecheckintext) { //#10658
        $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($f(($1.barlen * 5) + 1)) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10656
    } else { //#10658
        $put($1.txt, $1.barlen, $a([" ", (($f(($1.barlen * 5) + 1)) * 72) / 25, $1.textyoffset, $1.textfont, $1.textsize])); //#10658
    } //#10658
    $1.enc = $get($1.encs, 11); //#10662
    $1.heights = $a($1.enc.length); //#10663
    for (var _25 = 0, _24 = $1.enc.length - 1; _25 <= _24; _25 += 1) { //#10667
        $1.j = _25; //#10665
        $put($1.heights, $1.j, ($cvi($geti($1.enc, $1.j, 1)) * $1.height) / 5); //#10666
    } //#10666
    $puti($1.bhs, $f(($1.barlen * 5) + 6), $1.heights); //#10668
    $k[$j++] = Infinity; //#10679
    var _2F = $1.bhs; //#10673
    $k[$j++] = Infinity; //#10674
    for (var _2H = 0, _2I = $1.bhs.length; _2H < _2I; _2H++) { //#10674
        $k[$j++] = 0; //#10674
    } //#10674
    var _2J = $a(); //#10674
    $k[$j++] = Infinity; //#10675
    for (var _2L = 0, _2M = $1.bhs.length - 1; _2L < _2M; _2L++) { //#10675
        $k[$j++] = 1.44; //#10675
        $k[$j++] = 1.872; //#10675
    } //#10675
    $k[$j++] = 1.44; //#10675
    var _2N = $a(); //#10675
    $k[$j++] = 'ren'; //#10678
    $k[$j++] = bwipp_renlinear; //#10678
    $k[$j++] = 'bhs'; //#10678
    $k[$j++] = _2F; //#10678
    $k[$j++] = 'bbs'; //#10678
    $k[$j++] = _2J; //#10678
    $k[$j++] = 'sbs'; //#10678
    $k[$j++] = _2N; //#10678
    if ($1.includetext) { //#10678
        $k[$j++] = 'txt'; //#10677
        $k[$j++] = $1.txt; //#10677
    } //#10677
    $k[$j++] = 'opt'; //#10679
    $k[$j++] = $1.options; //#10679
    var _2R = $d(); //#10679
    $k[$j++] = _2R; //#10682
    if (!$1.dontdraw) { //#10682
        bwipp_renlinear(); //#10682
    } //#10682
}

function bwipp_royalmail() {
    var $1 = {}; //#10711
    $1.options = $k[--$j]; //#10713
    $1.barcode = $k[--$j]; //#10714
    $1.dontdraw = false; //#10716
    $1.includetext = false; //#10717
    $1.validatecheck = false; //#10718
    $1.includecheckintext = false; //#10719
    $1.textfont = "OCR-B"; //#10720
    $1.textsize = 10; //#10721
    $1.textyoffset = -8; //#10722
    $1.height = 0.175; //#10723
    $forall($1.options, function() { //#10734
        var _3 = $k[--$j]; //#10734
        $1[$k[--$j]] = _3; //#10734
    }); //#10734
    $1.textfont = "" + $1.textfont; //#10736
    $1.textsize = +$1.textsize; //#10737
    $1.textyoffset = +$1.textyoffset; //#10738
    $1.height = +$1.height; //#10739
    $1.barchars = "ZUVWXY501234B6789AHCDEFGNIJKLMTOPQRS"; //#10742
    $1.charvals = new Map; //#10743
    for (var _9 = 0; _9 <= 35; _9 += 1) { //#10744
        $put($1.charvals, $geti($1.barchars, _9, 1), _9); //#10744
    } //#10744
    for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) { //#10751
        var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; //#10748
        if (!_J) { //#10750
            $k[$j++] = 'bwipp.royalmailBadCharacter'; //#10749
            $k[$j++] = "RM4SCC must contain only capital letters and digits"; //#10749
            bwipp_raiseerror(); //#10749
        } //#10749
    } //#10749
    $k[$j++] = 'barlen'; //#10753
    $k[$j++] = $1.barcode.length; //#10753
    if ($1.validatecheck) { //#10753
        var _M = $k[--$j]; //#10753
        $k[$j++] = $f(_M - 1); //#10753
    } //#10753
    var _N = $k[--$j]; //#10753
    $1[$k[--$j]] = _N; //#10753
    $1.checksumrow = 0; //#10755
    $1.checksumcol = 0; //#10756
    for (var _R = 0, _Q = $f($1.barlen - 1); _R <= _Q; _R += 1) { //#10762
        $1.i = _R; //#10758
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#10759
        $1.checksumrow = $1.checksumrow + (~~($1.indx / 6)); //#10760
        $1.checksumcol = $f($1.checksumcol + ($1.indx % 6)); //#10761
    } //#10761
    $1.checksum = $f((($1.checksumrow % 6) * 6) + ($1.checksumcol % 6)); //#10763
    if ($1.validatecheck) { //#10769
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#10767
            $k[$j++] = 'bwipp.royalmailBadCheckDigit'; //#10766
            $k[$j++] = "Incorrect RM4SCC check digit provided"; //#10766
            bwipp_raiseerror(); //#10766
        } //#10766
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#10768
    } //#10768
    $1.encs = $a(["3300", "2211", "2301", "2310", "3201", "3210", "1122", "0033", "0123", "0132", "1023", "1032", "1302", "0213", "0303", "0312", "1203", "1212", "1320", "0231", "0321", "0330", "1221", "1230", "3102", "2013", "2103", "2112", "3003", "3012", "3120", "2031", "2121", "2130", "3021", "3030", "2", "3"]); //#10780
    $1.encstr = $s($f(($1.barlen * 4) + 6)); //#10782
    $1.txt = $a($f($1.barlen + 1)); //#10783
    $puti($1.encstr, 0, $get($1.encs, 36)); //#10786
    for (var _x = 0, _w = $f($1.barlen - 1); _x <= _w; _x += 1) { //#10793
        $1.i = _x; //#10789
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#10790
        $puti($1.encstr, ($1.i * 4) + 1, $get($1.encs, $1.indx)); //#10791
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.i * 4) + 1) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10792
    } //#10792
    $puti($1.encstr, $f(($1.barlen * 4) + 1), $get($1.encs, $1.checksum)); //#10796
    if ($1.includecheckintext) { //#10800
        $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum, 1), ($f(($1.barlen * 4) + 1)) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10798
    } else { //#10800
        $put($1.txt, $1.barlen, $a([" ", ($f(($1.barlen * 4) + 1)) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10800
    } //#10800
    $puti($1.encstr, $f(($1.barlen * 4) + 5), $get($1.encs, 37)); //#10804
    $1.bbs = $a($1.encstr.length); //#10806
    $1.bhs = $a($1.encstr.length); //#10807
    for (var _1p = 0, _1o = $1.encstr.length - 1; _1p <= _1o; _1p += 1) { //#10827
        $1.i = _1p; //#10809
        $1.enc = $geti($1.encstr, $1.i, 1); //#10810
        if ($eq($1.enc, "0")) { //#10814
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#10812
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#10813
        } //#10813
        if ($eq($1.enc, "1")) { //#10818
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#10816
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#10817
        } //#10817
        if ($eq($1.enc, "2")) { //#10822
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#10820
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#10821
        } //#10821
        if ($eq($1.enc, "3")) { //#10826
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#10824
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#10825
        } //#10825
    } //#10825
    $k[$j++] = Infinity; //#10838
    var _2L = $1.bbs; //#10832
    var _2M = $1.bhs; //#10833
    $k[$j++] = Infinity; //#10834
    for (var _2O = 0, _2P = $1.bhs.length - 1; _2O < _2P; _2O++) { //#10834
        $k[$j++] = 1.44; //#10834
        $k[$j++] = 1.872; //#10834
    } //#10834
    $k[$j++] = 1.44; //#10834
    var _2Q = $a(); //#10834
    $k[$j++] = 'ren'; //#10837
    $k[$j++] = bwipp_renlinear; //#10837
    $k[$j++] = 'bbs'; //#10837
    $k[$j++] = _2L; //#10837
    $k[$j++] = 'bhs'; //#10837
    $k[$j++] = _2M; //#10837
    $k[$j++] = 'sbs'; //#10837
    $k[$j++] = _2Q; //#10837
    if ($1.includetext) { //#10837
        $k[$j++] = 'txt'; //#10836
        $k[$j++] = $1.txt; //#10836
    } //#10836
    $k[$j++] = 'opt'; //#10838
    $k[$j++] = $1.options; //#10838
    var _2U = $d(); //#10838
    $k[$j++] = _2U; //#10841
    if (!$1.dontdraw) { //#10841
        bwipp_renlinear(); //#10841
    } //#10841
}

function bwipp_auspost() {
    var $1 = {}; //#10870
    $1.options = $k[--$j]; //#10872
    $1.barcode = $k[--$j]; //#10873
    $1.dontdraw = false; //#10875
    $1.includetext = false; //#10876
    $1.textfont = "OCR-B"; //#10877
    $1.textsize = 10; //#10878
    $1.textyoffset = -8; //#10879
    $1.height = 0.175; //#10880
    $1.custinfoenc = "character"; //#10881
    $forall($1.options, function() { //#10892
        var _3 = $k[--$j]; //#10892
        $1[$k[--$j]] = _3; //#10892
    }); //#10892
    $1.textfont = "" + $1.textfont; //#10894
    $1.textsize = +$1.textsize; //#10895
    $1.textyoffset = +$1.textyoffset; //#10896
    $1.height = +$1.height; //#10897
    $1.encs = $a(["000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111", "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222", "300", "301", "302", "310", "311", "312", "320", "321", "322", "023", "030", "031", "032", "033", "103", "113", "123", "130", "131", "132", "133", "203", "213", "223", "230", "231", "232", "233", "303", "313", "323", "330", "331", "332", "333", "003", "013", "00", "01", "02", "10", "11", "12", "20", "21", "22", "30", "13", "3"]); //#10911
    $1.barchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz #"; //#10914
    $1.barlen = $1.barcode.length; //#10916
    if ($eq($geti($1.barcode, 0, 2), "11")) { //#10917
        $k[$j++] = 37; //#10917
    } //#10917
    if ($eq($geti($1.barcode, 0, 2), "45")) { //#10918
        $k[$j++] = 37; //#10918
    } //#10918
    if ($eq($geti($1.barcode, 0, 2), "59")) { //#10919
        $k[$j++] = 52; //#10919
    } //#10919
    if ($eq($geti($1.barcode, 0, 2), "62")) { //#10920
        $k[$j++] = 67; //#10920
    } //#10920
    $1.encstr = $s($k[--$j]); //#10921
    $1.txt = $a($1.barlen - 2); //#10922
    $puti($1.encstr, 0, $get($1.encs, 74)); //#10925
    for (var _Q = 0; _Q <= 1; _Q += 1) { //#10932
        $1.i = _Q; //#10929
        $puti($1.encstr, ($1.i * 2) + 2, $get($1.encs, $cvi($geti($1.barcode, $1.i, 1)) + 64)); //#10931
    } //#10931
    for (var _Y = 2; _Y <= 9; _Y += 1) { //#10940
        $1.i = _Y; //#10936
        $puti($1.encstr, ($1.i * 2) + 2, $get($1.encs, $cvi($geti($1.barcode, $1.i, 1)) + 64)); //#10938
        $put($1.txt, $1.i - 2, $a([$geti($1.barcode, $1.i, 1), ((($1.i - 2) * 2) + 6) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10939
    } //#10939
    if ($eq($1.custinfoenc, "numeric")) { //#10962
        for (var _t = 0, _s = $1.barlen - 11; _t <= _s; _t += 1) { //#10949
            $1.i = _t; //#10945
            $puti($1.encstr, ($1.i * 2) + 22, $get($1.encs, $cvi($geti($1.barcode, $1.i + 10, 1)) + 64)); //#10947
            $put($1.txt, $1.i + 8, $a([$geti($1.barcode, $1.i + 10, 1), (($1.i * 2) + 22) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10948
        } //#10948
        $1.ciflen = ($1.barlen - 10) * 2; //#10950
    } else { //#10962
        for (var _1E = 0, _1D = $1.barlen - 11; _1E <= _1D; _1E += 1) { //#10961
            $1.i = _1E; //#10953
            $search($1.barchars, $geti($1.barcode, $1.i + 10, 1)); //#10954
            $j--; //#10955
            $1.indx = $k[--$j].length; //#10956
            $j -= 2; //#10957
            $1.enc = $get($1.encs, $1.indx); //#10958
            $puti($1.encstr, ($1.i * 3) + 22, $1.enc); //#10959
            $put($1.txt, $1.i + 8, $a([$geti($1.barcode, $1.i + 10, 1), (($1.i * 3) + 22) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#10960
        } //#10960
        $1.ciflen = ($1.barlen - 10) * 3; //#10962
    } //#10962
    for (var _1e = 22 + $1.ciflen, _1d = $1.encstr.length - 14; _1e <= _1d; _1e += 1) { //#10968
        $puti($1.encstr, _1e, $get($1.encs, 75)); //#10967
    } //#10967
    $1.rstable = $a(64 * 64); //#10971
    $k[$j++] = $1.rstable; //#10972
    $k[$j++] = 0; //#10972
    $k[$j++] = Infinity; //#10972
    for (var _1k = 0, _1l = 64; _1k < _1l; _1k++) { //#10972
        $k[$j++] = 0; //#10972
    } //#10972
    var _1m = $a(); //#10972
    var _1n = $k[--$j]; //#10972
    $puti($k[--$j], _1n, _1m); //#10972
    $k[$j++] = $1.rstable; //#10973
    $k[$j++] = 64; //#10973
    $k[$j++] = Infinity; //#10973
    for (var _1q = 0; _1q <= 63; _1q += 1) { //#10973
        $k[$j++] = _1q; //#10973
    } //#10973
    var _1r = $a(); //#10973
    var _1s = $k[--$j]; //#10973
    $puti($k[--$j], _1s, _1r); //#10973
    $1.prev = 1; //#10974
    for (var _1u = 0, _1v = 64; _1u < _1v; _1u++) { //#10989
        $1.next = $1.prev << 1; //#10976
        if (($1.next & 64) != 0) { //#10979
            $1.next = $1.next ^ 67; //#10978
        } //#10978
        for (var _1z = 0; _1z <= 63; _1z += 1) { //#10987
            $1.j = _1z; //#10981
            $1.nextcell = function() {
                $k[$j++] = $1.rstable; //#10982
                $k[$j++] = (64 * $1.next) + $1.j; //#10982
            }; //#10982
            $1.nextcell(); //#10983
            var _27 = $k[--$j]; //#10983
            $put($k[--$j], _27, $get($1.rstable, (64 * $1.prev) + $1.j) << 1); //#10983
            $1.nextcell(); //#10984
            var _29 = $k[--$j]; //#10984
            if (($get($k[--$j], _29) & 64) != 0) { //#10986
                $1.nextcell(); //#10985
                $1.nextcell(); //#10985
                var _2C = $k[--$j]; //#10985
                var _2E = $get($k[--$j], _2C); //#10985
                var _2F = $k[--$j]; //#10985
                $put($k[--$j], _2F, _2E ^ 67); //#10985
            } //#10985
        } //#10985
        $1.prev = $1.next; //#10988
    } //#10988
    $1.rscodes = $a((~~(($1.encstr.length - 16) / 3)) + 4); //#10992
    $k[$j++] = $1.rscodes; //#10993
    $k[$j++] = 0; //#10993
    $k[$j++] = Infinity; //#10993
    for (var _2L = 0, _2M = 4; _2L < _2M; _2L++) { //#10993
        $k[$j++] = 0; //#10993
    } //#10993
    var _2N = $a(); //#10993
    var _2O = $k[--$j]; //#10993
    $puti($k[--$j], _2O, _2N); //#10993
    for (var _2S = 2, _2R = $1.encstr.length - 16; _2S <= _2R; _2S += 3) { //#11001
        $1.i = _2S; //#10995
        $put($1.rscodes, ($1.rscodes.length - (~~(($1.i - 2) / 3))) - 1, (($cvi($geti($1.encstr, $1.i, 1)) * 16) + ($cvi($geti($1.encstr, $1.i + 1, 1)) * 4)) + $cvi($geti($1.encstr, $1.i + 2, 1))); //#11000
    } //#11000
    for (var _2g = $1.rscodes.length - 5; _2g >= 0; _2g -= 1) { //#11010
        $1.i = _2g; //#11003
        for (var _2h = 0; _2h <= 4; _2h += 1) { //#11009
            $1.j = _2h; //#11005
            $put($1.rscodes, $1.i + $1.j, $xo($get($1.rscodes, $1.i + $1.j), $get($1.rstable, $f((64 * $get($a([48, 17, 29, 30, 1]), $1.j)) + $get($1.rscodes, $1.i + 4))))); //#11008
        } //#11008
    } //#11008
    $1.checkcode = $strcpy($s(12), "000000000000"); //#11011
    for (var _2z = 0; _2z <= 3; _2z += 1) { //#11016
        $1.i = _2z; //#11013
        $1.enc = $cvrs($s(3), $get($1.rscodes, 3 - $1.i), 4); //#11014
        $puti($1.checkcode, ($1.i * 3) + (3 - $1.enc.length), $1.enc); //#11015
    } //#11015
    $puti($1.encstr, $1.encstr.length - 14, $1.checkcode); //#11019
    $puti($1.encstr, $1.encstr.length - 2, $get($1.encs, 74)); //#11020
    $1.bbs = $a($1.encstr.length); //#11022
    $1.bhs = $a($1.encstr.length); //#11023
    for (var _3M = 0, _3L = $1.encstr.length - 1; _3M <= _3L; _3M += 1) { //#11043
        $1.i = _3M; //#11025
        $1.enc = $geti($1.encstr, $1.i, 1); //#11026
        if ($eq($1.enc, "0")) { //#11030
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11028
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#11029
        } //#11029
        if ($eq($1.enc, "1")) { //#11034
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11032
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11033
        } //#11033
        if ($eq($1.enc, "2")) { //#11038
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11036
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11037
        } //#11037
        if ($eq($1.enc, "3")) { //#11042
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11040
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#11041
        } //#11041
    } //#11041
    $k[$j++] = Infinity; //#11054
    var _3s = $1.bbs; //#11048
    var _3t = $1.bhs; //#11049
    $k[$j++] = Infinity; //#11050
    for (var _3v = 0, _3w = $1.bhs.length - 1; _3v < _3w; _3v++) { //#11050
        $k[$j++] = 1.44; //#11050
        $k[$j++] = 1.872; //#11050
    } //#11050
    $k[$j++] = 1.44; //#11050
    var _3x = $a(); //#11050
    $k[$j++] = 'ren'; //#11053
    $k[$j++] = bwipp_renlinear; //#11053
    $k[$j++] = 'bbs'; //#11053
    $k[$j++] = _3s; //#11053
    $k[$j++] = 'bhs'; //#11053
    $k[$j++] = _3t; //#11053
    $k[$j++] = 'sbs'; //#11053
    $k[$j++] = _3x; //#11053
    if ($1.includetext) { //#11053
        $k[$j++] = 'txt'; //#11052
        $k[$j++] = $1.txt; //#11052
    } //#11052
    $k[$j++] = 'opt'; //#11054
    $k[$j++] = $1.options; //#11054
    var _41 = $d(); //#11054
    $k[$j++] = _41; //#11057
    if (!$1.dontdraw) { //#11057
        bwipp_renlinear(); //#11057
    } //#11057
}

function bwipp_kix() {
    var $1 = {}; //#11086
    $1.options = $k[--$j]; //#11088
    $1.barcode = $k[--$j]; //#11089
    $1.dontdraw = false; //#11091
    $1.includetext = false; //#11092
    $1.textfont = "OCR-B"; //#11093
    $1.textsize = 10; //#11094
    $1.textyoffset = -8; //#11095
    $1.height = 0.175; //#11096
    $forall($1.options, function() { //#11107
        var _3 = $k[--$j]; //#11107
        $1[$k[--$j]] = _3; //#11107
    }); //#11107
    $1.textfont = "" + $1.textfont; //#11109
    $1.textsize = +$1.textsize; //#11110
    $1.textyoffset = +$1.textyoffset; //#11111
    $1.height = +$1.height; //#11112
    $1.encs = $a(["0033", "0123", "0132", "1023", "1032", "1122", "0213", "0303", "0312", "1203", "1212", "1302", "0231", "0321", "0330", "1221", "1230", "1320", "2013", "2103", "2112", "3003", "3012", "3102", "2031", "2121", "2130", "3021", "3030", "3120", "2211", "2301", "2310", "3201", "3210", "3300"]); //#11122
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#11125
    $1.charvals = new Map; //#11126
    for (var _A = 0; _A <= 35; _A += 1) { //#11127
        $put($1.charvals, $geti($1.barchars, _A, 1), _A); //#11127
    } //#11127
    for (var _G = 0, _F = $1.barcode.length - 1; _G <= _F; _G += 1) { //#11134
        var _K = $get($1.charvals, $geti($1.barcode, _G, 1)) !== undefined; //#11131
        if (!_K) { //#11133
            $k[$j++] = 'bwipp.kixBadCharacter'; //#11132
            $k[$j++] = "KIX must contain only capital letters and digits"; //#11132
            bwipp_raiseerror(); //#11132
        } //#11132
    } //#11132
    $1.barlen = $1.barcode.length; //#11136
    $1.encstr = $s($1.barlen * 4); //#11137
    $1.txt = $a($1.barlen); //#11138
    for (var _S = 0, _R = $1.barlen - 1; _S <= _R; _S += 1) { //#11145
        $1.i = _S; //#11141
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#11142
        $puti($1.encstr, $1.i * 4, $get($1.encs, $1.indx)); //#11143
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 4) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11144
    } //#11144
    $1.bbs = $a($1.encstr.length); //#11147
    $1.bhs = $a($1.encstr.length); //#11148
    for (var _t = 0, _s = $1.encstr.length - 1; _t <= _s; _t += 1) { //#11168
        $1.i = _t; //#11150
        $1.enc = $geti($1.encstr, $1.i, 1); //#11151
        if ($eq($1.enc, "0")) { //#11155
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11153
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#11154
        } //#11154
        if ($eq($1.enc, "1")) { //#11159
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11157
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11158
        } //#11158
        if ($eq($1.enc, "2")) { //#11163
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#11161
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#11162
        } //#11162
        if ($eq($1.enc, "3")) { //#11167
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#11165
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#11166
        } //#11166
    } //#11166
    $k[$j++] = Infinity; //#11179
    var _1P = $1.bbs; //#11173
    var _1Q = $1.bhs; //#11174
    $k[$j++] = Infinity; //#11175
    for (var _1S = 0, _1T = $1.bhs.length - 1; _1S < _1T; _1S++) { //#11175
        $k[$j++] = 1.44; //#11175
        $k[$j++] = 1.872; //#11175
    } //#11175
    $k[$j++] = 1.44; //#11175
    var _1U = $a(); //#11175
    $k[$j++] = 'ren'; //#11178
    $k[$j++] = bwipp_renlinear; //#11178
    $k[$j++] = 'bbs'; //#11178
    $k[$j++] = _1P; //#11178
    $k[$j++] = 'bhs'; //#11178
    $k[$j++] = _1Q; //#11178
    $k[$j++] = 'sbs'; //#11178
    $k[$j++] = _1U; //#11178
    if ($1.includetext) { //#11178
        $k[$j++] = 'txt'; //#11177
        $k[$j++] = $1.txt; //#11177
    } //#11177
    $k[$j++] = 'opt'; //#11179
    $k[$j++] = $1.options; //#11179
    var _1Y = $d(); //#11179
    $k[$j++] = _1Y; //#11182
    if (!$1.dontdraw) { //#11182
        bwipp_renlinear(); //#11182
    } //#11182
}

function bwipp_japanpost() {
    var $1 = {}; //#11211
    $1.options = $k[--$j]; //#11213
    $1.barcode = $k[--$j]; //#11214
    $1.dontdraw = false; //#11216
    $1.includetext = false; //#11217
    $1.includecheckintext = false; //#11218
    $1.textfont = "OCR-B"; //#11219
    $1.textsize = 10; //#11220
    $1.textyoffset = -8; //#11221
    $1.height = 0.175; //#11222
    $forall($1.options, function() { //#11233
        var _3 = $k[--$j]; //#11233
        $1[$k[--$j]] = _3; //#11233
    }); //#11233
    $1.textfont = "" + $1.textfont; //#11235
    $1.textsize = +$1.textsize; //#11236
    $1.textyoffset = +$1.textyoffset; //#11237
    $1.height = +$1.height; //#11238
    $1.encs = $a(["300", "330", "312", "132", "321", "303", "123", "231", "213", "033", "030", "120", "102", "210", "012", "201", "021", "003", "333", "31", "13"]); //#11246
    $1.barchars = "0123456789-ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //#11249
    $1.barlen = $1.barcode.length; //#11250
    $1.encstr = $s(((20 + 1) * 3) + 4); //#11252
    $1.digits = $a(20); //#11253
    $1.txt = $a($1.barlen + 1); //#11254
    $puti($1.encstr, 0, $get($1.encs, 19)); //#11257
    $1.checksum = 0; //#11259
    $1.j = 0; //#11260
    $1.i = 0; //#11260
    for (var _K = 0, _J = $1.barlen - 1; _K <= _J; _K += 1) { //#11294
        $1.i = _K; //#11262
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#11263
        $j--; //#11264
        $1.indx = $k[--$j].length; //#11265
        $j -= 2; //#11266
        if (($1.indx >= 11) && ($1.indx < 37)) { //#11277
            if ($1.j > 18) { //#11268
                break; //#11268
            } //#11268
            $1.digit = (~~(($1.indx - 1) / 10)) + 10; //#11272
            $puti($1.encstr, ($1.j * 3) + 2, $get($1.encs, $1.digit)); //#11273
            $1.checksum = $1.checksum + $1.digit; //#11274
            $put($1.digits, $1.j, $1.digit); //#11275
            $1.j = $1.j + 1; //#11276
        } //#11276
        if ($1.j > 19) { //#11278
            break; //#11278
        } //#11278
        $1.digit = 0; //#11279
        if ($1.indx == 37) { //#11282
            $1.digit = 14; //#11281
        } //#11281
        if (($1.indx >= 11) && ($1.indx < 37)) { //#11285
            $1.digit = ($1.indx - 1) % 10; //#11284
        } //#11284
        if ($1.indx < 11) { //#11288
            $1.digit = $1.indx; //#11287
        } //#11287
        $puti($1.encstr, ($1.j * 3) + 2, $get($1.encs, $1.digit)); //#11289
        $1.checksum = $1.checksum + $1.digit; //#11290
        $put($1.digits, $1.j, $1.digit); //#11291
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), (($1.j * 3) + 2) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11292
        $1.j = $1.j + 1; //#11293
    } //#11293
    for (var _19 = $1.j, _18 = 20 - 1; _19 <= _18; _19 += 1) { //#11302
        $1.k = _19; //#11298
        $puti($1.encstr, ($1.k * 3) + 2, $get($1.encs, 14)); //#11299
        $1.checksum = $1.checksum + 14; //#11300
        $put($1.digits, $1.k, 14); //#11301
    } //#11301
    $1.checksum = 19 - ($1.checksum % 19); //#11305
    $puti($1.encstr, 2 + (20 * 3), $get($1.encs, $1.checksum)); //#11306
    $puti($1.encstr, 2 + (21 * 3), $get($1.encs, 20)); //#11309
    $1.checkdigit = " "; //#11310
    if ($1.includecheckintext) { //#11313
        $1.checkdigit = $geti($1.barchars, $1.checksum, 1); //#11312
    } //#11312
    $put($1.txt, $1.i + 1, $a([$1.checkdigit, ((20 * 3) + 2) * 3.312, $1.textyoffset, $1.textfont, $1.textsize])); //#11314
    $puti($1.encstr, ((20 + 1) * 3) + 2, $get($1.encs, 20)); //#11317
    $1.bbs = $a((21 * 3) + 4); //#11319
    $1.bhs = $a($1.bbs.length); //#11320
    for (var _1i = 0, _1h = $1.bbs.length - 1; _1i <= _1h; _1i += 1) { //#11344
        $1.i = _1i; //#11322
        $1.enc = $geti($1.encstr, $1.i, 1); //#11323
        $1.bunit = 0; //#11324
        $1.hunit = 0; //#11325
        if ($eq($1.enc, "0")) { //#11329
            $1.bunit = 3; //#11327
            $1.hunit = 2; //#11328
        } //#11328
        if ($eq($1.enc, "1")) { //#11333
            $1.bunit = 0; //#11331
            $1.hunit = 5; //#11332
        } //#11332
        if ($eq($1.enc, "2")) { //#11337
            $1.bunit = 3; //#11335
            $1.hunit = 5; //#11336
        } //#11336
        if ($eq($1.enc, "3")) { //#11341
            $1.bunit = 0; //#11339
            $1.hunit = 8; //#11340
        } //#11340
        $put($1.bbs, $1.i, ($1.bunit * $1.height) / 8); //#11342
        $put($1.bhs, $1.i, ($1.hunit * $1.height) / 8); //#11343
    } //#11343
    $k[$j++] = Infinity; //#11355
    var _1y = $1.bbs; //#11349
    var _1z = $1.bhs; //#11350
    $k[$j++] = Infinity; //#11351
    for (var _21 = 0, _22 = $1.bhs.length - 1; _21 < _22; _21++) { //#11351
        $k[$j++] = 1.44; //#11351
        $k[$j++] = 1.872; //#11351
    } //#11351
    $k[$j++] = 1.44; //#11351
    var _23 = $a(); //#11351
    $k[$j++] = 'ren'; //#11354
    $k[$j++] = bwipp_renlinear; //#11354
    $k[$j++] = 'bbs'; //#11354
    $k[$j++] = _1y; //#11354
    $k[$j++] = 'bhs'; //#11354
    $k[$j++] = _1z; //#11354
    $k[$j++] = 'sbs'; //#11354
    $k[$j++] = _23; //#11354
    if ($1.includetext) { //#11354
        $k[$j++] = 'txt'; //#11353
        $k[$j++] = $1.txt; //#11353
    } //#11353
    $k[$j++] = 'opt'; //#11355
    $k[$j++] = $1.options; //#11355
    var _27 = $d(); //#11355
    $k[$j++] = _27; //#11358
    if (!$1.dontdraw) { //#11358
        bwipp_renlinear(); //#11358
    } //#11358
}

function bwipp_msi() {
    var $1 = {}; //#11387
    $1.options = $k[--$j]; //#11389
    $1.barcode = $k[--$j]; //#11390
    $1.dontdraw = false; //#11392
    $1.includecheck = false; //#11393
    $1.includetext = false; //#11394
    $1.includecheckintext = false; //#11395
    $1.checktype = "mod10"; //#11396
    $1.badmod11 = false; //#11397
    $1.textfont = "OCR-B"; //#11398
    $1.textsize = 10; //#11399
    $1.textyoffset = -8; //#11400
    $1.height = 1; //#11401
    $forall($1.options, function() { //#11412
        var _3 = $k[--$j]; //#11412
        $1[$k[--$j]] = _3; //#11412
    }); //#11412
    $1.textfont = "" + $1.textfont; //#11414
    $1.textsize = +$1.textsize; //#11415
    $1.textyoffset = +$1.textyoffset; //#11416
    $1.height = +$1.height; //#11417
    $1.encs = $a(["12121212", "12121221", "12122112", "12122121", "12211212", "12211221", "12212112", "12212121", "21121212", "21121221", "21", "121"]); //#11424
    $1.barchars = "0123456789"; //#11427
    $1.barlen = $1.barcode.length; //#11429
    $1.txtlen = $1.barlen; //#11430
    $1.mod10 = function() {
        $1.code = $k[--$j]; //#11433
        $k[$j++] = 0; //#11434
        $k[$j++] = 0; //#11434
        $forall($1.code, function() { //#11434
            var _E = $k[--$j]; //#11434
            var _F = $k[--$j]; //#11434
            var _G = $k[--$j]; //#11434
            $k[$j++] = $f($f(_E - 48) + (_F * 10)); //#11434
            $k[$j++] = _G; //#11434
        }); //#11434
        $j--; //#11434
        var _H = $k[--$j]; //#11434
        $k[$j++] = _H * 2; //#11435
        $k[$j++] = 0; //#11435
        for (;;) { //#11435
            var _I = $k[--$j]; //#11435
            var _J = $k[--$j]; //#11435
            var _K = ~~(_J / 10); //#11435
            $k[$j++] = $f(_I + (_J % 10)); //#11435
            $k[$j++] = _K; //#11435
            if (_K == 0) { //#11435
                $j--; //#11435
                break; //#11435
            } //#11435
            var _L = $k[--$j]; //#11435
            var _M = $k[--$j]; //#11435
            $k[$j++] = _L; //#11435
            $k[$j++] = _M; //#11435
        } //#11435
        $k[$j++] = 0; //#11436
        $k[$j++] = 0; //#11436
        $forall($1.code, function() { //#11436
            var _O = $k[--$j]; //#11436
            var _P = $k[--$j]; //#11436
            var _Q = $k[--$j]; //#11436
            $k[$j++] = $f(_P + $f(_O - 48)); //#11436
            $k[$j++] = _Q; //#11436
        }); //#11436
        var _R = $k[--$j]; //#11436
        var _S = $k[--$j]; //#11436
        $k[$j++] = _R; //#11436
        $k[$j++] = _S; //#11436
        $j--; //#11436
        var _T = $k[--$j]; //#11436
        var _W = $s($1.code.length + 1); //#11438
        $puti(_W, 0, $1.code); //#11438
        $put(_W, $1.code.length, $f((($f(10 - ($f($k[--$j] + _T) % 10))) % 10) + 48)); //#11438
        $k[$j++] = _W; //#11438
    }; //#11439
    $1.mod11 = function() {
        $1.code = $k[--$j]; //#11442
        $k[$j++] = $1.code.length - 1; //#11443
        $forall($1.code, function() { //#11443
            var _c = $k[--$j]; //#11443
            var _d = $k[--$j]; //#11443
            $k[$j++] = $f(_c - 48); //#11443
            $k[$j++] = $f((_d % 6) + 2); //#11443
            $k[$j++] = $f(_d - 1); //#11443
        }); //#11443
        $j--; //#11443
        $k[$j++] = 0; //#11444
        for (var _f = 0, _g = $1.code.length; _f < _g; _f++) { //#11444
            var _h = $k[--$j]; //#11444
            var _i = $k[--$j]; //#11444
            var _j = $k[--$j]; //#11444
            $k[$j++] = $f(_h + (_j * _i)); //#11444
        } //#11444
        var _l = ($f(11 - ($k[--$j] % 11))) % 11; //#11446
        $k[$j++] = _l; //#11450
        if ((_l == 10) && $1.badmod11) { //#11449
            $j--; //#11447
            var _o = $s($1.code.length + 2); //#11447
            $puti(_o, 0, $1.code); //#11447
            $puti(_o, $1.code.length, "10"); //#11447
            $k[$j++] = _o; //#11447
        } else { //#11449
            var _s = $s($1.code.length + 1); //#11449
            $puti(_s, 0, $1.code); //#11449
            $put(_s, $1.code.length, $f($k[--$j] + 48)); //#11449
            $k[$j++] = _s; //#11449
        } //#11449
    }; //#11451
    $1.ncrmod11 = function() {
        $1.code = $k[--$j]; //#11454
        $k[$j++] = $1.code.length - 1; //#11455
        $forall($1.code, function() { //#11455
            var _z = $k[--$j]; //#11455
            var _10 = $k[--$j]; //#11455
            $k[$j++] = $f(_z - 48); //#11455
            $k[$j++] = $f((_10 % 8) + 2); //#11455
            $k[$j++] = $f(_10 - 1); //#11455
        }); //#11455
        $j--; //#11455
        $k[$j++] = 0; //#11456
        for (var _12 = 0, _13 = $1.code.length; _12 < _13; _12++) { //#11456
            var _14 = $k[--$j]; //#11456
            var _15 = $k[--$j]; //#11456
            var _16 = $k[--$j]; //#11456
            $k[$j++] = $f(_14 + (_16 * _15)); //#11456
        } //#11456
        var _18 = ($f(11 - ($k[--$j] % 11))) % 11; //#11458
        $k[$j++] = _18; //#11462
        if ((_18 == 10) && $1.badmod11) { //#11461
            $j--; //#11459
            var _1B = $s($1.code.length + 2); //#11459
            $puti(_1B, 0, $1.code); //#11459
            $puti(_1B, $1.code.length, "10"); //#11459
            $k[$j++] = _1B; //#11459
        } else { //#11461
            var _1F = $s($1.code.length + 1); //#11461
            $puti(_1F, 0, $1.code); //#11461
            $put(_1F, $1.code.length, $f($k[--$j] + 48)); //#11461
            $k[$j++] = _1F; //#11461
        } //#11461
    }; //#11463
    if ($1.includecheck) { //#11476
        if ($eq($1.checktype, "mod10")) { //#11467
            $k[$j++] = $1.barcode; //#11467
            $1.mod10(); //#11467
        } //#11467
        if ($eq($1.checktype, "mod1010")) { //#11468
            $k[$j++] = $1.barcode; //#11468
            $1.mod10(); //#11468
            $1.mod10(); //#11468
        } //#11468
        if ($eq($1.checktype, "mod11")) { //#11469
            $k[$j++] = $1.barcode; //#11469
            $1.mod11(); //#11469
        } //#11469
        if ($eq($1.checktype, "ncrmod11")) { //#11470
            $k[$j++] = $1.barcode; //#11470
            $1.ncrmod11(); //#11470
        } //#11470
        if ($eq($1.checktype, "mod1110")) { //#11471
            $k[$j++] = $1.barcode; //#11471
            $1.mod11(); //#11471
            $1.mod10(); //#11471
        } //#11471
        if ($eq($1.checktype, "ncrmod1110")) { //#11472
            $k[$j++] = $1.barcode; //#11472
            $1.ncrmod11(); //#11472
            $1.mod10(); //#11472
        } //#11472
        $1.barcode = $k[--$j]; //#11473
        $1.barlen = $1.barcode.length; //#11474
        if ($1.includecheckintext) { //#11475
            $1.txtlen = $1.barlen; //#11475
        } //#11475
    } //#11475
    $1.sbs = $s(($1.barlen * 8) + 5); //#11478
    $1.txt = $a($1.barlen); //#11479
    $puti($1.sbs, 0, $get($1.encs, 10)); //#11482
    for (var _1j = 0, _1i = $1.barlen - 1; _1j <= _1i; _1j += 1) { //#11494
        $1.i = _1j; //#11485
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#11487
        $j--; //#11488
        $1.indx = $k[--$j].length; //#11489
        $j -= 2; //#11490
        $1.enc = $get($1.encs, $1.indx); //#11491
        $puti($1.sbs, ($1.i * 8) + 2, $1.enc); //#11492
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 12) + 3, $1.textyoffset, $1.textfont, $1.textsize])); //#11493
    } //#11493
    $puti($1.sbs, ($1.barlen * 8) + 2, $get($1.encs, 11)); //#11497
    $k[$j++] = Infinity; //#11508
    $k[$j++] = Infinity; //#11502
    var _29 = $1.sbs; //#11502
    for (var _2A = 0, _2B = _29.length; _2A < _2B; _2A++) { //#11502
        $k[$j++] = $get(_29, _2A) - 48; //#11502
    } //#11502
    var _2D = $a(); //#11502
    $k[$j++] = Infinity; //#11503
    for (var _2F = 0, _2G = ~~(($1.sbs.length + 1) / 2); _2F < _2G; _2F++) { //#11503
        $k[$j++] = $1.height; //#11503
    } //#11503
    var _2I = $a(); //#11503
    $k[$j++] = Infinity; //#11504
    for (var _2K = 0, _2L = ~~(($1.sbs.length + 1) / 2); _2K < _2L; _2K++) { //#11504
        $k[$j++] = 0; //#11504
    } //#11504
    var _2M = $a(); //#11504
    $k[$j++] = 'ren'; //#11507
    $k[$j++] = bwipp_renlinear; //#11507
    $k[$j++] = 'sbs'; //#11507
    $k[$j++] = _2D; //#11507
    $k[$j++] = 'bhs'; //#11507
    $k[$j++] = _2I; //#11507
    $k[$j++] = 'bbs'; //#11507
    $k[$j++] = _2M; //#11507
    if ($1.includetext) { //#11507
        $k[$j++] = 'txt'; //#11506
        $k[$j++] = $geti($1.txt, 0, $1.txtlen); //#11506
    } //#11506
    $k[$j++] = 'opt'; //#11508
    $k[$j++] = $1.options; //#11508
    var _2S = $d(); //#11508
    $k[$j++] = _2S; //#11511
    if (!$1.dontdraw) { //#11511
        bwipp_renlinear(); //#11511
    } //#11511
}

function bwipp_plessey() {
    var $1 = {}; //#11540
    $1.options = $k[--$j]; //#11542
    $1.barcode = $k[--$j]; //#11543
    $1.dontdraw = false; //#11545
    $1.includetext = false; //#11546
    $1.validatecheck = false; //#11547
    $1.includecheckintext = false; //#11548
    $1.unidirectional = false; //#11549
    $1.textfont = "OCR-B"; //#11550
    $1.textsize = 10; //#11551
    $1.textyoffset = -8; //#11552
    $1.height = 1; //#11553
    $forall($1.options, function() { //#11564
        var _3 = $k[--$j]; //#11564
        $1[$k[--$j]] = _3; //#11564
    }); //#11564
    $1.textfont = "" + $1.textfont; //#11566
    $1.textsize = +$1.textsize; //#11567
    $1.textyoffset = +$1.textyoffset; //#11568
    $1.height = +$1.height; //#11569
    $1.barchars = "0123456789ABCDEF"; //#11572
    $1.charvals = new Map; //#11573
    for (var _9 = 0; _9 <= 15; _9 += 1) { //#11574
        $put($1.charvals, $geti($1.barchars, _9, 1), _9); //#11574
    } //#11574
    for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) { //#11581
        var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; //#11578
        if (!_J) { //#11580
            $k[$j++] = 'bwipp.plesseyBadCharacter'; //#11579
            $k[$j++] = "Plessey must contain only digits and letters A B C D E F"; //#11579
            bwipp_raiseerror(); //#11579
        } //#11579
    } //#11579
    $k[$j++] = 'barlen'; //#11583
    $k[$j++] = $1.barcode.length; //#11583
    if ($1.validatecheck) { //#11583
        var _M = $k[--$j]; //#11583
        $k[$j++] = $f(_M - 2); //#11583
    } //#11583
    var _N = $k[--$j]; //#11583
    $1[$k[--$j]] = _N; //#11583
    $1.checkbits = $a($f(($1.barlen * 4) + 8)); //#11586
    $puti($1.checkbits, $1.barlen * 4, $a([0, 0, 0, 0, 0, 0, 0, 0])); //#11587
    for (var _W = 0, _V = $f($1.barlen - 1); _W <= _V; _W += 1) { //#11597
        $1.i = _W; //#11589
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#11590
        $puti($1.checkbits, $1.i * 4, $a([$1.indx & 1, ($1.indx >>> 1) & 1, ($1.indx >>> 2) & 1, $1.indx >>> 3])); //#11596
    } //#11596
    $1.checksalt = $a([1, 1, 1, 1, 0, 1, 0, 0, 1]); //#11598
    for (var _m = 0, _l = $f(($1.barlen * 4) - 1); _m <= _l; _m += 1) { //#11607
        $1.i = _m; //#11600
        if ($get($1.checkbits, $1.i) == 1) { //#11606
            for (var _q = 0; _q <= 8; _q += 1) { //#11605
                $1.j = _q; //#11603
                $put($1.checkbits, $1.i + $1.j, $xo($get($1.checkbits, $1.i + $1.j), $get($1.checksalt, $1.j))); //#11604
            } //#11604
        } //#11604
    } //#11604
    $1.checkval = 0; //#11608
    for (var _11 = 0; _11 <= 7; _11 += 1) { //#11612
        $1.i = _11; //#11610
        $1.checkval = $f($1.checkval + ((~~Math.pow(2, $1.i)) * $get($1.checkbits, $f(($1.barlen * 4) + $1.i)))); //#11611
    } //#11611
    $1.checksum1 = $1.checkval & 15; //#11613
    $1.checksum2 = $1.checkval >>> 4; //#11614
    if ($1.validatecheck) { //#11621
        if (($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum1)) || ($get($1.barcode, $f($1.barlen + 1)) != $get($1.barchars, $1.checksum2))) { //#11619
            $k[$j++] = 'bwipp.plesseyBadCheckDigits'; //#11618
            $k[$j++] = "Incorrect Plessey check digits provided"; //#11618
            bwipp_raiseerror(); //#11618
        } //#11618
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#11620
    } //#11620
    $1.encs = $a(["14141414", "32141414", "14321414", "32321414", "14143214", "32143214", "14323214", "32323214", "14141432", "32141432", "14321432", "32321432", "14143232", "32143232", "14323232", "32323232", "32321432", "541412323", "323"]); //#11630
    var _1T = $1.unidirectional ? 27 : 33; //#11632
    $1.sbs = $s($f(($1.barlen * 8) + _1T)); //#11632
    $1.txt = $a($f($1.barlen + 2)); //#11633
    $puti($1.sbs, 0, $get($1.encs, 16)); //#11636
    for (var _1c = 0, _1b = $f($1.barlen - 1); _1c <= _1b; _1c += 1) { //#11643
        $1.i = _1c; //#11639
        $1.indx = $get($1.charvals, $geti($1.barcode, $1.i, 1)); //#11640
        $puti($1.sbs, ($1.i * 8) + 8, $get($1.encs, $1.indx)); //#11641
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), ($1.i * 20) + 20, $1.textyoffset, $1.textfont, $1.textsize])); //#11642
    } //#11642
    $puti($1.sbs, $f(($1.barlen * 8) + 8), $get($1.encs, $1.checksum1)); //#11646
    $puti($1.sbs, $f(($1.barlen * 8) + 16), $get($1.encs, $1.checksum2)); //#11647
    if ($1.includecheckintext) { //#11653
        $put($1.txt, $1.barlen, $a([$geti($1.barchars, $1.checksum1, 1), $f(($1.barlen * 20) + 20), $1.textyoffset, $1.textfont, $1.textsize])); //#11649
        $put($1.txt, $f($1.barlen + 1), $a([$geti($1.barchars, $1.checksum2, 1), $f(($f($1.barlen + 1) * 20) + 20), $1.textyoffset, $1.textfont, $1.textsize])); //#11650
    } else { //#11653
        $put($1.txt, $1.barlen, $a([" ", $f(($1.barlen * 20) + 20), $1.textyoffset, $1.textfont, $1.textsize])); //#11652
        $put($1.txt, $f($1.barlen + 1), $a([" ", $f(($f($1.barlen + 1) * 20) + 20), $1.textyoffset, $1.textfont, $1.textsize])); //#11653
    } //#11653
    var _2k = $1.unidirectional ? 18 : 17; //#11657
    $puti($1.sbs, $f(($1.barlen * 8) + 24), $get($1.encs, _2k)); //#11657
    $k[$j++] = Infinity; //#11668
    $k[$j++] = Infinity; //#11662
    var _2m = $1.sbs; //#11662
    for (var _2n = 0, _2o = _2m.length; _2n < _2o; _2n++) { //#11662
        $k[$j++] = $get(_2m, _2n) - 48; //#11662
    } //#11662
    var _2q = $a(); //#11662
    $k[$j++] = Infinity; //#11663
    for (var _2s = 0, _2t = ~~(($1.sbs.length + 1) / 2); _2s < _2t; _2s++) { //#11663
        $k[$j++] = $1.height; //#11663
    } //#11663
    var _2v = $a(); //#11663
    $k[$j++] = Infinity; //#11664
    for (var _2x = 0, _2y = ~~(($1.sbs.length + 1) / 2); _2x < _2y; _2x++) { //#11664
        $k[$j++] = 0; //#11664
    } //#11664
    var _2z = $a(); //#11664
    $k[$j++] = 'ren'; //#11667
    $k[$j++] = bwipp_renlinear; //#11667
    $k[$j++] = 'sbs'; //#11667
    $k[$j++] = _2q; //#11667
    $k[$j++] = 'bhs'; //#11667
    $k[$j++] = _2v; //#11667
    $k[$j++] = 'bbs'; //#11667
    $k[$j++] = _2z; //#11667
    if ($1.includetext) { //#11667
        $k[$j++] = 'txt'; //#11666
        $k[$j++] = $1.txt; //#11666
    } //#11666
    $k[$j++] = 'opt'; //#11668
    $k[$j++] = $1.options; //#11668
    var _33 = $d(); //#11668
    $k[$j++] = _33; //#11671
    if (!$1.dontdraw) { //#11671
        bwipp_renlinear(); //#11671
    } //#11671
}

function bwipp_telepen() {
    var $1 = {}; //#11701
    $1.options = $k[--$j]; //#11703
    $1.barcode = $k[--$j]; //#11704
    $1.numeric = false; //#11706
    $1.dontdraw = false; //#11707
    $1.includetext = false; //#11708
    $1.textfont = "OCR-B"; //#11709
    $1.textsize = 10; //#11710
    $1.textyoffset = -8; //#11711
    $1.height = 1; //#11712
    $1.parse = false; //#11713
    $forall($1.options, function() { //#11724
        var _3 = $k[--$j]; //#11724
        $1[$k[--$j]] = _3; //#11724
    }); //#11724
    $1.textfont = "" + $1.textfont; //#11726
    $1.textsize = +$1.textsize; //#11727
    $1.textyoffset = +$1.textyoffset; //#11728
    $1.height = +$1.height; //#11729
    var _A = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#11735
    $1.fncvals = _A; //#11736
    $k[$j++] = 'barcode'; //#11737
    $k[$j++] = $1.barcode; //#11737
    $k[$j++] = $1.fncvals; //#11737
    bwipp_parseinput(); //#11737
    var _D = $k[--$j]; //#11737
    $1[$k[--$j]] = _D; //#11737
    $1.barlen = $1.barcode.length; //#11738
    delete $1.options["parse"]; //#11739
    $1.encs = $a(["31313131", "1131313111", "33313111", "1111313131", "3111313111", "11333131", "13133131", "111111313111", "31333111", "1131113131", "33113131", "1111333111", "3111113131", "1113133111", "1311133111", "111111113131", "3131113111", "11313331", "333331", "111131113111", "31113331", "1133113111", "1313113111", "1111113331", "31131331", "113111113111", "3311113111", "1111131331", "311111113111", "1113111331", "1311111331", "11111111113111", "31313311", "1131311131", "33311131", "1111313311", "3111311131", "11333311", "13133311", "111111311131", "31331131", "1131113311", "33113311", "1111331131", "3111113311", "1113131131", "1311131131", "111111113311", "3131111131", "1131131311", "33131311", "111131111131", "3111131311", "1133111131", "1313111131", "111111131311", "3113111311", "113111111131", "3311111131", "111113111311", "311111111131", "111311111311", "131111111311", "11111111111131", "3131311111", "11313133", "333133", "111131311111", "31113133", "1133311111", "1313311111", "1111113133", "313333", "113111311111", "3311311111", "11113333", "311111311111", "11131333", "13111333", "11111111311111", "31311133", "1131331111", "33331111", "1111311133", "3111331111", "11331133", "13131133", "111111331111", "3113131111", "1131111133", "33111133", "111113131111", "3111111133", "111311131111", "131111131111", "111111111133", "31311313", "113131111111", "3331111111", "1111311313", "311131111111", "11331313", "13131313", "11111131111111", "3133111111", "1131111313", "33111313", "111133111111", "3111111313", "111313111111", "131113111111", "111111111313", "313111111111", "1131131113", "33131113", "11113111111111", "3111131113", "113311111111", "131311111111", "111111131113", "3113111113", "11311111111111", "331111111111", "111113111113", "31111111111111", "111311111113", "131111111113", "1111111111111111"]); //#11775
    $1.barlen = $1.barcode.length; //#11777
    $1.sbs = $s(($1.barlen * 16) + 48); //#11778
    $1.txt = $a($1.barlen); //#11779
    $1.enc = $get($1.encs, 95); //#11782
    $puti($1.sbs, 0, $1.enc); //#11783
    $1.l = $1.enc.length; //#11784
    $1.checksum = 0; //#11786
    $1.i = 0; //#11787
    $1.j = 0; //#11787
    for (;;) { //#11819
        if ($1.i == $1.barlen) { //#11789
            break; //#11789
        } //#11789
        if ($1.numeric) { //#11812
            if ($get($1.barcode, $1.i) > 16) { //#11803
                $1.np = $geti($1.barcode, $1.i, 2); //#11792
                if ($eq($geti($1.np, 1, 1), "X")) { //#11796
                    $1.indx = $cvi($geti($1.np, 0, 1)) + 17; //#11794
                } else { //#11796
                    $1.indx = $cvi($1.np) + 27; //#11796
                } //#11796
                $put($1.txt, $1.j, $a([$1.np, ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); //#11798
                $1.i = $1.i + 2; //#11799
            } else { //#11803
                $1.indx = $get($1.barcode, $1.i); //#11801
                $put($1.txt, $1.j, $a([" ", ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); //#11802
                $1.i = $1.i + 1; //#11803
            } //#11803
        } else { //#11812
            $1.indx = $get($1.barcode, $1.i); //#11806
            if (($1.indx >= 32) && ($1.indx <= 126)) { //#11810
                $put($1.txt, $1.j, $a([$geti($1.barcode, $1.i, 1), ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); //#11808
            } else { //#11810
                $put($1.txt, $1.j, $a([" ", ($1.j * 16) + 16, $1.textyoffset, $1.textfont, $1.textsize])); //#11810
            } //#11810
            $1.i = $1.i + 1; //#11812
        } //#11812
        $1.checksum = $f($1.checksum + $1.indx); //#11814
        $1.enc = $get($1.encs, $1.indx); //#11815
        $puti($1.sbs, $1.l, $1.enc); //#11816
        $1.l = $1.l + $1.enc.length; //#11817
        $1.j = $1.j + 1; //#11818
    } //#11818
    $1.checksum = ($f(127 - ($1.checksum % 127))) % 127; //#11822
    $1.enc = $get($1.encs, $1.checksum); //#11823
    $puti($1.sbs, $1.l, $1.enc); //#11824
    $1.l = $1.l + $1.enc.length; //#11825
    $1.enc = $get($1.encs, 122); //#11828
    $puti($1.sbs, $1.l, $1.enc); //#11829
    $1.l = $1.l + $1.enc.length; //#11830
    $1.sbs = $geti($1.sbs, 0, $1.l); //#11833
    $1.txt = $geti($1.txt, 0, $1.j); //#11834
    $k[$j++] = Infinity; //#11845
    $k[$j++] = Infinity; //#11839
    var _1u = $1.sbs; //#11839
    for (var _1v = 0, _1w = _1u.length; _1v < _1w; _1v++) { //#11839
        $k[$j++] = $f($get(_1u, _1v) - 48); //#11839
    } //#11839
    var _1y = $a(); //#11839
    $k[$j++] = Infinity; //#11840
    for (var _20 = 0, _21 = ~~(($1.sbs.length + 1) / 2); _20 < _21; _20++) { //#11840
        $k[$j++] = $1.height; //#11840
    } //#11840
    var _23 = $a(); //#11840
    $k[$j++] = Infinity; //#11841
    for (var _25 = 0, _26 = ~~(($1.sbs.length + 1) / 2); _25 < _26; _25++) { //#11841
        $k[$j++] = 0; //#11841
    } //#11841
    var _27 = $a(); //#11841
    $k[$j++] = 'ren'; //#11844
    $k[$j++] = bwipp_renlinear; //#11844
    $k[$j++] = 'sbs'; //#11844
    $k[$j++] = _1y; //#11844
    $k[$j++] = 'bhs'; //#11844
    $k[$j++] = _23; //#11844
    $k[$j++] = 'bbs'; //#11844
    $k[$j++] = _27; //#11844
    if ($1.includetext) { //#11844
        $k[$j++] = 'txt'; //#11843
        $k[$j++] = $1.txt; //#11843
    } //#11843
    $k[$j++] = 'opt'; //#11845
    $k[$j++] = $1.options; //#11845
    var _2B = $d(); //#11845
    $k[$j++] = _2B; //#11848
    if (!$1.dontdraw) { //#11848
        bwipp_renlinear(); //#11848
    } //#11848
}

function bwipp_telepennumeric() {
    var $1 = {}; //#11878
    $1.options = $k[--$j]; //#11880
    $1.barcode = $k[--$j]; //#11881
    $1.dontdraw = false; //#11883
    $1.includetext = false; //#11884
    $1.textfont = "OCR-B"; //#11885
    $1.textsize = 10; //#11886
    $1.textxoffset = 0; //#11887
    $1.textyoffset = -8; //#11888
    $1.height = 1; //#11889
    $forall($1.options, function() { //#11900
        var _3 = $k[--$j]; //#11900
        $1[$k[--$j]] = _3; //#11900
    }); //#11900
    $1.textfont = "" + $1.textfont; //#11902
    $1.textsize = +$1.textsize; //#11903
    $1.textxoffset = +$1.textxoffset; //#11904
    $1.textyoffset = +$1.textyoffset; //#11905
    $1.height = +$1.height; //#11906
    $put($1.options, "dontdraw", true); //#11909
    $put($1.options, "numeric", true); //#11910
    $k[$j++] = 'args'; //#11912
    $k[$j++] = $1.barcode; //#11912
    $k[$j++] = $1.options; //#11912
    bwipp_telepen(); //#11912
    var _E = $k[--$j]; //#11912
    $1[$k[--$j]] = _E; //#11912
    $put($1.args, "opt", $1.options); //#11914
    $k[$j++] = $1.args; //#11917
    if (!$1.dontdraw) { //#11917
        bwipp_renlinear(); //#11917
    } //#11917
}

function bwipp_posicode() {
    var $1 = {}; //#11947
    $1.options = $k[--$j]; //#11949
    $1.barcode = $k[--$j]; //#11950
    $1.dontdraw = false; //#11952
    $1.includetext = false; //#11953
    $1.textfont = "OCR-B"; //#11954
    $1.textsize = 10; //#11955
    $1.textxoffset = 0; //#11956
    $1.textyoffset = -8; //#11957
    $1.height = 1; //#11958
    $1.encoding = "auto"; //#11959
    $1.version = "a"; //#11960
    $1.checkoffset = 0; //#11961
    $1.raw = false; //#11962
    $1.parse = false; //#11963
    $1.parsefnc = false; //#11964
    $forall($1.options, function() { //#11975
        var _3 = $k[--$j]; //#11975
        $1[$k[--$j]] = _3; //#11975
    }); //#11975
    $1.textfont = "" + $1.textfont; //#11977
    $1.textsize = +$1.textsize; //#11978
    $1.textxoffset = +$1.textxoffset; //#11979
    $1.textyoffset = +$1.textyoffset; //#11980
    $1.encoding = "" + $1.encoding; //#11981
    $1.version = "" + $1.version; //#11982
    $1.checkoffset = ~~$1.checkoffset; //#11983
    $1.height = +$1.height; //#11984
    $1.la0 = -1; //#11987
    $1.la1 = -2; //#11987
    $1.la2 = -3; //#11987
    $1.sf0 = -4; //#11988
    $1.sf1 = -5; //#11988
    $1.sf2 = -6; //#11988
    $1.fn1 = -7; //#11989
    $1.fn2 = -8; //#11989
    $1.fn3 = -9; //#11989
    $1.fn4 = -10; //#11989
    var _1l = new Map([
        ["normal", $a([$a(["0", "^", "'"]), $a(["1", ";", 27]), $a(["2", "<", 28]), $a(["3", "=", 29]), $a(["4", ">", 30]), $a(["5", "?", 31]), $a(["6", "@", "!"]), $a(["7", "[", "\""]), $a(["8", 92, "#"]), $a(["9", "]", "&"]), $a(["A", "a", 1]), $a(["B", "b", 2]), $a(["C", "c", 3]), $a(["D", "d", 4]), $a(["E", "e", 5]), $a(["F", "f", 6]), $a(["G", "g", 7]), $a(["H", "h", 8]), $a(["I", "i", 9]), $a(["J", "j", 10]), $a(["K", "k", 11]), $a(["L", "l", 12]), $a(["M", "m", 13]), $a(["N", "n", 14]), $a(["O", "o", 15]), $a(["P", "p", 16]), $a(["Q", "q", 17]), $a(["R", "r", 18]), $a(["S", "s", 19]), $a(["T", "t", 20]), $a(["U", "u", 21]), $a(["V", "v", 22]), $a(["W", "w", 23]), $a(["X", "x", 24]), $a(["Y", "y", 25]), $a(["Z", "z", 26]), $a(["-", "_", 40]), $a([".", "`", 41]), $a([" ", 127, 0]), $a(["$", "{", "*"]), $a(["/", "|", ","]), $a(["+", "}", ":"]), $a(["%", "~", $1.fn1]), $a([$1.la1, $1.la0, $1.fn2]), $a([$1.sf1, $1.sf0, $1.fn3]), $a([$1.sf2, $1.sf2, $1.fn4])])],
        ["limited", $a([$a(["0", -98, -98]), $a(["1", -98, -98]), $a(["2", -98, -98]), $a(["3", -98, -98]), $a(["4", -98, -98]), $a(["5", -98, -98]), $a(["6", -98, -98]), $a(["7", -98, -98]), $a(["8", -98, -98]), $a(["9", -98, -98]), $a(["A", -98, -98]), $a(["B", -98, -98]), $a(["C", -98, -98]), $a(["D", -98, -98]), $a(["E", -98, -98]), $a(["F", -98, -98]), $a(["G", -98, -98]), $a(["H", -98, -98]), $a(["I", -98, -98]), $a(["J", -98, -98]), $a(["K", -98, -98]), $a(["L", -98, -98]), $a(["M", -98, -98]), $a(["N", -98, -98]), $a(["O", -98, -98]), $a(["P", -98, -98]), $a(["Q", -98, -98]), $a(["R", -98, -98]), $a(["S", -98, -98]), $a(["T", -98, -98]), $a(["U", -98, -98]), $a(["V", -98, -98]), $a(["W", -98, -98]), $a(["X", -98, -98]), $a(["Y", -98, -98]), $a(["Z", -98, -98]), $a(["-", -98, -98]), $a([".", -98, -98])])]
    ]); //#12027
    $k[$j++] = _1l; //#12030
    if ($eq($1.version, "a") || $eq($1.version, "b")) { //#12030
        $k[$j++] = 'normal'; //#12030
    } else { //#12030
        $k[$j++] = 'limited'; //#12030
    } //#12030
    var _1o = $k[--$j]; //#12030
    $1.charmaps = $get($k[--$j], _1o); //#12031
    var _1r = $1.charmaps; //#12035
    var _1s = $1.charmaps; //#12035
    var _1t = $1.charmaps; //#12035
    $1.charvals = $a([new Map, new Map, new Map]); //#12036
    for (var _1x = 0, _1w = $1.charmaps.length - 1; _1x <= _1w; _1x += 1) { //#12045
        $1.i = _1x; //#12038
        $1.encs = $get($1.charmaps, $1.i); //#12039
        for (var _21 = 0; _21 <= 2; _21 += 1) { //#12044
            $1.j = _21; //#12041
            var _24 = $get($1.encs, $1.j); //#12042
            $k[$j++] = _24; //#12042
            if ($eq($type(_24), 'stringtype')) { //#12042
                var _27 = $get($k[--$j], 0); //#12042
                $k[$j++] = _27; //#12042
            } //#12042
            $put($get($1.charvals, $1.j), $k[--$j], $1.i); //#12043
        } //#12043
    } //#12043
    $1.set0 = $get($1.charvals, 0); //#12046
    $1.set1 = $get($1.charvals, 1); //#12047
    $1.set2 = $get($1.charvals, 2); //#12048
    if ($1.raw) { //#12050
        $1.encoding = "raw"; //#12050
    } //#12050
    if ($eq($1.encoding, "raw")) { //#12064
        $1.cws = $a($1.barcode.length); //#12053
        $1.i = 0; //#12054
        $1.j = 0; //#12054
        for (;;) { //#12061
            if ($1.i == $1.barcode.length) { //#12056
                break; //#12056
            } //#12056
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#12057
            $put($1.cws, $1.j, $1.cw); //#12058
            $1.i = $1.i + 4; //#12059
            $1.j = $1.j + 1; //#12060
        } //#12060
        $1.cws = $geti($1.cws, 0, $1.j); //#12062
        $1.text = ""; //#12063
    } //#12063
    if ($eq($1.encoding, "auto")) { //#12179
        var _2g = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["FNC1", $1.fn1],
            ["FNC2", $1.fn2],
            ["FNC3", $1.fn3]
        ]); //#12074
        $1.fncvals = _2g; //#12076
        $k[$j++] = 'msg'; //#12077
        $k[$j++] = $1.barcode; //#12077
        $k[$j++] = $1.fncvals; //#12077
        bwipp_parseinput(); //#12077
        var _2j = $k[--$j]; //#12077
        $1[$k[--$j]] = _2j; //#12077
        $1.msglen = $1.msg.length; //#12078
        $1.text = $s($1.msglen); //#12080
        for (var _2q = 0, _2p = $1.msglen - 1; _2q <= _2p; _2q += 1) { //#12084
            $1.i = _2q; //#12082
            var _2v = $get($1.msg, $1.i); //#12083
            $k[$j++] = $1.text; //#12083
            $k[$j++] = $1.i; //#12083
            $k[$j++] = _2v; //#12083
            if (_2v < 0) { //#12083
                $j--; //#12083
                $k[$j++] = 32; //#12083
            } //#12083
            var _2w = $k[--$j]; //#12083
            var _2x = $k[--$j]; //#12083
            $put($k[--$j], _2x, _2w); //#12083
        } //#12083
        $k[$j++] = Infinity; //#12087
        for (var _30 = 0, _31 = $1.msglen; _30 < _31; _30++) { //#12087
            $k[$j++] = 0; //#12087
        } //#12087
        $k[$j++] = 0; //#12087
        $1.numSA = $a(); //#12087
        $k[$j++] = Infinity; //#12088
        for (var _34 = 0, _35 = $1.msglen; _34 < _35; _34++) { //#12088
            $k[$j++] = 0; //#12088
        } //#12088
        $k[$j++] = 0; //#12088
        $1.numEA = $a(); //#12088
        for (var _38 = $1.msglen - 1; _38 >= 0; _38 -= 1) { //#12098
            $1.i = _38; //#12090
            if ($get($1.msg, $1.i) >= 0) { //#12097
                if ($get($1.msg, $1.i) >= 128) { //#12095
                    $put($1.numEA, $1.i, $f($get($1.numEA, $1.i + 1) + 1)); //#12093
                } else { //#12095
                    $put($1.numSA, $1.i, $f($get($1.numSA, $1.i + 1) + 1)); //#12095
                } //#12095
            } //#12095
        } //#12095
        $1.ea = false; //#12101
        $1.msgtmp = $a([]); //#12101
        for (var _3S = 0, _3R = $1.msglen - 1; _3S <= _3R; _3S += 1) { //#12116
            $1.i = _3S; //#12103
            $1.c = $get($1.msg, $1.i); //#12104
            if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //#12114
                if ($1.ea) { //#12106
                    $k[$j++] = $1.numSA; //#12106
                } else { //#12106
                    $k[$j++] = $1.numEA; //#12106
                } //#12106
                var _3e = $get($k[--$j], $1.i); //#12106
                var _3h = ($f(_3e + $1.i) == $1.msglen) ? 3 : 5; //#12107
                if (_3e < _3h) { //#12112
                    $k[$j++] = Infinity; //#12109
                    $aload($1.msgtmp); //#12109
                    $k[$j++] = $1.fn4; //#12109
                    $1.msgtmp = $a(); //#12109
                } else { //#12112
                    $k[$j++] = Infinity; //#12111
                    $aload($1.msgtmp); //#12111
                    $k[$j++] = $1.fn4; //#12111
                    $k[$j++] = $1.fn4; //#12111
                    $1.msgtmp = $a(); //#12111
                    $1.ea = !$1.ea; //#12112
                } //#12112
            } //#12112
            $k[$j++] = Infinity; //#12115
            $aload($1.msgtmp); //#12115
            if ($1.c >= 0) { //#12115
                $k[$j++] = $1.c & 127; //#12115
            } else { //#12115
                $k[$j++] = $1.c; //#12115
            } //#12115
            $1.msgtmp = $a(); //#12115
        } //#12115
        $1.msg = $1.msgtmp; //#12117
        $1.msglen = $1.msg.length; //#12118
        $1.enc = function() {
            var _3x = $k[--$j]; //#12122
            $put($1.cws, $1.j, $get(_3x, $k[--$j])); //#12122
            $1.j = $1.j + 1; //#12123
        }; //#12124
        $1.cws = $a($1.msglen * 2); //#12126
        $1.i = 0; //#12127
        $1.j = 0; //#12127
        $1.cset = "set0"; //#12127
        for (;;) { //#12177
            if ($1.i == $1.msglen) { //#12129
                break; //#12129
            } //#12129
            for (;;) { //#12175
                $1.char1 = $get($1.msg, $1.i); //#12134
                $k[$j++] = 'char2'; //#12135
                if (($1.i + 1) < $1.msglen) { //#12135
                    $k[$j++] = $get($1.msg, $1.i + 1); //#12135
                } else { //#12135
                    $k[$j++] = -99; //#12135
                } //#12135
                var _4F = $k[--$j]; //#12135
                $1[$k[--$j]] = _4F; //#12135
                var _4K = $get($1[$1.cset], $1.char1) !== undefined; //#12138
                if (_4K) { //#12142
                    $k[$j++] = $1.char1; //#12139
                    $k[$j++] = $1[$1.cset]; //#12139
                    $1.enc(); //#12139
                    $1.i = $1.i + 1; //#12140
                    break; //#12141
                } //#12141
                var _4R = $get($1.set2, $1.char1) !== undefined; //#12145
                if (_4R) { //#12150
                    $k[$j++] = $1.sf2; //#12146
                    $k[$j++] = $1[$1.cset]; //#12146
                    $1.enc(); //#12146
                    $k[$j++] = $1.char1; //#12147
                    $k[$j++] = $1.set2; //#12147
                    $1.enc(); //#12147
                    $1.i = $1.i + 1; //#12148
                    break; //#12149
                } //#12149
                var _4b = $get($1[$1.cset], $1.char2) !== undefined; //#12153
                if (!_4b) { //#12171
                    if ($eq($1.cset, "set0")) { //#12159
                        $k[$j++] = $1.la1; //#12155
                        $k[$j++] = $1[$1.cset]; //#12155
                        $1.enc(); //#12155
                        $1.cset = "set1"; //#12156
                    } else { //#12159
                        $k[$j++] = $1.la0; //#12158
                        $k[$j++] = $1[$1.cset]; //#12158
                        $1.enc(); //#12158
                        $1.cset = "set0"; //#12159
                    } //#12159
                    break; //#12161
                } else { //#12171
                    if ($eq($1.cset, "set0")) { //#12168
                        $k[$j++] = $1.sf1; //#12164
                        $k[$j++] = $1[$1.cset]; //#12164
                        $1.enc(); //#12164
                        $k[$j++] = $1.char1; //#12165
                        $k[$j++] = $1.set1; //#12165
                        $1.enc(); //#12165
                    } else { //#12168
                        $k[$j++] = $1.sf0; //#12167
                        $k[$j++] = $1[$1.cset]; //#12167
                        $1.enc(); //#12167
                        $k[$j++] = $1.char1; //#12168
                        $k[$j++] = $1.set0; //#12168
                        $1.enc(); //#12168
                    } //#12168
                    $1.i = $1.i + 1; //#12170
                    break; //#12171
                } //#12171
                break; //#12174
            } //#12174
        } //#12174
        $1.cws = $geti($1.cws, 0, $1.j); //#12178
    } //#12178
    var _52 = new Map([
        ["a", $a(["141112", "131212", "121312", "111412", "131113", "121213", "111313", "121114", "111214", "111115", "181111", "171211", "161311", "151411", "141511", "131611", "121711", "111811", "171112", "161212", "151312", "141412", "131512", "121612", "111712", "161113", "151213", "141313", "131413", "121513", "111613", "151114", "141214", "131314", "121414", "111514", "141115", "131215", "121315", "111415", "131116", "121216", "111316", "121117", "111217", "111118", "1<111112", "111111111;1"])],
        ["b", $a(["151213", "141313", "131413", "121513", "141214", "131314", "121414", "131215", "121315", "121216", "191212", "181312", "171412", "161512", "151612", "141712", "131812", "121912", "181213", "171313", "161413", "151513", "141613", "131713", "121813", "171214", "161314", "151414", "141514", "131614", "121714", "161215", "151315", "141415", "131515", "121615", "151216", "141316", "131416", "121516", "141217", "131317", "121417", "131218", "121318", "121219", "1<121312", "121212121<1"])],
        ["limiteda", $a(["111411", "111312", "111213", "111114", "121311", "121212", "121113", "141111", "131211", "131112", "171111", "161211", "151311", "141411", "131511", "121611", "111711", "161112", "151212", "141312", "131412", "121512", "111612", "151113", "141213", "131313", "121413", "111513", "141114", "131214", "121314", "111414", "131115", "121215", "111315", "121116", "111216", "111117", "151111", "1"])],
        ["limitedb", $a(["121512", "121413", "121314", "121215", "131412", "131313", "131214", "151212", "141312", "141213", "181212", "171312", "161412", "151512", "141612", "131712", "121812", "171213", "161313", "151413", "141513", "131613", "121713", "161214", "151314", "141414", "131514", "121614", "151215", "141315", "131415", "121515", "141216", "131316", "121416", "131217", "121317", "121218", "141212", "1"])]
    ]); //#12225
    $1.encs = $get(_52, $1.version); //#12228
    $1.c2w = $a([$a([495, 330, 210, 126, 70, 35, 15, 5]), $a([165, 120, 84, 56, 35, 20, 10, 4]), $a([45, 36, 28, 21, 15, 10, 6, 3]), $a([9, 8, 7, 6, 5, 4, 3, 2]), $a([1, 1, 1, 1, 1, 1, 1, 1])]); //#12236
    $1.v = 0; //#12237
    var _5B = $1.cws; //#12238
    for (var _5C = 0, _5D = _5B.length; _5C < _5D; _5C++) { //#12247
        $1.cw = $get(_5B, _5C); //#12239
        for (var _5F = 0, _5G = 6; _5F < _5G; _5F++) { //#12246
            if ((($1.cw ^ $1.v) & 1) != 0) { //#12243
                $1.v = $1.v ^ 7682; //#12242
            } //#12242
            $1.v = $1.v >>> 1; //#12244
            $1.cw = $1.cw >>> 1; //#12245
        } //#12245
    } //#12245
    $1.v = $1.v + $1.checkoffset; //#12248
    if ($eq($1.version, "limiteda") || $eq($1.version, "limitedb")) { //#12256
        $1.v = $1.v & 1023; //#12251
        if (($1.v > 824) && ($1.v < 853)) { //#12254
            $1.v = $1.v + 292; //#12253
        } //#12253
    } else { //#12256
        $1.v = ($1.v & 1023) + 45; //#12256
    } //#12256
    $1.d = $a([2, 2, 2, 2, 2, 2]); //#12259
    $1.r = 0; //#12260
    $1.c = 0; //#12260
    $1.w = 0; //#12260
    $1.sum = 0; //#12260
    for (;;) { //#12279
        if ($1.sum == $1.v) { //#12262
            break; //#12262
        } //#12262
        $1.t = $f($1.sum + $get($get($1.c2w, $1.r), $1.c)); //#12263
        if ($1.t == $1.v) { //#12268
            $1.w = $1.w + 1; //#12265
            $put($1.d, $1.r, $1.w + 2); //#12266
            $1.sum = $1.t; //#12267
        } //#12267
        if ($1.t > $1.v) { //#12273
            $put($1.d, $1.r, $1.w + 2); //#12270
            $1.r = $1.r + 1; //#12271
            $1.w = 0; //#12272
        } //#12272
        if ($1.t < $1.v) { //#12278
            $1.c = $1.c + 1; //#12275
            $1.w = $1.w + 1; //#12276
            $1.sum = $1.t; //#12277
        } //#12277
    } //#12277
    $k[$j++] = 20; //#12280
    for (var _5w = 0; _5w <= 4; _5w += 1) { //#12280
        var _5z = $k[--$j]; //#12280
        $k[$j++] = $f(_5z - $get($1.d, _5w)); //#12280
    } //#12280
    $put($1.d, 5, $k[--$j]); //#12281
    if ($eq($1.version, "b") || $eq($1.version, "limitedb")) { //#12284
        $k[$j++] = Infinity; //#12283
        var _64 = $1.d; //#12283
        for (var _65 = 0, _66 = _64.length; _65 < _66; _65++) { //#12283
            $k[$j++] = $f($get(_64, _65) + 1); //#12283
        } //#12283
        $1.d = $a(); //#12283
    } //#12283
    $1.cbs = $strcpy($s(12), "111111111111"); //#12285
    for (var _6B = 5; _6B >= 0; _6B -= 1) { //#12289
        $1.i = _6B; //#12287
        $put($1.cbs, ((5 - $1.i) * 2) + 1, $f($get($1.d, $1.i) + 47)); //#12288
    } //#12288
    $1.sbs = $s(($1.cws.length * 6) + 31); //#12292
    var _6L = $get($1.encs, $1.encs.length - 2); //#12293
    $puti($1.sbs, 0, _6L); //#12294
    $1.j = _6L.length; //#12295
    for (var _6P = 0, _6O = $1.cws.length - 1; _6P <= _6O; _6P += 1) { //#12300
        $1.i = _6P; //#12297
        $puti($1.sbs, $1.j, $get($1.encs, $get($1.cws, $1.i))); //#12298
        $1.j = $1.j + 6; //#12299
    } //#12299
    $puti($1.sbs, $1.j, $1.cbs); //#12301
    $1.j = $1.j + 12; //#12302
    var _6e = $get($1.encs, $1.encs.length - 1); //#12303
    $puti($1.sbs, $1.j, _6e); //#12304
    $1.j = _6e.length + $1.j; //#12305
    $1.sbs = $geti($1.sbs, 0, $1.j); //#12306
    $k[$j++] = Infinity; //#12316
    $k[$j++] = Infinity; //#12311
    var _6l = $1.sbs; //#12311
    for (var _6m = 0, _6n = _6l.length; _6m < _6n; _6m++) { //#12311
        $k[$j++] = $f($get(_6l, _6m) - 48); //#12311
    } //#12311
    var _6p = $a(); //#12311
    $k[$j++] = Infinity; //#12312
    for (var _6r = 0, _6s = ~~(($1.sbs.length + 1) / 2); _6r < _6s; _6r++) { //#12312
        $k[$j++] = $1.height; //#12312
    } //#12312
    var _6u = $a(); //#12312
    $k[$j++] = Infinity; //#12313
    for (var _6w = 0, _6x = ~~(($1.sbs.length + 1) / 2); _6w < _6x; _6w++) { //#12313
        $k[$j++] = 0; //#12313
    } //#12313
    var _6y = $a(); //#12313
    $k[$j++] = 'ren'; //#12316
    $k[$j++] = bwipp_renlinear; //#12316
    $k[$j++] = 'sbs'; //#12316
    $k[$j++] = _6p; //#12316
    $k[$j++] = 'bhs'; //#12316
    $k[$j++] = _6u; //#12316
    $k[$j++] = 'bbs'; //#12316
    $k[$j++] = _6y; //#12316
    $k[$j++] = 'txt'; //#12316
    $k[$j++] = $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])]); //#12316
    $k[$j++] = 'textxalign'; //#12316
    $k[$j++] = "center"; //#12316
    $k[$j++] = 'opt'; //#12316
    $k[$j++] = $1.options; //#12316
    var _77 = $d(); //#12316
    $k[$j++] = _77; //#12319
    if (!$1.dontdraw) { //#12319
        bwipp_renlinear(); //#12319
    } //#12319
}

function bwipp_codablockf() {
    var $1 = {}; //#12349
    $1.options = $k[--$j]; //#12351
    $1.barcode = $k[--$j]; //#12352
    $1.dontdraw = false; //#12354
    $1.rows = -1; //#12355
    $1.columns = 8; //#12356
    $1.rowheight = 10; //#12357
    $1.sepheight = 1; //#12358
    $1.parse = false; //#12359
    $1.parsefnc = false; //#12360
    $forall($1.options, function() { //#12371
        var _3 = $k[--$j]; //#12371
        $1[$k[--$j]] = _3; //#12371
    }); //#12371
    $1.rows = ~~$1.rows; //#12373
    $1.columns = ~~$1.columns; //#12374
    $1.rowheight = ~~$1.rowheight; //#12375
    $1.sepheight = ~~$1.sepheight; //#12376
    $k[$j++] = 'c'; //#12378
    if (($1.columns >= 4) && ($1.columns <= 62)) { //#12378
        $k[$j++] = $1.columns; //#12378
    } else { //#12378
        $k[$j++] = 8; //#12378
    } //#12378
    var _C = $k[--$j]; //#12378
    $1[$k[--$j]] = _C; //#12378
    $k[$j++] = 'rows'; //#12379
    if (($1.rows >= 2) && ($1.rows <= 44)) { //#12379
        $k[$j++] = $1.rows; //#12379
    } else { //#12379
        $k[$j++] = -1; //#12379
    } //#12379
    var _H = $k[--$j]; //#12379
    $1[$k[--$j]] = _H; //#12379
    $1.swa = -1; //#12382
    $1.swb = -2; //#12382
    $1.swc = -3; //#12382
    $1.sft = -4; //#12382
    $1.fn1 = -5; //#12383
    $1.fn2 = -6; //#12383
    $1.fn3 = -7; //#12383
    $1.fn4 = -8; //#12383
    $1.sta = -9; //#12384
    $1.stp = -10; //#12384
    var _N = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["FNC1", $1.fn1],
        ["FNC3", $1.fn3]
    ]); //#12392
    $1.fncvals = _N; //#12394
    $k[$j++] = 'msg'; //#12395
    $k[$j++] = $1.barcode; //#12395
    $k[$j++] = $1.fncvals; //#12395
    bwipp_parseinput(); //#12395
    var _Q = $k[--$j]; //#12395
    $1[$k[--$j]] = _Q; //#12395
    $1.msglen = $1.msg.length; //#12396
    $1.msgtmp = $a([]); //#12399
    var _U = $1.msg; //#12400
    for (var _V = 0, _W = _U.length; _V < _W; _V++) { //#12403
        $1.char = $get(_U, _V); //#12401
        $k[$j++] = Infinity; //#12402
        $aload($1.msgtmp); //#12402
        if ($1.char < 128) { //#12402
            $k[$j++] = $1.char; //#12402
        } else { //#12402
            $k[$j++] = $1.fn4; //#12402
            $k[$j++] = $1.char & 127; //#12402
        } //#12402
        $1.msgtmp = $a(); //#12402
    } //#12402
    $1.msg = $1.msgtmp; //#12404
    $1.msglen = $1.msg.length; //#12405
    $1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sft, $1.sft, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.sta, $1.sta, $1.sta]), $a([$1.stp, $1.stp, $1.stp])]); //#12445
    $1.charvals = $a([new Map, new Map, new Map]); //#12448
    for (var _2o = 0, _2n = $1.charmaps.length - 1; _2o <= _2n; _2o += 1) { //#12457
        $1.i = _2o; //#12450
        $1.encs = $get($1.charmaps, $1.i); //#12451
        for (var _2s = 0; _2s <= 2; _2s += 1) { //#12456
            $1.j = _2s; //#12453
            var _2v = $get($1.encs, $1.j); //#12454
            $k[$j++] = _2v; //#12454
            if ($eq($type(_2v), 'stringtype')) { //#12454
                var _2y = $get($k[--$j], 0); //#12454
                $k[$j++] = _2y; //#12454
            } //#12454
            $put($get($1.charvals, $1.j), $k[--$j], $1.i); //#12455
        } //#12455
    } //#12455
    $1.seta = $get($1.charvals, 0); //#12458
    $1.setb = $get($1.charvals, 1); //#12459
    $1.setc = $get($1.charvals, 2); //#12460
    $1.numsscr = function() {
        $1.n = 0; //#12464
        $1.s = 0; //#12464
        $1.p = $k[--$j]; //#12465
        for (;;) { //#12476
            if ($1.p >= $1.msglen) { //#12466
                break; //#12466
            } //#12466
            var _3F = $get($1.msg, $1.p); //#12467
            var _3H = $get($1.setc, _3F) !== undefined; //#12468
            $k[$j++] = _3F; //#12468
            if (!_3H) { //#12468
                $j--; //#12468
                break; //#12468
            } //#12468
            if ($k[--$j] == $1.fn1) { //#12472
                if (($1.s % 2) == 0) { //#12471
                    $1.s = $1.s + 1; //#12471
                } else { //#12471
                    break; //#12471
                } //#12471
            } //#12471
            $1.n = $1.n + 1; //#12473
            $1.s = $1.s + 1; //#12474
            $1.p = $f($1.p + 1); //#12475
        } //#12475
        $k[$j++] = $1.n; //#12477
        $k[$j++] = $1.s; //#12477
    }; //#12478
    $1.enca = function() {
        $put($1.cws, $1.j, $get($1.seta, $k[--$j])); //#12482
        $1.j = $1.j + 1; //#12483
    }; //#12484
    $1.encb = function() {
        $put($1.cws, $1.j, $get($1.setb, $k[--$j])); //#12486
        $1.j = $1.j + 1; //#12487
    }; //#12488
    $1.encc = function() {
        var _3d = $k[--$j]; //#12490
        $k[$j++] = _3d; //#12494
        if ($ne($type(_3d), 'arraytype')) { //#12493
            var _3h = $get($1.setc, $k[--$j]); //#12491
            $k[$j++] = _3h; //#12491
        } else { //#12493
            $aload($k[--$j]); //#12493
            var _3j = $k[--$j]; //#12493
            var _3k = $k[--$j]; //#12493
            $k[$j++] = $f($f(_3j - 48) + ($f(_3k - 48) * 10)); //#12493
        } //#12493
        $put($1.cws, $1.j, $k[--$j]); //#12495
        $1.j = $1.j + 1; //#12496
    }; //#12497
    $1.anotb = function() {
        var _3p = $k[--$j]; //#12500
        var _3r = $get($1.seta, _3p) !== undefined; //#12500
        var _3t = $get($1.setb, _3p) !== undefined; //#12500
        $k[$j++] = _3r && (!_3t); //#12500
    }; //#12500
    $1.bnota = function() {
        var _3u = $k[--$j]; //#12501
        var _3w = $get($1.setb, _3u) !== undefined; //#12501
        var _3y = $get($1.seta, _3u) !== undefined; //#12501
        $k[$j++] = _3w && (!_3y); //#12501
    }; //#12501
    $k[$j++] = Infinity; //#12504
    for (var _40 = 0, _41 = $1.msg.length; _40 < _41; _40++) { //#12504
        $k[$j++] = 0; //#12504
    } //#12504
    $k[$j++] = 9999; //#12504
    $1.nextanotb = $a(); //#12504
    $k[$j++] = Infinity; //#12505
    for (var _44 = 0, _45 = $1.msg.length; _44 < _45; _44++) { //#12505
        $k[$j++] = 0; //#12505
    } //#12505
    $k[$j++] = 9999; //#12505
    $1.nextbnota = $a(); //#12505
    for (var _48 = $1.msg.length - 1; _48 >= 0; _48 -= 1) { //#12518
        $1.i = _48; //#12507
        $k[$j++] = $get($1.msg, $1.i); //#12508
        $1.anotb(); //#12508
        if ($k[--$j]) { //#12511
            $put($1.nextanotb, $1.i, 0); //#12509
        } else { //#12511
            $put($1.nextanotb, $1.i, $f($get($1.nextanotb, $1.i + 1) + 1)); //#12511
        } //#12511
        $k[$j++] = $get($1.msg, $1.i); //#12513
        $1.bnota(); //#12513
        if ($k[--$j]) { //#12516
            $put($1.nextbnota, $1.i, 0); //#12514
        } else { //#12516
            $put($1.nextbnota, $1.i, $f($get($1.nextbnota, $1.i + 1) + 1)); //#12516
        } //#12516
    } //#12516
    $1.abeforeb = function() {
        var _4V = $k[--$j]; //#12521
        $k[$j++] = $lt($get($1.nextanotb, _4V), $get($1.nextbnota, _4V)); //#12521
    }; //#12521
    $1.bbeforea = function() {
        var _4a = $k[--$j]; //#12522
        $k[$j++] = $lt($get($1.nextbnota, _4a), $get($1.nextanotb, _4a)); //#12522
    }; //#12522
    $1.padrow = function() {
        for (var _4g = 0, _4h = $k[--$j]; _4g < _4h; _4g++) { //#12532
            for (;;) { //#12531
                if ($eq($1.cset, "seta")) { //#12528
                    $k[$j++] = $1.swc; //#12528
                    $1.enca(); //#12528
                    $1.cset = "setc"; //#12528
                    break; //#12528
                } //#12528
                if ($eq($1.cset, "setb")) { //#12529
                    $k[$j++] = $1.swc; //#12529
                    $1.encb(); //#12529
                    $1.cset = "setc"; //#12529
                    break; //#12529
                } //#12529
                if ($eq($1.cset, "setc")) { //#12530
                    $k[$j++] = $1.swb; //#12530
                    $1.encc(); //#12530
                    $1.cset = "setb"; //#12530
                    break; //#12530
                } //#12530
            } //#12530
        } //#12530
    }; //#12533
    $1.cws = $a($f($1.c + 5) * 44); //#12536
    $1.i = 0; //#12538
    $1.j = 0; //#12538
    $1.r = 1; //#12538
    $1.lastrow = false; //#12539
    for (;;) { //#12708
        if ($1.lastrow) { //#12541
            break; //#12541
        } //#12541
        $k[$j++] = $1.sta; //#12544
        $1.enca(); //#12544
        if ($1.i < $1.msglen) { //#12545
            $k[$j++] = $1.i; //#12545
            $1.numsscr(); //#12545
        } else { //#12545
            $k[$j++] = -1; //#12545
            $k[$j++] = -1; //#12545
        } //#12545
        $1.nums = $k[--$j]; //#12545
        $1.nchars = $k[--$j]; //#12545
        for (;;) { //#12565
            if ($1.msglen == 0) { //#12551
                $k[$j++] = $1.swb; //#12548
                $1.enca(); //#12548
                $1.cset = "setb"; //#12549
                break; //#12550
            } //#12550
            if ($1.nums >= 2) { //#12556
                $k[$j++] = $1.swc; //#12553
                $1.enca(); //#12553
                $1.cset = "setc"; //#12554
                break; //#12555
            } //#12555
            $k[$j++] = $1.i; //#12557
            $1.abeforeb(); //#12557
            if ($k[--$j]) { //#12561
                $k[$j++] = $1.sft; //#12558
                $1.enca(); //#12558
                $1.cset = "seta"; //#12559
                break; //#12560
            } //#12560
            $k[$j++] = $1.swb; //#12562
            $1.enca(); //#12562
            $1.cset = "setb"; //#12563
            break; //#12564
        } //#12564
        $1.j = $1.j + 1; //#12566
        $1.endofrow = false; //#12569
        for (;;) { //#12693
            $1.rem = $f($f($1.c + 3) - ($1.j % $f($1.c + 5))); //#12570
            if (($1.i == $1.msglen) || $1.endofrow) { //#12572
                break; //#12572
            } //#12572
            $k[$j++] = $1.i; //#12574
            $1.numsscr(); //#12574
            $1.nums = $k[--$j]; //#12574
            $1.nchars = $k[--$j]; //#12574
            $k[$j++] = 'remnums'; //#12575
            if ($1.nums > ($1.rem * 2)) { //#12575
                $k[$j++] = $1.rem * 2; //#12575
            } else { //#12575
                $k[$j++] = $1.nums; //#12575
            } //#12575
            var _5J = $k[--$j]; //#12575
            $1[$k[--$j]] = _5J; //#12575
            for (;;) { //#12691
                if ((($eq($1.cset, "seta") || $eq($1.cset, "setb")) && ($1.remnums >= 4)) && ($get($1.msg, $1.i) != $1.fn1)) { //#12613
                    if ((($1.remnums % 2) == 0) && ($1.rem >= 3)) { //#12595
                        $k[$j++] = $1.swc; //#12583
                        if ($eq($1.cset, "seta")) { //#12583
                            $1.enca(); //#12583
                        } else { //#12583
                            $1.encb(); //#12583
                        } //#12583
                        $1.cset = "setc"; //#12584
                        for (var _5W = 0, _5X = 2; _5W < _5X; _5W++) { //#12593
                            if ($get($1.msg, $1.i) == $1.fn1) { //#12591
                                $k[$j++] = $1.fn1; //#12587
                                $1.encc(); //#12587
                                $1.i = $1.i + 1; //#12588
                            } else { //#12591
                                $k[$j++] = $geti($1.msg, $1.i, 2); //#12590
                                $1.encc(); //#12590
                                $1.i = $1.i + 2; //#12591
                            } //#12591
                        } //#12591
                        break; //#12594
                    } //#12594
                    if ((($1.remnums % 2) != 0) && ($1.rem >= 4)) { //#12612
                        $k[$j++] = $get($1.msg, $1.i); //#12598
                        if ($eq($1.cset, "seta")) { //#12598
                            $1.enca(); //#12598
                        } else { //#12598
                            $1.encb(); //#12598
                        } //#12598
                        $1.i = $1.i + 1; //#12599
                        $k[$j++] = $1.swc; //#12600
                        if ($eq($1.cset, "seta")) { //#12600
                            $1.enca(); //#12600
                        } else { //#12600
                            $1.encb(); //#12600
                        } //#12600
                        $1.cset = "setc"; //#12601
                        for (var _5r = 0, _5s = 2; _5r < _5s; _5r++) { //#12610
                            if ($get($1.msg, $1.i) == $1.fn1) { //#12608
                                $k[$j++] = $1.fn1; //#12604
                                $1.encc(); //#12604
                                $1.i = $1.i + 1; //#12605
                            } else { //#12608
                                $k[$j++] = $geti($1.msg, $1.i, 2); //#12607
                                $1.encc(); //#12607
                                $1.i = $1.i + 2; //#12608
                            } //#12608
                        } //#12608
                        break; //#12611
                    } //#12611
                } //#12611
                $k[$j++] = $eq($1.cset, "setb"); //#12614
                $k[$j++] = $get($1.msg, $1.i); //#12614
                $1.anotb(); //#12614
                var _67 = $k[--$j]; //#12614
                var _68 = $k[--$j]; //#12614
                if ((_68 && _67) && ($1.rem >= 2)) { //#12629
                    if ($1.i < ($1.msglen - 1)) { //#12623
                        $k[$j++] = $1.i + 1; //#12617
                        $1.bbeforea(); //#12617
                        if ($k[--$j]) { //#12622
                            $k[$j++] = $1.sft; //#12618
                            $1.encb(); //#12618
                            $k[$j++] = $get($1.msg, $1.i); //#12619
                            $1.enca(); //#12619
                            $1.i = $1.i + 1; //#12620
                            break; //#12621
                        } //#12621
                    } //#12621
                    $k[$j++] = $1.swa; //#12624
                    $1.encb(); //#12624
                    $1.cset = "seta"; //#12625
                    $k[$j++] = $get($1.msg, $1.i); //#12626
                    $1.enca(); //#12626
                    $1.i = $1.i + 1; //#12627
                    break; //#12628
                } //#12628
                $k[$j++] = $eq($1.cset, "seta"); //#12630
                $k[$j++] = $get($1.msg, $1.i); //#12630
                $1.bnota(); //#12630
                var _6S = $k[--$j]; //#12630
                var _6T = $k[--$j]; //#12630
                if ((_6T && _6S) && ($1.rem >= 2)) { //#12645
                    if ($1.i < ($1.msglen - 1)) { //#12639
                        $k[$j++] = $1.i + 1; //#12633
                        $1.abeforeb(); //#12633
                        if ($k[--$j]) { //#12638
                            $k[$j++] = $1.sft; //#12634
                            $1.enca(); //#12634
                            $k[$j++] = $get($1.msg, $1.i); //#12635
                            $1.encb(); //#12635
                            $1.i = $1.i + 1; //#12636
                            break; //#12637
                        } //#12637
                    } //#12637
                    $k[$j++] = $1.swb; //#12640
                    $1.enca(); //#12640
                    $1.cset = "setb"; //#12641
                    $k[$j++] = $get($1.msg, $1.i); //#12642
                    $1.encb(); //#12642
                    $1.i = $1.i + 1; //#12643
                    break; //#12644
                } //#12644
                if (($eq($1.cset, "setc") && ($1.remnums < 2)) && ($1.rem >= 2)) { //#12660
                    $k[$j++] = $1.i; //#12648
                    $1.abeforeb(); //#12648
                    if ($k[--$j]) { //#12654
                        $k[$j++] = $1.swa; //#12649
                        $1.encc(); //#12649
                        $1.cset = "seta"; //#12650
                        $k[$j++] = $get($1.msg, $1.i); //#12651
                        $1.enca(); //#12651
                        $1.i = $1.i + 1; //#12652
                        break; //#12653
                    } //#12653
                    $k[$j++] = $1.swb; //#12655
                    $1.encc(); //#12655
                    $1.cset = "setb"; //#12656
                    $k[$j++] = $get($1.msg, $1.i); //#12657
                    $1.encb(); //#12657
                    $1.i = $1.i + 1; //#12658
                    break; //#12659
                } //#12659
                var _73 = $get($1.seta, $get($1.msg, $1.i)) !== undefined; //#12663
                if (($eq($1.cset, "seta") && _73) && ($1.rem >= 1)) { //#12668
                    $k[$j++] = $get($1.msg, $1.i); //#12665
                    $1.enca(); //#12665
                    $1.i = $1.i + 1; //#12666
                    break; //#12667
                } //#12667
                var _7E = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#12669
                if (($eq($1.cset, "setb") && _7E) && ($1.rem >= 1)) { //#12674
                    $k[$j++] = $get($1.msg, $1.i); //#12671
                    $1.encb(); //#12671
                    $1.i = $1.i + 1; //#12672
                    break; //#12673
                } //#12673
                if (($eq($1.cset, "setc") && ($1.remnums >= 2)) && ($1.rem >= 1)) { //#12685
                    if ($get($1.msg, $1.i) == $1.fn1) { //#12682
                        $k[$j++] = $1.fn1; //#12678
                        $1.encc(); //#12678
                        $1.i = $1.i + 1; //#12679
                    } else { //#12682
                        $k[$j++] = $geti($1.msg, $1.i, 2); //#12681
                        $1.encc(); //#12681
                        $1.i = $1.i + 2; //#12682
                    } //#12682
                    break; //#12684
                } //#12684
                $1.endofrow = true; //#12688
                break; //#12689
            } //#12689
        } //#12689
        if ((((($1.r >= $1.rows) || ($1.rows == -1)) && ($1.r > 1)) && ($1.i == $1.msglen)) && ($1.rem >= 2)) { //#12705
            $k[$j++] = $f($1.rem - 2); //#12697
            $1.padrow(); //#12697
            $1.j = $1.j + 3; //#12698
            $k[$j++] = $1.stp; //#12699
            $1.enca(); //#12699
            $1.lastrow = true; //#12700
        } else { //#12705
            $k[$j++] = $1.rem; //#12702
            $1.padrow(); //#12702
            $1.j = $1.j + 1; //#12703
            $k[$j++] = $1.stp; //#12704
            $1.enca(); //#12704
            $1.r = $1.r + 1; //#12705
        } //#12705
    } //#12705
    $1.cws = $geti($1.cws, 0, $1.j); //#12709
    $k[$j++] = Infinity; //#12715
    for (var _7o = 64; _7o <= 95; _7o += 1) { //#12713
        $k[$j++] = _7o; //#12713
    } //#12713
    for (var _7p = 0; _7p <= 15; _7p += 1) { //#12714
        $k[$j++] = _7p; //#12714
    } //#12714
    for (var _7q = 26; _7q <= 63; _7q += 1) { //#12715
        $k[$j++] = _7q; //#12715
    } //#12715
    $1.abmap = $a(); //#12715
    $k[$j++] = Infinity; //#12717
    for (var _7s = 0; _7s <= 85; _7s += 1) { //#12717
        $k[$j++] = _7s; //#12717
    } //#12717
    $1.cmap = $a(); //#12717
    $1.chkmsg = $a($1.msglen); //#12720
    $1.j = 0; //#12721
    for (var _7y = 0, _7x = $1.msglen - 1; _7y <= _7x; _7y += 1) { //#12727
        $1.i = _7y; //#12723
        $1.char = $get($1.msg, $1.i); //#12724
        if ($1.char >= 0) { //#12725
            $put($1.chkmsg, $1.j, $1.char); //#12725
            $1.j = $1.j + 1; //#12725
        } //#12725
        if (($1.char == $1.fn1) && ($1.i != 0)) { //#12726
            $put($1.chkmsg, $1.j, 29); //#12726
            $1.j = $1.j + 1; //#12726
        } //#12726
    } //#12726
    $1.t1 = 0; //#12728
    $1.t2 = 0; //#12728
    $1.k1 = 0; //#12728
    $1.k2 = 0; //#12728
    for (var _8F = 0, _8E = $1.j - 1; _8F <= _8E; _8F += 1) { //#12735
        $1.i = _8F; //#12730
        $1.t1 = ($get($1.chkmsg, $1.i) * $1.i) % 86; //#12731
        $1.t2 = $f($1.t1 + $get($1.chkmsg, $1.i)) % 86; //#12732
        $1.k1 = $f($1.k1 + $1.t2) % 86; //#12733
        $1.k2 = $f($1.k2 + $1.t1) % 86; //#12734
    } //#12734
    $k[$j++] = $1.cws; //#12736
    $k[$j++] = $1.cws.length - 4; //#12736
    if ($ne($1.cset, "setc")) { //#12736
        $k[$j++] = $1.abmap; //#12736
    } else { //#12736
        $k[$j++] = $1.cmap; //#12736
    } //#12736
    var _8Z = $get($k[--$j], $1.k1); //#12736
    var _8a = $k[--$j]; //#12736
    $put($k[--$j], _8a, _8Z); //#12736
    $k[$j++] = $1.cws; //#12737
    $k[$j++] = $1.cws.length - 3; //#12737
    if ($ne($1.cset, "setc")) { //#12737
        $k[$j++] = $1.abmap; //#12737
    } else { //#12737
        $k[$j++] = $1.cmap; //#12737
    } //#12737
    var _8j = $get($k[--$j], $1.k2); //#12737
    var _8k = $k[--$j]; //#12737
    $put($k[--$j], _8k, _8j); //#12737
    var _8m = $1.cws; //#12740
    $k[$j++] = _8m; //#12740
    $k[$j++] = 2; //#12740
    if ($get(_8m, 2 - 1) != 99) { //#12740
        $k[$j++] = $1.abmap; //#12740
    } else { //#12740
        $k[$j++] = $1.cmap; //#12740
    } //#12740
    var _8s = $get($k[--$j], $1.r - 2); //#12740
    var _8t = $k[--$j]; //#12740
    $put($k[--$j], _8t, _8s); //#12740
    for (var _8x = 1, _8w = $1.r - 1; _8x <= _8w; _8x += 1) { //#12744
        $1.i = _8x; //#12742
        var _8y = $1.cws; //#12743
        var _8z = $1.i; //#12743
        var _90 = $1.c; //#12743
        $k[$j++] = _8y; //#12743
        $k[$j++] = $f((_8z * $f(_90 + 5)) + 2); //#12743
        if ($get(_8y, $f(($f((_8z * $f(_90 + 5)) + 2)) - 1)) != 99) { //#12743
            $k[$j++] = $1.abmap; //#12743
        } else { //#12743
            $k[$j++] = $1.cmap; //#12743
        } //#12743
        var _96 = $get($k[--$j], $1.i + 42); //#12743
        var _97 = $k[--$j]; //#12743
        $put($k[--$j], _97, _96); //#12743
    } //#12743
    for (var _9B = 0, _9A = $1.r - 1; _9B <= _9A; _9B += 1) { //#12755
        $1.rcws = $geti($1.cws, _9B * $f($1.c + 5), $f($1.c + 4)); //#12748
        $1.csum = $get($1.rcws, 0); //#12749
        for (var _9K = 1, _9J = $1.rcws.length - 2; _9K <= _9J; _9K += 1) { //#12753
            $1.i = _9K; //#12751
            $1.csum = $f($1.csum + ($get($1.rcws, $1.i) * $1.i)); //#12752
        } //#12752
        $put($1.rcws, $1.rcws.length - 1, $1.csum % 103); //#12754
    } //#12754
    $1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "2331112"]); //#12774
    $1.rowbits = $a($1.r); //#12777
    for (var _9Y = 0, _9X = $1.r - 1; _9Y <= _9X; _9Y += 1) { //#12789
        $1.i = _9Y; //#12779
        $k[$j++] = Infinity; //#12782
        var _9d = $geti($1.cws, $1.i * $f($1.c + 5), $f($1.c + 5)); //#12781
        for (var _9e = 0, _9f = _9d.length; _9e < _9f; _9e++) { //#12783
            $forall($get($1.encs, $get(_9d, _9e)), function() { //#12782
                var _9j = $k[--$j]; //#12782
                $k[$j++] = $f(_9j - 48); //#12782
            }); //#12782
        } //#12782
        $1.sbs = $a(); //#12782
        $k[$j++] = Infinity; //#12785
        var _9l = $1.sbs; //#12786
        $k[$j++] = 0; //#12786
        for (var _9m = 0, _9n = _9l.length; _9m < _9n; _9m++) { //#12786
            var _9p = $k[--$j]; //#12786
            var _9q = (_9p == 1) ? 0 : 1; //#12786
            $k[$j++] = _9p; //#12786
            for (var _9r = 0, _9s = $get(_9l, _9m); _9r < _9s; _9r++) { //#12786
                $k[$j++] = _9q //#12786
            } //#12786
        } //#12786
        $astore($a($counttomark() - 1)); //#12787
        var _9v = $k[--$j]; //#12787
        var _9w = $k[--$j]; //#12787
        $k[$j++] = _9v; //#12787
        $k[$j++] = _9w; //#12787
        $j--; //#12787
        var _9x = $k[--$j]; //#12787
        var _9y = $k[--$j]; //#12787
        $k[$j++] = _9x; //#12787
        $k[$j++] = _9y; //#12787
        $j--; //#12787
        $put($1.rowbits, $1.i, $k[--$j]); //#12788
    } //#12788
    $1.symwid = $f(($1.c * 11) + 57); //#12792
    $k[$j++] = Infinity; //#12805
    for (var _A5 = 0, _A6 = $1.symwid * $1.sepheight; _A5 < _A6; _A5++) { //#12794
        $k[$j++] = 1; //#12794
    } //#12794
    for (var _A9 = 0, _A8 = $1.r - 2; _A9 <= _A8; _A9 += 1) { //#12803
        $1.i = _A9; //#12796
        for (var _AB = 0, _AC = $1.rowheight; _AB < _AC; _AB++) { //#12797
            $aload($get($1.rowbits, $1.i)); //#12797
        } //#12797
        for (var _AH = 0, _AI = $1.sepheight; _AH < _AI; _AH++) { //#12802
            $k[$j++] = 1; //#12800
            $k[$j++] = 1; //#12800
            $k[$j++] = 0; //#12800
            $k[$j++] = 1; //#12800
            $k[$j++] = 0; //#12800
            $k[$j++] = 0; //#12800
            $k[$j++] = 0; //#12800
            $k[$j++] = 0; //#12800
            $k[$j++] = 1; //#12800
            $k[$j++] = 0; //#12800
            $k[$j++] = 0; //#12800
            for (var _AK = 0, _AL = $f($1.symwid - 24); _AK < _AL; _AK++) { //#12800
                $k[$j++] = 1; //#12800
            } //#12800
            $k[$j++] = 1; //#12801
            $k[$j++] = 1; //#12801
            $k[$j++] = 0; //#12801
            $k[$j++] = 0; //#12801
            $k[$j++] = 0; //#12801
            $k[$j++] = 1; //#12801
            $k[$j++] = 1; //#12801
            $k[$j++] = 1; //#12801
            $k[$j++] = 0; //#12801
            $k[$j++] = 1; //#12801
            $k[$j++] = 0; //#12801
            $k[$j++] = 1; //#12801
            $k[$j++] = 1; //#12801
        } //#12801
    } //#12801
    for (var _AN = 0, _AO = $1.rowheight; _AN < _AO; _AN++) { //#12804
        $aload($get($1.rowbits, $1.r - 1)); //#12804
    } //#12804
    for (var _AU = 0, _AV = $1.symwid * $1.sepheight; _AU < _AV; _AU++) { //#12805
        $k[$j++] = 1; //#12805
    } //#12805
    $1.pixs = $a(); //#12805
    var _Af = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.symwid],
        ["pixy", ~~($1.pixs.length / $1.symwid)],
        ["height", (~~($1.pixs.length / $1.symwid)) / 72],
        ["width", $1.symwid / 72],
        ["opt", $1.options]
    ]); //#12816
    $k[$j++] = _Af; //#12819
    if (!$1.dontdraw) { //#12819
        bwipp_renmatrix(); //#12819
    } //#12819
}

function bwipp_code16k() {
    var $1 = {}; //#12849
    $1.options = $k[--$j]; //#12851
    $1.barcode = $k[--$j]; //#12852
    $1.dontdraw = false; //#12854
    $1.mode = -1; //#12855
    $1.pos = -1; //#12856
    $1.rows = 0; //#12857
    $1.rowheight = 8; //#12858
    $1.sepheight = 1; //#12859
    $1.encoding = "auto"; //#12860
    $1.raw = false; //#12861
    $1.parse = false; //#12862
    $1.parsefnc = false; //#12863
    $forall($1.options, function() { //#12874
        var _3 = $k[--$j]; //#12874
        $1[$k[--$j]] = _3; //#12874
    }); //#12874
    $1.mode = ~~$1.mode; //#12876
    $1.pos = ~~$1.pos; //#12877
    $1.rows = ~~$1.rows; //#12878
    $1.rowheight = ~~$1.rowheight; //#12879
    $1.sepheight = ~~$1.sepheight; //#12880
    if ($1.pos != -1) { //#12882
        $1.rows = 16; //#12882
    } //#12882
    $1.swa = -1; //#12885
    $1.swb = -2; //#12885
    $1.swc = -3; //#12885
    $1.sa1 = -4; //#12886
    $1.sb1 = -5; //#12886
    $1.sc1 = -6; //#12886
    $1.sa2 = -7; //#12887
    $1.sb2 = -8; //#12887
    $1.sc2 = -9; //#12887
    $1.pad = -10; //#12888
    $1.sb3 = -11; //#12888
    $1.sc3 = -12; //#12888
    $1.fn1 = -13; //#12889
    $1.fn2 = -14; //#12889
    $1.fn3 = -15; //#12889
    $1.fn4 = -16; //#12889
    $1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.fn3, $1.fn3, "96"]), $a([$1.fn2, $1.fn2, "97"]), $a([$1.sb1, $1.sa1, "98"]), $a([$1.swc, $1.swc, "99"]), $a([$1.swb, $1.fn4, $1.swb]), $a([$1.fn4, $1.swa, $1.swa]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.pad, $1.pad, $1.pad]), $a([$1.sb2, $1.sa2, $1.sb1]), $a([$1.sc2, $1.sc2, $1.sb2]), $a([$1.sc3, $1.sc3, $1.sb3])]); //#12930
    $1.charvals = $a([new Map, new Map, new Map]); //#12933
    for (var _2R = 0, _2Q = $1.charmaps.length - 1; _2R <= _2Q; _2R += 1) { //#12942
        $1.i = _2R; //#12935
        $1.encs = $get($1.charmaps, $1.i); //#12936
        for (var _2V = 0; _2V <= 2; _2V += 1) { //#12941
            $1.j = _2V; //#12938
            var _2Y = $get($1.encs, $1.j); //#12939
            $k[$j++] = _2Y; //#12939
            if ($eq($type(_2Y), 'stringtype')) { //#12939
                var _2b = $get($k[--$j], 0); //#12939
                $k[$j++] = _2b; //#12939
            } //#12939
            $put($get($1.charvals, $1.j), $k[--$j], $1.i); //#12940
        } //#12940
    } //#12940
    $1.seta = $get($1.charvals, 0); //#12943
    $1.setb = $get($1.charvals, 1); //#12944
    $1.setc = $get($1.charvals, 2); //#12945
    if ($1.raw) { //#12947
        $1.encoding = "raw"; //#12947
    } //#12947
    if ($eq($1.encoding, "raw")) { //#12960
        $1.cws = $a($1.barcode.length); //#12950
        $1.i = 0; //#12951
        $1.j = 0; //#12951
        for (;;) { //#12958
            if ($1.i == $1.barcode.length) { //#12953
                break; //#12953
            } //#12953
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#12954
            $put($1.cws, $1.j, $1.cw); //#12955
            $1.i = $1.i + 4; //#12956
            $1.j = $1.j + 1; //#12957
        } //#12957
        $1.cws = $geti($1.cws, 0, $1.j); //#12959
    } //#12959
    if ($eq($1.encoding, "auto")) { //#13411
        var _3A = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true],
            ["FNC1", $1.fn1],
            ["FNC2", $1.fn2],
            ["FNC3", $1.fn3]
        ]); //#12971
        $1.fncvals = _3A; //#12973
        $k[$j++] = 'msg'; //#12974
        $k[$j++] = $1.barcode; //#12974
        $k[$j++] = $1.fncvals; //#12974
        bwipp_parseinput(); //#12974
        var _3D = $k[--$j]; //#12974
        $1[$k[--$j]] = _3D; //#12974
        $1.msglen = $1.msg.length; //#12975
        $k[$j++] = Infinity; //#12978
        for (var _3H = 0, _3I = $1.msglen; _3H < _3I; _3H++) { //#12978
            $k[$j++] = 0; //#12978
        } //#12978
        $k[$j++] = 0; //#12978
        $1.numSA = $a(); //#12978
        $k[$j++] = Infinity; //#12979
        for (var _3L = 0, _3M = $1.msglen; _3L < _3M; _3L++) { //#12979
            $k[$j++] = 0; //#12979
        } //#12979
        $k[$j++] = 0; //#12979
        $1.numEA = $a(); //#12979
        for (var _3P = $1.msglen - 1; _3P >= 0; _3P -= 1) { //#12989
            $1.i = _3P; //#12981
            if ($get($1.msg, $1.i) >= 0) { //#12988
                if ($get($1.msg, $1.i) >= 128) { //#12986
                    $put($1.numEA, $1.i, $f($get($1.numEA, $1.i + 1) + 1)); //#12984
                } else { //#12986
                    $put($1.numSA, $1.i, $f($get($1.numSA, $1.i + 1) + 1)); //#12986
                } //#12986
            } //#12986
        } //#12986
        $1.ea = false; //#12992
        $1.msgtmp = $a([]); //#12992
        for (var _3j = 0, _3i = $1.msglen - 1; _3j <= _3i; _3j += 1) { //#13007
            $1.i = _3j; //#12994
            $1.c = $get($1.msg, $1.i); //#12995
            if ((!$xo($1.ea, $1.c < 128)) && ($1.c >= 0)) { //#13005
                if ($1.ea) { //#12997
                    $k[$j++] = $1.numSA; //#12997
                } else { //#12997
                    $k[$j++] = $1.numEA; //#12997
                } //#12997
                var _3v = $get($k[--$j], $1.i); //#12997
                var _3y = ($f(_3v + $1.i) == $1.msglen) ? 3 : 5; //#12998
                if (_3v < _3y) { //#13003
                    $k[$j++] = Infinity; //#13000
                    $aload($1.msgtmp); //#13000
                    $k[$j++] = $1.fn4; //#13000
                    $1.msgtmp = $a(); //#13000
                } else { //#13003
                    $k[$j++] = Infinity; //#13002
                    $aload($1.msgtmp); //#13002
                    $k[$j++] = $1.fn4; //#13002
                    $k[$j++] = $1.fn4; //#13002
                    $1.msgtmp = $a(); //#13002
                    $1.ea = !$1.ea; //#13003
                } //#13003
            } //#13003
            $k[$j++] = Infinity; //#13006
            $aload($1.msgtmp); //#13006
            if ($1.c >= 0) { //#13006
                $k[$j++] = $1.c & 127; //#13006
            } else { //#13006
                $k[$j++] = $1.c; //#13006
            } //#13006
            $1.msgtmp = $a(); //#13006
        } //#13006
        $1.msg = $1.msgtmp; //#13008
        $1.msglen = $1.msg.length; //#13009
        $1.numsscr = function() {
            $1.n = 0; //#13013
            $1.s = 0; //#13013
            $1.p = $k[--$j]; //#13014
            for (;;) { //#13025
                if ($1.p >= $1.msglen) { //#13015
                    break; //#13015
                } //#13015
                var _4J = $get($1.msg, $1.p); //#13016
                var _4L = $get($1.setc, _4J) !== undefined; //#13017
                $k[$j++] = _4J; //#13017
                if (!_4L) { //#13017
                    $j--; //#13017
                    break; //#13017
                } //#13017
                if ($k[--$j] == $1.fn1) { //#13021
                    if (($1.s % 2) == 0) { //#13020
                        $1.s = $1.s + 1; //#13020
                    } else { //#13020
                        break; //#13020
                    } //#13020
                } //#13020
                $1.n = $1.n + 1; //#13022
                $1.s = $1.s + 1; //#13023
                $1.p = $f($1.p + 1); //#13024
            } //#13024
            $k[$j++] = $1.n; //#13026
            $k[$j++] = $1.s; //#13026
        }; //#13027
        $1.enca = function() {
            $put($1.cws, $1.j, $get($1.seta, $k[--$j])); //#13031
            $1.j = $1.j + 1; //#13032
        }; //#13033
        $1.encb = function() {
            $put($1.cws, $1.j, $get($1.setb, $k[--$j])); //#13035
            $1.j = $1.j + 1; //#13036
        }; //#13037
        $1.encc = function() {
            var _4h = $k[--$j]; //#13039
            $k[$j++] = _4h; //#13043
            if ($ne($type(_4h), 'arraytype')) { //#13042
                var _4l = $get($1.setc, $k[--$j]); //#13040
                $k[$j++] = _4l; //#13040
            } else { //#13042
                $aload($k[--$j]); //#13042
                var _4n = $k[--$j]; //#13042
                var _4o = $k[--$j]; //#13042
                $k[$j++] = $f($f(_4n - 48) + ($f(_4o - 48) * 10)); //#13042
            } //#13042
            $put($1.cws, $1.j, $k[--$j]); //#13044
            $1.j = $1.j + 1; //#13045
        }; //#13046
        $1.anotb = function() {
            var _4t = $k[--$j]; //#13049
            var _4v = $get($1.seta, _4t) !== undefined; //#13049
            var _4x = $get($1.setb, _4t) !== undefined; //#13049
            $k[$j++] = _4v && (!_4x); //#13049
        }; //#13049
        $1.bnota = function() {
            var _4y = $k[--$j]; //#13050
            var _50 = $get($1.setb, _4y) !== undefined; //#13050
            var _52 = $get($1.seta, _4y) !== undefined; //#13050
            $k[$j++] = _50 && (!_52); //#13050
        }; //#13050
        $k[$j++] = Infinity; //#13053
        for (var _54 = 0, _55 = $1.msg.length; _54 < _55; _54++) { //#13053
            $k[$j++] = 0; //#13053
        } //#13053
        $k[$j++] = 9999; //#13053
        $1.nextanotb = $a(); //#13053
        $k[$j++] = Infinity; //#13054
        for (var _58 = 0, _59 = $1.msg.length; _58 < _59; _58++) { //#13054
            $k[$j++] = 0; //#13054
        } //#13054
        $k[$j++] = 9999; //#13054
        $1.nextbnota = $a(); //#13054
        for (var _5C = $1.msg.length - 1; _5C >= 0; _5C -= 1) { //#13067
            $1.i = _5C; //#13056
            $k[$j++] = $get($1.msg, $1.i); //#13057
            $1.anotb(); //#13057
            if ($k[--$j]) { //#13060
                $put($1.nextanotb, $1.i, 0); //#13058
            } else { //#13060
                $put($1.nextanotb, $1.i, $f($get($1.nextanotb, $1.i + 1) + 1)); //#13060
            } //#13060
            $k[$j++] = $get($1.msg, $1.i); //#13062
            $1.bnota(); //#13062
            if ($k[--$j]) { //#13065
                $put($1.nextbnota, $1.i, 0); //#13063
            } else { //#13065
                $put($1.nextbnota, $1.i, $f($get($1.nextbnota, $1.i + 1) + 1)); //#13065
            } //#13065
        } //#13065
        $1.abeforeb = function() {
            var _5Z = $k[--$j]; //#13070
            $k[$j++] = $lt($get($1.nextanotb, _5Z), $get($1.nextbnota, _5Z)); //#13070
        }; //#13070
        $1.bbeforea = function() {
            var _5e = $k[--$j]; //#13071
            $k[$j++] = $lt($get($1.nextbnota, _5e), $get($1.nextanotb, _5e)); //#13071
        }; //#13071
        $1.cws = $a(($1.barcode.length * 2) + 3); //#13073
        $1.i = 0; //#13076
        $1.j = 0; //#13076
        for (;;) { //#13166
            if ($1.pos != -1) { //#13087
                $put($1.cws, 0, (~~($1.pos / 10)) - 1); //#13081
                $put($1.cws, 1, ($1.pos % 10) - 1); //#13082
                $1.j = 2; //#13083
                $1.cset = "setb"; //#13084
                $1.mode = 7; //#13085
                break; //#13086
            } //#13086
            if ($1.msglen == 0) { //#13093
                $1.cset = "setb"; //#13090
                $1.mode = 1; //#13091
                break; //#13092
            } //#13092
            if ($1.msglen >= 2) { //#13102
                $k[$j++] = $get($1.msg, 0) == $1.fn1; //#13096
                $k[$j++] = 1; //#13096
                $1.numsscr(); //#13096
                var _5v = $k[--$j]; //#13096
                var _5w = $k[--$j]; //#13096
                $k[$j++] = _5v; //#13096
                $k[$j++] = _5w; //#13096
                $j--; //#13096
                var _5x = $k[--$j]; //#13096
                var _5y = $k[--$j]; //#13096
                if (_5y && (_5x >= 2)) { //#13101
                    $1.cset = "setc"; //#13097
                    $1.mode = 4; //#13098
                    $1.i = 1; //#13099
                    break; //#13100
                } //#13100
            } //#13100
            if ($get($1.msg, 0) == $1.fn1) { //#13109
                $1.cset = "setb"; //#13105
                $1.mode = 3; //#13106
                $1.i = 1; //#13107
                break; //#13108
            } //#13108
            if ($1.msglen >= 2) { //#13155
                $k[$j++] = 0; //#13112
                $1.numsscr(); //#13112
                var _63 = $k[--$j]; //#13112
                var _64 = $k[--$j]; //#13112
                $k[$j++] = _63; //#13112
                $k[$j++] = _64; //#13112
                $j--; //#13112
                var _65 = $k[--$j]; //#13112
                if ((_65 >= 2) && ((_65 % 2) == 0)) { //#13116
                    $1.cset = "setc"; //#13113
                    $1.mode = 2; //#13114
                    break; //#13115
                } //#13115
                $k[$j++] = 0; //#13118
                $1.numsscr(); //#13118
                var _66 = $k[--$j]; //#13118
                var _67 = $k[--$j]; //#13118
                $k[$j++] = _66; //#13118
                $k[$j++] = _67; //#13118
                $j--; //#13118
                var _68 = $k[--$j]; //#13118
                if ((_68 >= 3) && ((_68 % 2) == 1)) { //#13124
                    $k[$j++] = $get($1.msg, 0); //#13119
                    $1.encb(); //#13119
                    $1.cset = "setc"; //#13120
                    $1.mode = 5; //#13121
                    $1.i = 1; //#13122
                    break; //#13123
                } //#13123
                var _6E = $get($1.setb, $get($1.msg, 0)) !== undefined; //#13126
                $k[$j++] = _6E; //#13127
                $k[$j++] = 1; //#13127
                $1.numsscr(); //#13127
                var _6F = $k[--$j]; //#13127
                var _6G = $k[--$j]; //#13127
                $k[$j++] = _6F; //#13127
                $k[$j++] = _6G; //#13127
                $j--; //#13127
                var _6H = $k[--$j]; //#13127
                var _6I = $k[--$j]; //#13127
                if (_6I && ((_6H >= 2) && ((_6H % 2) == 0))) { //#13133
                    $k[$j++] = $get($1.msg, 0); //#13128
                    $1.encb(); //#13128
                    $1.cset = "setc"; //#13129
                    $1.mode = 5; //#13130
                    $1.i = 1; //#13131
                    break; //#13132
                } //#13132
                var _6O = $get($1.setb, $get($1.msg, 0)) !== undefined; //#13135
                $k[$j++] = _6O; //#13136
                $k[$j++] = 1; //#13136
                $1.numsscr(); //#13136
                var _6P = $k[--$j]; //#13136
                var _6Q = $k[--$j]; //#13136
                $k[$j++] = _6P; //#13136
                $k[$j++] = _6Q; //#13136
                $j--; //#13136
                var _6R = $k[--$j]; //#13136
                var _6S = $k[--$j]; //#13136
                if (_6S && ((_6R >= 3) && ((_6R % 2) == 1))) { //#13143
                    $k[$j++] = $get($1.msg, 0); //#13137
                    $1.encb(); //#13137
                    $k[$j++] = $get($1.msg, 1); //#13138
                    $1.encb(); //#13138
                    $1.cset = "setc"; //#13139
                    $1.mode = 6; //#13140
                    $1.i = 2; //#13141
                    break; //#13142
                } //#13142
                var _6a = $get($1.setb, $get($1.msg, 0)) !== undefined; //#13145
                var _6e = $get($1.setb, $get($1.msg, 1)) !== undefined; //#13146
                $k[$j++] = _6a && _6e; //#13147
                $k[$j++] = 2; //#13147
                $1.numsscr(); //#13147
                var _6f = $k[--$j]; //#13147
                var _6g = $k[--$j]; //#13147
                $k[$j++] = _6f; //#13147
                $k[$j++] = _6g; //#13147
                $j--; //#13147
                var _6h = $k[--$j]; //#13147
                var _6i = $k[--$j]; //#13147
                if (_6i && ((_6h >= 2) && ((_6h % 2) == 0))) { //#13154
                    $k[$j++] = $get($1.msg, 0); //#13148
                    $1.encb(); //#13148
                    $k[$j++] = $get($1.msg, 1); //#13149
                    $1.encb(); //#13149
                    $1.cset = "setc"; //#13150
                    $1.mode = 6; //#13151
                    $1.i = 2; //#13152
                    break; //#13153
                } //#13153
            } //#13153
            $k[$j++] = 0; //#13157
            $1.abeforeb(); //#13157
            if ($k[--$j]) { //#13161
                $1.cset = "seta"; //#13158
                $1.mode = 0; //#13159
                break; //#13160
            } //#13160
            $1.cset = "setb"; //#13163
            $1.mode = 1; //#13164
            break; //#13165
        } //#13165
        for (;;) { //#13409
            if ($1.i == $1.msglen) { //#13169
                break; //#13169
            } //#13169
            $k[$j++] = $1.i; //#13171
            $1.numsscr(); //#13171
            $1.nums = $k[--$j]; //#13171
            $1.nchars = $k[--$j]; //#13171
            for (;;) { //#13407
                if ($eq($1.cset, "seta")) { //#13248
                    if ($1.i < ($1.msglen - 1)) { //#13185
                        $k[$j++] = $get($1.msg, $1.i); //#13178
                        $1.bnota(); //#13178
                        $k[$j++] = $1.i + 1; //#13179
                        $1.abeforeb(); //#13179
                        var _70 = $k[--$j]; //#13179
                        var _71 = $k[--$j]; //#13179
                        if ((_71 && _70)) { //#13184
                            $k[$j++] = $1.sb1; //#13180
                            $1.enca(); //#13180
                            $k[$j++] = $get($1.msg, $1.i); //#13181
                            $1.encb(); //#13181
                            $1.i = $1.i + 1; //#13182
                            break; //#13183
                        } //#13183
                    } //#13183
                    if ($1.i < ($1.msglen - 2)) { //#13197
                        $k[$j++] = $get($1.msg, $1.i); //#13188
                        $1.bnota(); //#13188
                        $k[$j++] = $get($1.msg, $1.i + 1); //#13189
                        $1.bnota(); //#13189
                        var _7F = $k[--$j]; //#13189
                        var _7G = $k[--$j]; //#13189
                        $k[$j++] = $an(_7G, _7F); //#13190
                        $k[$j++] = $1.i + 2; //#13190
                        $1.abeforeb(); //#13190
                        var _7I = $k[--$j]; //#13190
                        var _7J = $k[--$j]; //#13190
                        if ((_7J && _7I)) { //#13196
                            $k[$j++] = $1.sb2; //#13191
                            $1.enca(); //#13191
                            $k[$j++] = $get($1.msg, $1.i); //#13192
                            $1.encb(); //#13192
                            $k[$j++] = $get($1.msg, $1.i + 1); //#13193
                            $1.encb(); //#13193
                            $1.i = $1.i + 2; //#13194
                            break; //#13195
                        } //#13195
                    } //#13195
                    $k[$j++] = $get($1.msg, $1.i); //#13199
                    $1.bnota(); //#13199
                    if ($k[--$j]) { //#13203
                        $k[$j++] = $1.swb; //#13200
                        $1.enca(); //#13200
                        $1.cset = "setb"; //#13201
                        break; //#13202
                    } //#13202
                    if ($1.i < ($1.msglen - 4)) { //#13220
                        var _7e = $get($1.seta, $get($1.msg, $1.i + 4)) !== undefined; //#13207
                        if (($1.nums == 4) && _7e) { //#13219
                            $k[$j++] = $1.sc2; //#13208
                            $1.enca(); //#13208
                            for (var _7g = 0, _7h = 2; _7g < _7h; _7g++) { //#13217
                                if ($get($1.msg, $1.i) == $1.fn1) { //#13215
                                    $k[$j++] = $1.fn1; //#13211
                                    $1.encc(); //#13211
                                    $1.i = $1.i + 1; //#13212
                                } else { //#13215
                                    $k[$j++] = $geti($1.msg, $1.i, 2); //#13214
                                    $1.encc(); //#13214
                                    $1.i = $1.i + 2; //#13215
                                } //#13215
                            } //#13215
                            break; //#13218
                        } //#13218
                    } //#13218
                    if ($1.i < ($1.msglen - 6)) { //#13237
                        var _7z = $get($1.seta, $get($1.msg, $1.i + 6)) !== undefined; //#13224
                        if (($1.nums == 6) && _7z) { //#13236
                            $k[$j++] = $1.sc3; //#13225
                            $1.enca(); //#13225
                            for (var _81 = 0, _82 = 3; _81 < _82; _81++) { //#13234
                                if ($get($1.msg, $1.i) == $1.fn1) { //#13232
                                    $k[$j++] = $1.fn1; //#13228
                                    $1.encc(); //#13228
                                    $1.i = $1.i + 1; //#13229
                                } else { //#13232
                                    $k[$j++] = $geti($1.msg, $1.i, 2); //#13231
                                    $1.encc(); //#13231
                                    $1.i = $1.i + 2; //#13232
                                } //#13232
                            } //#13232
                            break; //#13235
                        } //#13235
                    } //#13235
                    if (($1.nums >= 4) && (($1.nums % 2) == 0)) { //#13243
                        $k[$j++] = $1.swc; //#13240
                        $1.enca(); //#13240
                        $1.cset = "setc"; //#13241
                        break; //#13242
                    } //#13242
                    $k[$j++] = $get($1.msg, $1.i); //#13245
                    $1.enca(); //#13245
                    $1.i = $1.i + 1; //#13246
                    break; //#13247
                } //#13247
                if ($eq($1.cset, "setb")) { //#13322
                    if ($1.i < ($1.msglen - 1)) { //#13259
                        $k[$j++] = $get($1.msg, $1.i); //#13252
                        $1.anotb(); //#13252
                        $k[$j++] = $1.i + 1; //#13253
                        $1.bbeforea(); //#13253
                        var _8R = $k[--$j]; //#13253
                        var _8S = $k[--$j]; //#13253
                        if ((_8S && _8R)) { //#13258
                            $k[$j++] = $1.sa1; //#13254
                            $1.encb(); //#13254
                            $k[$j++] = $get($1.msg, $1.i); //#13255
                            $1.enca(); //#13255
                            $1.i = $1.i + 1; //#13256
                            break; //#13257
                        } //#13257
                    } //#13257
                    if ($1.i < ($1.msglen - 2)) { //#13271
                        $k[$j++] = $get($1.msg, $1.i); //#13262
                        $1.anotb(); //#13262
                        $k[$j++] = $get($1.msg, $1.i + 1); //#13263
                        $1.anotb(); //#13263
                        var _8g = $k[--$j]; //#13263
                        var _8h = $k[--$j]; //#13263
                        $k[$j++] = $an(_8h, _8g); //#13264
                        $k[$j++] = $1.i + 2; //#13264
                        $1.bbeforea(); //#13264
                        var _8j = $k[--$j]; //#13264
                        var _8k = $k[--$j]; //#13264
                        if ((_8k && _8j)) { //#13270
                            $k[$j++] = $1.sa2; //#13265
                            $1.encb(); //#13265
                            $k[$j++] = $get($1.msg, $1.i); //#13266
                            $1.enca(); //#13266
                            $k[$j++] = $get($1.msg, $1.i + 1); //#13267
                            $1.enca(); //#13267
                            $1.i = $1.i + 2; //#13268
                            break; //#13269
                        } //#13269
                    } //#13269
                    $k[$j++] = $get($1.msg, $1.i); //#13273
                    $1.anotb(); //#13273
                    if ($k[--$j]) { //#13277
                        $k[$j++] = $1.swa; //#13274
                        $1.encb(); //#13274
                        $1.cset = "seta"; //#13275
                        break; //#13276
                    } //#13276
                    if ($1.i < ($1.msglen - 4)) { //#13294
                        var _95 = $get($1.setb, $get($1.msg, $1.i + 4)) !== undefined; //#13281
                        if (($1.nums == 4) && _95) { //#13293
                            $k[$j++] = $1.sc2; //#13282
                            $1.encb(); //#13282
                            for (var _97 = 0, _98 = 2; _97 < _98; _97++) { //#13291
                                if ($get($1.msg, $1.i) == $1.fn1) { //#13289
                                    $k[$j++] = $1.fn1; //#13285
                                    $1.encc(); //#13285
                                    $1.i = $1.i + 1; //#13286
                                } else { //#13289
                                    $k[$j++] = $geti($1.msg, $1.i, 2); //#13288
                                    $1.encc(); //#13288
                                    $1.i = $1.i + 2; //#13289
                                } //#13289
                            } //#13289
                            break; //#13292
                        } //#13292
                    } //#13292
                    if ($1.i < ($1.msglen - 6)) { //#13311
                        var _9Q = $get($1.setb, $get($1.msg, $1.i + 6)) !== undefined; //#13298
                        if (($1.nums == 6) && _9Q) { //#13310
                            $k[$j++] = $1.sc3; //#13299
                            $1.encb(); //#13299
                            for (var _9S = 0, _9T = 3; _9S < _9T; _9S++) { //#13308
                                if ($get($1.msg, $1.i) == $1.fn1) { //#13306
                                    $k[$j++] = $1.fn1; //#13302
                                    $1.encc(); //#13302
                                    $1.i = $1.i + 1; //#13303
                                } else { //#13306
                                    $k[$j++] = $geti($1.msg, $1.i, 2); //#13305
                                    $1.encc(); //#13305
                                    $1.i = $1.i + 2; //#13306
                                } //#13306
                            } //#13306
                            break; //#13309
                        } //#13309
                    } //#13309
                    if (($1.nums >= 4) && (($1.nums % 2) == 0)) { //#13317
                        $k[$j++] = $1.swc; //#13314
                        $1.encb(); //#13314
                        $1.cset = "setc"; //#13315
                        break; //#13316
                    } //#13316
                    $k[$j++] = $get($1.msg, $1.i); //#13319
                    $1.encb(); //#13319
                    $1.i = $1.i + 1; //#13320
                    break; //#13321
                } //#13321
                if ($eq($1.cset, "setc")) { //#13405
                    if ($1.nums >= 2) { //#13334
                        if ($get($1.msg, $1.i) == $1.fn1) { //#13331
                            $k[$j++] = $1.fn1; //#13327
                            $1.encc(); //#13327
                            $1.i = $1.i + 1; //#13328
                        } else { //#13331
                            $k[$j++] = $geti($1.msg, $1.i, 2); //#13330
                            $1.encc(); //#13330
                            $1.i = $1.i + 2; //#13331
                        } //#13331
                        break; //#13333
                    } //#13333
                    if ($1.i < ($1.msglen - 1)) { //#13344
                        var _A3 = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#13337
                        $k[$j++] = _A3; //#13338
                        $k[$j++] = $1.i + 1; //#13338
                        $1.numsscr(); //#13338
                        var _A5 = $k[--$j]; //#13338
                        var _A6 = $k[--$j]; //#13338
                        $k[$j++] = _A5; //#13338
                        $k[$j++] = _A6; //#13338
                        $j--; //#13338
                        var _A7 = $k[--$j]; //#13338
                        var _A8 = $k[--$j]; //#13338
                        if (_A8 && ((_A7 >= 2) && ((_A7 % 2) == 0))) { //#13343
                            $k[$j++] = $1.sb1; //#13339
                            $1.encc(); //#13339
                            $k[$j++] = $get($1.msg, $1.i); //#13340
                            $1.encb(); //#13340
                            $1.i = $1.i + 1; //#13341
                            break; //#13342
                        } //#13342
                    } //#13342
                    if ($1.i < ($1.msglen - 1)) { //#13355
                        var _AK = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#13347
                        $k[$j++] = _AK; //#13348
                        $k[$j++] = $1.i + 1; //#13348
                        $1.numsscr(); //#13348
                        var _AM = $k[--$j]; //#13348
                        var _AN = $k[--$j]; //#13348
                        $k[$j++] = _AM; //#13348
                        $k[$j++] = _AN; //#13348
                        $j--; //#13348
                        var _AO = $k[--$j]; //#13348
                        var _AP = $k[--$j]; //#13348
                        if (_AP && ((_AO >= 3) && ((_AO % 2) == 1))) { //#13354
                            $k[$j++] = $1.sb2; //#13349
                            $1.encc(); //#13349
                            $k[$j++] = $get($1.msg, $1.i); //#13350
                            $1.encb(); //#13350
                            $k[$j++] = $get($1.msg, $1.i + 1); //#13351
                            $1.encb(); //#13351
                            $1.i = $1.i + 2; //#13352
                            break; //#13353
                        } //#13353
                    } //#13353
                    if ($1.i < ($1.msglen - 2)) { //#13367
                        var _Ae = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#13358
                        var _Aj = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; //#13359
                        $k[$j++] = _Ae && _Aj; //#13360
                        $k[$j++] = $1.i + 2; //#13360
                        $1.numsscr(); //#13360
                        var _Al = $k[--$j]; //#13360
                        var _Am = $k[--$j]; //#13360
                        $k[$j++] = _Al; //#13360
                        $k[$j++] = _Am; //#13360
                        $j--; //#13360
                        var _An = $k[--$j]; //#13360
                        var _Ao = $k[--$j]; //#13360
                        if (_Ao && ((_An >= 2) && ((_An % 2) == 0))) { //#13366
                            $k[$j++] = $1.sb2; //#13361
                            $1.encc(); //#13361
                            $k[$j++] = $get($1.msg, $1.i); //#13362
                            $1.encb(); //#13362
                            $k[$j++] = $get($1.msg, $1.i + 1); //#13363
                            $1.encb(); //#13363
                            $1.i = $1.i + 2; //#13364
                            break; //#13365
                        } //#13365
                    } //#13365
                    if ($1.i < ($1.msglen - 3)) { //#13380
                        var _B3 = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#13370
                        var _B8 = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; //#13371
                        $k[$j++] = _B3 && _B8; //#13372
                        $k[$j++] = $1.i + 2; //#13372
                        $1.numsscr(); //#13372
                        var _BA = $k[--$j]; //#13372
                        var _BB = $k[--$j]; //#13372
                        $k[$j++] = _BA; //#13372
                        $k[$j++] = _BB; //#13372
                        $j--; //#13372
                        var _BC = $k[--$j]; //#13372
                        var _BD = $k[--$j]; //#13372
                        if (_BD && ((_BC >= 3) && ((_BC % 2) == 1))) { //#13379
                            $k[$j++] = $1.sb3; //#13373
                            $1.encc(); //#13373
                            $k[$j++] = $get($1.msg, $1.i); //#13374
                            $1.encb(); //#13374
                            $k[$j++] = $get($1.msg, $1.i + 1); //#13375
                            $1.encb(); //#13375
                            $k[$j++] = $get($1.msg, $1.i + 2); //#13376
                            $1.encb(); //#13376
                            $1.i = $1.i + 3; //#13377
                            break; //#13378
                        } //#13378
                    } //#13378
                    if ($1.i < ($1.msglen - 3)) { //#13394
                        var _BV = $get($1.setb, $get($1.msg, $1.i)) !== undefined; //#13383
                        var _Ba = $get($1.setb, $get($1.msg, $1.i + 1)) !== undefined; //#13384
                        var _Bf = $get($1.setb, $get($1.msg, $1.i + 2)) !== undefined; //#13385
                        $k[$j++] = (_BV && _Ba) && _Bf; //#13386
                        $k[$j++] = $1.i + 3; //#13386
                        $1.numsscr(); //#13386
                        var _Bh = $k[--$j]; //#13386
                        var _Bi = $k[--$j]; //#13386
                        $k[$j++] = _Bh; //#13386
                        $k[$j++] = _Bi; //#13386
                        $j--; //#13386
                        var _Bj = $k[--$j]; //#13386
                        var _Bk = $k[--$j]; //#13386
                        if (_Bk && ((_Bj >= 2) && ((_Bj % 2) == 0))) { //#13393
                            $k[$j++] = $1.sb3; //#13387
                            $1.encc(); //#13387
                            $k[$j++] = $get($1.msg, $1.i); //#13388
                            $1.encb(); //#13388
                            $k[$j++] = $get($1.msg, $1.i + 1); //#13389
                            $1.encb(); //#13389
                            $k[$j++] = $get($1.msg, $1.i + 2); //#13390
                            $1.encb(); //#13390
                            $1.i = $1.i + 3; //#13391
                            break; //#13392
                        } //#13392
                    } //#13392
                    $k[$j++] = $1.i; //#13396
                    $1.abeforeb(); //#13396
                    if ($k[--$j]) { //#13400
                        $k[$j++] = $1.swa; //#13397
                        $1.encc(); //#13397
                        $1.cset = "seta"; //#13398
                        break; //#13399
                    } //#13399
                    $k[$j++] = $1.swb; //#13402
                    $1.encc(); //#13402
                    $1.cset = "setb"; //#13403
                    break; //#13404
                } //#13404
                break; //#13406
            } //#13406
        } //#13406
        $1.cws = $geti($1.cws, 0, $1.j); //#13410
    } //#13410
    $1.metrics = $a([$a([2, 7]), $a([3, 12]), $a([4, 17]), $a([5, 22]), $a([6, 27]), $a([7, 32]), $a([8, 37]), $a([9, 42]), $a([10, 47]), $a([11, 52]), $a([12, 57]), $a([13, 62]), $a([14, 67]), $a([15, 72]), $a([16, 77])]); //#13431
    $1.urows = $1.rows; //#13434
    $1.i = 0; //#13435
    for (;;) { //#13445
        $1.m = $get($1.metrics, $1.i); //#13437
        $1.r = $get($1.m, 0); //#13438
        $1.dcws = $get($1.m, 1); //#13439
        $1.okay = true; //#13440
        if (($1.urows != 0) && ($1.urows != $1.r)) { //#13441
            $1.okay = false; //#13441
        } //#13441
        if ($1.cws.length > $1.dcws) { //#13442
            $1.okay = false; //#13442
        } //#13442
        if ($1.okay) { //#13443
            break; //#13443
        } //#13443
        $1.i = $1.i + 1; //#13444
    } //#13444
    $k[$j++] = Infinity; //#13448
    $aload($1.cws); //#13448
    for (var _Cb = 0, _Cc = $f($1.dcws - $1.cws.length); _Cb < _Cc; _Cb++) { //#13448
        $k[$j++] = 103; //#13448
    } //#13448
    $1.cws = $a(); //#13448
    $k[$j++] = Infinity; //#13451
    $k[$j++] = $f(($f($1.r - 2) * 7) + $1.mode); //#13451
    $aload($1.cws); //#13451
    $1.cws = $a(); //#13451
    $k[$j++] = 0; //#13454
    for (var _Ck = 0, _Cj = $1.dcws; _Ck <= _Cj; _Ck += 1) { //#13454
        var _Cn = $k[--$j]; //#13454
        $k[$j++] = $f(_Cn + ((_Ck + 2) * $get($1.cws, _Ck))); //#13454
    } //#13454
    $1.c1 = $k[--$j] % 107; //#13455
    $k[$j++] = 0; //#13456
    for (var _Cr = 0, _Cq = $1.dcws; _Cr <= _Cq; _Cr += 1) { //#13456
        var _Cu = $k[--$j]; //#13456
        $k[$j++] = $f(_Cu + ((_Cr + 1) * $get($1.cws, _Cr))); //#13456
    } //#13456
    $1.c2 = ($f($k[--$j] + ($1.c1 * $f($1.dcws + 2)))) % 107; //#13457
    $k[$j++] = Infinity; //#13458
    $aload($1.cws); //#13458
    $k[$j++] = $1.c1; //#13458
    $k[$j++] = $1.c2; //#13458
    $1.cws = $a(); //#13458
    $1.encs = $a(["212222", "222122", "222221", "121223", "121322", "131222", "122213", "122312", "132212", "221213", "221312", "231212", "112232", "122132", "122231", "113222", "123122", "123221", "223211", "221132", "221231", "213212", "223112", "312131", "311222", "321122", "321221", "312212", "322112", "322211", "212123", "212321", "232121", "111323", "131123", "131321", "112313", "132113", "132311", "211313", "231113", "231311", "112133", "112331", "132131", "113123", "113321", "133121", "313121", "211331", "231131", "213113", "213311", "213131", "311123", "311321", "331121", "312113", "312311", "332111", "314111", "221411", "431111", "111224", "111422", "121124", "121421", "141122", "141221", "112214", "112412", "122114", "122411", "142112", "142211", "241211", "221114", "413111", "241112", "134111", "111242", "121142", "121241", "114212", "124112", "124211", "411212", "421112", "421211", "212141", "214121", "412121", "111143", "111341", "131141", "114113", "114311", "411113", "411311", "113141", "114131", "311141", "411131", "211412", "211214", "211232", "211133"]); //#13478
    $1.startencs = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112"]); //#13484
    $1.stopencsodd = $a(["3211", "2221", "2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411"]); //#13488
    $1.stopencseven = $a(["2122", "1411", "1132", "1231", "1114", "3112", "1132", "1231", "1114", "3112", "3211", "2221", "2122", "1411", "3211", "2221"]); //#13492
    if (($1.pos == -1) || (((~~($1.pos / 10)) % 2) == 1)) { //#13496
        $1.stopencs = $1.stopencsodd; //#13494
    } else { //#13496
        $1.stopencs = $1.stopencseven; //#13496
    } //#13496
    $1.rowbits = $a($1.r); //#13500
    for (var _DE = 0, _DD = $f($1.r - 1); _DE <= _DD; _DE += 1) { //#13517
        $1.i = _DE; //#13502
        $k[$j++] = Infinity; //#13511
        $k[$j++] = 10; //#13505
        $forall($get($1.startencs, $1.i), function() { //#13505
            var _DI = $k[--$j]; //#13505
            $k[$j++] = $f(_DI - 48); //#13505
        }); //#13505
        var _DL = $geti($1.cws, $1.i * 5, 5); //#13507
        $k[$j++] = 1; //#13509
        for (var _DM = 0, _DN = _DL.length; _DM < _DN; _DM++) { //#13509
            $forall($get($1.encs, $get(_DL, _DM)), function() { //#13508
                var _DR = $k[--$j]; //#13508
                $k[$j++] = $f(_DR - 48); //#13508
            }); //#13508
        } //#13508
        $forall($get($1.stopencs, $1.i), function() { //#13510
            var _DV = $k[--$j]; //#13510
            $k[$j++] = $f(_DV - 48); //#13510
        }); //#13510
        $k[$j++] = 1; //#13511
        $1.sbs = $a(); //#13511
        $k[$j++] = Infinity; //#13513
        var _DX = $1.sbs; //#13514
        $k[$j++] = 1; //#13514
        for (var _DY = 0, _DZ = _DX.length; _DY < _DZ; _DY++) { //#13514
            var _Db = $k[--$j]; //#13514
            var _Dc = (_Db == 0) ? 1 : 0; //#13514
            $k[$j++] = _Db; //#13514
            for (var _Dd = 0, _De = $get(_DX, _DY); _Dd < _De; _Dd++) { //#13514
                $k[$j++] = _Dc //#13514
            } //#13514
        } //#13514
        $astore($a($counttomark() - 1)); //#13515
        var _Dh = $k[--$j]; //#13515
        var _Di = $k[--$j]; //#13515
        $k[$j++] = _Dh; //#13515
        $k[$j++] = _Di; //#13515
        $j--; //#13515
        var _Dj = $k[--$j]; //#13515
        var _Dk = $k[--$j]; //#13515
        $k[$j++] = _Dj; //#13515
        $k[$j++] = _Dk; //#13515
        $j--; //#13515
        $put($1.rowbits, $1.i, $k[--$j]); //#13516
    } //#13516
    $k[$j++] = Infinity; //#13528
    for (var _Dp = 0, _Dq = 81 * $1.sepheight; _Dp < _Dq; _Dp++) { //#13521
        $k[$j++] = 1; //#13521
    } //#13521
    for (var _Dt = 0, _Ds = $f($1.r - 2); _Dt <= _Ds; _Dt += 1) { //#13526
        $1.i = _Dt; //#13523
        for (var _Dv = 0, _Dw = $1.rowheight; _Dv < _Dw; _Dv++) { //#13524
            $aload($get($1.rowbits, $1.i)); //#13524
        } //#13524
        for (var _E1 = 0, _E2 = $1.sepheight; _E1 < _E2; _E1++) { //#13525
            for (var _E3 = 0, _E4 = 10; _E3 < _E4; _E3++) { //#13525
                $k[$j++] = 0; //#13525
            } //#13525
            for (var _E5 = 0, _E6 = 70; _E5 < _E6; _E5++) { //#13525
                $k[$j++] = 1; //#13525
            } //#13525
            $k[$j++] = 0; //#13525
        } //#13525
    } //#13525
    for (var _E8 = 0, _E9 = $1.rowheight; _E8 < _E9; _E8++) { //#13527
        $aload($get($1.rowbits, $f($1.r - 1))); //#13527
    } //#13527
    for (var _EE = 0, _EF = 81 * $1.sepheight; _EE < _EF; _EE++) { //#13528
        $k[$j++] = 1; //#13528
    } //#13528
    $1.pixs = $a(); //#13528
    var _EL = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", 81],
        ["pixy", ~~($1.pixs.length / 81)],
        ["height", (~~($1.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $1.options]
    ]); //#13539
    $k[$j++] = _EL; //#13542
    if (!$1.dontdraw) { //#13542
        bwipp_renmatrix(); //#13542
    } //#13542
}

function bwipp_code49() {
    var $1 = {}; //#13572
    $1.options = $k[--$j]; //#13574
    $1.barcode = $k[--$j]; //#13575
    $1.dontdraw = false; //#13577
    $1.mode = -1; //#13578
    $1.pos = -1; //#13579
    $1.rows = 0; //#13580
    $1.rowheight = 8; //#13581
    $1.sepheight = 1; //#13582
    $1.parse = false; //#13583
    $1.parsefnc = false; //#13584
    $forall($1.options, function() { //#13595
        var _3 = $k[--$j]; //#13595
        $1[$k[--$j]] = _3; //#13595
    }); //#13595
    $1.mode = ~~$1.mode; //#13597
    $1.pos = ~~$1.pos; //#13598
    $1.rows = ~~$1.rows; //#13599
    $1.rowheight = ~~$1.rowheight; //#13600
    $1.sepheight = ~~$1.sepheight; //#13601
    $1.s1 = -1; //#13604
    $1.s2 = -2; //#13604
    $1.fn1 = -3; //#13604
    $1.fn2 = -4; //#13604
    $1.fn3 = -5; //#13604
    $1.ns = -6; //#13604
    var _F = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["FNC1", $1.fn1],
        ["FNC2", $1.fn2],
        ["FNC3", $1.fn3]
    ]); //#13610
    $1.fncvals = _F; //#13611
    $k[$j++] = 'msg'; //#13612
    $k[$j++] = $1.barcode; //#13612
    $k[$j++] = $1.fncvals; //#13612
    bwipp_parseinput(); //#13612
    var _I = $k[--$j]; //#13612
    $1[$k[--$j]] = _I; //#13612
    $1.msglen = $1.msg.length; //#13613
    $1.charmap = $a(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", $1.s1, $1.s2, $1.fn1, $1.fn2, $1.fn3, $1.ns]); //#13622
    $1.charvals = new Map; //#13625
    for (var _S = 0; _S <= 48; _S += 1) { //#13631
        $1.i = _S; //#13627
        var _V = $get($1.charmap, $1.i); //#13628
        $k[$j++] = _V; //#13629
        if ($eq($type(_V), 'stringtype')) { //#13629
            var _Y = $get($k[--$j], 0); //#13629
            $k[$j++] = _Y; //#13629
        } //#13629
        $put($1.charvals, $k[--$j], $1.i); //#13630
    } //#13630
    $1.combos = $a(["1 ", "1A", "1B", "1C", "1D", "1E", "1F", "1G", "1H", "1I", "1J", "1K", "1L", "1M", "1N", "1O", "1P", "1Q", "1R", "1S", "1T", "1U", "1V", "1W", "1X", "1Y", "1Z", "11", "12", "13", "14", "15", "  ", "16", "17", "18", " $", " %", "19", "10", "1-", "1.", "1$", " +", "1/", " -", " .", " /", " 0", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", "1+", "21", "22", "23", "24", "25", "26", " A", " B", " C", " D", " E", " F", " G", " H", " I", " J", " K", " L", " M", " N", " O", " P", " Q", " R", " S", " T", " U", " V", " W", " X", " Y", " Z", "27", "28", "29", "20", "2-", "2.", "2A", "2B", "2C", "2D", "2E", "2F", "2G", "2H", "2I", "2J", "2K", "2L", "2M", "2N", "2O", "2P", "2Q", "2R", "2S", "2T", "2U", "2V", "2W", "2X", "2Y", "2Z", "2$", "2/", "2+", "2%", "2 "]); //#13643
    for (var _d = 0; _d <= 127; _d += 1) { //#13653
        $1.i = _d; //#13645
        var _g = $get($1.combos, $1.i); //#13646
        $1.c1 = $get(_g, 0); //#13646
        $1.c2 = $get(_g, 1); //#13646
        if ($1.c1 == 49) { //#13649
            $put($1.charvals, $1.i, $a([$get($1.charvals, $1.s1), $get($1.charvals, $1.c2)])); //#13648
        } //#13648
        if ($1.c1 == 50) { //#13652
            $put($1.charvals, $1.i, $a([$get($1.charvals, $1.s2), $get($1.charvals, $1.c2)])); //#13651
        } //#13651
    } //#13651
    $1.encodealpha = function() {
        var _15 = $get($1.charvals, $k[--$j]); //#13656
        $k[$j++] = _15; //#13657
        if ($ne($type(_15), 'arraytype')) { //#13657
            $astore($a(1)); //#13657
        } //#13657
        var _18 = $k[--$j]; //#13658
        $puti($1.cws, $1.j, _18); //#13658
        $1.j = _18.length + $1.j; //#13659
    }; //#13660
    $1.base48 = function() {
        var _1C = $k[--$j]; //#13663
        $k[$j++] = 0; //#13663
        $forall(_1C, function() { //#13663
            var _1D = $k[--$j]; //#13663
            var _1E = $k[--$j]; //#13663
            $k[$j++] = $f($f(_1D - 48) + (_1E * 10)); //#13663
        }); //#13663
        $k[$j++] = Infinity; //#13664
        var _1F = $k[--$j]; //#13664
        var _1G = $k[--$j]; //#13664
        var _1H = $k[--$j]; //#13664
        $k[$j++] = _1F; //#13664
        $k[$j++] = _1G; //#13664
        for (var _1I = 0, _1J = $f(_1H - 1); _1I < _1J; _1I++) { //#13664
            var _1K = $k[--$j]; //#13664
            $k[$j++] = _1K % 48; //#13664
            $k[$j++] = ~~(_1K / 48); //#13664
        } //#13664
        var _1L = $a(); //#13664
        $k[$j++] = _1L; //#13665
        $k[$j++] = Infinity; //#13665
        var _1M = $k[--$j]; //#13665
        var _1N = $k[--$j]; //#13665
        $k[$j++] = _1M; //#13665
        $k[$j++] = _1N; //#13665
        for (var _1O = _1N.length - 1; _1O >= 0; _1O -= 1) { //#13665
            var _1P = $k[--$j]; //#13665
            $k[$j++] = $get(_1P, _1O); //#13665
            $k[$j++] = _1P; //#13665
        } //#13665
        $j--; //#13665
        var _1R = $a(); //#13665
        $puti($1.cws, $1.j, _1R); //#13666
        $1.j = _1R.length + $1.j; //#13667
    }; //#13668
    $1.encodenumeric = function() {
        $1.nums = $k[--$j]; //#13671
        var _1X = $1.nums.length; //#13672
        var _1Y = _1X % 5; //#13672
        $k[$j++] = 'pre'; //#13672
        $k[$j++] = _1X; //#13672
        $k[$j++] = _1Y; //#13672
        if (_1Y != 2) { //#13672
            var _1Z = $k[--$j]; //#13672
            var _1a = $k[--$j]; //#13672
            $k[$j++] = $f(_1a - _1Z); //#13672
        } else { //#13672
            var _1b = $k[--$j]; //#13672
            var _1c = $k[--$j]; //#13672
            $k[$j++] = $f($f(_1c - _1b) - 5); //#13672
        } //#13672
        var _1d = $k[--$j]; //#13672
        $1[$k[--$j]] = _1d; //#13672
        for (var _1h = 0, _1g = $f($1.pre - 1); _1h <= _1g; _1h += 5) { //#13673
            $k[$j++] = 3; //#13673
            $k[$j++] = $geti($1.nums, _1h, 5); //#13673
            $1.base48(); //#13673
        } //#13673
        $1.nums = $geti($1.nums, $1.pre, $f($1.nums.length - $1.pre)); //#13674
        var _1q = $1.nums.length; //#13676
        $k[$j++] = _1q; //#13676
        if (_1q == 1) { //#13676
            $k[$j++] = $get($1.nums, $1.i); //#13676
            $1.encodealpha(); //#13676
        } //#13676
        var _1u = $k[--$j]; //#13677
        $k[$j++] = _1u; //#13677
        if (_1u == 3) { //#13677
            $k[$j++] = 2; //#13677
            $k[$j++] = $1.nums; //#13677
            $1.base48(); //#13677
        } //#13677
        var _1w = $k[--$j]; //#13678
        $k[$j++] = _1w; //#13678
        if (_1w == 4) { //#13678
            $k[$j++] = 3; //#13678
            $k[$j++] = Infinity; //#13678
            $k[$j++] = 49; //#13678
            $k[$j++] = 48; //#13678
            $aload($1.nums); //#13678
            var _1y = $a(); //#13678
            $k[$j++] = _1y; //#13678
            $1.base48(); //#13678
        } //#13678
        if ($k[--$j] == 7) { //#13682
            $k[$j++] = 3; //#13680
            $k[$j++] = Infinity; //#13680
            $k[$j++] = 49; //#13680
            $k[$j++] = 48; //#13680
            $aload($geti($1.nums, 0, 4)); //#13680
            var _22 = $a(); //#13680
            $k[$j++] = _22; //#13680
            $1.base48(); //#13680
            $k[$j++] = 2; //#13681
            $k[$j++] = $geti($1.nums, 4, 3); //#13681
            $1.base48(); //#13681
        } //#13681
    }; //#13683
    $k[$j++] = Infinity; //#13686
    for (var _26 = 0, _27 = $1.msglen; _26 < _27; _26++) { //#13686
        $k[$j++] = 0; //#13686
    } //#13686
    $k[$j++] = 0; //#13686
    $1.numericruns = $a(); //#13686
    for (var _2A = $1.msglen - 1; _2A >= 0; _2A -= 1) { //#13695
        $1.i = _2A; //#13688
        var _2D = $get($1.msg, $1.i); //#13689
        if ((_2D >= 48) && (_2D <= 57)) { //#13693
            $put($1.numericruns, $1.i, $f($get($1.numericruns, $1.i + 1) + 1)); //#13691
        } else { //#13693
            $put($1.numericruns, $1.i, 0); //#13693
        } //#13693
    } //#13693
    if ($1.mode == -1) { //#13707
        for (;;) { //#13706
            if ($1.pos != -1) { //#13700
                $1.mode = 3; //#13700
                break; //#13700
            } //#13700
            if ($get($1.numericruns, 0) >= 5) { //#13701
                $1.mode = 2; //#13701
                break; //#13701
            } //#13701
            var _2S = $get($1.charvals, $get($1.msg, 0)); //#13702
            $k[$j++] = _2S; //#13703
            if ($ne($type(_2S), 'arraytype')) { //#13703
                $j--; //#13703
                $1.mode = 0; //#13703
                break; //#13703
            } //#13703
            var _2W = ($get($k[--$j], 0) == 43) ? 4 : 5; //#13704
            $1.mode = _2W; //#13704
            break; //#13705
        } //#13705
    } //#13705
    $1.cws = $a(($1.msglen * 2) + 1); //#13709
    $1.method = "alpha"; //#13710
    $1.i = -1; //#13710
    $1.j = -1; //#13710
    if (($1.mode == 0) || ($1.mode == 1)) { //#13713
        $1.method = "alpha"; //#13713
        $1.i = 0; //#13713
        $1.j = 0; //#13713
    } //#13713
    if ($1.mode == 2) { //#13714
        $1.method = "numeric"; //#13714
        $1.i = 0; //#13714
        $1.j = 0; //#13714
    } //#13714
    if ($1.mode == 3) { //#13728
        $1.posval = $a([12, 22, 13, 23, 33, 14, 24, 34, 44, 15, 25, 35, 45, 55, 16, 26, 36, 46, 56, 66, 17, 27, 37, 47, 57, 67, 77, 18, 28, 38, 48, 58, 68, 78, 88, 19, 29, 39, 49, 59, 69, 79, 89, 99]); //#13725
        $k[$j++] = $1.cws; //#13726
        $k[$j++] = 0; //#13726
        for (var _2f = 0; _2f <= 43; _2f += 1) { //#13726
            $k[$j++] = _2f; //#13726
            if ($get($1.posval, _2f) != $1.pos) { //#13726
                $j--; //#13726
            } //#13726
        } //#13726
        var _2j = $k[--$j]; //#13726
        var _2k = $k[--$j]; //#13726
        $put($k[--$j], _2k, $f(_2j + 1)); //#13726
        $1.method = "alpha"; //#13727
        $1.i = 0; //#13727
        $1.j = 1; //#13727
    } //#13727
    if (($1.mode == 4) || ($1.mode == 5)) { //#13732
        $put($1.cws, 0, $get($get($1.charvals, $get($1.msg, 0)), 1)); //#13730
        $1.method = "alpha"; //#13731
        $1.i = 1; //#13731
        $1.j = 1; //#13731
    } //#13731
    for (;;) { //#13759
        if ($1.i == $1.msglen) { //#13736
            break; //#13736
        } //#13736
        for (;;) { //#13758
            if ($eq($1.method, "alpha")) { //#13747
                if ($get($1.numericruns, $1.i) >= 5) { //#13743
                    $k[$j++] = $1.ns; //#13740
                    $1.encodealpha(); //#13740
                    $1.method = "numeric"; //#13741
                    break; //#13742
                } //#13742
                $k[$j++] = $get($1.msg, $1.i); //#13744
                $1.encodealpha(); //#13744
                $1.i = $1.i + 1; //#13745
                break; //#13746
            } //#13746
            if ($eq($1.method, "numeric")) { //#13757
                if ($get($1.numericruns, $1.i) < 5) { //#13753
                    $k[$j++] = $1.ns; //#13750
                    $1.encodealpha(); //#13750
                    $1.method = "alpha"; //#13751
                    break; //#13752
                } //#13752
                $k[$j++] = $geti($1.msg, $1.i, $get($1.numericruns, $1.i)); //#13754
                $1.encodenumeric(); //#13754
                $1.i = $f($1.i + $get($1.numericruns, $1.i)); //#13755
                break; //#13756
            } //#13756
        } //#13756
    } //#13756
    $1.cws = $geti($1.cws, 0, $1.j); //#13760
    $1.metrics = $a([$a([2, 9]), $a([3, 16]), $a([4, 23]), $a([5, 30]), $a([6, 37]), $a([7, 42]), $a([8, 49])]); //#13772
    $1.urows = $1.rows; //#13775
    $1.i = 0; //#13776
    for (;;) { //#13786
        $1.m = $get($1.metrics, $1.i); //#13778
        $1.r = $get($1.m, 0); //#13779
        $1.dcws = $get($1.m, 1); //#13780
        $1.okay = true; //#13781
        if (($1.urows != 0) && ($1.urows != $1.r)) { //#13782
            $1.okay = false; //#13782
        } //#13782
        if ($1.cws.length > $1.dcws) { //#13783
            $1.okay = false; //#13783
        } //#13783
        if ($1.okay) { //#13784
            break; //#13784
        } //#13784
        $1.i = $1.i + 1; //#13785
    } //#13785
    $k[$j++] = Infinity; //#13789
    $aload($1.cws); //#13789
    for (var _3n = 0, _3o = $f($1.dcws - $1.cws.length); _3n < _3o; _3n++) { //#13789
        $k[$j++] = 48; //#13789
    } //#13789
    $1.cws = $a(); //#13789
    $1.ccs = $a($1.r * 8); //#13792
    $1.j = 0; //#13793
    for (var _3u = 0, _3t = $f($1.r - 2); _3u <= _3t; _3u += 1) { //#13800
        $1.i = _3u; //#13795
        $1.cc = $geti($1.cws, $1.j, 7); //#13796
        $puti($1.ccs, $1.i * 8, $1.cc); //#13797
        var _43 = $1.cc; //#13798
        $k[$j++] = $1.ccs; //#13798
        $k[$j++] = ($1.i * 8) + 7; //#13798
        $k[$j++] = 0; //#13798
        for (var _44 = 0, _45 = _43.length; _44 < _45; _44++) { //#13798
            var _47 = $k[--$j]; //#13798
            $k[$j++] = $f(_47 + $get(_43, _44)); //#13798
        } //#13798
        var _48 = $k[--$j]; //#13798
        var _49 = $k[--$j]; //#13798
        $put($k[--$j], _49, _48 % 49); //#13798
        $1.j = $1.j + 7; //#13799
    } //#13799
    if ($1.j < $1.dcws) { //#13803
        $puti($1.ccs, $1.ccs.length - 8, $geti($1.cws, $1.j, $f($1.dcws - $1.j))); //#13802
    } //#13802
    $1.cr7 = $f(($f($1.r - 2) * 7) + $1.mode); //#13806
    $put($1.ccs, $1.ccs.length - 2, $1.cr7); //#13807
    var _4Q = $a([1, 9, 31, 26, 2, 12, 17, 23, 37, 18, 22, 6, 27, 44, 15, 43, 39, 11, 13, 5, 41, 33, 36, 8, 4, 32, 3, 19, 40, 25, 29, 10, 24, 30]); //#13811
    $k[$j++] = _4Q; //#13812
    $k[$j++] = _4Q; //#13812
    $k[$j++] = Infinity; //#13812
    var _4R = $k[--$j]; //#13812
    var _4T = $geti($k[--$j], 0, 32); //#13812
    $k[$j++] = _4R; //#13812
    $k[$j++] = 20; //#13812
    $aload(_4T); //#13812
    $1.weightx = $a(); //#13812
    var _4V = $k[--$j]; //#13813
    $k[$j++] = _4V; //#13813
    $k[$j++] = _4V; //#13813
    $k[$j++] = Infinity; //#13813
    var _4W = $k[--$j]; //#13813
    var _4Y = $geti($k[--$j], 1, 32); //#13813
    $k[$j++] = _4W; //#13813
    $k[$j++] = 16; //#13813
    $aload(_4Y); //#13813
    $1.weighty = $a(); //#13813
    $k[$j++] = Infinity; //#13814
    var _4a = $k[--$j]; //#13814
    var _4c = $geti($k[--$j], 2, 32); //#13814
    $k[$j++] = _4a; //#13814
    $k[$j++] = 38; //#13814
    $aload(_4c); //#13814
    $1.weightz = $a(); //#13814
    $1.calccheck = function() {
        $1.weights = $k[--$j]; //#13816
        $1.score = 0; //#13817
        for (var _4h = 0, _4g = (~~(($f($1.r - 1) * 8) / 2)) - 1; _4h <= _4g; _4h += 1) { //#13822
            $1.i = _4h; //#13819
            $1.score = $f((($f(($get($1.ccs, $1.i * 2) * 49) + $get($1.ccs, ($1.i * 2) + 1))) * $get($1.weights, $1.i + 1)) + $1.score); //#13821
        } //#13821
        $k[$j++] = $1.score; //#13823
    }; //#13824
    $1.lastrow = $geti($1.ccs, $1.ccs.length - 8, 8); //#13825
    if ($1.r >= 7) { //#13832
        $k[$j++] = $1.cr7 * $get($1.weightz, 0); //#13829
        $k[$j++] = $1.weightz; //#13829
        $1.calccheck(); //#13829
        var _51 = $k[--$j]; //#13829
        var _53 = $f($k[--$j] + _51) % 2401; //#13830
        $k[$j++] = ~~(_53 / 49); //#13830
        $k[$j++] = _53 % 49; //#13830
        $astore($a(2)); //#13830
        $puti($1.lastrow, 0, $k[--$j]); //#13831
    } //#13831
    $1.wr1 = $f(($get($1.lastrow, 0) * 49) + $get($1.lastrow, 1)); //#13833
    $k[$j++] = $1.cr7 * $get($1.weighty, 0); //#13836
    $k[$j++] = $1.weighty; //#13836
    $1.calccheck(); //#13836
    var _5F = $k[--$j]; //#13836
    var _5L = ($f($f($k[--$j] + _5F) + ($1.wr1 * $get($1.weighty, $f(($1.r * 4) - 3))))) % 2401; //#13838
    $1.wr2 = _5L; //#13838
    $k[$j++] = ~~(_5L / 49); //#13839
    $k[$j++] = _5L % 49; //#13839
    $astore($a(2)); //#13839
    $puti($1.lastrow, 2, $k[--$j]); //#13840
    $k[$j++] = $1.cr7 * $get($1.weightx, 0); //#13843
    $k[$j++] = $1.weightx; //#13843
    $1.calccheck(); //#13843
    var _5T = $k[--$j]; //#13843
    var _5d = ($f(($f($f($k[--$j] + _5T) + ($1.wr1 * $get($1.weightx, $f(($1.r * 4) - 3))))) + ($1.wr2 * $get($1.weightx, $f(($1.r * 4) - 2))))) % 2401; //#13847
    $k[$j++] = ~~(_5d / 49); //#13847
    $k[$j++] = _5d % 49; //#13847
    $astore($a(2)); //#13847
    $puti($1.lastrow, 4, $k[--$j]); //#13848
    var _5j = $geti($1.ccs, $1.ccs.length - 8, 7); //#13851
    $k[$j++] = 0; //#13851
    for (var _5k = 0, _5l = _5j.length; _5k < _5l; _5k++) { //#13851
        var _5n = $k[--$j]; //#13851
        $k[$j++] = $f(_5n + $get(_5j, _5k)); //#13851
    } //#13851
    $put($1.ccs, $1.ccs.length - 1, $k[--$j] % 49); //#13852
    $1.patterns = $a([$a(["11521132", "25112131", "14212132", "25121221", "14221222", "12412132", "23321221", "12421222", "21521221", "15112222", "15121312", "13312222", "24221311", "13321312", "11512222", "22421311", "11521312", "25112311", "14212312", "23312311", "12412312", "21512311", "16121131", "14321131", "12521131", "15212131", "15221221", "13412131", "13421221", "11612131", "16112221", "16121311", "14312221", "14321311", "12512221", "12521311", "15212311", "13412311", "11612311", "11131135", "31131133", "51131131", "21122134", "41122132", "21131224", "41131222", "11113135", "31113133", "51113131", "11122225", "31122223", "51122221", "11131315", "31131313", "51131311", "21113224", "41113222", "21122314", "41122312", "11113315", "31113313", "51113311", "12131134", "32131132", "21231133", "41231131", "22122133", "42122131", "11222134", "22131223", "42131221", "11231224", "31231222", "12113134", "32113132", "12122224", "32122222", "12131314", "32131312", "21231313", "41231311", "22113223", "42113221", "11213224", "22122313", "42122311", "11222314", "31222312", "12113314", "32113312", "21213313", "41213311", "13131133", "33131131", "22231132", "11331133", "31331131", "23122132", "12222133", "23131222", "12231223", "32231221", "21331222", "13113133", "33113131", "13122223", "33122221", "11313133", "13131313", "33131311", "11322223", "22231312", "11331313", "31331311", "23113222", "12213223", "23122312", "12222313", "32222311", "21322312", "13113313", "33113311", "22213312", "11313313", "31313311", "14131132", "23231131", "12331132", "21431131", "24122131", "13222132", "24131221", "13231222", "11422132", "22331221", "11431222", "14113132", "14122222", "12313132", "14131312", "12322222", "23231311", "12331312", "21431311", "24113221", "13213222", "24122311", "13222312", "11413222", "22322311", "11422312", "14113312", "23213311", "12313312", "21413311", "15131131", "13331131", "14222131", "14231221", "12422131", "12431221", "15113131", "15122221", "13313131", "15131311", "13322221", "11513131", "13331311", "11522221", "14213221", "14222311", "12413221", "12422311", "15113311", "13313311", "11513311", "11141134", "31141132", "21132133", "41132131", "21141223", "41141221", "11123134", "31123132", "11132224", "31132222", "11141314", "31141312", "21114133", "41114131", "21123223", "41123221", "21132313", "41132311", "11114224", "31114222", "11123314", "31123312", "21114313", "41114311", "12141133", "32141131", "21241132", "22132132", "11232133", "22141222", "11241223", "31241221", "12123133", "32123131", "12132223", "32132221", "12141313", "32141311", "21241312", "22114132", "11214133", "22123222", "11223223", "22132312", "11232313", "31232311", "12114223", "32114221", "12123313", "32123311", "21223312", "22114312", "11214313", "31214311", "13141132", "22241131", "11341132", "23132131", "12232132", "23141221", "12241222", "21341221", "13123132", "13132222", "11323132", "13141312", "11332222", "22241311", "11341312", "23114131", "12214132", "23123221", "12223222", "23132311", "12232312", "21332311", "13114222", "13123312", "11314222", "22223311", "11323312", "23114311", "12214312", "21314311", "14141131", "12341131", "13232131", "13241221", "11432131", "14123131", "14132221", "12323131", "14141311", "12332221", "12341311", "13214131", "13223221", "11414131", "13232311", "11423221", "11432311", "14114221", "14123311", "12314221", "12323311", "13214311", "11414311", "11151133", "31151131", "21142132", "21151222", "11133133", "31133131", "11142223", "31142221", "11151313", "31151311", "21124132", "21133222", "21142312", "11115133", "31115131", "11124223", "31124221", "11133313", "31133311", "21115222", "21124312", "12151132", "21251131", "22142131", "11242132", "22151221", "11251222", "12133132", "12142222", "12151312", "21251311", "22124131", "11224132", "22133221", "11233222", "22142311", "11242312", "12115132", "12124222", "12133312", "21233311", "22115221", "11215222", "22124311", "11224312", "13151131", "12242131", "12251221", "13133131", "13142221", "11333131", "13151311", "11342221", "12224131", "12233221", "12242311", "13115131", "13124221", "11315131", "13133311", "11324221", "11333311", "12215221", "12224311", "11161132", "21152131", "21161221", "11143132", "11152222", "11161312", "21134131", "21143221", "21152311", "11125132", "11134222", "11143312", "21116131", "21125221", "21134311", "12161131", "11252131", "12143131", "12152221", "12161311", "11234131", "11243221", "11252311", "12125131", "12134221", "12143311", "11216131", "11225221", "11234311", "11111236", "31111234", "51111232", "21111325", "41111323", "61111321", "11111416", "31111414", "51111412", "31211143", "51211141", "12111235", "32111233", "52111231", "21211234", "41211232", "22111324", "42111322", "11211325", "31211323", "51211321", "12111415", "32111413", "52111411", "21211414", "41211412", "12211144", "32211142", "21311143", "41311141", "13111234", "33111232", "22211233", "42211231", "11311234", "31311232", "23111323", "43111321", "12211324", "32211322", "21311323", "41311321", "13111414", "33111412", "22211413", "42211411", "11311414", "31311412", "13211143", "33211141", "22311142", "11411143", "31411141", "14111233", "34111231", "23211232", "12311233", "32311231", "21411232", "24111322", "13211323", "33211321", "22311322", "11411323", "31411321", "14111413", "34111411", "23211412", "12311413", "32311411", "21411412", "14211142", "23311141", "12411142", "21511141", "15111232", "24211231", "13311232", "22411231", "11511232", "25111321", "14211322", "23311321", "12411322", "21511321", "15111412", "24211411", "13311412", "22411411", "11511412", "15211141", "13411141", "11611141", "16111231", "14311231", "12511231", "15211321", "13411321", "11611321", "16111411", "14311411", "12511411", "21121144", "41121142", "11112145", "31112143", "51112141", "11121235", "31121233", "51121231", "21112234", "41112232", "21121324", "41121322", "11112325", "31112323", "51112321", "11121415", "31121413", "51121411", "21112414", "41112412", "22121143", "42121141", "11221144", "31221142", "12112144", "32112142", "12121234", "32121232", "21221233", "41221231", "22112233", "42112231", "11212234", "22121323", "42121321", "11221324", "31221322", "12112324", "32112322", "12121414", "32121412", "21221413", "41221411", "22112413", "42112411", "11212414", "31212412", "23121142", "12221143", "32221141", "21321142", "13112143", "33112141", "13121233", "33121231", "11312143", "22221232", "11321233", "31321231", "23112232", "12212233", "23121322", "12221323", "32221321", "21321322", "13112323", "33112321", "13121413", "33121411", "11312323", "22221412", "11321413", "31321411", "23112412", "12212413", "32212411", "21312412", "24121141", "13221142", "22321141", "11421142", "14112142", "14121232", "12312142", "23221231", "12321232", "21421231", "24112231", "13212232", "24121321", "13221322", "11412232", "22321321", "11421322", "14112322", "14121412", "12312322", "23221411", "12321412", "21421411", "24112411", "13212412", "22312411", "11412412", "14221141", "12421141", "15112141", "15121231", "13312141", "13321231", "11512141", "11521231", "14212231", "14221321", "12412231", "12421321", "15112321", "15121411", "13312321", "13321411", "11512321", "11521411", "14212411", "12412411", "21131143", "41131141", "11122144", "31122142", "11131234", "31131232", "21113143", "41113141", "21122233", "41122231", "21131323", "41131321", "11113234", "31113232", "11122324", "31122322", "11131414", "31131412", "21113323", "41113321", "21122413", "41122411", "11113414", "31113412", "22131142", "11231143", "31231141", "12122143", "32122141", "12131233", "32131231", "21231232", "22113142", "11213143", "22122232", "11222233", "22131322", "11231323", "31231321", "12113233", "32113231", "12122323", "32122321", "12131413", "32131411", "21231412", "22113322", "11213323", "22122412", "11222413", "31222411", "12113413", "32113411", "21213412", "23131141", "12231142", "21331141", "13122142", "13131232", "11322142", "22231231", "11331232", "23113141", "12213142", "23122231", "12222232", "23131321", "12231322", "21331321", "13113232", "13122322", "11313232", "13131412", "11322322", "22231411", "11331412", "23113321", "12213322", "23122411", "12222412", "21322411", "13113412", "22213411", "11313412", "13231141", "11431141", "14122141", "14131231", "12322141", "12331231", "13213141", "13222231", "11413141", "13231321", "11422231", "11431321", "14113231", "14122321", "12313231", "14131411", "12322321", "12331411", "13213321", "13222411", "11413321", "11422411", "14113411", "12313411", "21141142", "11132143", "31132141", "11141233", "31141231", "21123142", "21132232", "21141322", "11114143", "31114141", "11123233", "31123231", "11132323", "31132321", "11141413", "31141411", "21114232", "21123322", "21132412", "11114323", "31114321", "11123413", "31123411", "22141141", "11241142", "12132142", "12141232", "21241231", "22123141", "11223142", "22132231", "11232232", "22141321", "11241322", "12114142", "12123232", "12132322", "12141412", "21241411", "22114231", "11214232", "22123321", "11223322", "22132411", "11232412", "12114322", "12123412", "21223411", "12241141", "13132141", "13141231", "11332141", "11341231", "12223141", "12232231", "12241321", "13114141", "13123231", "11314141", "13132321", "11323231", "13141411", "11332321", "11341411", "12214231", "12223321", "12232411", "13114321", "13123411", "11314321", "11323411", "21151141", "11142142", "11151232", "21133141", "21142231", "21151321", "11124142", "11133232", "11142322", "11151412", "21115141", "21124231", "21133321", "21142411", "11115232", "11124322", "11133412", "11251141", "12142141", "12151231", "11233141", "11242231", "11251321", "12124141", "12133231", "12142321", "12151411", "11215141", "11224231", "11233321", "11242411", "12115231", "12124321", "12133411", "11152141", "11161231", "11134141", "11143231", "11152321", "11161411", "11116141", "11125231", "11134321", "11143411", "21111244", "41111242", "11111335", "31111333", "51111331", "21111424", "41111422", "11111515", "31111513", "51111511", "21211153", "41211151", "22111243", "42111241", "11211244", "31211242", "12111334", "32111332", "21211333", "41211331", "22111423", "42111421", "11211424", "31211422", "12111514", "32111512", "21211513", "41211511", "22211152", "11311153", "31311151", "23111242", "12211243", "32211241", "21311242", "13111333", "33111331", "22211332", "11311333", "31311331", "23111422", "12211423", "32211421", "21311422", "13111513", "33111511", "22211512", "11311513", "31311511", "23211151", "12311152", "21411151", "24111241", "13211242", "22311241", "11411242", "14111332", "23211331", "12311332", "21411331", "24111421", "13211422", "22311421", "11411422", "14111512", "23211511", "12311512", "21411511", "13311151", "11511151", "14211241", "12411241", "15111331", "13311331", "11511331", "14211421", "12411421", "15111511", "13311511", "11511511", "31121152", "21112153", "41112151", "21121243", "41121241", "11112244", "31112242", "11121334", "31121332", "21112333", "41112331", "21121423", "41121421", "11112424", "31112422", "11121514", "31121512", "21112513", "41112511", "12121153", "32121151", "21221152", "22112152", "11212153", "22121242", "11221243", "31221241", "12112243", "32112241", "12121333", "32121331", "21221332", "22112332", "11212333", "22121422", "11221423", "31221421", "12112423", "32112421", "12121513", "32121511", "21221512", "22112512", "11212513", "31212511", "13121152", "22221151", "11321152", "23112151", "12212152", "23121241", "12221242", "21321241", "13112242", "13121332", "11312242", "22221331", "11321332", "23112331", "12212332", "23121421", "12221422", "21321421", "13112422", "13121512", "11312422", "22221511", "11321512", "23112511", "12212512", "21312511", "14121151", "12321151", "13212151", "13221241", "11412151", "11421241", "14112241", "14121331", "12312241", "12321331", "13212331", "13221421", "11412331", "11421421", "14112421", "14121511", "12312421", "12321511", "13212511", "11412511", "11131153", "31131151", "21122152", "21131242", "11113153", "31113151", "11122243", "31122241", "11131333", "31131331", "21113242", "21122332", "21131422", "11113333", "31113331", "11122423", "31122421", "11131513", "31131511", "21113422", "21122512", "12131152", "21231151", "22122151", "11222152", "22131241", "11231242", "12113152", "12122242", "12131332", "21231331", "22113241", "11213242", "22122331", "11222332", "22131421", "11231422", "12113332", "12122422", "12131512", "21231511", "22113421", "11213422", "22122511", "11222512", "13131151", "11331151", "12222151", "12231241", "13113151", "13122241", "11313151", "13131331", "11322241", "11331331", "12213241", "12222331", "12231421", "13113331", "13122421", "11313331", "13131511", "11322421", "11331511", "12213421", "12222511", "11141152", "21132151", "21141241", "11123152", "11132242", "11141332", "21114151", "21123241", "21132331", "21141421", "11114242", "11123332", "11132422", "11141512", "21114331", "21123421", "21132511", "12141151", "11232151", "11241241", "12123151", "12132241", "12141331", "11214151", "11223241", "11232331", "11241421", "12114241", "12123331", "12132421", "12141511", "11214331", "11223421", "11232511", "11151151", "11133151", "11142241", "11151331", "11115151", "11124241", "11133331", "11142421", "11151511", "11111254", "31111252", "21111343", "41111341", "11111434", "31111432", "21111523", "41111521", "11111614", "31111612", "31211161", "12111253", "32111251", "21211252", "22111342", "11211343", "31211341", "12111433", "32111431", "21211432", "22111522", "11211523", "31211521", "12111613", "32111611", "21211612", "12211162", "21311161", "13111252", "22211251", "11311252", "23111341", "12211342", "21311341", "13111432", "22211431", "11311432", "23111521", "12211522", "21311521", "13111612", "22211611", "11311612", "13211161", "11411161", "14111251", "12311251", "13211341", "11411341", "14111431", "12311431", "13211521", "11411521", "14111611", "12311611", "21121162", "11112163", "31112161", "11121253", "31121251", "21112252", "21121342", "11112343", "31112341", "11121433", "31121431", "21112432", "21121522", "11112523", "31112521", "11121613", "31121611", "22121161", "11221162", "12112162", "12121252", "21221251", "22112251", "11212252", "22121341", "11221342", "12112342", "12121432", "21221431", "22112431", "11212432", "22121521", "11221522", "12112522", "12121612", "21221611", "12221161", "13112161", "13121251", "11312161", "11321251", "32121115", "52121113", "21221116", "41221114", "61221112", "22112116", "42112114", "31212115", "51212113", "13121116", "33121114", "22221115", "42221113", "11321116", "31321114", "51321112", "23112115", "43112113", "12212116", "32212114", "52212112", "21312115", "41312113", "61312111", "14121115", "34121113", "23221114", "43221112", "12321115", "32321113", "52321111", "21421114", "41421112", "24112114", "13212115", "33212113", "22312114", "42312112", "11412115", "31412113", "51412111", "15121114", "24221113", "13321114", "33321112", "22421113", "42421111", "11521114", "31521112", "25112113", "14212114", "34212112", "23312113", "43312111", "12412114", "32412112", "21512113", "41512111", "16121113", "25221112", "14321113", "34321111", "23421112", "12521113", "32521111", "15212113", "24312112", "13412113", "33412111", "22512112", "11612113", "31612111", "31131115", "51131113", "21122116", "41122114", "61122112", "31113115", "51113113", "12131116", "32131114", "52131112", "21231115", "41231113", "61231111", "22122115", "42122113", "11222116", "31222114", "51222112", "12113116", "32113114", "52113112", "21213115", "41213113", "61213111", "13131115", "33131113", "22231114", "42231112", "11331115", "31331113", "51331111", "23122114", "43122112", "12222115", "32222113", "52222111", "21322114", "41322112", "13113115", "33113113", "22213114", "42213112", "11313115", "31313113", "51313111", "14131114", "34131112", "23231113", "43231111", "12331114", "32331112", "21431113", "41431111", "24122113", "13222114", "33222112", "22322113", "42322111", "11422114", "31422112", "14113114", "34113112", "23213113", "43213111", "12313114", "32313112", "21413113", "41413111", "15131113", "24231112", "13331113", "33331111", "22431112", "25122112", "14222113", "34222111", "23322112", "12422113", "32422111", "21522112", "15113113", "24213112", "13313113", "33313111", "22413112", "11513113", "31513111", "16131112", "25231111", "14331112", "23431111", "15222112", "24322111", "13422112", "22522111", "16113112", "25213111", "14313112", "23413111", "12513112", "21613111", "11141116", "31141114", "51141112", "21132115", "41132113", "61132111", "11123116", "31123114", "51123112", "21114115", "41114113", "61114111", "12141115", "32141113", "52141111", "21241114", "41241112", "22132114", "42132112", "11232115", "31232113", "51232111", "12123115", "32123113", "52123111", "21223114", "41223112", "22114114", "42114112", "11214115", "31214113", "51214111", "13141114", "33141112", "22241113", "42241111", "11341114", "31341112", "23132113", "43132111", "12232114", "32232112", "21332113", "41332111", "13123114", "33123112", "22223113", "42223111", "11323114", "31323112", "23114113", "43114111", "12214114", "32214112", "21314113", "41314111", "14141113", "34141111", "23241112", "12341113", "32341111", "24132112", "13232113", "33232111", "22332112", "11432113", "31432111", "14123113", "34123111", "23223112", "12323113", "32323111", "21423112", "24114112", "13214113", "33214111", "22314112", "11414113", "31414111", "15141112", "24241111", "13341112", "25132111", "14232112", "23332111", "12432112", "15123112", "24223111", "13323112", "22423111", "11523112", "25114111", "14214112", "23314111", "12414112", "21514111", "16141111", "14341111", "15232111", "13432111", "16123111", "14323111", "12523111", "15214111", "13414111", "11614111", "11151115", "31151113", "51151111", "21142114", "41142112", "11133115", "31133113", "51133111", "21124114", "41124112", "11115115", "31115113", "51115111", "12151114", "32151112", "21251113", "41251111", "22142113", "42142111", "11242114", "31242112", "12133114", "32133112", "21233113", "41233111", "22124113", "42124111", "11224114", "31224112", "12115114", "32115112", "21215113", "41215111", "13151113", "33151111", "22251112", "23142112", "12242113", "32242111", "21342112", "13133113", "33133111", "22233112", "11333113", "31333111", "23124112", "12224113", "32224111", "21324112", "13115113", "33115111", "22215112", "11315113", "31315111", "14151112", "23251111", "24142111", "13242112", "22342111", "14133112", "23233111", "12333112", "21433111", "24124111", "13224112", "22324111", "11424112", "14115112", "23215111", "12315112", "21415111", "15151111", "14242111", "15133111", "13333111", "14224111", "12424111", "15115111", "13315111", "11515111", "11161114", "31161112", "21152113", "41152111", "11143114", "31143112", "21134113", "41134111", "11125114", "31125112", "21116113", "41116111", "12161113", "32161111", "22152112", "11252113", "31252111", "12143113", "32143111", "21243112", "22134112", "11234113", "31234111", "12125113", "32125111", "21225112", "22116112", "11216113", "31216111", "13161112", "23152111", "12252112", "13143112", "22243111", "11343112", "23134111", "12234112", "21334111", "13125112", "22225111", "11325112", "23116111", "12216112", "21316111", "14161111", "13252111", "14143111", "12343111", "13234111", "11434111", "14125111", "12325111", "13216111", "11416111", "31111216", "51111214", "31211125", "51211123", "32111215", "52111213", "21211216", "41211214", "61211212", "12211126", "32211124", "52211122", "21311125", "41311123", "61311121", "13111216", "33111214", "22211215", "42211213", "11311216", "31311214", "51311212", "13211125", "33211123", "22311124", "42311122", "11411125", "31411123", "51411121", "14111215", "34111213", "23211214", "43211212", "12311215", "32311213", "52311211", "21411214", "41411212", "14211124", "34211122", "23311123", "43311121", "12411124", "32411122", "21511123", "41511121", "15111214", "24211213", "13311214", "33311212", "22411213", "42411211", "11511214", "31511212", "15211123", "24311122", "13411123", "33411121", "22511122", "11611123", "31611121", "16111213", "25211212", "14311213", "34311211", "23411212", "12511213", "32511211", "21611212", "21121126", "41121124", "61121122", "31112125", "51112123", "31121215", "51121213", "21112216", "41112214", "61112212", "22121125", "42121123", "11221126", "31221124", "51221122", "12112126", "32112124", "52112122", "12121216", "32121214", "52121212", "21221215", "41221213", "61221211", "22112215", "42112213", "11212216", "31212214", "51212212", "23121124", "43121122", "12221125", "32221123", "52221121", "21321124", "41321122", "13112125", "33112123", "13121215", "33121213", "11312125", "22221214", "42221212", "11321215", "31321213", "51321211", "23112214", "43112212", "12212215", "32212213", "52212211", "21312214", "41312212", "24121123", "13221124", "33221122", "22321123", "42321121", "11421124", "31421122", "14112124", "34112122", "14121214", "34121212", "12312124", "23221213", "43221211", "12321214", "32321212", "21421213", "41421211", "24112213", "13212214", "33212212", "22312213", "42312211", "11412214", "31412212", "25121122", "14221123", "34221121", "23321122", "12421123", "32421121", "21521122", "15112123", "15121213", "13312123", "24221212", "13321213", "33321211", "11512123", "22421212", "11521213", "31521211", "25112212", "14212213", "34212211", "23312212", "12412213", "32412211", "21512212", "15221122", "24321121", "13421122", "22521121", "16112122", "16121212", "14312122", "25221211", "14321212", "12512122", "23421211", "12521212", "15212212", "24312211", "13412212", "22512211", "11612212", "21131125", "41131123", "61131121", "11122126", "31122124", "51122122", "11131216", "31131214", "51131212", "21113125", "41113123", "61113121", "21122215", "41122213", "61122211", "11113216", "31113214", "51113212", "22131124", "42131122", "11231125", "31231123", "51231121", "12122125", "32122123", "52122121", "12131215", "32131213", "52131211", "21231214", "41231212", "22113124", "42113122", "11213125", "22122214", "42122212", "11222215", "31222213", "51222211", "12113215", "32113213", "52113211", "21213214", "41213212", "23131123", "43131121", "12231124", "32231122", "21331123", "41331121", "13122124", "33122122", "13131214", "33131212", "11322124", "22231213", "42231211", "11331214", "31331212", "23113123", "43113121", "12213124", "23122213", "43122211", "12222214", "32222212", "21322213", "41322211", "13113214", "33113212", "22213213", "42213211", "11313214", "31313212", "24131122", "13231123", "33231121", "22331122", "11431123", "31431121", "14122123", "34122121", "14131213", "34131211", "12322123", "23231212", "12331213", "32331211", "21431212", "24113122", "13213123", "24122212", "13222213", "33222211", "11413123", "22322212", "11422213", "31422211", "14113213", "34113211", "23213212", "12313213", "32313211", "21413212", "25131121", "14231122", "23331121", "12431122", "15122122", "15131212", "13322122", "24231211", "13331212", "11522122", "22431211", "25113121", "14213122", "25122211", "14222212", "12413122", "23322211", "12422212", "21522211", "15113212", "24213211", "13313212", "22413211", "11513212", "15231121", "13431121", "16122121", "16131211", "14322121", "14331211", "12522121", "15213121", "15222211", "13413121", "13422211", "11613121", "16113211", "14313211", "12513211", "21141124", "41141122", "11132125", "31132123", "51132121", "11141215", "31141213", "51141211", "21123124", "41123122", "21132214", "41132212", "11114125", "31114123", "51114121", "11123215", "31123213", "51123211", "21114214", "41114212", "22141123", "42141121", "11241124", "31241122", "12132124", "32132122", "12141214", "32141212", "21241213", "41241211", "22123123", "42123121", "11223124", "22132213", "42132211", "11232214", "31232212", "12114124", "32114122", "12123214", "32123212", "21223213", "41223211", "22114213", "42114211", "11214214", "31214212", "23141122", "12241123", "32241121", "21341122", "13132123", "33132121", "13141213", "33141211", "11332123", "22241212", "11341213", "31341211", "23123122", "12223123", "23132212", "12232213", "32232211", "21332212", "13114123", "33114121", "13123213", "33123211", "11314123", "22223212", "11323213", "31323211", "23114212", "12214213", "32214211", "21314212", "24141121", "13241122", "22341121", "14132122", "14141212", "12332122", "23241211", "12341212", "24123121", "13223122", "24132211", "13232212", "11423122", "22332211", "11432212", "14114122", "14123212", "12314122", "23223211", "12323212", "21423211", "24114211", "13214212", "22314211", "11414212", "14241121", "15132121", "15141211", "13332121", "13341211", "14223121", "14232211", "12423121", "12432211", "15114121", "15123211", "13314121", "13323211", "11514121", "11523211", "14214211", "12414211", "21151123", "41151121", "11142124", "31142122", "11151214", "31151212", "21133123", "41133121", "21142213", "41142211", "11124124", "31124122", "11133214", "31133212", "21115123", "41115121", "21124213", "41124211", "11115214", "31115212", "22151122", "11251123", "31251121", "12142123", "32142121", "12151213", "32151211", "21251212", "22133122", "11233123", "22142212", "11242213", "31242211", "12124123", "32124121", "12133213", "32133211", "21233212", "22115122", "11215123", "22124212", "11224213", "31224211", "12115213", "32115211", "21215212", "23151121", "12251122", "13142122", "13151212", "11342122", "22251211", "23133121", "12233122", "23142211", "12242212", "21342211", "13124122", "13133212", "11324122", "22233211", "11333212", "23115121", "12215122", "23124211", "12224212", "21324211", "13115212", "22215211", "11315212", "13251121", "14142121", "14151211", "12342121", "13233121", "13242211", "11433121", "14124121", "14133211", "12324121", "12333211", "13215121", "13224211", "11415121", "11424211", "14115211", "12315211", "21161122", "11152123", "31152121", "11161213", "31161211", "21143122", "21152212", "11134123", "31134121", "11143213", "31143211", "21125122", "21134212", "11116123", "31116121", "11125213", "31125211", "22161121", "12152122", "12161212", "22143121", "11243122", "22152211", "11252212", "12134122", "12143212", "21243211", "22125121", "11225122", "22134211", "11234212", "12116122", "12125212", "21225211", "13152121", "13161211", "12243121", "12252211", "13134121", "13143211", "11334121", "11343211", "12225121", "12234211", "13116121", "13125211", "11316121", "11325211", "21111226", "41111224", "61111222", "31111315", "51111313", "21211135", "41211133", "61211131", "22111225", "42111223", "11211226", "31211224", "51211222", "12111316", "32111314", "52111312", "21211315", "41211313", "61211311", "22211134", "42211132", "11311135", "31311133", "51311131", "23111224", "43111222", "12211225", "32211223", "52211221", "21311224", "41311222", "13111315", "33111313", "22211314", "42211312", "11311315", "31311313", "51311311", "23211133", "43211131", "12311134", "32311132", "21411133", "41411131", "24111223", "13211224", "33211222", "22311223", "42311221", "11411224", "31411222", "14111314", "34111312", "23211313", "43211311", "12311314", "32311312", "21411313", "41411311", "24211132", "13311133", "33311131", "22411132", "11511133", "31511131", "25111222", "14211223", "34211221", "23311222", "12411223", "32411221", "21511222", "15111313", "24211312", "13311313", "33311311", "22411312", "11511313", "31511311", "25211131", "14311132", "23411131", "12511132", "21611131", "15211222", "24311221", "13411222", "22511221", "11611222", "16111312", "25211311", "14311312", "23411311", "12511312", "21611311", "31121134", "51121132", "21112135", "41112133", "61112131", "21121225", "41121223", "61121221", "11112226", "31112224", "51112222", "11121316", "31121314", "51121312", "21112315", "41112313", "61112311", "12121135", "32121133", "52121131", "21221134", "41221132", "22112134", "42112132", "11212135", "22121224", "42121222", "11221225", "31221223", "51221221", "12112225", "32112223", "52112221", "12121315", "32121313", "52121311", "21221314", "41221312", "22112314", "42112312", "11212315", "31212313", "51212311", "13121134", "33121132", "22221133", "42221131", "11321134", "31321132", "23112133", "43112131", "12212134", "23121223", "43121221", "12221224", "32221222", "21321223", "41321221", "13112224", "33112222", "13121314", "33121312", "11312224", "22221313", "42221311", "11321314", "31321312", "23112313", "43112311", "12212314", "32212312", "21312313", "41312311", "14121133", "34121131", "23221132", "12321133", "32321131", "21421132", "24112132", "13212133", "24121222", "13221223", "33221221", "11412133", "22321222", "11421223", "31421221", "14112223", "34112221", "14121313", "34121311", "12312223", "23221312", "12321313", "32321311", "21421312", "24112312", "13212313", "33212311", "22312312", "11412313", "31412311", "15121132", "24221131", "13321132", "22421131"]), $a(["22121116", "42121114", "31221115", "51221113", "32112115", "52112113", "21212116", "41212114", "61212112", "23121115", "43121113", "12221116", "32221114", "52221112", "21321115", "41321113", "61321111", "13112116", "33112114", "22212115", "42212113", "11312116", "31312114", "51312112", "24121114", "13221115", "33221113", "22321114", "42321112", "11421115", "31421113", "51421111", "14112115", "34112113", "23212114", "43212112", "12312115", "32312113", "52312111", "21412114", "41412112", "25121113", "14221114", "34221112", "23321113", "43321111", "12421114", "32421112", "21521113", "41521111", "15112114", "24212113", "13312114", "33312112", "22412113", "42412111", "11512114", "31512112", "15221113", "24321112", "13421113", "33421111", "22521112", "16112113", "25212112", "14312113", "34312111", "23412112", "12512113", "32512111", "21612112", "21131116", "41131114", "61131112", "31122115", "51122113", "21113116", "41113114", "61113112", "22131115", "42131113", "11231116", "31231114", "51231112", "12122116", "32122114", "52122112", "21222115", "41222113", "61222111", "22113115", "42113113", "11213116", "31213114", "51213112", "23131114", "43131112", "12231115", "32231113", "52231111", "21331114", "41331112", "13122115", "33122113", "22222114", "42222112", "11322115", "31322113", "51322111", "23113114", "43113112", "12213115", "32213113", "52213111", "21313114", "41313112", "24131113", "13231114", "33231112", "22331113", "42331111", "11431114", "31431112", "14122114", "34122112", "23222113", "43222111", "12322114", "32322112", "21422113", "41422111", "24113113", "13213114", "33213112", "22313113", "42313111", "11413114", "31413112", "25131112", "14231113", "34231111", "23331112", "12431113", "32431111", "15122113", "24222112", "13322113", "33322111", "22422112", "11522113", "31522111", "25113112", "14213113", "34213111", "23313112", "12413113", "32413111", "21513112", "15231112", "24331111", "13431112", "16122112", "25222111", "14322112", "23422111", "12522112", "15213112", "24313111", "13413112", "22513111", "11613112", "21141115", "41141113", "61141111", "11132116", "31132114", "51132112", "21123115", "41123113", "61123111", "11114116", "31114114", "51114112", "22141114", "42141112", "11241115", "31241113", "51241111", "12132115", "32132113", "52132111", "21232114", "41232112", "22123114", "42123112", "11223115", "31223113", "51223111", "12114115", "32114113", "52114111", "21214114", "41214112", "23141113", "43141111", "12241114", "32241112", "21341113", "41341111", "13132114", "33132112", "22232113", "42232111", "11332114", "31332112", "23123113", "43123111", "12223114", "32223112", "21323113", "41323111", "13114114", "33114112", "22214113", "42214111", "11314114", "31314112", "24141112", "13241113", "33241111", "22341112", "14132113", "34132111", "23232112", "12332113", "32332111", "21432112", "24123112", "13223113", "33223111", "22323112", "11423113", "31423111", "14114113", "34114111", "23214112", "12314113", "32314111", "21414112", "25141111", "14241112", "23341111", "15132112", "24232111", "13332112", "22432111", "25123111", "14223112", "23323111", "12423112", "21523111", "15114112", "24214111", "13314112", "22414111", "11514112", "15241111", "16132111", "14332111", "15223111", "13423111", "16114111", "14314111", "12514111", "21151114", "41151112", "11142115", "31142113", "51142111", "21133114", "41133112", "11124115", "31124113", "51124111", "21115114", "41115112", "22151113", "42151111", "11251114", "31251112", "12142114", "32142112", "21242113", "41242111", "22133113", "42133111", "11233114", "31233112", "12124114", "32124112", "21224113", "41224111", "22115113", "42115111", "11215114", "31215112", "23151112", "12251113", "32251111", "13142113", "33142111", "22242112", "11342113", "31342111", "23133112", "12233113", "32233111", "21333112", "13124113", "33124111", "22224112", "11324113", "31324111", "23115112", "12215113", "32215111", "21315112", "24151111", "13251112", "14142112", "23242111", "12342112", "24133111", "13233112", "22333111", "11433112", "14124112", "23224111", "12324112", "21424111", "24115111", "13215112", "22315111", "11415112", "14251111", "15142111", "13342111", "14233111", "12433111", "15124111", "13324111", "11524111", "14215111", "12415111", "21161113", "41161111", "11152114", "31152112", "21143113", "41143111", "11134114", "31134112", "21125113", "41125111", "11116114", "31116112", "22161112", "12152113", "32152111", "21252112", "22143112", "11243113", "31243111", "12134113", "32134111", "21234112", "22125112", "11225113", "31225111", "12116113", "32116111", "21216112", "23161111", "13152112", "22252111", "23143111", "12243112", "21343111", "13134112", "22234111", "11334112", "23125111", "12225112", "21325111", "13116112", "22216111", "11316112", "14152111", "13243111", "14134111", "12334111", "13225111", "11425111", "14116111", "12316111", "41111215", "61111213", "21211126", "41211124", "61211122", "22111216", "42111214", "31211215", "51211213", "22211125", "42211123", "11311126", "31311124", "51311122", "23111215", "43111213", "12211216", "32211214", "52211212", "21311215", "41311213", "61311211", "23211124", "43211122", "12311125", "32311123", "52311121", "21411124", "41411122", "24111214", "13211215", "33211213", "22311214", "42311212", "11411215", "31411213", "51411211", "24211123", "13311124", "33311122", "22411123", "42411121", "11511124", "31511122", "25111213", "14211214", "34211212", "23311213", "43311211", "12411214", "32411212", "21511213", "41511211", "25211122", "14311123", "34311121", "23411122", "12511123", "32511121", "21611122", "15211213", "24311212", "13411213", "33411211", "22511212", "11611213", "31611211", "31121125", "51121123", "21112126", "41112124", "61112122", "21121216", "41121214", "61121212", "31112215", "51112213", "12121126", "32121124", "52121122", "21221125", "41221123", "61221121", "22112125", "42112123", "11212126", "22121215", "42121213", "11221216", "31221214", "51221212", "12112216", "32112214", "52112212", "21212215", "41212213", "61212211", "13121125", "33121123", "22221124", "42221122", "11321125", "31321123", "51321121", "23112124", "43112122", "12212125", "23121214", "43121212", "12221215", "32221213", "52221211", "21321214", "41321212", "13112215", "33112213", "22212214", "42212212", "11312215", "31312213", "51312211", "14121124", "34121122", "23221123", "43221121", "12321124", "32321122", "21421123", "41421121", "24112123", "13212124", "24121213", "13221214", "33221212", "11412124", "22321213", "42321211", "11421214", "31421212", "14112214", "34112212", "23212213", "43212211", "12312214", "32312212", "21412213", "41412211", "15121123", "24221122", "13321123", "33321121", "22421122", "11521123", "31521121", "25112122", "14212123", "25121212", "14221213", "34221211", "12412123", "23321212", "12421213", "32421211", "21521212", "15112213", "24212212", "13312213", "33312211", "22412212", "11512213", "31512211", "16121122", "25221121", "14321122", "23421121", "12521122", "15212122", "15221212", "13412122", "24321211", "13421212", "11612122", "22521211", "16112212", "25212211", "14312212", "23412211", "12512212", "21612211", "11131126", "31131124", "51131122", "21122125", "41122123", "61122121", "21131215", "41131213", "61131211", "11113126", "31113124", "51113122", "11122216", "31122214", "51122212", "21113215", "41113213", "61113211", "12131125", "32131123", "52131121", "21231124", "41231122", "22122124", "42122122", "11222125", "22131214", "42131212", "11231215", "31231213", "51231211", "12113125", "32113123", "52113121", "12122215", "32122213", "52122211", "21222214", "41222212", "22113214", "42113212", "11213215", "31213213", "51213211", "13131124", "33131122", "22231123", "42231121", "11331124", "31331122", "23122123", "43122121", "12222124", "23131213", "43131211", "12231214", "32231212", "21331213", "41331211", "13113124", "33113122", "13122214", "33122212", "11313124", "22222213", "42222211", "11322214", "31322212", "23113213", "43113211", "12213214", "32213212", "21313213", "41313211", "14131123", "34131121", "23231122", "12331123", "32331121", "21431122", "24122122", "13222123", "24131212", "13231213", "33231211", "11422123", "22331212", "11431213", "31431211", "14113123", "34113121", "14122213", "34122211", "12313123", "23222212", "12322213", "32322211", "21422212", "24113212", "13213213", "33213211", "22313212", "11413213", "31413211", "15131122", "24231121", "13331122", "22431121", "25122121", "14222122", "25131211", "14231212", "12422122", "23331211", "12431212", "15113122", "15122212", "13313122", "24222211", "13322212", "11513122", "22422211", "11522212", "25113211", "14213212", "23313211", "12413212", "21513211", "16131121", "14331121", "15222121", "15231211", "13422121", "13431211", "16113121", "16122211", "14313121", "14322211", "12513121", "12522211", "15213211", "13413211", "11613211", "11141125", "31141123", "51141121", "21132124", "41132122", "21141214", "41141212", "11123125", "31123123", "51123121", "11132215", "31132213", "51132211", "21114124", "41114122", "21123214", "41123212", "11114215", "31114213", "51114211", "12141124", "32141122", "21241123", "41241121", "22132123", "42132121", "11232124", "22141213", "42141211", "11241214", "31241212", "12123124", "32123122", "12132214", "32132212", "21232213", "41232211", "22114123", "42114121", "11214124", "22123213", "42123211", "11223214", "31223212", "12114214", "32114212", "21214213", "41214211", "13141123", "33141121", "22241122", "11341123", "31341121", "23132122", "12232123", "23141212", "12241213", "32241211", "21341212", "13123123", "33123121", "13132213", "33132211", "11323123", "22232212", "11332213", "31332211", "23114122", "12214123", "23123212", "12223213", "32223211", "21323212", "13114213", "33114211", "22214212", "11314213", "31314211", "14141122", "23241121", "12341122", "24132121", "13232122", "24141211", "13241212", "11432122", "22341211", "14123122", "14132212", "12323122", "23232211", "12332212", "21432211", "24114121", "13214122", "24123211", "13223212", "11414122", "22323211", "11423212", "14114212", "23214211", "12314212", "21414211", "15141121", "13341121", "14232121", "14241211", "12432121", "15123121", "15132211", "13323121", "13332211", "11523121", "14214121", "14223211", "12414121", "12423211", "15114211", "13314211", "11514211", "11151124", "31151122", "21142123", "41142121", "21151213", "41151211", "11133124", "31133122", "11142214", "31142212", "21124123", "41124121", "21133213", "41133211", "11115124", "31115122", "11124214", "31124212", "21115213", "41115211", "12151123", "32151121", "21251122", "22142122", "11242123", "22151212", "11251213", "31251211", "12133123", "32133121", "12142213", "32142211", "21242212", "22124122", "11224123", "22133212", "11233213", "31233211", "12115123", "32115121", "12124213", "32124211", "21224212", "22115212", "11215213", "31215211", "13151122", "22251121", "23142121", "12242122", "23151211", "12251212", "13133122", "13142212", "11333122", "22242211", "11342212", "23124121", "12224122", "23133211", "12233212", "21333211", "13115122", "13124212", "11315122", "22224211", "11324212", "23115211", "12215212", "21315211", "14151121", "13242121", "13251211", "14133121", "14142211", "12333121", "12342211", "13224121", "13233211", "11424121", "11433211", "14115121", "14124211", "12315121", "12324211", "13215211", "11415211", "11161123", "31161121", "21152122", "21161212", "11143123", "31143121", "11152213", "31152211", "21134122", "21143212", "11125123", "31125121", "11134213", "31134211", "21116122", "21125212", "12161122", "22152121", "11252122", "22161211", "12143122", "12152212", "21252211", "22134121", "11234122", "22143211", "11243212", "12125122", "12134212", "21234211", "22116121", "11216122", "22125211", "11225212", "13161121", "12252121", "13143121", "13152211", "11343121", "12234121", "12243211", "13125121", "13134211", "11325121", "11334211", "12216121", "12225211", "31111225", "51111223", "21111316", "41111314", "61111312", "31211134", "51211132", "12111226", "32111224", "52111222", "21211225", "41211223", "61211221", "22111315", "42111313", "11211316", "31211314", "51211312", "12211135", "32211133", "52211131", "21311134", "41311132", "13111225", "33111223", "22211224", "42211222", "11311225", "31311223", "51311221", "23111314", "43111312", "12211315", "32211313", "52211311", "21311314", "41311312", "13211134", "33211132", "22311133", "42311131", "11411134", "31411132", "14111224", "34111222", "23211223", "43211221", "12311224", "32311222", "21411223", "41411221", "24111313", "13211314", "33211312", "22311313", "42311311", "11411314", "31411312", "14211133", "34211131", "23311132", "12411133", "32411131", "21511132", "15111223", "24211222", "13311223", "33311221", "22411222", "11511223", "31511221", "25111312", "14211313", "34211311", "23311312", "12411313", "32411311", "21511312", "15211132", "24311131", "13411132", "22511131", "11611132", "16111222", "25211221", "14311222", "23411221", "12511222", "21611221", "15211312", "24311311", "13411312", "22511311", "11611312", "21121135", "41121133", "61121131", "11112136", "31112134", "51112132", "11121226", "31121224", "51121222", "21112225", "41112223", "61112221", "21121315", "41121313", "61121311", "11112316", "31112314", "51112312", "22121134", "42121132", "11221135", "31221133", "51221131", "12112135", "32112133", "52112131", "12121225", "32121223", "52121221", "21221224", "41221222", "22112224", "42112222", "11212225", "22121314", "42121312", "11221315", "31221313", "51221311", "12112315", "32112313", "52112311", "21212314", "41212312", "23121133", "43121131", "12221134", "32221132", "21321133", "41321131", "13112134", "33112132", "13121224", "33121222", "11312134", "22221223", "42221221", "11321224", "31321222", "23112223", "43112221", "12212224", "23121313", "43121311", "12221314", "32221312", "21321313", "41321311", "13112314", "33112312", "22212313", "42212311", "11312314", "31312312", "24121132", "13221133", "33221131", "22321132", "11421133", "31421131", "14112133", "34112131", "14121223", "34121221", "12312133", "23221222", "12321223", "32321221", "21421222", "24112222", "13212223", "24121312", "13221313", "33221311", "11412223", "22321312", "11421313", "31421311", "14112313", "34112311", "23212312", "12312313", "32312311", "21412312", "25121131", "14221132", "23321131", "12421132", "21521131", "15112132", "15121222", "13312132", "24221221", "13321222", "11512132", "22421221", "11521222", "25112221", "14212222", "25121311", "14221312", "12412222", "23321311", "12421312", "21521311", "15112312", "24212311", "13312312", "22412311", "11512312", "15221131", "13421131", "16112131", "16121221", "14312131", "14321221", "12512131", "12521221", "15212221", "15221311", "13412221", "13421311", "11612221", "16112311", "14312311", "12512311", "21131134", "41131132", "11122135", "31122133", "51122131", "11131225", "31131223", "51131221", "21113134", "41113132", "21122224", "41122222", "21131314", "41131312", "11113225", "31113223", "51113221", "11122315", "31122313", "51122311", "21113314", "41113312", "22131133", "42131131", "11231134", "31231132", "12122134", "32122132", "12131224", "32131222", "21231223", "41231221", "22113133", "42113131", "11213134", "22122223", "42122221", "11222224", "22131313", "42131311", "11231314", "31231312", "12113224", "32113222", "12122314", "32122312", "21222313", "41222311", "22113313", "42113311", "11213314", "31213312", "23131132", "12231133", "32231131", "21331132", "13122133", "33122131", "13131223", "33131221", "11322133", "22231222", "11331223", "31331221", "23113132", "12213133", "23122222", "12222223", "23131312", "12231313", "32231311", "21331312", "13113223", "33113221", "13122313", "33122311", "11313223", "22222312", "11322313", "31322311", "23113312", "12213313", "32213311", "21313312", "24131131", "13231132", "22331131", "11431132", "14122132", "14131222", "12322132", "23231221", "12331222", "21431221", "24113131", "13213132", "24122221", "13222222", "24131311", "11413132", "13231312", "11422222", "22331311", "11431312", "14113222", "14122312", "12313222", "23222311", "12322312", "21422311", "24113311", "13213312", "22313311", "11413312", "14231131", "12431131", "15122131", "15131221", "13322131", "13331221", "11522131", "14213131", "14222221", "12413131", "14231311", "12422221", "12431311", "15113221", "15122311", "13313221", "13322311", "11513221", "11522311", "14213311", "12413311", "21141133", "41141131", "11132134", "31132132", "11141224", "31141222", "21123133", "41123131", "21132223", "41132221", "21141313", "41141311", "11114134", "31114132", "11123224", "31123222", "11132314", "31132312", "21114223", "41114221", "21123313", "41123311", "11114314", "31114312", "22141132", "11241133", "31241131", "12132133", "32132131", "12141223", "32141221", "21241222", "22123132", "11223133", "22132222", "11232223", "22141312", "11241313", "31241311", "12114133", "32114131", "12123223", "32123221", "12132313", "32132311", "21232312", "22114222", "11214223", "22123312", "11223313", "31223311", "12114313", "32114311", "21214312", "23141131", "12241132", "21341131", "13132132", "13141222", "11332132", "22241221", "11341222", "23123131", "12223132", "23132221", "12232222", "23141311", "12241312", "21341311", "13114132", "13123222", "11314132", "13132312", "11323222", "22232311", "11332312", "23114221", "12214222", "23123311", "12223312", "21323311", "13114312", "22214311", "11314312", "13241131", "14132131", "14141221", "12332131", "12341221", "13223131", "13232221", "11423131", "13241311", "11432221", "14114131", "14123221", "12314131", "14132311", "12323221", "12332311", "13214221", "13223311", "11414221", "11423311", "14114311", "12314311", "21151132", "11142133", "31142131", "11151223", "31151221", "21133132", "21142222", "21151312", "11124133", "31124131", "11133223", "31133221", "11142313", "31142311", "21115132", "21124222", "21133312", "11115223", "31115221", "11124313", "31124311", "22151131", "11251132", "12142132", "12151222", "21251221", "22133131", "11233132", "22142221", "11242222", "22151311", "11251312", "12124132", "12133222", "12142312", "21242311", "22115131", "11215132", "22124221", "11224222", "22133311", "11233312", "12115222", "12124312", "21224311", "12251131", "13142131", "13151221", "11342131", "12233131", "12242221", "12251311", "13124131", "13133221", "11324131", "13142311", "11333221", "11342311", "12215131", "12224221", "12233311", "13115221", "13124311", "11315221", "11324311", "21161131", "11152132", "11161222", "21143131", "21152221", "21161311", "11134132", "11143222", "11152312", "21125131", "21134221", "21143311", "11116132", "11125222", "11134312", "12152131", "12161221", "11243131", "11252221", "12134131", "12143221", "12152311", "11225131", "11234221", "11243311", "12116131", "12125221", "12134311", "21111235", "41111233", "61111231", "11111326", "31111324", "51111322", "21111415", "41111413", "61111411", "21211144", "41211142", "22111234", "42111232", "11211235", "31211233", "51211231", "12111325", "32111323", "52111321", "21211324", "41211322", "22111414", "42111412", "11211415", "31211413", "51211411", "22211143", "42211141", "11311144", "31311142", "23111233", "43111231", "12211234", "32211232", "21311233", "41311231", "13111324", "33111322", "22211323", "42211321", "11311324", "31311322", "23111413", "43111411", "12211414", "32211412", "21311413", "41311411", "23211142", "12311143", "32311141", "21411142", "24111232", "13211233", "33211231", "22311232", "11411233", "31411231", "14111323", "34111321", "23211322", "12311323", "32311321", "21411322", "24111412", "13211413", "33211411", "22311412", "11411413", "31411411", "24211141", "13311142", "22411141", "11511142", "25111231", "14211232", "23311231", "12411232", "21511231", "15111322", "24211321", "13311322", "22411321", "11511322", "25111411", "14211412", "23311411", "12411412", "21511411", "14311141", "12511141", "15211231", "13411231", "11611231", "16111321", "14311321", "12511321", "15211411", "13411411", "11611411", "31121143", "51121141", "21112144", "41112142", "21121234", "41121232", "11112235", "31112233", "51112231", "11121325", "31121323", "51121321", "21112324", "41112322", "21121414", "41121412", "11112415", "31112413", "51112411", "12121144", "32121142", "21221143", "41221141", "22112143", "42112141", "11212144", "22121233", "42121231", "11221234", "31221232", "12112234", "32112232", "12121324", "32121322", "21221323", "41221321", "22112323", "42112321", "11212324", "22121413", "42121411", "11221414", "31221412", "12112414", "32112412", "21212413", "41212411", "13121143", "33121141", "22221142", "11321143", "31321141", "23112142", "12212143", "23121232", "12221233", "32221231", "21321232", "13112233", "33112231", "13121323", "33121321", "11312233", "22221322", "11321323", "31321321", "23112322", "12212323", "23121412", "12221413", "32221411", "21321412", "13112413", "33112411", "22212412", "11312413", "31312411", "14121142", "23221141", "12321142", "21421141", "24112141", "13212142", "24121231", "13221232", "11412142", "22321231", "11421232", "14112232", "14121322", "12312232", "23221321", "12321322", "21421321", "24112321", "13212322", "24121411", "13221412", "11412322", "22321411", "11421412", "14112412", "23212411", "12312412", "21412411", "15121141", "13321141", "11521141", "14212141", "14221231", "12412141", "12421231", "15112231", "15121321", "13312231", "13321321", "11512231", "11521321", "14212321", "14221411", "12412321", "12421411", "15112411", "13312411", "11512411", "11131144", "31131142", "21122143", "41122141", "21131233", "41131231", "11113144", "31113142", "11122234", "31122232", "11131324", "31131322", "21113233", "41113231", "21122323", "41122321", "21131413", "41131411", "11113324", "31113322", "11122414", "31122412", "21113413", "41113411", "12131143", "32131141", "21231142", "22122142", "11222143", "22131232", "11231233", "31231231", "12113143", "32113141", "12122233", "32122231", "12131323", "32131321", "21231322", "22113232", "11213233", "22122322", "11222323", "22131412", "11231413", "31231411", "12113323", "32113321", "12122413", "32122411", "21222412", "22113412", "11213413", "31213411", "13131142", "22231141", "11331142", "23122141", "12222142", "23131231", "12231232", "21331231", "13113142", "13122232", "11313142", "13131322", "11322232", "22231321", "11331322", "23113231", "12213232", "23122321", "12222322", "23131411", "12231412", "21331411", "13113322", "13122412", "11313322", "22222411", "11322412", "23113411", "12213412", "21313411", "14131141", "12331141", "13222141", "13231231", "11422141", "11431231", "14113141", "14122231", "12313141", "14131321", "12322231", "12331321", "13213231", "13222321", "11413231", "13231411", "11422321", "11431411", "14113321", "14122411", "12313321", "12322411", "13213411", "11413411", "11141143", "31141141", "21132142", "21141232", "11123143", "31123141", "11132233", "31132231", "11141323", "31141321", "21114142", "21123232", "21132322", "21141412", "11114233", "31114231", "11123323", "31123321", "11132413", "31132411", "21114322", "21123412", "12141142", "21241141", "22132141", "11232142", "22141231", "11241232", "12123142", "12132232", "12141322", "21241321", "22114141", "11214142", "22123231", "11223232", "22132321", "11232322", "22141411", "11241412", "12114232", "12123322", "12132412", "21232411", "22114321", "11214322", "22123411", "11223412", "13141141", "11341141", "12232141", "12241231", "13123141", "13132231", "11323141", "13141321", "11332231", "11341321", "12214141", "12223231", "12232321", "12241411", "13114231", "13123321", "11314231", "13132411", "11323321", "11332411", "12214321", "12223411", "11151142", "21142141", "21151231", "11133142", "11142232", "11151322", "21124141", "21133231", "21142321", "21151411", "11115142", "11124232", "11133322", "11142412", "21115231", "21124321", "21133411", "12151141", "11242141", "11251231", "12133141", "12142231", "12151321", "11224141", "11233231", "11242321", "11251411", "12115141", "12124231", "12133321", "12142411", "11215231", "11224321", "11233411", "11161141", "11143141", "11152231", "11161321", "11125141", "11134231", "11143321", "11152411", "11111245", "31111243", "51111241", "21111334", "41111332", "11111425", "31111423", "51111421", "21111514", "41111512", "31211152", "12111244", "32111242", "21211243", "41211241", "22111333", "42111331", "11211334", "31211332", "12111424", "32111422", "21211423", "41211421", "22111513", "42111511", "11211514", "31211512", "12211153", "32211151", "21311152", "13111243", "33111241", "22211242", "11311243", "31311241", "23111332", "12211333", "32211331", "21311332", "13111423", "33111421", "22211422", "11311423", "31311421", "23111512", "12211513", "32211511", "21311512", "13211152", "22311151", "11411152", "14111242", "23211241", "12311242", "21411241", "24111331", "13211332", "22311331", "11411332", "14111422", "23211421", "12311422", "21411421", "24111511", "13211512", "22311511", "11411512", "14211151", "12411151", "15111241", "13311241", "11511241", "14211331", "12411331", "15111421", "13311421", "11511421", "14211511", "12411511", "21121153", "41121151", "11112154", "31112152", "11121244", "31121242", "21112243", "41112241", "21121333", "41121331", "11112334", "31112332", "11121424", "31121422", "21112423", "41112421", "21121513", "41121511", "11112514", "31112512", "22121152", "11221153", "31221151", "12112153", "32112151", "12121243", "32121241", "21221242", "22112242", "11212243", "22121332", "11221333", "31221331", "12112333", "32112331", "12121423", "32121421", "21221422", "22112422", "11212423", "22121512", "11221513", "31221511", "12112513", "32112511", "21212512", "23121151", "12221152", "21321151", "13112152", "13121242", "11312152", "22221241", "11321242", "23112241", "12212242", "23121331", "12221332", "21321331", "13112332", "13121422", "11312332", "22221421", "11321422", "23112421", "12212422", "23121511", "12221512", "21321511", "13112512", "22212511", "11312512", "13221151", "11421151", "14112151", "14121241", "12312151", "12321241", "13212241", "13221331", "11412241", "11421331", "14112331", "14121421", "12312331", "12321421", "13212421", "13221511", "11412421", "11421511", "14112511", "12312511", "21131152", "11122153", "31122151", "11131243", "31131241", "21113152", "21122242", "21131332", "11113243", "31113241", "11122333", "31122331", "11131423", "31131421", "21113332", "21122422", "21131512", "11113423", "31113421", "11122513", "31122511", "22131151", "11231152", "12122152", "12131242", "21231241", "22113151", "11213152", "22122241", "11222242", "22131331", "11231332", "12113242", "12122332", "12131422", "21231421", "22113331", "11213332", "22122421", "11222422", "22131511", "11231512", "12113422", "12122512", "21222511", "12231151", "13122151", "13131241", "11322151", "11331241", "12213151", "12222241", "12231331", "13113241", "13122331", "11313241", "13131421", "11322331", "11331421", "12213331", "12222421", "12231511", "13113421", "13122511", "11313421", "11322511", "21141151", "11132152", "11141242", "21123151", "21132241", "21141331", "11114152", "11123242", "11132332", "11141422", "21114241", "21123331", "21132421", "21141511", "11114332", "11123422", "11132512", "11241151", "12132151", "12141241", "11223151", "11232241", "11241331", "12114151", "12123241", "12132331", "12141421", "11214241", "11223331", "11232421", "11241511", "12114331", "12123421", "12132511", "11142151", "11151241", "11124151", "11133241", "11142331", "11151421", "11115241", "11124331", "11133421", "11142511", "21111253", "41111251", "11111344", "31111342", "21111433", "41111431", "11111524", "31111522", "21111613", "41111611", "21211162", "22111252", "11211253", "31211251", "12111343", "32111341", "21211342", "22111432", "11211433", "31211431", "12111523", "32111521", "21211522", "22111612", "11211613", "31211611", "22211161", "11311162", "23111251", "12211252", "21311251", "13111342", "22211341", "11311342", "23111431", "12211432", "21311431", "13111522", "22211521", "11311522", "23111611", "12211612", "21311611", "12311161", "13211251", "11411251", "14111341", "12311341", "13211431", "11411431", "14111521", "12311521", "13211611", "11411611", "31121161", "21112162", "21121252", "11112253", "31112251", "11121343", "31121341", "21112342", "21121432", "11112433", "31112431", "11121523", "31121521", "21112522", "21121612", "12121162", "21221161", "22112161", "11212162", "22121251", "11221252", "12112252", "12121342", "21221341", "22112341", "11212342", "22121431", "11221432", "12112432", "12121522", "21221521", "22112521", "11212522", "22121611", "11221612", "13121161", "11321161", "12212161", "12221251", "13112251", "13121341", "11312251", "11321341", "12212341", "12221431", "13112431", "13121521", "11312431", "11321521", "12212521", "12221611", "11131162", "21122161", "21131251", "11113162"])]); //#14544
    $1.parity = $a(["1001", "0101", "1100", "0011", "1010", "0110", "1111", "0000"]); //#14548
    $1.rowbits = $a($1.r); //#14551
    for (var _5z = 0, _5y = $f($1.r - 1); _5z <= _5y; _5z += 1) { //#14571
        $1.i = _5z; //#14553
        $k[$j++] = 'p'; //#14554
        if ($1.i != $f($1.r - 1)) { //#14554
            $k[$j++] = $get($1.parity, $1.i); //#14554
        } else { //#14554
            $k[$j++] = "0000"; //#14554
        } //#14554
        var _65 = $k[--$j]; //#14554
        $1[$k[--$j]] = _65; //#14554
        $1.ccrow = $geti($1.ccs, $1.i * 8, 8); //#14555
        $k[$j++] = Infinity; //#14557
        for (var _6A = 0; _6A <= 7; _6A += 2) { //#14557
            $aload($geti($1.ccrow, _6A, 2)); //#14557
            var _6D = $k[--$j]; //#14557
            var _6E = $k[--$j]; //#14557
            $k[$j++] = $f(_6D + (_6E * 49)); //#14557
        } //#14557
        $1.scrow = $a(); //#14557
        $k[$j++] = Infinity; //#14565
        $k[$j++] = 10; //#14564
        $k[$j++] = 1; //#14564
        $k[$j++] = 1; //#14564
        for (var _6G = 0; _6G <= 3; _6G += 1) { //#14564
            $1.j = _6G; //#14562
            $forall($get($get($1.patterns, $f($get($1.p, $1.j) - 48)), $get($1.scrow, $1.j)), function() { //#14563
                var _6Q = $k[--$j]; //#14563
                $k[$j++] = $f(_6Q - 48); //#14563
            }); //#14563
        } //#14563
        $k[$j++] = 4; //#14565
        $k[$j++] = 1; //#14565
        $1.sbs = $a(); //#14565
        $k[$j++] = Infinity; //#14567
        var _6S = $1.sbs; //#14568
        $k[$j++] = 1; //#14568
        for (var _6T = 0, _6U = _6S.length; _6T < _6U; _6T++) { //#14568
            var _6W = $k[--$j]; //#14568
            var _6X = (_6W == 0) ? 1 : 0; //#14568
            $k[$j++] = _6W; //#14568
            for (var _6Y = 0, _6Z = $get(_6S, _6T); _6Y < _6Z; _6Y++) { //#14568
                $k[$j++] = _6X //#14568
            } //#14568
        } //#14568
        $astore($a($counttomark() - 1)); //#14569
        var _6c = $k[--$j]; //#14569
        var _6d = $k[--$j]; //#14569
        $k[$j++] = _6c; //#14569
        $k[$j++] = _6d; //#14569
        $j--; //#14569
        var _6e = $k[--$j]; //#14569
        var _6f = $k[--$j]; //#14569
        $k[$j++] = _6e; //#14569
        $k[$j++] = _6f; //#14569
        $j--; //#14569
        $put($1.rowbits, $1.i, $k[--$j]); //#14570
    } //#14570
    $k[$j++] = Infinity; //#14582
    for (var _6k = 0, _6l = 81 * $1.sepheight; _6k < _6l; _6k++) { //#14575
        $k[$j++] = 1; //#14575
    } //#14575
    for (var _6o = 0, _6n = $f($1.r - 2); _6o <= _6n; _6o += 1) { //#14580
        $1.i = _6o; //#14577
        for (var _6q = 0, _6r = $1.rowheight; _6q < _6r; _6q++) { //#14578
            $aload($get($1.rowbits, $1.i)); //#14578
        } //#14578
        for (var _6w = 0, _6x = $1.sepheight; _6w < _6x; _6w++) { //#14579
            for (var _6y = 0, _6z = 10; _6y < _6z; _6y++) { //#14579
                $k[$j++] = 0; //#14579
            } //#14579
            for (var _70 = 0, _71 = 70; _70 < _71; _70++) { //#14579
                $k[$j++] = 1; //#14579
            } //#14579
            $k[$j++] = 0; //#14579
        } //#14579
    } //#14579
    for (var _73 = 0, _74 = $1.rowheight; _73 < _74; _73++) { //#14581
        $aload($get($1.rowbits, $f($1.r - 1))); //#14581
    } //#14581
    for (var _79 = 0, _7A = 81 * $1.sepheight; _79 < _7A; _79++) { //#14582
        $k[$j++] = 1; //#14582
    } //#14582
    $1.pixs = $a(); //#14582
    var _7G = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", 81],
        ["pixy", ~~($1.pixs.length / 81)],
        ["height", (~~($1.pixs.length / 81)) / 72],
        ["width", 81 / 72],
        ["opt", $1.options]
    ]); //#14593
    $k[$j++] = _7G; //#14596
    if (!$1.dontdraw) { //#14596
        bwipp_renmatrix(); //#14596
    } //#14596
}

function bwipp_flattermarken() {
    var $1 = {}; //#14887
    $1.options = $k[--$j]; //#14889
    $1.barcode = $k[--$j]; //#14890
    $1.dontdraw = false; //#14892
    $1.includetext = false; //#14893
    $1.textfont = "OCR-B"; //#14894
    $1.textsize = 10; //#14895
    $1.textyoffset = -8; //#14896
    $1.height = 0.3; //#14897
    $forall($1.barcode, function() { //#14904
        var _3 = $k[--$j]; //#14901
        if ((_3 < 48) || (_3 > 57)) { //#14903
            $k[$j++] = 'bwipp.flattermarkenBadCharacter'; //#14902
            $k[$j++] = "Flattermarken must contain only digits"; //#14902
            bwipp_raiseerror(); //#14902
        } //#14902
    }); //#14902
    $forall($1.options, function() { //#14915
        var _5 = $k[--$j]; //#14915
        $1[$k[--$j]] = _5; //#14915
    }); //#14915
    $1.textfont = "" + $1.textfont; //#14917
    $1.textsize = +$1.textsize; //#14918
    $1.textyoffset = +$1.textyoffset; //#14919
    $1.height = +$1.height; //#14920
    $forall($1.barcode, function() { //#14927
        var _C = $k[--$j]; //#14924
        if ((_C < 48) || (_C > 57)) { //#14926
            $k[$j++] = 'bwipp.flattermarkenBadCharacter'; //#14925
            $k[$j++] = "Flattermarken must contain only digits"; //#14925
            bwipp_raiseerror(); //#14925
        } //#14925
    }); //#14925
    $1.encs = $a(["0018", "0117", "0216", "0315", "0414", "0513", "0612", "0711", "0810", "0900"]); //#14933
    $1.barchars = "1234567890"; //#14936
    $1.barlen = $1.barcode.length; //#14938
    $1.sbs = $s($1.barlen * 4); //#14940
    $1.txt = $a($1.barlen); //#14941
    for (var _L = 0, _K = $1.barlen - 1; _L <= _K; _L += 1) { //#14953
        $1.i = _L; //#14944
        $search($1.barchars, $geti($1.barcode, $1.i, 1)); //#14946
        $j--; //#14947
        $1.indx = $k[--$j].length; //#14948
        $j -= 2; //#14949
        $1.enc = $get($1.encs, $1.indx); //#14950
        $puti($1.sbs, $1.i * 4, $1.enc); //#14951
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), $1.i * 9, $1.textyoffset, $1.textfont, $1.textsize])); //#14952
    } //#14952
    $k[$j++] = Infinity; //#14962
    $k[$j++] = Infinity; //#14958
    var _h = $1.sbs; //#14958
    for (var _i = 0, _j = _h.length; _i < _j; _i++) { //#14958
        $k[$j++] = $get(_h, _i) - 48; //#14958
    } //#14958
    var _l = $a(); //#14958
    $k[$j++] = Infinity; //#14959
    for (var _n = 0, _o = ~~(($1.sbs.length + 1) / 2); _n < _o; _n++) { //#14959
        $k[$j++] = $1.height; //#14959
    } //#14959
    var _q = $a(); //#14959
    $k[$j++] = Infinity; //#14960
    for (var _s = 0, _t = ~~(($1.sbs.length + 1) / 2); _s < _t; _s++) { //#14960
        $k[$j++] = 0; //#14960
    } //#14960
    var _u = $a(); //#14960
    $k[$j++] = 'ren'; //#14962
    $k[$j++] = bwipp_renlinear; //#14962
    $k[$j++] = 'sbs'; //#14962
    $k[$j++] = _l; //#14962
    $k[$j++] = 'bhs'; //#14962
    $k[$j++] = _q; //#14962
    $k[$j++] = 'bbs'; //#14962
    $k[$j++] = _u; //#14962
    $k[$j++] = 'txt'; //#14962
    $k[$j++] = $1.txt; //#14962
    $k[$j++] = 'opt'; //#14962
    $k[$j++] = $1.options; //#14962
    var _x = $d(); //#14962
    $k[$j++] = _x; //#14965
    if (!$1.dontdraw) { //#14965
        bwipp_renlinear(); //#14965
    } //#14965
}

function bwipp_raw() {
    var $1 = {}; //#14994
    $1.options = $k[--$j]; //#14996
    $1.barcode = $k[--$j]; //#14997
    $1.dontdraw = false; //#14999
    $1.height = 1; //#15000
    $forall($1.options, function() { //#15011
        var _3 = $k[--$j]; //#15011
        $1[$k[--$j]] = _3; //#15011
    }); //#15011
    $1.height = +$1.height; //#15013
    $forall($1.barcode, function() { //#15020
        var _7 = $k[--$j]; //#15017
        if ((_7 < 49) || (_7 > 57)) { //#15019
            $k[$j++] = 'bwipp.rawBadCharacter'; //#15018
            $k[$j++] = "Raw must contain only digits 1 to 9"; //#15018
            bwipp_raiseerror(); //#15018
        } //#15018
    }); //#15018
    $k[$j++] = Infinity; //#15028
    $k[$j++] = Infinity; //#15025
    $forall($1.barcode, function() { //#15025
        var _9 = $k[--$j]; //#15025
        $k[$j++] = $f(_9 - 48); //#15025
    }); //#15025
    var _A = $a(); //#15025
    $k[$j++] = Infinity; //#15026
    for (var _C = 0, _D = ~~(($1.barcode.length + 1) / 2); _C < _D; _C++) { //#15026
        $k[$j++] = $1.height; //#15026
    } //#15026
    var _F = $a(); //#15026
    $k[$j++] = Infinity; //#15027
    for (var _H = 0, _I = ~~(($1.barcode.length + 1) / 2); _H < _I; _H++) { //#15027
        $k[$j++] = 0; //#15027
    } //#15027
    var _J = $a(); //#15027
    $k[$j++] = 'ren'; //#15028
    $k[$j++] = bwipp_renlinear; //#15028
    $k[$j++] = 'sbs'; //#15028
    $k[$j++] = _A; //#15028
    $k[$j++] = 'bhs'; //#15028
    $k[$j++] = _F; //#15028
    $k[$j++] = 'bbs'; //#15028
    $k[$j++] = _J; //#15028
    $k[$j++] = 'opt'; //#15028
    $k[$j++] = $1.options; //#15028
    var _L = $d(); //#15028
    $k[$j++] = _L; //#15031
    if (!$1.dontdraw) { //#15031
        bwipp_renlinear(); //#15031
    } //#15031
}

function bwipp_daft() {
    var $1 = {}; //#15060
    $1.options = $k[--$j]; //#15062
    $1.barcode = $k[--$j]; //#15063
    $1.dontdraw = false; //#15065
    $1.height = 0.175; //#15066
    $forall($1.options, function() { //#15077
        var _3 = $k[--$j]; //#15077
        $1[$k[--$j]] = _3; //#15077
    }); //#15077
    $1.height = +$1.height; //#15079
    $forall($1.barcode, function() { //#15085
        var _7 = $k[--$j]; //#15082
        if ((_7 != 68) && ((_7 != 65) && ((_7 != 70) && (_7 != 84)))) { //#15084
            $k[$j++] = 'bwipp.daftBadCharacter'; //#15083
            $k[$j++] = "DAFT must contain only characters D, A, F and T"; //#15083
            bwipp_raiseerror(); //#15083
        } //#15083
    }); //#15083
    $1.barlen = $1.barcode.length; //#15087
    $1.bbs = $a($1.barlen); //#15089
    $1.bhs = $a($1.barlen); //#15090
    for (var _F = 0, _E = $1.barlen - 1; _F <= _E; _F += 1) { //#15110
        $1.i = _F; //#15092
        $1.enc = $geti($1.barcode, $1.i, 1); //#15093
        if ($eq($1.enc, "D")) { //#15097
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#15095
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#15096
        } //#15096
        if ($eq($1.enc, "A")) { //#15101
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#15099
            $put($1.bhs, $1.i, (5 * $1.height) / 8); //#15100
        } //#15100
        if ($eq($1.enc, "F")) { //#15105
            $put($1.bbs, $1.i, (0 * $1.height) / 8); //#15103
            $put($1.bhs, $1.i, (8 * $1.height) / 8); //#15104
        } //#15104
        if ($eq($1.enc, "T")) { //#15109
            $put($1.bbs, $1.i, (3 * $1.height) / 8); //#15107
            $put($1.bhs, $1.i, (2 * $1.height) / 8); //#15108
        } //#15108
    } //#15108
    $k[$j++] = Infinity; //#15118
    var _l = $1.bbs; //#15115
    var _m = $1.bhs; //#15116
    $k[$j++] = Infinity; //#15117
    for (var _o = 0, _p = $1.bhs.length - 1; _o < _p; _o++) { //#15117
        $k[$j++] = 1.44; //#15117
        $k[$j++] = 1.872; //#15117
    } //#15117
    $k[$j++] = 1.44; //#15117
    var _q = $a(); //#15117
    var _r = $1.options; //#15118
    $k[$j++] = 'ren'; //#15118
    $k[$j++] = bwipp_renlinear; //#15118
    $k[$j++] = 'bbs'; //#15118
    $k[$j++] = _l; //#15118
    $k[$j++] = 'bhs'; //#15118
    $k[$j++] = _m; //#15118
    $k[$j++] = 'sbs'; //#15118
    $k[$j++] = _q; //#15118
    $k[$j++] = 'opt'; //#15118
    $k[$j++] = _r; //#15118
    var _s = $d(); //#15118
    $k[$j++] = _s; //#15121
    if (!$1.dontdraw) { //#15121
        bwipp_renlinear(); //#15121
    } //#15121
}

function bwipp_symbol() {
    var $1 = {}; //#15150
    $1.options = $k[--$j]; //#15152
    $1.barcode = $k[--$j]; //#15153
    $1.dontdraw = false; //#15155
    $forall($1.options, function() { //#15166
        var _3 = $k[--$j]; //#15166
        $1[$k[--$j]] = _3; //#15166
    }); //#15166
    var _K = new Map([
        ["fima", function() {
            $1.sbs = $a([2.25, 2.25, 2.25, 11.25, 2.25, 11.25, 2.25, 2.25, 2.25]); //#15170
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625]); //#15171
            $1.bbs = $a([0, 0, 0, 0, 0]); //#15172
        }],
        ["fimb", function() {
            $1.sbs = $a([2.25, 6.75, 2.25, 2.25, 2.25, 6.25, 2.25, 2.25, 2.25, 6.75, 2.25]); //#15175
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#15176
            $1.bbs = $a([0, 0, 0, 0, 0, 0]); //#15177
        }],
        ["fimc", function() {
            $1.sbs = $a([2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25]); //#15180
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#15181
            $1.bbs = $a([0, 0, 0, 0, 0, 0]); //#15182
        }],
        ["fimd", function() {
            $1.sbs = $a([2.25, 2.25, 2.25, 2.25, 2.25, 6.75, 2.25, 6.75, 2.25, 2.25, 2.25, 2.25, 2.25]); //#15185
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#15186
            $1.bbs = $a([0, 0, 0, 0, 0, 0, 0]); //#15187
        }],
        ["fime", function() {
            $1.sbs = $a([2.25, 6.75, 2.25, 15.75, 2.25, 6.75, 2.25]); //#15190
            $1.bhs = $a([0.625, 0.625, 0.625, 0.625, 0.625, 0.625, 0.625]); //#15191
            $1.bbs = $a([0, 0, 0, 0, 0, 0, 0]); //#15192
        }]
    ]); //#15192
    $1.symbols = _K; //#15194
    var _N = $get($1.symbols, $1.barcode) !== undefined; //#15197
    if (!_N) { //#15199
        $k[$j++] = 'bwipp.symbolUnknownSymbol'; //#15198
        $k[$j++] = "Unknown symbol name provided"; //#15198
        bwipp_raiseerror(); //#15198
    } //#15198
    if ($get($1.symbols, $1.barcode)() === true) {
        return true;
    } //#15201
    var _V = new Map([
        ["ren", bwipp_renlinear],
        ["sbs", $1.sbs],
        ["bhs", $1.bhs],
        ["bbs", $1.bbs],
        ["opt", $1.options]
    ]); //#15209
    $k[$j++] = _V; //#15212
    if (!$1.dontdraw) { //#15212
        bwipp_renlinear(); //#15212
    } //#15212
}

function bwipp_pdf417() {
    var $1 = {}; //#15242
    $1.options = $k[--$j]; //#15244
    $1.barcode = $k[--$j]; //#15245
    $1.dontdraw = false; //#15247
    $1.compact = false; //#15248
    $1.eclevel = -1; //#15249
    $1.columns = 0; //#15250
    $1.rows = 0; //#15251
    $1.rowmult = 3; //#15252
    $1.encoding = "auto"; //#15253
    $1.ccc = false; //#15254
    $1.raw = false; //#15255
    $1.parse = false; //#15256
    $1.parsefnc = false; //#15257
    $forall($1.options, function() { //#15268
        var _3 = $k[--$j]; //#15268
        $1[$k[--$j]] = _3; //#15268
    }); //#15268
    $1.eclevel = ~~$1.eclevel; //#15270
    $1.columns = ~~$1.columns; //#15271
    $1.rows = ~~$1.rows; //#15272
    $1.rowmult = +$1.rowmult; //#15273
    if ($1.raw) { //#15275
        $1.encoding = "raw"; //#15275
    } //#15275
    if ($eq($1.encoding, "raw")) { //#15289
        $1.datcws = $a($1.barcode.length); //#15279
        $1.i = 0; //#15280
        $1.j = 0; //#15280
        for (;;) { //#15287
            if ($1.i == $1.barcode.length) { //#15282
                break; //#15282
            } //#15282
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#15283
            $put($1.datcws, $1.j, $1.cw); //#15284
            $1.i = $1.i + 4; //#15285
            $1.j = $1.j + 1; //#15286
        } //#15286
        $1.datcws = $geti($1.datcws, 0, $1.j); //#15288
    } //#15288
    if ($1.ccc) { //#15291
        $1.encoding = "ccc"; //#15291
    } //#15291
    $1.encb = function() {
        $1.in = $k[--$j]; //#15294
        $1.inlen = $1.in.length; //#15295
        $1.out = $a(((~~($1.inlen / 6)) * 5) + ($1.inlen % 6)); //#15296
        for (var _Y = 0, _X = (~~($1.inlen / 6)) - 1; _Y <= _X; _Y += 1) { //#15319
            $1.k = _Y; //#15298
            $k[$j++] = Infinity; //#15299
            $aload($geti($1.in, $1.k * 6, 3)); //#15299
            $1.msbs = $a(); //#15299
            $k[$j++] = Infinity; //#15302
            $aload($1.msbs); //#15301
            var _e = $k[--$j]; //#15301
            var _f = $k[--$j]; //#15301
            var _g = $k[--$j]; //#15301
            $k[$j++] = $f(($f(_e + (_f * 256))) + (_g * 65536)); //#15302
            for (var _h = 0, _i = 3; _h < _i; _h++) { //#15302
                var _j = $k[--$j]; //#15302
                $k[$j++] = _j % 900; //#15302
                $k[$j++] = ~~(_j / 900); //#15302
            } //#15302
            $1.mscs = $a(); //#15302
            $k[$j++] = Infinity; //#15304
            $aload($geti($1.in, ($1.k * 6) + 3, 3)); //#15304
            $1.lsbs = $a(); //#15304
            $k[$j++] = Infinity; //#15307
            $aload($1.lsbs); //#15306
            var _q = $k[--$j]; //#15306
            var _r = $k[--$j]; //#15306
            var _s = $k[--$j]; //#15306
            $k[$j++] = $f(($f(_q + (_r * 256))) + (_s * 65536)); //#15307
            for (var _t = 0, _u = 3; _t < _u; _t++) { //#15307
                var _v = $k[--$j]; //#15307
                $k[$j++] = _v % 900; //#15307
                $k[$j++] = ~~(_v / 900); //#15307
            } //#15307
            $1.lscs = $a(); //#15307
            var _y = $get($1.lscs, 0); //#15309
            var _10 = $get($1.mscs, 0); //#15309
            $put($1.out, ($1.k * 5) + 4, ($f(_y + (_10 * 316))) % 900); //#15310
            var _14 = $get($1.lscs, 1); //#15311
            var _16 = $get($1.mscs, 0); //#15311
            var _18 = $get($1.mscs, 1); //#15311
            $put($1.out, ($1.k * 5) + 3, ($f(($f(($f((~~(($f(_y + (_10 * 316))) / 900)) + _14)) + (_16 * 641))) + (_18 * 316))) % 900); //#15312
            var _1C = $get($1.lscs, 2); //#15313
            var _1E = $get($1.mscs, 0); //#15313
            var _1G = $get($1.mscs, 1); //#15313
            var _1I = $get($1.mscs, 2); //#15313
            $put($1.out, ($1.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_y + (_10 * 316))) / 900)) + _14)) + (_16 * 641))) + (_18 * 316))) / 900)) + _1C)) + (_1E * 20))) + (_1G * 641))) + (_1I * 316))) % 900); //#15314
            var _1M = $get($1.lscs, 3); //#15315
            var _1O = $get($1.mscs, 1); //#15315
            var _1Q = $get($1.mscs, 2); //#15315
            $put($1.out, ($1.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_y + (_10 * 316))) / 900)) + _14)) + (_16 * 641))) + (_18 * 316))) / 900)) + _1C)) + (_1E * 20))) + (_1G * 641))) + (_1I * 316))) / 900)) + _1M)) + (_1O * 20))) + (_1Q * 641))) % 900); //#15316
            $put($1.out, $1.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_y + (_10 * 316))) / 900)) + _14)) + (_16 * 641))) + (_18 * 316))) / 900)) + _1C)) + (_1E * 20))) + (_1G * 641))) + (_1I * 316))) / 900)) + _1M)) + (_1O * 20))) + (_1Q * 641))) / 900)) + ($get($1.mscs, 2) * 20))) % 900); //#15318
        } //#15318
        $1.rem = $1.inlen % 6; //#15320
        if ($1.rem != 0) { //#15325
            $k[$j++] = $1.out; //#15323
            $k[$j++] = $1.out.length - $1.rem; //#15323
            $k[$j++] = Infinity; //#15323
            $aload($geti($1.in, $1.inlen - $1.rem, $1.rem)); //#15323
            var _1h = $a(); //#15323
            var _1i = $k[--$j]; //#15324
            $puti($k[--$j], _1i, _1h); //#15324
        } //#15324
        $k[$j++] = $1.out; //#15326
    }; //#15327
    if ($eq($1.encoding, "byte") || $eq($1.encoding, "ccc")) { //#15335
        $1.barlen = $1.barcode.length; //#15330
        $1.datcws = $a((((~~($1.barlen / 6)) * 5) + ($1.barlen % 6)) + 1); //#15331
        var _1t = (($1.barlen % 6) == 0) ? 924 : 901; //#15332
        $put($1.datcws, 0, _1t); //#15332
        $k[$j++] = $1.datcws; //#15333
        $k[$j++] = 1; //#15333
        $k[$j++] = Infinity; //#15333
        $forall($1.barcode); //#15333
        var _1w = $a(); //#15333
        $k[$j++] = _1w; //#15333
        $1.encb(); //#15333
        var _1x = $k[--$j]; //#15333
        var _1y = $k[--$j]; //#15333
        $puti($k[--$j], _1y, _1x); //#15333
        if ($eq($1.encoding, "ccc")) { //#15334
            $k[$j++] = Infinity; //#15334
            $k[$j++] = 920; //#15334
            $aload($1.datcws); //#15334
            $1.datcws = $a(); //#15334
        } //#15334
    } //#15334
    if ($eq($1.encoding, "auto")) { //#15738
        var _26 = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true]
        ]); //#15343
        $1.fncvals = _26; //#15345
        $k[$j++] = 'msg'; //#15346
        $k[$j++] = $1.barcode; //#15346
        $k[$j++] = $1.fncvals; //#15346
        bwipp_parseinput(); //#15346
        var _29 = $k[--$j]; //#15346
        $1[$k[--$j]] = _29; //#15346
        $1.msglen = $1.msg.length; //#15347
        $1.T = 0; //#15350
        $1.N = 1; //#15350
        $1.B = 2; //#15350
        $1.A = 0; //#15351
        $1.L = 1; //#15351
        $1.M = 2; //#15351
        $1.P = 3; //#15351
        $1.tl = -1; //#15354
        $1.nl = -2; //#15354
        $1.bl = -3; //#15354
        $1.bl6 = -4; //#15354
        $1.bs = -5; //#15354
        $1.al = -6; //#15357
        $1.ll = -7; //#15357
        $1.ml = -8; //#15357
        $1.pl = -9; //#15357
        $1.as = -10; //#15357
        $1.ps = -11; //#15357
        $1.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $1.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$1.ll, $1.as, $1.ll, "}"]), $a([$1.ml, $1.ml, $1.al, "'"]), $a([$1.ps, $1.ps, $1.ps, $1.al])]); //#15392
        $1.charvals = $a([new Map, new Map, new Map, new Map]); //#15395
        $1.alltext = new Map; //#15396
        for (var _2v = 0, _2u = $1.charmaps.length - 1; _2v <= _2u; _2v += 1) { //#15406
            $1.i = _2v; //#15398
            $1.encs = $get($1.charmaps, $1.i); //#15399
            for (var _2z = 0; _2z <= 3; _2z += 1) { //#15405
                $1.j = _2z; //#15401
                var _32 = $get($1.encs, $1.j); //#15402
                $k[$j++] = _32; //#15402
                if ($eq($type(_32), 'stringtype')) { //#15402
                    var _35 = $get($k[--$j], 0); //#15402
                    $k[$j++] = _35; //#15402
                } //#15402
                var _36 = $k[--$j]; //#15403
                $put($get($1.charvals, $1.j), _36, $1.i); //#15403
                $put($1.alltext, _36, -1); //#15404
            } //#15404
        } //#15404
        $1.e = 10000; //#15408
        $1.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#15416
        $1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.ml, $1.al]), $a([]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.al]), $a([$1.ll]), $a([]), $a([$1.pl])]), $a([$a([$1.al]), $a([$1.al, $1.ll]), $a([$1.al, $1.ml]), $a([])])]); //#15424
        $1.shftlen = $a([$a([$1.e, $1.e, $1.e, 1]), $a([1, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, $1.e])]); //#15432
        $k[$j++] = Infinity; //#15435
        for (var _4B = 0, _4C = $1.msglen; _4B < _4C; _4B++) { //#15435
            $k[$j++] = 0; //#15435
        } //#15435
        $k[$j++] = 0; //#15435
        $1.numdigits = $a(); //#15435
        $k[$j++] = Infinity; //#15436
        for (var _4F = 0, _4G = $1.msglen; _4F < _4G; _4F++) { //#15436
            $k[$j++] = 0; //#15436
        } //#15436
        $k[$j++] = 0; //#15436
        $1.numtext = $a(); //#15436
        $k[$j++] = Infinity; //#15437
        for (var _4J = 0, _4K = $1.msglen; _4J < _4K; _4J++) { //#15437
            $k[$j++] = 0; //#15437
        } //#15437
        $k[$j++] = 0; //#15437
        $1.numbytes = $a(); //#15437
        $k[$j++] = Infinity; //#15438
        for (var _4N = 0, _4O = $1.msglen; _4N < _4O; _4N++) { //#15438
            $k[$j++] = 0; //#15438
        } //#15438
        $k[$j++] = 0; //#15438
        $1.iseci = $a(); //#15438
        for (var _4R = $1.msglen - 1; _4R >= 0; _4R -= 1) { //#15451
            $1.i = _4R; //#15440
            var _4U = $get($1.msg, $1.i); //#15441
            if ((_4U >= 48) && (_4U <= 57)) { //#15443
                $put($1.numdigits, $1.i, $f($get($1.numdigits, $1.i + 1) + 1)); //#15442
            } //#15442
            var _4e = $get($1.alltext, $get($1.msg, $1.i)) !== undefined; //#15444
            if (_4e && ($get($1.numdigits, $1.i) < 13)) { //#15446
                $put($1.numtext, $1.i, $f($get($1.numtext, $1.i + 1) + 1)); //#15445
            } //#15445
            if ((($get($1.msg, $1.i) >= 0) && ($get($1.numtext, $1.i) < 5)) && ($get($1.numdigits, $1.i) < 13)) { //#15449
                $put($1.numbytes, $1.i, $f($get($1.numbytes, $1.i + 1) + 1)); //#15448
            } //#15448
            $put($1.iseci, $1.i, $get($1.msg, $1.i) <= -1000000); //#15450
        } //#15450
        $1.numdigits = $geti($1.numdigits, 0, $1.msglen); //#15452
        $1.numtext = $geti($1.numtext, 0, $1.msglen); //#15453
        $1.numbytes = $geti($1.numbytes, 0, $1.msglen); //#15454
        $1.seq = $a([]); //#15456
        $1.seqlen = 0; //#15456
        $1.state = $1.T; //#15456
        $1.p = 0; //#15456
        for (;;) { //#15510
            if ($1.p == $1.msglen) { //#15457
                break; //#15457
            } //#15457
            if ($get($1.iseci, $1.p)) { //#15508
                $1.eci = $get($1.msg, $1.p); //#15459
                $k[$j++] = Infinity; //#15462
                $aload($1.seq); //#15461
                $k[$j++] = $a([$1.eci]); //#15462
                $1.seq = $a(); //#15462
                $1.p = $1.p + 1; //#15464
                $k[$j++] = 'seqlen'; //#15465
                $k[$j++] = $1.seqlen; //#15465
                if ($1.eci <= -1810900) { //#15465
                    $k[$j++] = 2; //#15465
                } else { //#15465
                    var _5X = ($1.eci <= -1000900) ? 3 : 2; //#15465
                    $k[$j++] = _5X; //#15465
                } //#15465
                var _5Y = $k[--$j]; //#15465
                var _5Z = $k[--$j]; //#15465
                $1[$k[--$j]] = $f(_5Z + _5Y); //#15465
            } else { //#15508
                $1.n = $get($1.numdigits, $1.p); //#15467
                if ($1.n >= 13) { //#15508
                    $k[$j++] = Infinity; //#15472
                    $aload($1.seq); //#15470
                    $k[$j++] = $1.nl; //#15472
                    $k[$j++] = Infinity; //#15472
                    $aload($geti($1.msg, $1.p, $1.n)); //#15472
                    var _5l = $a(); //#15472
                    $k[$j++] = _5l; //#15472
                    $1.seq = $a(); //#15472
                    $1.state = $1.N; //#15474
                    $1.p = $f($1.p + $1.n); //#15475
                    $1.seqlen = $f(($1.seqlen + 1) + $1.n); //#15476
                } else { //#15508
                    $1.t = $get($1.numtext, $1.p); //#15478
                    if ($1.t >= 5) { //#15508
                        $k[$j++] = Infinity; //#15485
                        $aload($1.seq); //#15481
                        if ($1.state != $1.T) { //#15484
                            $k[$j++] = $1.tl; //#15483
                        } //#15483
                        $k[$j++] = Infinity; //#15485
                        $aload($geti($1.msg, $1.p, $1.t)); //#15485
                        var _64 = $a(); //#15485
                        $k[$j++] = _64; //#15485
                        $1.seq = $a(); //#15485
                        $1.state = $1.T; //#15487
                        $1.p = $f($1.p + $1.t); //#15488
                        $1.seqlen = $f($f($1.seqlen + 1) + $1.t); //#15489
                    } else { //#15508
                        $1.b = $get($1.numbytes, $1.p); //#15491
                        if (($1.b == 1) && ($1.state == $1.T)) { //#15508
                            $k[$j++] = Infinity; //#15496
                            $aload($1.seq); //#15494
                            $k[$j++] = $1.bs; //#15496
                            $k[$j++] = $a([$get($1.msg, $1.p)]); //#15496
                            $1.seq = $a(); //#15496
                            $1.p = $f($1.p + $1.b); //#15498
                            $1.seqlen = $f($1.seqlen + 2); //#15499
                        } else { //#15508
                            $k[$j++] = Infinity; //#15504
                            $aload($1.seq); //#15502
                            var _6T = (($1.b % 6) != 0) ? $1.bl : $1.bl6; //#15503
                            $k[$j++] = _6T; //#15504
                            $k[$j++] = Infinity; //#15504
                            $aload($geti($1.msg, $1.p, $1.b)); //#15504
                            var _6Y = $a(); //#15504
                            $k[$j++] = _6Y; //#15504
                            $1.seq = $a(); //#15504
                            $1.state = $1.B; //#15506
                            $1.p = $f($1.p + $1.b); //#15507
                            $1.seqlen = $f($f($1.seqlen + 1) + $1.b); //#15508
                        } //#15508
                    } //#15508
                } //#15508
            } //#15508
        } //#15508
        $k[$j++] = Infinity; //#15513
        $k[$j++] = $1.tl; //#15513
        $k[$j++] = 900; //#15513
        $k[$j++] = $1.bl; //#15513
        $k[$j++] = 901; //#15513
        $k[$j++] = $1.bl6; //#15513
        $k[$j++] = 924; //#15513
        $k[$j++] = $1.nl; //#15513
        $k[$j++] = 902; //#15513
        $k[$j++] = $1.bs; //#15513
        $k[$j++] = 913; //#15513
        $1.latchcws = $d(); //#15514
        $1.enca = function() {
            var _6p = $get($get($1.charvals, $1.A), $k[--$j]); //#15517
            $k[$j++] = _6p; //#15517
        }; //#15517
        $1.encl = function() {
            var _6u = $get($get($1.charvals, $1.L), $k[--$j]); //#15518
            $k[$j++] = _6u; //#15518
        }; //#15518
        $1.encm = function() {
            var _6z = $get($get($1.charvals, $1.M), $k[--$j]); //#15519
            $k[$j++] = _6z; //#15519
        }; //#15519
        $1.encp = function() {
            var _74 = $get($get($1.charvals, $1.P), $k[--$j]); //#15520
            $k[$j++] = _74; //#15520
        }; //#15520
        $1.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#15521
        $1.addtotext = function() {
            $put($1.text, $1.l, $k[--$j]); //#15524
            $1.l = $1.l + 1; //#15525
        }; //#15526
        $1.enct = function() {
            $1.in = $k[--$j]; //#15529
            $1.curlen = $a([$1.e, $1.e, $1.e, $1.e]); //#15531
            $put($1.curlen, $1.submode, 0); //#15532
            $1.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#15533
            $forall($1.in, function() { //#15603
                $1.char = $k[--$j]; //#15538
                for (;;) { //#15559
                    $1.imp = false; //#15542
                    var _7T = $a([$1.A, $1.L, $1.M, $1.P]); //#15543
                    for (var _7U = 0, _7V = _7T.length; _7U < _7V; _7U++) { //#15557
                        $1.x = $get(_7T, _7U); //#15544
                        var _7b = $a([$1.A, $1.L, $1.M, $1.P]); //#15545
                        for (var _7c = 0, _7d = _7b.length; _7c < _7d; _7c++) { //#15556
                            $1.y = $get(_7b, _7c); //#15546
                            $1.cost = $f($get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y)); //#15547
                            if ($1.cost < $get($1.curlen, $1.y)) { //#15555
                                $put($1.curlen, $1.y, $1.cost); //#15549
                                $k[$j++] = $1.curseq; //#15552
                                $k[$j++] = $1.y; //#15552
                                $k[$j++] = Infinity; //#15552
                                $aload($get($1.curseq, $1.x)); //#15551
                                $aload($get($get($1.latseq, $1.x), $1.y)); //#15552
                                var _84 = $a(); //#15552
                                var _85 = $k[--$j]; //#15553
                                $put($k[--$j], _85, _84); //#15553
                                $1.imp = true; //#15554
                            } //#15554
                        } //#15554
                    } //#15554
                    if (!$1.imp) { //#15558
                        break; //#15558
                    } //#15558
                } //#15558
                $1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e]); //#15562
                $1.nxtseq = $a(4); //#15563
                var _8I = $a([$1.A, $1.L, $1.M, $1.P]); //#15565
                for (var _8J = 0, _8K = _8I.length; _8J < _8K; _8J++) { //#15598
                    $1.x = $get(_8I, _8J); //#15566
                    for (;;) { //#15596
                        var _8Q = $get($get($1.charvals, $1.x), $1.char) !== undefined; //#15570
                        if (!_8Q) { //#15570
                            break; //#15570
                        } //#15570
                        $1.cost = $f($get($1.curlen, $1.x) + 1); //#15573
                        if ($1.cost < $get($1.nxtlen, $1.x)) { //#15577
                            $put($1.nxtlen, $1.x, $1.cost); //#15575
                            $k[$j++] = $1.nxtseq; //#15576
                            $k[$j++] = $1.x; //#15576
                            $k[$j++] = Infinity; //#15576
                            $aload($get($1.curseq, $1.x)); //#15576
                            $k[$j++] = $1.char; //#15576
                            var _8h = $a(); //#15576
                            var _8i = $k[--$j]; //#15576
                            $put($k[--$j], _8i, _8h); //#15576
                        } //#15576
                        var _8o = $a([$1.A, $1.L, $1.M, $1.P]); //#15580
                        for (var _8p = 0, _8q = _8o.length; _8p < _8q; _8p++) { //#15593
                            $1.y = $get(_8o, _8p); //#15581
                            if ($ne($1.x, $1.y)) { //#15592
                                $1.cost = $f($f($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + 1); //#15583
                                if ($1.cost < $get($1.nxtlen, $1.y)) { //#15591
                                    $put($1.nxtlen, $1.y, $1.cost); //#15585
                                    $k[$j++] = $1.nxtseq; //#15589
                                    $k[$j++] = $1.y; //#15589
                                    $k[$j++] = Infinity; //#15589
                                    $aload($get($1.curseq, $1.y)); //#15587
                                    var _9G = ($1.x == $1.A) ? $1.as : $1.ps; //#15588
                                    $k[$j++] = _9G; //#15589
                                    $k[$j++] = $1.char; //#15589
                                    var _9I = $a(); //#15589
                                    var _9J = $k[--$j]; //#15590
                                    $put($k[--$j], _9J, _9I); //#15590
                                } //#15590
                            } //#15590
                        } //#15590
                        break; //#15595
                    } //#15595
                } //#15595
                $1.curlen = $1.nxtlen; //#15600
                $1.curseq = $1.nxtseq; //#15601
            }); //#15601
            $1.minseq = $1.e; //#15606
            var _9S = $a([$1.A, $1.L, $1.M, $1.P]); //#15607
            for (var _9T = 0, _9U = _9S.length; _9T < _9U; _9T++) { //#15613
                $1.k = $get(_9S, _9T); //#15608
                if ($get($1.curlen, $1.k) < $1.minseq) { //#15612
                    $1.minseq = $get($1.curlen, $1.k); //#15610
                    $1.txtseq = $get($1.curseq, $1.k); //#15611
                } //#15611
            } //#15611
            $1.text = $a($1.minseq); //#15616
            $1.k = 0; //#15617
            $1.l = 0; //#15617
            for (;;) { //#15637
                if ($1.k >= $1.txtseq.length) { //#15618
                    break; //#15618
                } //#15618
                $1.char = $get($1.txtseq, $1.k); //#15620
                $k[$j++] = $1.char; //#15623
                if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
                    break;
                } //#15623
                $1.addtotext(); //#15623
                $1.k = $1.k + 1; //#15624
                if (($1.char == $1.as) || ($1.char == $1.ps)) { //#15630
                    $k[$j++] = $get($1.txtseq, $1.k); //#15628
                    if ($1.char == $1.as) { //#15628
                        $1.enca(); //#15628
                    } else { //#15628
                        $1.encp(); //#15628
                    } //#15628
                    $1.addtotext(); //#15628
                    $1.k = $1.k + 1; //#15629
                } //#15629
                if ($1.char == $1.al) { //#15633
                    $1.submode = $1.A; //#15633
                } //#15633
                if ($1.char == $1.ll) { //#15634
                    $1.submode = $1.L; //#15634
                } //#15634
                if ($1.char == $1.ml) { //#15635
                    $1.submode = $1.M; //#15635
                } //#15635
                if ($1.char == $1.pl) { //#15636
                    $1.submode = $1.P; //#15636
                } //#15636
            } //#15636
            if (($1.text.length % 2) == 1) { //#15647
                if ($1.submode == $1.P) { //#15644
                    $k[$j++] = 'pad'; //#15641
                    $k[$j++] = $1.al; //#15641
                    $1.encp(); //#15641
                    var _AJ = $k[--$j]; //#15641
                    $1[$k[--$j]] = _AJ; //#15641
                    $1.submode = $1.A; //#15642
                } else { //#15644
                    $k[$j++] = 'pad'; //#15644
                    $k[$j++] = $1.ps; //#15644
                    if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
                        return true;
                    } //#15644
                    var _AR = $k[--$j]; //#15644
                    $1[$k[--$j]] = _AR; //#15644
                } //#15644
                $k[$j++] = Infinity; //#15646
                $aload($1.text); //#15646
                $k[$j++] = $1.pad; //#15646
                $1.text = $a(); //#15646
            } //#15646
            $1.out = $a(~~($1.text.length / 2)); //#15649
            for (var _Aa = 0, _AZ = $1.out.length - 1; _Aa <= _AZ; _Aa += 1) { //#15653
                $1.k = _Aa; //#15651
                $put($1.out, $1.k, $f(($get($1.text, $1.k * 2) * 30) + $get($1.text, ($1.k * 2) + 1))); //#15652
            } //#15652
            $k[$j++] = $1.out; //#15655
        }; //#15657
        $1.encn = function() {
            $1.in = $k[--$j]; //#15660
            $1.out = $a([]); //#15661
            for (var _Ao = 0, _An = $1.in.length - 1; _Ao <= _An; _Ao += 44) { //#15689
                $1.k = _Ao; //#15663
                $k[$j++] = Infinity; //#15666
                var _At = $1.in.length - $1.k; //#15665
                $k[$j++] = 1; //#15665
                $k[$j++] = $1.in; //#15665
                $k[$j++] = $1.k; //#15665
                $k[$j++] = _At; //#15665
                if (_At > 44) { //#15665
                    $j--; //#15665
                    $k[$j++] = 44; //#15665
                } //#15665
                var _Au = $k[--$j]; //#15665
                var _Av = $k[--$j]; //#15665
                var _Ax = $geti($k[--$j], _Av, _Au); //#15665
                for (var _Ay = 0, _Az = _Ax.length; _Ay < _Az; _Ay++) { //#15666
                    $k[$j++] = $f($get(_Ax, _Ay) - 48); //#15666
                } //#15666
                $1.gmod = $a(); //#15666
                $1.cwn = $a([]); //#15668
                for (;;) { //#15687
                    $1.dv = 900; //#15669
                    $1.gmul = $a([]); //#15670
                    $1.val = 0; //#15670
                    for (;;) { //#15682
                        if ($1.gmod.length == 0) { //#15671
                            break; //#15671
                        } //#15671
                        $1.val = $f(($1.val * 10) + $get($1.gmod, 0)); //#15672
                        $1.gmod = $geti($1.gmod, 1, $1.gmod.length - 1); //#15673
                        if ($1.val < $1.dv) { //#15679
                            if ($1.gmul.length != 0) { //#15677
                                $k[$j++] = Infinity; //#15676
                                $aload($1.gmul); //#15676
                                $k[$j++] = 0; //#15676
                                $1.gmul = $a(); //#15676
                            } //#15676
                        } else { //#15679
                            $k[$j++] = Infinity; //#15679
                            $aload($1.gmul); //#15679
                            $k[$j++] = ~~($1.val / $1.dv); //#15679
                            $1.gmul = $a(); //#15679
                        } //#15679
                        $1.val = $1.val % $1.dv; //#15681
                    } //#15681
                    $1.dv = $1.val; //#15683
                    $k[$j++] = Infinity; //#15684
                    $k[$j++] = $1.dv; //#15684
                    $aload($1.cwn); //#15684
                    $1.cwn = $a(); //#15684
                    $1.gmod = $1.gmul; //#15685
                    if ($1.gmul.length == 0) { //#15686
                        break; //#15686
                    } //#15686
                } //#15686
                $k[$j++] = Infinity; //#15688
                $aload($1.out); //#15688
                $aload($1.cwn); //#15688
                $1.out = $a(); //#15688
            } //#15688
            $k[$j++] = $1.out; //#15690
        }; //#15691
        $1.ence = function() {
            var _BY = $f((-$get($k[--$j], 0)) - 1000000); //#15695
            $k[$j++] = _BY; //#15703
            if (_BY <= 899) { //#15702
                var _BZ = $k[--$j]; //#15696
                $k[$j++] = 927; //#15696
                $k[$j++] = _BZ; //#15696
                $astore($a(2)); //#15696
            } else { //#15702
                var _Bb = $k[--$j]; //#15697
                $k[$j++] = _Bb; //#15703
                if (_Bb <= 810899) { //#15702
                    var _Bc = $k[--$j]; //#15698
                    $k[$j++] = 926; //#15698
                    $k[$j++] = (~~(_Bc / 900)) - 1; //#15698
                    $k[$j++] = _Bc % 900; //#15698
                    $astore($a(3)); //#15698
                } else { //#15702
                    var _Be = $k[--$j]; //#15699
                    $k[$j++] = _Be; //#15703
                    if (_Be <= 811799) { //#15702
                        var _Bf = $k[--$j]; //#15700
                        $k[$j++] = 925; //#15700
                        $k[$j++] = $f(_Bf - 810900); //#15700
                        $astore($a(2)); //#15700
                    } else { //#15702
                        $k[$j++] = 'bwipp.pdf417badECI'; //#15702
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#15702
                        bwipp_raiseerror(); //#15702
                    } //#15702
                } //#15702
            } //#15702
        }; //#15704
        $1.encfuncs = $a(['enct', 'encn', 'encb']); //#15706
        $1.addtocws = function() {
            var _Bi = $k[--$j]; //#15709
            $puti($1.datcws, $1.j, _Bi); //#15709
            $1.j = _Bi.length + $1.j; //#15710
        }; //#15711
        $1.state = $1.T; //#15714
        $1.submode = $1.A; //#15714
        $1.datcws = $a($1.seqlen); //#15715
        $1.i = 0; //#15716
        $1.j = 0; //#15716
        for (;;) { //#15736
            if ($1.i >= $1.seq.length) { //#15717
                break; //#15717
            } //#15717
            $1.chars = $get($1.seq, $1.i); //#15718
            if ($eq($type($1.chars), 'arraytype')) { //#15732
                if ($get($1.chars, 0) <= -1000000) { //#15723
                    $k[$j++] = $1.chars; //#15721
                    $1.ence(); //#15721
                    $1.addtocws(); //#15721
                } else { //#15723
                    $k[$j++] = $1.chars; //#15723
                    if ($1[$get($1.encfuncs, $1.state)]() === true) {
                        break;
                    } //#15723
                    $1.addtocws(); //#15723
                } //#15723
            } else { //#15732
                $k[$j++] = $a([$get($1.latchcws, $1.chars)]); //#15726
                $1.addtocws(); //#15726
                if ($1.chars == $1.tl) { //#15727
                    $1.state = $1.T; //#15727
                    $1.submode = $1.A; //#15727
                } //#15727
                if ($1.chars == $1.nl) { //#15728
                    $1.state = $1.N; //#15728
                } //#15728
                if (($1.chars == $1.bl) || ($1.chars == $1.bl6)) { //#15729
                    $1.state = $1.B; //#15729
                } //#15729
                if ($1.chars == $1.bs) { //#15733
                    $1.i = $1.i + 1; //#15731
                    $k[$j++] = $get($1.seq, $1.i); //#15732
                    $1.encb(); //#15732
                    $1.addtocws(); //#15732
                } //#15732
            } //#15732
            $1.i = $1.i + 1; //#15735
        } //#15735
        $1.datcws = $geti($1.datcws, 0, $1.j); //#15737
    } //#15737
    $1.m = $1.datcws.length; //#15741
    if ($1.eclevel == -1) { //#15747
        if ($1.m <= 40) { //#15743
            $1.eclevel = 2; //#15743
        } //#15743
        if (($1.m >= 41) && ($1.m <= 160)) { //#15744
            $1.eclevel = 3; //#15744
        } //#15744
        if (($1.m >= 161) && ($1.m <= 320)) { //#15745
            $1.eclevel = 4; //#15745
        } //#15745
        if ($1.m >= 321) { //#15746
            $1.eclevel = 5; //#15746
        } //#15746
    } //#15746
    $1.maxeclevel = (~~((Math.log((928 - 1) - $1.m)) / Math.log(2))) - 1; //#15750
    if ($1.eclevel > $1.maxeclevel) { //#15751
        $1.eclevel = $1.maxeclevel; //#15751
    } //#15751
    $1.k = ~~Math.pow(2, $1.eclevel + 1); //#15752
    if ($1.columns == 0) { //#15755
        $1.columns = ~~(Math.round(Math.sqrt(($1.m + $1.k) / 3))); //#15755
    } //#15755
    $k[$j++] = 'c'; //#15756
    if ($1.columns >= 1) { //#15756
        $k[$j++] = $1.columns; //#15756
    } else { //#15756
        $k[$j++] = 1; //#15756
    } //#15756
    var _Cn = $k[--$j]; //#15756
    $1[$k[--$j]] = _Cn; //#15756
    $1.r = ~~(Math.ceil((($1.m + $1.k) + 1) / $1.columns)); //#15759
    if (($1.r < $1.rows) && ($1.rows <= 90)) { //#15760
        $1.r = $1.rows; //#15760
    } //#15760
    if ($1.r < 3) { //#15761
        $1.r = 3; //#15761
    } //#15761
    if ($1.r > 90) { //#15766
        $k[$j++] = 'bwipp.pdf417insufficientCapacity'; //#15765
        $k[$j++] = "Insufficient capacity in the symbol"; //#15765
        bwipp_raiseerror(); //#15765
    } //#15765
    var _Cy = $1.c; //#15769
    var _Cz = $1.r; //#15769
    var _D0 = $1.m; //#15769
    var _D1 = 8; //#15769
    var _D2 = (~~((Math.log($f(($f((_Cy * _Cz) - 1)) - _D0))) / Math.log(2))) - 1; //#15769
    if (((~~((Math.log($f(($f((_Cy * _Cz) - 1)) - _D0))) / Math.log(2))) - 1) > 8) { //#15769
        var _ = _D1; //#15769
        _D1 = _D2; //#15769
        _D2 = _; //#15769
    } //#15769
    $1.maxeclevel = _D2; //#15769
    if ($1.maxeclevel > $1.eclevel) { //#15773
        $1.eclevel = $1.maxeclevel; //#15771
        $1.k = ~~Math.pow(2, $1.eclevel + 1); //#15772
    } //#15772
    $1.n = $f(($1.c * $1.r) - $1.k); //#15776
    $1.cws = $a($f(($1.c * $1.r) + 1)); //#15777
    $put($1.cws, 0, $1.n); //#15778
    $puti($1.cws, 1, $1.datcws); //#15779
    $k[$j++] = $1.cws; //#15780
    $k[$j++] = $1.m + 1; //#15780
    $k[$j++] = Infinity; //#15780
    for (var _DL = 0, _DM = $f($f($1.n - $1.m) - 1); _DL < _DM; _DL++) { //#15780
        $k[$j++] = 900; //#15780
    } //#15780
    var _DN = $a(); //#15780
    var _DO = $k[--$j]; //#15780
    $puti($k[--$j], _DO, _DN); //#15780
    $k[$j++] = $1.cws; //#15781
    $k[$j++] = $1.n; //#15781
    $k[$j++] = Infinity; //#15781
    for (var _DT = 0, _DU = $1.k; _DT < _DU; _DT++) { //#15781
        $k[$j++] = 0; //#15781
    } //#15781
    $k[$j++] = 0; //#15781
    var _DV = $a(); //#15781
    var _DW = $k[--$j]; //#15781
    $puti($k[--$j], _DW, _DV); //#15781
    $k[$j++] = Infinity; //#15784
    $k[$j++] = 1; //#15784
    for (var _DY = 0, _DZ = 928; _DY < _DZ; _DY++) { //#15784
        var _Da = $k[--$j]; //#15784
        $k[$j++] = _Da; //#15784
        $k[$j++] = (_Da * 3) % 929; //#15784
    } //#15784
    $1.rsalog = $a(); //#15784
    $1.rslog = $a(929); //#15785
    for (var _Dd = 1; _Dd <= 928; _Dd += 1) { //#15786
        $put($1.rslog, $get($1.rsalog, _Dd), _Dd); //#15786
    } //#15786
    $1.rsprod = function() {
        var _Dh = $k[--$j]; //#15790
        var _Di = $k[--$j]; //#15790
        $k[$j++] = _Di; //#15794
        $k[$j++] = _Dh; //#15794
        if ((_Dh != 0) && (_Di != 0)) { //#15793
            var _Dl = $get($1.rslog, $k[--$j]); //#15791
            var _Dq = $get($1.rsalog, $f(_Dl + $get($1.rslog, $k[--$j])) % 928); //#15791
            $k[$j++] = _Dq; //#15791
        } else { //#15793
            $j -= 2; //#15793
            $k[$j++] = 0; //#15793
        } //#15793
    }; //#15795
    $k[$j++] = Infinity; //#15798
    $k[$j++] = 1; //#15798
    for (var _Ds = 0, _Dt = $1.k; _Ds < _Dt; _Ds++) { //#15798
        $k[$j++] = 0; //#15798
    } //#15798
    $1.coeffs = $a(); //#15798
    for (var _Dx = 1, _Dw = $1.k; _Dx <= _Dw; _Dx += 1) { //#15807
        $1.i = _Dx; //#15800
        $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#15801
        for (var _E4 = $1.i - 1; _E4 >= 1; _E4 -= 1) { //#15805
            $1.j = _E4; //#15803
            $k[$j++] = $1.coeffs; //#15804
            $k[$j++] = $1.j; //#15804
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#15804
            $k[$j++] = $get($1.coeffs, $1.j); //#15804
            $k[$j++] = $get($1.rsalog, $1.i); //#15804
            $1.rsprod(); //#15804
            var _EG = $k[--$j]; //#15804
            var _EH = $k[--$j]; //#15804
            var _EI = $k[--$j]; //#15804
            $put($k[--$j], _EI, $f(_EH + _EG) % 929); //#15804
        } //#15804
        $k[$j++] = $1.coeffs; //#15806
        $k[$j++] = 0; //#15806
        $k[$j++] = $get($1.coeffs, 0); //#15806
        $k[$j++] = $get($1.rsalog, $1.i); //#15806
        $1.rsprod(); //#15806
        var _EQ = $k[--$j]; //#15806
        var _ER = $k[--$j]; //#15806
        $put($k[--$j], _ER, _EQ); //#15806
    } //#15806
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#15808
    for (var _EX = $1.coeffs.length - 1; _EX >= 0; _EX -= 2) { //#15809
        var _EY = $1.coeffs; //#15809
        $put(_EY, _EX, $f(929 - $get(_EY, _EX))); //#15809
    } //#15809
    for (var _Ec = 0, _Eb = $f($1.n - 1); _Ec <= _Eb; _Ec += 1) { //#15818
        $1.t = $f($get($1.cws, _Ec) + $get($1.cws, $1.n)) % 929; //#15813
        for (var _Ek = 0, _Ej = $1.k - 1; _Ek <= _Ej; _Ek += 1) { //#15817
            $1.j = _Ek; //#15815
            $put($1.cws, $f($1.n + $1.j), ($f($get($1.cws, $f($f($1.n + $1.j) + 1)) + ($f(929 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 929))))) % 929); //#15816
        } //#15816
    } //#15816
    for (var _F1 = $1.n, _F0 = $f($1.n + $1.k); _F1 <= _F0; _F1 += 1) { //#15819
        $put($1.cws, _F1, $f(929 - $get($1.cws, _F1)) % 929); //#15819
    } //#15819
    $1.cws = $geti($1.cws, 0, $1.cws.length - 1); //#15822
    var _F9 = $get($1.options, 'debugcws') !== undefined; //#15824
    if (_F9) { //#15824
        $k[$j++] = 'bwipp.debugcws'; //#15824
        $k[$j++] = $1.cws; //#15824
        bwipp_raiseerror(); //#15824
    } //#15824
    $1.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#16066
    $1.cwtobits = function() {
        var _FH = $get($1.clusters, $k[--$j]); //#16070
        $1.v = $get(_FH, $k[--$j]); //#16070
        $k[$j++] = Infinity; //#16071
        for (var _FK = 0, _FL = 17; _FK < _FL; _FK++) { //#16071
            $k[$j++] = 0; //#16071
        } //#16071
        var _FO = $cvrs($s(17), $1.v, 2); //#16071
        for (var _FP = 0, _FQ = _FO.length; _FP < _FQ; _FP++) { //#16071
            $k[$j++] = $get(_FO, _FP) - 48; //#16071
        } //#16071
        var _FS = $a(); //#16071
        $k[$j++] = $geti(_FS, _FS.length - 17, 17); //#16072
    }; //#16073
    if ($1.compact) { //#16079
        $1.rwid = $f(($f(($f((17 * $1.c) + 17)) + 17)) + 1); //#16077
    } else { //#16079
        $1.rwid = $f(($f(($f(($f((17 * $1.c) + 17)) + 17)) + 17)) + 18); //#16079
    } //#16079
    $1.pixs = $a($1.rwid * $1.r); //#16081
    for (var _Fc = 0, _Fb = $1.r - 1; _Fc <= _Fb; _Fc += 1) { //#16111
        $1.i = _Fc; //#16084
        if (($1.i % 3) == 0) { //#16089
            $1.lcw = ((~~($1.i / 3)) * 30) + (~~(($1.r - 1) / 3)); //#16087
            $1.rcw = $f(($f(((~~($1.i / 3)) * 30) + $1.c)) - 1); //#16088
        } //#16088
        if (($1.i % 3) == 1) { //#16093
            $1.lcw = (((~~($1.i / 3)) * 30) + ($1.eclevel * 3)) + (($1.r - 1) % 3); //#16091
            $1.rcw = ((~~($1.i / 3)) * 30) + (~~(($1.r - 1) / 3)); //#16092
        } //#16092
        if (($1.i % 3) == 2) { //#16097
            $1.lcw = $f(($f(((~~($1.i / 3)) * 30) + $1.c)) - 1); //#16095
            $1.rcw = (((~~($1.i / 3)) * 30) + ($1.eclevel * 3)) + (($1.r - 1) % 3); //#16096
        } //#16096
        $k[$j++] = $1.pixs; //#16107
        $k[$j++] = $1.rwid * $1.i; //#16107
        $k[$j++] = Infinity; //#16107
        $k[$j++] = 1; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 0; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 0; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 0; //#16101
        $k[$j++] = 1; //#16101
        $k[$j++] = 0; //#16101
        $k[$j++] = 0; //#16101
        $k[$j++] = 0; //#16101
        $k[$j++] = $1.lcw; //#16101
        $k[$j++] = $1.i % 3; //#16101
        $1.cwtobits(); //#16101
        $forall($k[--$j]); //#16101
        var _G4 = $geti($1.cws, $1.c * $1.i, $1.c); //#16102
        for (var _G5 = 0, _G6 = _G4.length; _G5 < _G6; _G5++) { //#16102
            $k[$j++] = $get(_G4, _G5); //#16102
            $k[$j++] = $1.i % 3; //#16102
            $1.cwtobits(); //#16102
            $forall($k[--$j]); //#16102
        } //#16102
        if ($1.compact) { //#16107
            $k[$j++] = 1; //#16104
        } else { //#16107
            $k[$j++] = $1.rcw; //#16106
            $k[$j++] = $1.i % 3; //#16106
            $1.cwtobits(); //#16106
            $forall($k[--$j]); //#16106
            $k[$j++] = 1; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 0; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 0; //#16107
            $k[$j++] = 0; //#16107
            $k[$j++] = 0; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 0; //#16107
            $k[$j++] = 1; //#16107
            $k[$j++] = 0; //#16107
            $k[$j++] = 0; //#16107
            $k[$j++] = 1; //#16107
        } //#16107
        var _GE = $a(); //#16107
        var _GF = $k[--$j]; //#16109
        $puti($k[--$j], _GF, _GE); //#16109
    } //#16109
    var _GO = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.rwid],
        ["pixy", $1.r],
        ["height", ($1.r / 72) * $1.rowmult],
        ["width", $1.rwid / 72],
        ["opt", $1.options]
    ]); //#16121
    $k[$j++] = _GO; //#16124
    if (!$1.dontdraw) { //#16124
        bwipp_renmatrix(); //#16124
    } //#16124
}

function bwipp_pdf417compact() {
    var $1 = {}; //#16154
    $1.options = $k[--$j]; //#16156
    $1.barcode = $k[--$j]; //#16157
    $1.dontdraw = false; //#16159
    $forall($1.options, function() { //#16170
        var _3 = $k[--$j]; //#16170
        $1[$k[--$j]] = _3; //#16170
    }); //#16170
    $put($1.options, "dontdraw", true); //#16173
    $put($1.options, "compact", true); //#16174
    $k[$j++] = 'args'; //#16176
    $k[$j++] = $1.barcode; //#16176
    $k[$j++] = $1.options; //#16176
    bwipp_pdf417(); //#16176
    var _9 = $k[--$j]; //#16176
    $1[$k[--$j]] = _9; //#16176
    $put($1.args, "opt", $1.options); //#16178
    $k[$j++] = $1.args; //#16181
    if (!$1.dontdraw) { //#16181
        bwipp_renmatrix(); //#16181
    } //#16181
}

function bwipp_micropdf417() {
    var $1 = {}; //#16211
    $1.options = $k[--$j]; //#16213
    $1.barcode = $k[--$j]; //#16214
    $1.dontdraw = false; //#16216
    $1.version = "unset"; //#16217
    $1.columns = 0; //#16218
    $1.rows = 0; //#16219
    $1.rowmult = 2; //#16220
    $1.encoding = "auto"; //#16221
    $1.cca = false; //#16222
    $1.ccb = false; //#16223
    $1.raw = false; //#16224
    $1.parse = false; //#16225
    $1.parsefnc = false; //#16226
    $forall($1.options, function() { //#16237
        var _3 = $k[--$j]; //#16237
        $1[$k[--$j]] = _3; //#16237
    }); //#16237
    if ($ne($1.version, "unset")) { //#16243
        $search($1.version, "x"); //#16240
        $j--; //#16241
        $1.columns = $k[--$j]; //#16241
        $j--; //#16242
        $1.rows = $k[--$j]; //#16242
    } //#16242
    $1.columns = $cvi($1.columns); //#16245
    $1.rows = $cvi($1.rows); //#16246
    $1.rowmult = +$1.rowmult; //#16247
    if ($1.raw) { //#16249
        $1.encoding = "raw"; //#16249
    } //#16249
    if ($1.cca) { //#16250
        $1.encoding = "cca"; //#16250
    } //#16250
    if ($eq($1.encoding, "raw") || $eq($1.encoding, "cca")) { //#16264
        $1.datcws = $a($1.barcode.length); //#16254
        $1.i = 0; //#16255
        $1.j = 0; //#16255
        for (;;) { //#16262
            if ($1.i == $1.barcode.length) { //#16257
                break; //#16257
            } //#16257
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#16258
            $put($1.datcws, $1.j, $1.cw); //#16259
            $1.i = $1.i + 4; //#16260
            $1.j = $1.j + 1; //#16261
        } //#16261
        $1.datcws = $geti($1.datcws, 0, $1.j); //#16263
    } //#16263
    if ($1.ccb) { //#16266
        $1.encoding = "ccb"; //#16266
    } //#16266
    $1.encb = function() {
        $1.in = $k[--$j]; //#16269
        $1.inlen = $1.in.length; //#16270
        $1.out = $a(((~~($1.inlen / 6)) * 5) + ($1.inlen % 6)); //#16271
        for (var _d = 0, _c = (~~($1.inlen / 6)) - 1; _d <= _c; _d += 1) { //#16294
            $1.k = _d; //#16273
            $k[$j++] = Infinity; //#16274
            $aload($geti($1.in, $1.k * 6, 3)); //#16274
            $1.msbs = $a(); //#16274
            $k[$j++] = Infinity; //#16277
            $aload($1.msbs); //#16276
            var _j = $k[--$j]; //#16276
            var _k = $k[--$j]; //#16276
            var _l = $k[--$j]; //#16276
            $k[$j++] = $f(($f(_j + (_k * 256))) + (_l * 65536)); //#16277
            for (var _m = 0, _n = 3; _m < _n; _m++) { //#16277
                var _o = $k[--$j]; //#16277
                $k[$j++] = _o % 900; //#16277
                $k[$j++] = ~~(_o / 900); //#16277
            } //#16277
            $1.mscs = $a(); //#16277
            $k[$j++] = Infinity; //#16279
            $aload($geti($1.in, ($1.k * 6) + 3, 3)); //#16279
            $1.lsbs = $a(); //#16279
            $k[$j++] = Infinity; //#16282
            $aload($1.lsbs); //#16281
            var _v = $k[--$j]; //#16281
            var _w = $k[--$j]; //#16281
            var _x = $k[--$j]; //#16281
            $k[$j++] = $f(($f(_v + (_w * 256))) + (_x * 65536)); //#16282
            for (var _y = 0, _z = 3; _y < _z; _y++) { //#16282
                var _10 = $k[--$j]; //#16282
                $k[$j++] = _10 % 900; //#16282
                $k[$j++] = ~~(_10 / 900); //#16282
            } //#16282
            $1.lscs = $a(); //#16282
            var _13 = $get($1.lscs, 0); //#16284
            var _15 = $get($1.mscs, 0); //#16284
            $put($1.out, ($1.k * 5) + 4, ($f(_13 + (_15 * 316))) % 900); //#16285
            var _19 = $get($1.lscs, 1); //#16286
            var _1B = $get($1.mscs, 0); //#16286
            var _1D = $get($1.mscs, 1); //#16286
            $put($1.out, ($1.k * 5) + 3, ($f(($f(($f((~~(($f(_13 + (_15 * 316))) / 900)) + _19)) + (_1B * 641))) + (_1D * 316))) % 900); //#16287
            var _1H = $get($1.lscs, 2); //#16288
            var _1J = $get($1.mscs, 0); //#16288
            var _1L = $get($1.mscs, 1); //#16288
            var _1N = $get($1.mscs, 2); //#16288
            $put($1.out, ($1.k * 5) + 2, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_13 + (_15 * 316))) / 900)) + _19)) + (_1B * 641))) + (_1D * 316))) / 900)) + _1H)) + (_1J * 20))) + (_1L * 641))) + (_1N * 316))) % 900); //#16289
            var _1R = $get($1.lscs, 3); //#16290
            var _1T = $get($1.mscs, 1); //#16290
            var _1V = $get($1.mscs, 2); //#16290
            $put($1.out, ($1.k * 5) + 1, ($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_13 + (_15 * 316))) / 900)) + _19)) + (_1B * 641))) + (_1D * 316))) / 900)) + _1H)) + (_1J * 20))) + (_1L * 641))) + (_1N * 316))) / 900)) + _1R)) + (_1T * 20))) + (_1V * 641))) % 900); //#16291
            $put($1.out, $1.k * 5, ($f((~~(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_13 + (_15 * 316))) / 900)) + _19)) + (_1B * 641))) + (_1D * 316))) / 900)) + _1H)) + (_1J * 20))) + (_1L * 641))) + (_1N * 316))) / 900)) + _1R)) + (_1T * 20))) + (_1V * 641))) / 900)) + ($get($1.mscs, 2) * 20))) % 900); //#16293
        } //#16293
        $1.rem = $1.inlen % 6; //#16295
        if ($1.rem != 0) { //#16300
            $k[$j++] = $1.out; //#16298
            $k[$j++] = $1.out.length - $1.rem; //#16298
            $k[$j++] = Infinity; //#16298
            $aload($geti($1.in, $1.inlen - $1.rem, $1.rem)); //#16298
            var _1m = $a(); //#16298
            var _1n = $k[--$j]; //#16299
            $puti($k[--$j], _1n, _1m); //#16299
        } //#16299
        $k[$j++] = $1.out; //#16301
    }; //#16302
    if ($eq($1.encoding, "byte") || $eq($1.encoding, "ccb")) { //#16310
        $1.barlen = $1.barcode.length; //#16305
        $1.datcws = $a((((~~($1.barlen / 6)) * 5) + ($1.barlen % 6)) + 1); //#16306
        var _1y = (($1.barlen % 6) == 0) ? 924 : 901; //#16307
        $put($1.datcws, 0, _1y); //#16307
        $k[$j++] = $1.datcws; //#16308
        $k[$j++] = 1; //#16308
        $k[$j++] = Infinity; //#16308
        $forall($1.barcode); //#16308
        var _21 = $a(); //#16308
        $k[$j++] = _21; //#16308
        $1.encb(); //#16308
        var _22 = $k[--$j]; //#16308
        var _23 = $k[--$j]; //#16308
        $puti($k[--$j], _23, _22); //#16308
        if ($eq($1.encoding, "ccb")) { //#16309
            $k[$j++] = Infinity; //#16309
            $k[$j++] = 920; //#16309
            $aload($1.datcws); //#16309
            $1.datcws = $a(); //#16309
        } //#16309
    } //#16309
    if ($eq($1.encoding, "auto")) { //#16714
        var _2B = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true]
        ]); //#16318
        $1.fncvals = _2B; //#16320
        $k[$j++] = 'msg'; //#16321
        $k[$j++] = $1.barcode; //#16321
        $k[$j++] = $1.fncvals; //#16321
        bwipp_parseinput(); //#16321
        var _2E = $k[--$j]; //#16321
        $1[$k[--$j]] = _2E; //#16321
        $1.msglen = $1.msg.length; //#16322
        $1.T = 0; //#16325
        $1.N = 1; //#16325
        $1.B = 2; //#16325
        $1.A = 0; //#16326
        $1.L = 1; //#16326
        $1.M = 2; //#16326
        $1.P = 3; //#16326
        $1.tl = -1; //#16329
        $1.nl = -2; //#16329
        $1.bl = -3; //#16329
        $1.bl6 = -4; //#16329
        $1.bs = -5; //#16329
        $1.al = -6; //#16332
        $1.ll = -7; //#16332
        $1.ml = -8; //#16332
        $1.pl = -9; //#16332
        $1.as = -10; //#16332
        $1.ps = -11; //#16332
        $1.charmaps = $a([$a(["A", "a", "0", ";"]), $a(["B", "b", "1", "<"]), $a(["C", "c", "2", ">"]), $a(["D", "d", "3", "@"]), $a(["E", "e", "4", "["]), $a(["F", "f", "5", 92]), $a(["G", "g", "6", "]"]), $a(["H", "h", "7", "_"]), $a(["I", "i", "8", "`"]), $a(["J", "j", "9", "~"]), $a(["K", "k", "&", "!"]), $a(["L", "l", 13, 13]), $a(["M", "m", 9, 9]), $a(["N", "n", ",", ","]), $a(["O", "o", ":", ":"]), $a(["P", "p", "#", 10]), $a(["Q", "q", "-", "-"]), $a(["R", "r", ".", "."]), $a(["S", "s", "$", "$"]), $a(["T", "t", "/", "/"]), $a(["U", "u", "+", "\""]), $a(["V", "v", "%", "|"]), $a(["W", "w", "*", "*"]), $a(["X", "x", "=", 40]), $a(["Y", "y", "^", 41]), $a(["Z", "z", $1.pl, "?"]), $a([" ", " ", " ", "{"]), $a([$1.ll, $1.as, $1.ll, "}"]), $a([$1.ml, $1.ml, $1.al, "'"]), $a([$1.ps, $1.ps, $1.ps, $1.al])]); //#16367
        $1.charvals = $a([new Map, new Map, new Map, new Map]); //#16370
        $1.alltext = new Map; //#16371
        for (var _30 = 0, _2z = $1.charmaps.length - 1; _30 <= _2z; _30 += 1) { //#16381
            $1.i = _30; //#16373
            $1.encs = $get($1.charmaps, $1.i); //#16374
            for (var _34 = 0; _34 <= 3; _34 += 1) { //#16380
                $1.j = _34; //#16376
                var _37 = $get($1.encs, $1.j); //#16377
                $k[$j++] = _37; //#16377
                if ($eq($type(_37), 'stringtype')) { //#16377
                    var _3A = $get($k[--$j], 0); //#16377
                    $k[$j++] = _3A; //#16377
                } //#16377
                var _3B = $k[--$j]; //#16378
                $put($get($1.charvals, $1.j), _3B, $1.i); //#16378
                $put($1.alltext, _3B, -1); //#16379
            } //#16379
        } //#16379
        $1.e = 10000; //#16383
        $1.latlen = $a([$a([0, 1, 1, 2]), $a([2, 0, 1, 2]), $a([1, 1, 0, 1]), $a([1, 2, 2, 0])]); //#16391
        $1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.ml, $1.al]), $a([]), $a([$1.ml]), $a([$1.ml, $1.pl])]), $a([$a([$1.al]), $a([$1.ll]), $a([]), $a([$1.pl])]), $a([$a([$1.al]), $a([$1.al, $1.ll]), $a([$1.al, $1.ml]), $a([])])]); //#16399
        $1.shftlen = $a([$a([$1.e, $1.e, $1.e, 1]), $a([1, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, 1]), $a([$1.e, $1.e, $1.e, $1.e])]); //#16407
        $k[$j++] = Infinity; //#16410
        for (var _4G = 0, _4H = $1.msglen; _4G < _4H; _4G++) { //#16410
            $k[$j++] = 0; //#16410
        } //#16410
        $k[$j++] = 0; //#16410
        $1.numdigits = $a(); //#16410
        $k[$j++] = Infinity; //#16411
        for (var _4K = 0, _4L = $1.msglen; _4K < _4L; _4K++) { //#16411
            $k[$j++] = 0; //#16411
        } //#16411
        $k[$j++] = 0; //#16411
        $1.numtext = $a(); //#16411
        $k[$j++] = Infinity; //#16412
        for (var _4O = 0, _4P = $1.msglen; _4O < _4P; _4O++) { //#16412
            $k[$j++] = 0; //#16412
        } //#16412
        $k[$j++] = 0; //#16412
        $1.numbytes = $a(); //#16412
        $k[$j++] = Infinity; //#16413
        for (var _4S = 0, _4T = $1.msglen; _4S < _4T; _4S++) { //#16413
            $k[$j++] = 0; //#16413
        } //#16413
        $1.iseci = $a(); //#16413
        for (var _4W = $1.msglen - 1; _4W >= 0; _4W -= 1) { //#16426
            $1.i = _4W; //#16415
            var _4Z = $get($1.msg, $1.i); //#16416
            if ((_4Z >= 48) && (_4Z <= 57)) { //#16418
                $put($1.numdigits, $1.i, $f($get($1.numdigits, $1.i + 1) + 1)); //#16417
            } //#16417
            var _4j = $get($1.alltext, $get($1.msg, $1.i)) !== undefined; //#16419
            if (_4j && ($get($1.numdigits, $1.i) < 13)) { //#16421
                $put($1.numtext, $1.i, $f($get($1.numtext, $1.i + 1) + 1)); //#16420
            } //#16420
            if ((($get($1.msg, $1.i) >= 0) && ($get($1.numtext, $1.i) < 5)) && ($get($1.numdigits, $1.i) < 13)) { //#16424
                $put($1.numbytes, $1.i, $f($get($1.numbytes, $1.i + 1) + 1)); //#16423
            } //#16423
            $put($1.iseci, $1.i, $get($1.msg, $1.i) <= -1000000); //#16425
        } //#16425
        $1.numdigits = $geti($1.numdigits, 0, $1.msglen); //#16427
        $1.numtext = $geti($1.numtext, 0, $1.msglen); //#16428
        $1.numbytes = $geti($1.numbytes, 0, $1.msglen); //#16429
        $1.seq = $a([]); //#16431
        $1.seqlen = 0; //#16431
        $1.state = $1.B; //#16431
        $1.p = 0; //#16431
        for (;;) { //#16485
            if ($1.p == $1.msglen) { //#16432
                break; //#16432
            } //#16432
            if ($get($1.iseci, $1.p)) { //#16483
                $1.eci = $get($1.msg, $1.p); //#16434
                $k[$j++] = Infinity; //#16437
                $aload($1.seq); //#16436
                $k[$j++] = $a([$1.eci]); //#16437
                $1.seq = $a(); //#16437
                $1.p = $1.p + 1; //#16439
                $k[$j++] = 'seqlen'; //#16440
                $k[$j++] = $1.seqlen; //#16440
                if ($1.eci <= -1810900) { //#16440
                    $k[$j++] = 2; //#16440
                } else { //#16440
                    var _5c = ($1.eci <= -1000900) ? 3 : 2; //#16440
                    $k[$j++] = _5c; //#16440
                } //#16440
                var _5d = $k[--$j]; //#16440
                var _5e = $k[--$j]; //#16440
                $1[$k[--$j]] = $f(_5e + _5d); //#16440
            } else { //#16483
                $1.n = $get($1.numdigits, $1.p); //#16442
                if ($1.n >= 13) { //#16483
                    $k[$j++] = Infinity; //#16447
                    $aload($1.seq); //#16445
                    $k[$j++] = $1.nl; //#16447
                    $k[$j++] = Infinity; //#16447
                    $aload($geti($1.msg, $1.p, $1.n)); //#16447
                    var _5q = $a(); //#16447
                    $k[$j++] = _5q; //#16447
                    $1.seq = $a(); //#16447
                    $1.state = $1.N; //#16449
                    $1.p = $f($1.p + $1.n); //#16450
                    $1.seqlen = $f(($1.seqlen + 1) + $1.n); //#16451
                } else { //#16483
                    $1.t = $get($1.numtext, $1.p); //#16453
                    if ($1.t >= 5) { //#16483
                        $k[$j++] = Infinity; //#16460
                        $aload($1.seq); //#16456
                        if ($1.state != $1.T) { //#16459
                            $k[$j++] = $1.tl; //#16458
                        } //#16458
                        $k[$j++] = Infinity; //#16460
                        $aload($geti($1.msg, $1.p, $1.t)); //#16460
                        var _69 = $a(); //#16460
                        $k[$j++] = _69; //#16460
                        $1.seq = $a(); //#16460
                        $1.state = $1.T; //#16462
                        $1.p = $f($1.p + $1.t); //#16463
                        $1.seqlen = $f($f($1.seqlen + 1) + $1.t); //#16464
                    } else { //#16483
                        $1.b = $get($1.numbytes, $1.p); //#16466
                        if (($1.b == 1) && ($1.state == $1.T)) { //#16483
                            $k[$j++] = Infinity; //#16471
                            $aload($1.seq); //#16469
                            $k[$j++] = $1.bs; //#16471
                            $k[$j++] = $a([$get($1.msg, $1.p)]); //#16471
                            $1.seq = $a(); //#16471
                            $1.p = $f($1.p + $1.b); //#16473
                            $1.seqlen = $f($1.seqlen + 2); //#16474
                        } else { //#16483
                            $k[$j++] = Infinity; //#16479
                            $aload($1.seq); //#16477
                            var _6Y = (($1.b % 6) != 0) ? $1.bl : $1.bl6; //#16478
                            $k[$j++] = _6Y; //#16479
                            $k[$j++] = Infinity; //#16479
                            $aload($geti($1.msg, $1.p, $1.b)); //#16479
                            var _6d = $a(); //#16479
                            $k[$j++] = _6d; //#16479
                            $1.seq = $a(); //#16479
                            $1.state = $1.B; //#16481
                            $1.p = $f($1.p + $1.b); //#16482
                            $1.seqlen = $f($f($1.seqlen + 1) + $1.b); //#16483
                        } //#16483
                    } //#16483
                } //#16483
            } //#16483
        } //#16483
        $k[$j++] = Infinity; //#16488
        $k[$j++] = $1.tl; //#16488
        $k[$j++] = 900; //#16488
        $k[$j++] = $1.bl; //#16488
        $k[$j++] = 901; //#16488
        $k[$j++] = $1.bl6; //#16488
        $k[$j++] = 924; //#16488
        $k[$j++] = $1.nl; //#16488
        $k[$j++] = 902; //#16488
        $k[$j++] = $1.bs; //#16488
        $k[$j++] = 913; //#16488
        $1.latchcws = $d(); //#16489
        $1.enca = function() {
            var _6u = $get($get($1.charvals, $1.A), $k[--$j]); //#16492
            $k[$j++] = _6u; //#16492
        }; //#16492
        $1.encl = function() {
            var _6z = $get($get($1.charvals, $1.L), $k[--$j]); //#16493
            $k[$j++] = _6z; //#16493
        }; //#16493
        $1.encm = function() {
            var _74 = $get($get($1.charvals, $1.M), $k[--$j]); //#16494
            $k[$j++] = _74; //#16494
        }; //#16494
        $1.encp = function() {
            var _79 = $get($get($1.charvals, $1.P), $k[--$j]); //#16495
            $k[$j++] = _79; //#16495
        }; //#16495
        $1.textencfuncs = $a(['enca', 'encl', 'encm', 'encp']); //#16496
        $1.addtotext = function() {
            $put($1.text, $1.l, $k[--$j]); //#16499
            $1.l = $1.l + 1; //#16500
        }; //#16501
        $1.enct = function() {
            $1.in = $k[--$j]; //#16505
            $1.curlen = $a([$1.e, $1.e, $1.e, $1.e]); //#16507
            $put($1.curlen, $1.submode, 0); //#16508
            $1.curseq = $a([$a([]), $a([]), $a([]), $a([])]); //#16509
            $forall($1.in, function() { //#16579
                $1.char = $k[--$j]; //#16514
                for (;;) { //#16535
                    $1.imp = false; //#16518
                    var _7Y = $a([$1.A, $1.L, $1.M, $1.P]); //#16519
                    for (var _7Z = 0, _7a = _7Y.length; _7Z < _7a; _7Z++) { //#16533
                        $1.x = $get(_7Y, _7Z); //#16520
                        var _7g = $a([$1.A, $1.L, $1.M, $1.P]); //#16521
                        for (var _7h = 0, _7i = _7g.length; _7h < _7i; _7h++) { //#16532
                            $1.y = $get(_7g, _7h); //#16522
                            $1.cost = $f($get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y)); //#16523
                            if ($1.cost < $get($1.curlen, $1.y)) { //#16531
                                $put($1.curlen, $1.y, $1.cost); //#16525
                                $k[$j++] = $1.curseq; //#16528
                                $k[$j++] = $1.y; //#16528
                                $k[$j++] = Infinity; //#16528
                                $aload($get($1.curseq, $1.x)); //#16527
                                $aload($get($get($1.latseq, $1.x), $1.y)); //#16528
                                var _89 = $a(); //#16528
                                var _8A = $k[--$j]; //#16529
                                $put($k[--$j], _8A, _89); //#16529
                                $1.imp = true; //#16530
                            } //#16530
                        } //#16530
                    } //#16530
                    if (!$1.imp) { //#16534
                        break; //#16534
                    } //#16534
                } //#16534
                $1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e]); //#16538
                $1.nxtseq = $a(4); //#16539
                var _8N = $a([$1.A, $1.L, $1.M, $1.P]); //#16541
                for (var _8O = 0, _8P = _8N.length; _8O < _8P; _8O++) { //#16574
                    $1.x = $get(_8N, _8O); //#16542
                    for (;;) { //#16572
                        var _8V = $get($get($1.charvals, $1.x), $1.char) !== undefined; //#16546
                        if (!_8V) { //#16546
                            break; //#16546
                        } //#16546
                        $1.cost = $f($get($1.curlen, $1.x) + 1); //#16549
                        if ($1.cost < $get($1.nxtlen, $1.x)) { //#16553
                            $put($1.nxtlen, $1.x, $1.cost); //#16551
                            $k[$j++] = $1.nxtseq; //#16552
                            $k[$j++] = $1.x; //#16552
                            $k[$j++] = Infinity; //#16552
                            $aload($get($1.curseq, $1.x)); //#16552
                            $k[$j++] = $1.char; //#16552
                            var _8m = $a(); //#16552
                            var _8n = $k[--$j]; //#16552
                            $put($k[--$j], _8n, _8m); //#16552
                        } //#16552
                        var _8t = $a([$1.A, $1.L, $1.M, $1.P]); //#16556
                        for (var _8u = 0, _8v = _8t.length; _8u < _8v; _8u++) { //#16569
                            $1.y = $get(_8t, _8u); //#16557
                            if ($ne($1.x, $1.y)) { //#16568
                                $1.cost = $f($f($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)) + 1); //#16559
                                if ($1.cost < $get($1.nxtlen, $1.y)) { //#16567
                                    $put($1.nxtlen, $1.y, $1.cost); //#16561
                                    $k[$j++] = $1.nxtseq; //#16565
                                    $k[$j++] = $1.y; //#16565
                                    $k[$j++] = Infinity; //#16565
                                    $aload($get($1.curseq, $1.y)); //#16563
                                    var _9L = ($1.x == $1.A) ? $1.as : $1.ps; //#16564
                                    $k[$j++] = _9L; //#16565
                                    $k[$j++] = $1.char; //#16565
                                    var _9N = $a(); //#16565
                                    var _9O = $k[--$j]; //#16566
                                    $put($k[--$j], _9O, _9N); //#16566
                                } //#16566
                            } //#16566
                        } //#16566
                        break; //#16571
                    } //#16571
                } //#16571
                $1.curlen = $1.nxtlen; //#16576
                $1.curseq = $1.nxtseq; //#16577
            }); //#16577
            $1.minseq = $1.e; //#16582
            var _9X = $a([$1.A, $1.L, $1.M, $1.P]); //#16583
            for (var _9Y = 0, _9Z = _9X.length; _9Y < _9Z; _9Y++) { //#16589
                $1.k = $get(_9X, _9Y); //#16584
                if ($get($1.curlen, $1.k) < $1.minseq) { //#16588
                    $1.minseq = $get($1.curlen, $1.k); //#16586
                    $1.txtseq = $get($1.curseq, $1.k); //#16587
                } //#16587
            } //#16587
            $1.text = $a($1.minseq); //#16592
            $1.k = 0; //#16593
            $1.l = 0; //#16593
            for (;;) { //#16613
                if ($1.k >= $1.txtseq.length) { //#16594
                    break; //#16594
                } //#16594
                $1.char = $get($1.txtseq, $1.k); //#16596
                $k[$j++] = $1.char; //#16599
                if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
                    break;
                } //#16599
                $1.addtotext(); //#16599
                $1.k = $1.k + 1; //#16600
                if (($1.char == $1.as) || ($1.char == $1.ps)) { //#16606
                    $k[$j++] = $get($1.txtseq, $1.k); //#16604
                    if ($1.char == $1.as) { //#16604
                        $1.enca(); //#16604
                    } else { //#16604
                        $1.encp(); //#16604
                    } //#16604
                    $1.addtotext(); //#16604
                    $1.k = $1.k + 1; //#16605
                } //#16605
                if ($1.char == $1.al) { //#16609
                    $1.submode = $1.A; //#16609
                } //#16609
                if ($1.char == $1.ll) { //#16610
                    $1.submode = $1.L; //#16610
                } //#16610
                if ($1.char == $1.ml) { //#16611
                    $1.submode = $1.M; //#16611
                } //#16611
                if ($1.char == $1.pl) { //#16612
                    $1.submode = $1.P; //#16612
                } //#16612
            } //#16612
            if (($1.text.length % 2) == 1) { //#16623
                if ($1.submode == $1.P) { //#16620
                    $k[$j++] = 'pad'; //#16617
                    $k[$j++] = $1.al; //#16617
                    $1.encp(); //#16617
                    var _AO = $k[--$j]; //#16617
                    $1[$k[--$j]] = _AO; //#16617
                    $1.submode = $1.A; //#16618
                } else { //#16620
                    $k[$j++] = 'pad'; //#16620
                    $k[$j++] = $1.ps; //#16620
                    if ($1[$get($1.textencfuncs, $1.submode)]() === true) {
                        return true;
                    } //#16620
                    var _AW = $k[--$j]; //#16620
                    $1[$k[--$j]] = _AW; //#16620
                } //#16620
                $k[$j++] = Infinity; //#16622
                $aload($1.text); //#16622
                $k[$j++] = $1.pad; //#16622
                $1.text = $a(); //#16622
            } //#16622
            $1.out = $a(~~($1.text.length / 2)); //#16625
            for (var _Af = 0, _Ae = $1.out.length - 1; _Af <= _Ae; _Af += 1) { //#16629
                $1.k = _Af; //#16627
                $put($1.out, $1.k, $f(($get($1.text, $1.k * 2) * 30) + $get($1.text, ($1.k * 2) + 1))); //#16628
            } //#16628
            $k[$j++] = $1.out; //#16631
        }; //#16633
        $1.encn = function() {
            $1.in = $k[--$j]; //#16636
            $1.out = $a([]); //#16637
            for (var _At = 0, _As = $1.in.length - 1; _At <= _As; _At += 44) { //#16665
                $1.k = _At; //#16639
                $k[$j++] = Infinity; //#16642
                var _Ay = $1.in.length - $1.k; //#16641
                $k[$j++] = 1; //#16641
                $k[$j++] = $1.in; //#16641
                $k[$j++] = $1.k; //#16641
                $k[$j++] = _Ay; //#16641
                if (_Ay > 44) { //#16641
                    $j--; //#16641
                    $k[$j++] = 44; //#16641
                } //#16641
                var _Az = $k[--$j]; //#16641
                var _B0 = $k[--$j]; //#16641
                var _B2 = $geti($k[--$j], _B0, _Az); //#16641
                for (var _B3 = 0, _B4 = _B2.length; _B3 < _B4; _B3++) { //#16642
                    $k[$j++] = $f($get(_B2, _B3) - 48); //#16642
                } //#16642
                $1.gmod = $a(); //#16642
                $1.cwn = $a([]); //#16644
                for (;;) { //#16663
                    $1.dv = 900; //#16645
                    $1.gmul = $a([]); //#16646
                    $1.val = 0; //#16646
                    for (;;) { //#16658
                        if ($1.gmod.length == 0) { //#16647
                            break; //#16647
                        } //#16647
                        $1.val = $f(($1.val * 10) + $get($1.gmod, 0)); //#16648
                        $1.gmod = $geti($1.gmod, 1, $1.gmod.length - 1); //#16649
                        if ($1.val < $1.dv) { //#16655
                            if ($1.gmul.length != 0) { //#16653
                                $k[$j++] = Infinity; //#16652
                                $aload($1.gmul); //#16652
                                $k[$j++] = 0; //#16652
                                $1.gmul = $a(); //#16652
                            } //#16652
                        } else { //#16655
                            $k[$j++] = Infinity; //#16655
                            $aload($1.gmul); //#16655
                            $k[$j++] = ~~($1.val / $1.dv); //#16655
                            $1.gmul = $a(); //#16655
                        } //#16655
                        $1.val = $1.val % $1.dv; //#16657
                    } //#16657
                    $1.dv = $1.val; //#16659
                    $k[$j++] = Infinity; //#16660
                    $k[$j++] = $1.dv; //#16660
                    $aload($1.cwn); //#16660
                    $1.cwn = $a(); //#16660
                    $1.gmod = $1.gmul; //#16661
                    if ($1.gmul.length == 0) { //#16662
                        break; //#16662
                    } //#16662
                } //#16662
                $k[$j++] = Infinity; //#16664
                $aload($1.out); //#16664
                $aload($1.cwn); //#16664
                $1.out = $a(); //#16664
            } //#16664
            $k[$j++] = $1.out; //#16666
        }; //#16667
        $1.ence = function() {
            var _Bd = $f((-$get($k[--$j], 0)) - 1000000); //#16671
            $k[$j++] = _Bd; //#16679
            if (_Bd <= 899) { //#16678
                var _Be = $k[--$j]; //#16672
                $k[$j++] = 927; //#16672
                $k[$j++] = _Be; //#16672
                $astore($a(2)); //#16672
            } else { //#16678
                var _Bg = $k[--$j]; //#16673
                $k[$j++] = _Bg; //#16679
                if (_Bg <= 810899) { //#16678
                    var _Bh = $k[--$j]; //#16674
                    $k[$j++] = 926; //#16674
                    $k[$j++] = (~~(_Bh / 900)) - 1; //#16674
                    $k[$j++] = _Bh % 900; //#16674
                    $astore($a(3)); //#16674
                } else { //#16678
                    var _Bj = $k[--$j]; //#16675
                    $k[$j++] = _Bj; //#16679
                    if (_Bj <= 811799) { //#16678
                        var _Bk = $k[--$j]; //#16676
                        $k[$j++] = 925; //#16676
                        $k[$j++] = $f(_Bk - 810900); //#16676
                        $astore($a(2)); //#16676
                    } else { //#16678
                        $k[$j++] = 'bwipp.pdf417badECI'; //#16678
                        $k[$j++] = "PDF417 supports ECIs 000000 to 811799"; //#16678
                        bwipp_raiseerror(); //#16678
                    } //#16678
                } //#16678
            } //#16678
        }; //#16680
        $1.encfuncs = $a(['enct', 'encn', 'encb']); //#16682
        $1.addtocws = function() {
            var _Bn = $k[--$j]; //#16685
            $puti($1.datcws, $1.j, _Bn); //#16685
            $1.j = _Bn.length + $1.j; //#16686
        }; //#16687
        $1.datcws = $a($1.seqlen); //#16691
        $1.i = 0; //#16692
        $1.j = 0; //#16692
        for (;;) { //#16712
            if ($1.i >= $1.seq.length) { //#16693
                break; //#16693
            } //#16693
            $1.chars = $get($1.seq, $1.i); //#16694
            if ($eq($type($1.chars), 'arraytype')) { //#16708
                if ($get($1.chars, 0) <= -1000000) { //#16699
                    $k[$j++] = $1.chars; //#16697
                    $1.ence(); //#16697
                    $1.addtocws(); //#16697
                } else { //#16699
                    $k[$j++] = $1.chars; //#16699
                    if ($1[$get($1.encfuncs, $1.state)]() === true) {
                        break;
                    } //#16699
                    $1.addtocws(); //#16699
                } //#16699
            } else { //#16708
                $k[$j++] = $a([$get($1.latchcws, $1.chars)]); //#16702
                $1.addtocws(); //#16702
                if ($1.chars == $1.tl) { //#16703
                    $1.state = $1.T; //#16703
                    $1.submode = $1.A; //#16703
                } //#16703
                if ($1.chars == $1.nl) { //#16704
                    $1.state = $1.N; //#16704
                } //#16704
                if (($1.chars == $1.bl) || ($1.chars == $1.bl6)) { //#16705
                    $1.state = $1.B; //#16705
                } //#16705
                if ($1.chars == $1.bs) { //#16709
                    $1.i = $1.i + 1; //#16707
                    $k[$j++] = $get($1.seq, $1.i); //#16708
                    $1.encb(); //#16708
                    $1.addtocws(); //#16708
                } //#16708
            } //#16708
            $1.i = $1.i + 1; //#16711
        } //#16711
        $1.datcws = $geti($1.datcws, 0, $1.j); //#16713
    } //#16713
    $1.metrics = $a([$a([1, 11, 7, 1, 0, 9]), $a([1, 14, 7, 8, 0, 8]), $a([1, 17, 7, 36, 0, 36]), $a([1, 20, 8, 19, 0, 19]), $a([1, 24, 8, 9, 0, 17]), $a([1, 28, 8, 25, 0, 33]), $a([2, 8, 8, 1, 0, 1]), $a([2, 11, 9, 1, 0, 9]), $a([2, 14, 9, 8, 0, 8]), $a([2, 17, 10, 36, 0, 36]), $a([2, 20, 11, 19, 0, 19]), $a([2, 23, 13, 9, 0, 17]), $a([2, 26, 15, 27, 0, 35]), $a([3, 6, 12, 1, 1, 1]), $a([3, 8, 14, 7, 7, 7]), $a([3, 10, 16, 15, 15, 15]), $a([3, 12, 18, 25, 25, 25]), $a([3, 15, 21, 37, 37, 37]), $a([3, 20, 26, 1, 17, 33]), $a([3, 26, 32, 1, 9, 17]), $a([3, 32, 38, 21, 29, 37]), $a([3, 38, 44, 15, 31, 47]), $a([3, 44, 50, 1, 25, 49]), $a([4, 4, 8, 47, 19, 43]), $a([4, 6, 12, 1, 1, 1]), $a([4, 8, 14, 7, 7, 7]), $a([4, 10, 16, 15, 15, 15]), $a([4, 12, 18, 25, 25, 25]), $a([4, 15, 21, 37, 37, 37]), $a([4, 20, 26, 1, 17, 33]), $a([4, 26, 32, 1, 9, 17]), $a([4, 32, 38, 21, 29, 37]), $a([4, 38, 44, 15, 31, 47]), $a([4, 44, 50, 1, 25, 49])]); //#16753
    $1.ccametrics = $a([$a([2, 5, 4, 39, 0, 19]), $a([2, 6, 4, 1, 0, 33]), $a([2, 7, 5, 32, 0, 12]), $a([2, 8, 5, 8, 0, 40]), $a([2, 9, 6, 14, 0, 46]), $a([2, 10, 6, 43, 0, 23]), $a([2, 12, 7, 20, 0, 52]), $a([3, 4, 4, 11, 43, 23]), $a([3, 5, 5, 1, 33, 13]), $a([3, 6, 6, 5, 37, 17]), $a([3, 7, 7, 15, 47, 27]), $a([3, 8, 7, 21, 1, 33]), $a([4, 3, 4, 40, 20, 52]), $a([4, 4, 5, 43, 23, 3]), $a([4, 5, 6, 46, 26, 6]), $a([4, 6, 7, 34, 14, 46]), $a([4, 7, 8, 29, 9, 41])]); //#16775
    if ($1.cca) { //#16776
        $1.metrics = $1.ccametrics; //#16776
    } //#16776
    $1.urows = $1.rows; //#16779
    $1.ucols = $1.columns; //#16780
    $1.i = 0; //#16781
    for (;;) { //#16797
        $1.m = $get($1.metrics, $1.i); //#16783
        $1.c = $get($1.m, 0); //#16784
        $1.r = $get($1.m, 1); //#16785
        $1.k = $get($1.m, 2); //#16786
        $1.rapl = $get($1.m, 3); //#16787
        $1.rapc = $get($1.m, 4); //#16788
        $1.rapr = $get($1.m, 5); //#16789
        $1.ncws = $f(($1.r * $1.c) - $1.k); //#16790
        $1.okay = true; //#16791
        if ($1.datcws.length > $1.ncws) { //#16792
            $1.okay = false; //#16792
        } //#16792
        if (($1.urows != 0) && ($1.urows != $1.r)) { //#16793
            $1.okay = false; //#16793
        } //#16793
        if (($1.ucols != 0) && ($1.ucols != $1.c)) { //#16794
            $1.okay = false; //#16794
        } //#16794
        if ($1.okay) { //#16795
            break; //#16795
        } //#16795
        $1.i = $1.i + 1; //#16796
    } //#16796
    $1.m = $1.datcws.length; //#16798
    $1.n = $f(($1.c * $1.r) - $1.k); //#16801
    $1.cws = $a($f(($1.c * $1.r) + 1)); //#16802
    $puti($1.cws, 0, $1.datcws); //#16803
    $k[$j++] = $1.cws; //#16804
    $k[$j++] = $1.m; //#16804
    $k[$j++] = Infinity; //#16804
    for (var _E8 = 0, _E9 = $f($1.n - $1.m); _E8 < _E9; _E8++) { //#16804
        $k[$j++] = 900; //#16804
    } //#16804
    var _EA = $a(); //#16804
    var _EB = $k[--$j]; //#16804
    $puti($k[--$j], _EB, _EA); //#16804
    $k[$j++] = $1.cws; //#16805
    $k[$j++] = $1.n; //#16805
    $k[$j++] = Infinity; //#16805
    for (var _EG = 0, _EH = $1.k; _EG < _EH; _EG++) { //#16805
        $k[$j++] = 0; //#16805
    } //#16805
    $k[$j++] = 0; //#16805
    var _EI = $a(); //#16805
    var _EJ = $k[--$j]; //#16805
    $puti($k[--$j], _EJ, _EI); //#16805
    $k[$j++] = Infinity; //#16808
    $k[$j++] = 1; //#16808
    for (var _EL = 0, _EM = 928; _EL < _EM; _EL++) { //#16808
        var _EN = $k[--$j]; //#16808
        $k[$j++] = _EN; //#16808
        $k[$j++] = (_EN * 3) % 929; //#16808
    } //#16808
    $1.rsalog = $a(); //#16808
    $1.rslog = $a(929); //#16809
    for (var _EQ = 1; _EQ <= 928; _EQ += 1) { //#16810
        $put($1.rslog, $get($1.rsalog, _EQ), _EQ); //#16810
    } //#16810
    $1.rsprod = function() {
        var _EU = $k[--$j]; //#16814
        var _EV = $k[--$j]; //#16814
        $k[$j++] = _EV; //#16818
        $k[$j++] = _EU; //#16818
        if ((_EU != 0) && (_EV != 0)) { //#16817
            var _EY = $get($1.rslog, $k[--$j]); //#16815
            var _Ed = $get($1.rsalog, $f(_EY + $get($1.rslog, $k[--$j])) % 928); //#16815
            $k[$j++] = _Ed; //#16815
        } else { //#16817
            $j -= 2; //#16817
            $k[$j++] = 0; //#16817
        } //#16817
    }; //#16819
    $k[$j++] = Infinity; //#16822
    $k[$j++] = 1; //#16822
    for (var _Ef = 0, _Eg = $1.k; _Ef < _Eg; _Ef++) { //#16822
        $k[$j++] = 0; //#16822
    } //#16822
    $1.coeffs = $a(); //#16822
    for (var _Ek = 1, _Ej = $1.k; _Ek <= _Ej; _Ek += 1) { //#16831
        $1.i = _Ek; //#16824
        $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#16825
        for (var _Er = $1.i - 1; _Er >= 1; _Er -= 1) { //#16829
            $1.j = _Er; //#16827
            $k[$j++] = $1.coeffs; //#16828
            $k[$j++] = $1.j; //#16828
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#16828
            $k[$j++] = $get($1.coeffs, $1.j); //#16828
            $k[$j++] = $get($1.rsalog, $1.i); //#16828
            $1.rsprod(); //#16828
            var _F3 = $k[--$j]; //#16828
            var _F4 = $k[--$j]; //#16828
            var _F5 = $k[--$j]; //#16828
            $put($k[--$j], _F5, $f(_F4 + _F3) % 929); //#16828
        } //#16828
        $k[$j++] = $1.coeffs; //#16830
        $k[$j++] = 0; //#16830
        $k[$j++] = $get($1.coeffs, 0); //#16830
        $k[$j++] = $get($1.rsalog, $1.i); //#16830
        $1.rsprod(); //#16830
        var _FD = $k[--$j]; //#16830
        var _FE = $k[--$j]; //#16830
        $put($k[--$j], _FE, _FD); //#16830
    } //#16830
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#16832
    for (var _FK = $1.coeffs.length - 1; _FK >= 0; _FK -= 2) { //#16833
        var _FL = $1.coeffs; //#16833
        $put(_FL, _FK, $f(929 - $get(_FL, _FK))); //#16833
    } //#16833
    for (var _FP = 0, _FO = $f($1.n - 1); _FP <= _FO; _FP += 1) { //#16842
        $1.t = $f($get($1.cws, _FP) + $get($1.cws, $1.n)) % 929; //#16837
        for (var _FX = 0, _FW = $f($1.k - 1); _FX <= _FW; _FX += 1) { //#16841
            $1.j = _FX; //#16839
            $put($1.cws, $f($1.n + $1.j), ($f($get($1.cws, $f($f($1.n + $1.j) + 1)) + ($f(929 - (($1.t * $get($1.coeffs, $f($f($1.k - $1.j) - 1))) % 929))))) % 929); //#16840
        } //#16840
    } //#16840
    for (var _Fo = $1.n, _Fn = $f($1.n + $1.k); _Fo <= _Fn; _Fo += 1) { //#16843
        $put($1.cws, _Fo, $f(929 - $get($1.cws, _Fo)) % 929); //#16843
    } //#16843
    $1.cws = $geti($1.cws, 0, $1.cws.length - 1); //#16846
    var _Fw = $get($1.options, 'debugcws') !== undefined; //#16848
    if (_Fw) { //#16848
        $k[$j++] = 'bwipp.debugcws'; //#16848
        $k[$j++] = $1.cws; //#16848
        bwipp_raiseerror(); //#16848
    } //#16848
    $1.clusters = $a([$a([120256, 125680, 128380, 120032, 125560, 128318, 108736, 119920, 108640, 86080, 108592, 86048, 110016, 120560, 125820, 109792, 120440, 125758, 88256, 109680, 88160, 89536, 110320, 120700, 89312, 110200, 120638, 89200, 110140, 89840, 110460, 89720, 110398, 89980, 128506, 119520, 125304, 128190, 107712, 119408, 125244, 107616, 119352, 84032, 107568, 119324, 84000, 107544, 83984, 108256, 119672, 125374, 85184, 108144, 119612, 85088, 108088, 119582, 85040, 108060, 85728, 108408, 119742, 85616, 108348, 85560, 108318, 85880, 108478, 85820, 85790, 107200, 119152, 125116, 107104, 119096, 125086, 83008, 107056, 119068, 82976, 107032, 82960, 82952, 83648, 107376, 119228, 83552, 107320, 119198, 83504, 107292, 83480, 83468, 83824, 107452, 83768, 107422, 83740, 83900, 106848, 118968, 125022, 82496, 106800, 118940, 82464, 106776, 118926, 82448, 106764, 82440, 106758, 82784, 106936, 119006, 82736, 106908, 82712, 106894, 82700, 82694, 106974, 82830, 82240, 106672, 118876, 82208, 106648, 118862, 82192, 106636, 82184, 106630, 82180, 82352, 82328, 82316, 82080, 118830, 106572, 106566, 82050, 117472, 124280, 127678, 103616, 117360, 124220, 103520, 117304, 124190, 75840, 103472, 75808, 104160, 117624, 124350, 76992, 104048, 117564, 76896, 103992, 76848, 76824, 77536, 104312, 117694, 77424, 104252, 77368, 77340, 77688, 104382, 77628, 77758, 121536, 126320, 128700, 121440, 126264, 128670, 111680, 121392, 126236, 111648, 121368, 126222, 111632, 121356, 103104, 117104, 124092, 112320, 103008, 117048, 124062, 112224, 121656, 126366, 93248, 74784, 102936, 117006, 93216, 112152, 93200, 75456, 103280, 117180, 93888, 75360, 103224, 117150, 93792, 112440, 121758, 93744, 75288, 93720, 75632, 103356, 94064, 75576, 103326, 94008, 112542, 93980, 75708, 94140, 75678, 94110, 121184, 126136, 128606, 111168, 121136, 126108, 111136, 121112, 126094, 111120, 121100, 111112, 111108, 102752, 116920, 123998, 111456, 102704, 116892, 91712, 74272, 121244, 116878, 91680, 74256, 102668, 91664, 111372, 102662, 74244, 74592, 102840, 116958, 92000, 74544, 102812, 91952, 111516, 102798, 91928, 74508, 74502, 74680, 102878, 92088, 74652, 92060, 74638, 92046, 92126, 110912, 121008, 126044, 110880, 120984, 126030, 110864, 120972, 110856, 120966, 110852, 110850, 74048, 102576, 116828, 90944, 74016, 102552, 116814, 90912, 111000, 121038, 90896, 73992, 102534, 90888, 110982, 90884, 74160, 102620, 91056, 74136, 102606, 91032, 111054, 91020, 74118, 91014, 91100, 91086, 110752, 120920, 125998, 110736, 120908, 110728, 120902, 110724, 110722, 73888, 102488, 116782, 90528, 73872, 102476, 90512, 110796, 102470, 90504, 73860, 90500, 73858, 73944, 90584, 90572, 90566, 120876, 120870, 110658, 102444, 73800, 90312, 90308, 90306, 101056, 116080, 123580, 100960, 116024, 70720, 100912, 115996, 70688, 100888, 70672, 70664, 71360, 101232, 116156, 71264, 101176, 116126, 71216, 101148, 71192, 71180, 71536, 101308, 71480, 101278, 71452, 71612, 71582, 118112, 124600, 127838, 105024, 118064, 124572, 104992, 118040, 124558, 104976, 118028, 104968, 118022, 100704, 115896, 123486, 105312, 100656, 115868, 79424, 70176, 118172, 115854, 79392, 105240, 100620, 79376, 70152, 79368, 70496, 100792, 115934, 79712, 70448, 118238, 79664, 105372, 100750, 79640, 70412, 79628, 70584, 100830, 79800, 70556, 79772, 70542, 70622, 79838, 122176, 126640, 128860, 122144, 126616, 128846, 122128, 126604, 122120, 126598, 122116, 104768, 117936, 124508, 113472, 104736, 126684, 124494, 113440, 122264, 126670, 113424, 104712, 117894, 113416, 122246, 104706, 69952, 100528, 115804, 78656, 69920, 100504, 115790, 96064, 78624, 104856, 117966, 96032, 113560, 122318, 100486, 96016, 78600, 104838, 96008, 69890, 70064, 100572, 78768, 70040, 100558, 96176, 78744, 104910, 96152, 113614, 70022, 78726, 70108, 78812, 70094, 96220, 78798, 122016, 126552, 128814, 122000, 126540, 121992, 126534, 121988, 121986, 104608, 117848, 124462, 113056, 104592, 126574, 113040, 122060, 117830, 113032, 104580, 113028, 104578, 113026, 69792, 100440, 115758, 78240, 69776, 100428, 95136, 78224, 104652, 100422, 95120, 113100, 69764, 95112, 78212, 69762, 78210, 69848, 100462, 78296, 69836, 95192, 78284, 69830, 95180, 78278, 69870, 95214, 121936, 126508, 121928, 126502, 121924, 121922, 104528, 117804, 112848, 104520, 117798, 112840, 121958, 112836, 104514, 112834, 69712, 100396, 78032, 69704, 100390, 94672, 78024, 104550, 94664, 112870, 69698, 94660, 78018, 94658, 78060, 94700, 94694, 126486, 121890, 117782, 104484, 104482, 69672, 77928, 94440, 69666, 77922, 99680, 68160, 99632, 68128, 99608, 115342, 68112, 99596, 68104, 99590, 68448, 99768, 115422, 68400, 99740, 68376, 99726, 68364, 68358, 68536, 99806, 68508, 68494, 68574, 101696, 116400, 123740, 101664, 116376, 101648, 116364, 101640, 116358, 101636, 67904, 99504, 115292, 72512, 67872, 116444, 115278, 72480, 101784, 116430, 72464, 67848, 99462, 72456, 101766, 67842, 68016, 99548, 72624, 67992, 99534, 72600, 101838, 72588, 67974, 68060, 72668, 68046, 72654, 118432, 124760, 127918, 118416, 124748, 118408, 124742, 118404, 118402, 101536, 116312, 105888, 101520, 116300, 105872, 118476, 116294, 105864, 101508, 105860, 101506, 105858, 67744, 99416, 72096, 67728, 116334, 80800, 72080, 101580, 99398, 80784, 105932, 67716, 80776, 72068, 67714, 72066, 67800, 99438, 72152, 67788, 80856, 72140, 67782, 80844, 72134, 67822, 72174, 80878, 126800, 128940, 126792, 128934, 126788, 126786, 118352, 124716, 122576, 126828, 124710, 122568, 126822, 122564, 118338, 122562, 101456, 116268, 105680, 101448, 116262, 114128, 105672, 118374, 114120, 122598, 101442, 114116, 105666, 114114, 67664, 99372, 71888, 67656, 99366, 80336, 71880, 101478, 97232, 80328, 105702, 67650, 97224, 114150, 71874, 97220, 67692, 71916, 67686, 80364, 71910, 97260, 80358, 97254, 126760, 128918, 126756, 126754, 118312, 124694, 122472, 126774, 122468, 118306, 122466, 101416, 116246, 105576, 101412, 113896, 105572, 101410, 113892, 105570, 113890, 67624, 99350, 71784, 101430, 80104, 71780, 67618, 96744, 80100, 71778, 96740, 80098, 96738, 71798, 96758, 126738, 122420, 122418, 105524, 113780, 113778, 71732, 79988, 96500, 96498, 66880, 66848, 98968, 66832, 66824, 66820, 66992, 66968, 66956, 66950, 67036, 67022, 100000, 99984, 115532, 99976, 115526, 99972, 99970, 66720, 98904, 69024, 100056, 98892, 69008, 100044, 69000, 100038, 68996, 66690, 68994, 66776, 98926, 69080, 100078, 69068, 66758, 69062, 66798, 69102, 116560, 116552, 116548, 116546, 99920, 102096, 116588, 115494, 102088, 116582, 102084, 99906, 102082, 66640, 68816, 66632, 98854, 73168, 68808, 66628, 73160, 68804, 66626, 73156, 68802, 66668, 68844, 66662, 73196, 68838, 73190, 124840, 124836, 124834, 116520, 118632, 124854, 118628, 116514, 118626, 99880, 115478, 101992, 116534, 106216, 101988, 99874, 106212, 101986, 106210, 66600, 98838, 68712, 99894, 72936, 68708, 66594, 81384, 72932, 68706, 81380, 72930, 66614, 68726, 72950, 81398, 128980, 128978, 124820, 126900, 124818, 126898, 116500, 118580, 116498, 122740, 118578, 122738, 99860, 101940, 99858, 106100, 101938, 114420]), $a([128352, 129720, 125504, 128304, 129692, 125472, 128280, 129678, 125456, 128268, 125448, 128262, 125444, 125792, 128440, 129758, 120384, 125744, 128412, 120352, 125720, 128398, 120336, 125708, 120328, 125702, 120324, 120672, 125880, 128478, 110144, 120624, 125852, 110112, 120600, 125838, 110096, 120588, 110088, 120582, 110084, 110432, 120760, 125918, 89664, 110384, 120732, 89632, 110360, 120718, 89616, 110348, 89608, 110342, 89952, 110520, 120798, 89904, 110492, 89880, 110478, 89868, 90040, 110558, 90012, 89998, 125248, 128176, 129628, 125216, 128152, 129614, 125200, 128140, 125192, 128134, 125188, 125186, 119616, 125360, 128220, 119584, 125336, 128206, 119568, 125324, 119560, 125318, 119556, 119554, 108352, 119728, 125404, 108320, 119704, 125390, 108304, 119692, 108296, 119686, 108292, 108290, 85824, 108464, 119772, 85792, 108440, 119758, 85776, 108428, 85768, 108422, 85764, 85936, 108508, 85912, 108494, 85900, 85894, 85980, 85966, 125088, 128088, 129582, 125072, 128076, 125064, 128070, 125060, 125058, 119200, 125144, 128110, 119184, 125132, 119176, 125126, 119172, 119170, 107424, 119256, 125166, 107408, 119244, 107400, 119238, 107396, 107394, 83872, 107480, 119278, 83856, 107468, 83848, 107462, 83844, 83842, 83928, 107502, 83916, 83910, 83950, 125008, 128044, 125000, 128038, 124996, 124994, 118992, 125036, 118984, 125030, 118980, 118978, 106960, 119020, 106952, 119014, 106948, 106946, 82896, 106988, 82888, 106982, 82884, 82882, 82924, 82918, 124968, 128022, 124964, 124962, 118888, 124982, 118884, 118882, 106728, 118902, 106724, 106722, 82408, 106742, 82404, 82402, 124948, 124946, 118836, 118834, 106612, 106610, 124224, 127664, 129372, 124192, 127640, 129358, 124176, 127628, 124168, 127622, 124164, 124162, 117568, 124336, 127708, 117536, 124312, 127694, 117520, 124300, 117512, 124294, 117508, 117506, 104256, 117680, 124380, 104224, 117656, 124366, 104208, 117644, 104200, 117638, 104196, 104194, 77632, 104368, 117724, 77600, 104344, 117710, 77584, 104332, 77576, 104326, 77572, 77744, 104412, 77720, 104398, 77708, 77702, 77788, 77774, 128672, 129880, 93168, 128656, 129868, 92664, 128648, 129862, 92412, 128644, 128642, 124064, 127576, 129326, 126368, 124048, 129902, 126352, 128716, 127558, 126344, 124036, 126340, 124034, 126338, 117152, 124120, 127598, 121760, 117136, 124108, 121744, 126412, 124102, 121736, 117124, 121732, 117122, 121730, 103328, 117208, 124142, 112544, 103312, 117196, 112528, 121804, 117190, 112520, 103300, 112516, 103298, 112514, 75680, 103384, 117230, 94112, 75664, 103372, 94096, 112588, 103366, 94088, 75652, 94084, 75650, 75736, 103406, 94168, 75724, 94156, 75718, 94150, 75758, 128592, 129836, 91640, 128584, 129830, 91388, 128580, 91262, 128578, 123984, 127532, 126160, 123976, 127526, 126152, 128614, 126148, 123970, 126146, 116944, 124012, 121296, 116936, 124006, 121288, 126182, 121284, 116930, 121282, 102864, 116972, 111568, 102856, 116966, 111560, 121318, 111556, 102850, 111554, 74704, 102892, 92112, 74696, 102886, 92104, 111590, 92100, 74690, 92098, 74732, 92140, 74726, 92134, 128552, 129814, 90876, 128548, 90750, 128546, 123944, 127510, 126056, 128566, 126052, 123938, 126050, 116840, 123958, 121064, 116836, 121060, 116834, 121058, 102632, 116854, 111080, 121078, 111076, 102626, 111074, 74216, 102646, 91112, 74212, 91108, 74210, 91106, 74230, 91126, 128532, 90494, 128530, 123924, 126004, 123922, 126002, 116788, 120948, 116786, 120946, 102516, 110836, 102514, 110834, 73972, 90612, 73970, 90610, 128522, 123914, 125978, 116762, 120890, 102458, 110714, 123552, 127320, 129198, 123536, 127308, 123528, 127302, 123524, 123522, 116128, 123608, 127342, 116112, 123596, 116104, 123590, 116100, 116098, 101280, 116184, 123630, 101264, 116172, 101256, 116166, 101252, 101250, 71584, 101336, 116206, 71568, 101324, 71560, 101318, 71556, 71554, 71640, 101358, 71628, 71622, 71662, 127824, 129452, 79352, 127816, 129446, 79100, 127812, 78974, 127810, 123472, 127276, 124624, 123464, 127270, 124616, 127846, 124612, 123458, 124610, 115920, 123500, 118224, 115912, 123494, 118216, 124646, 118212, 115906, 118210, 100816, 115948, 105424, 100808, 115942, 105416, 118246, 105412, 100802, 105410, 70608, 100844, 79824, 70600, 100838, 79816, 105446, 79812, 70594, 79810, 70636, 79852, 70630, 79846, 129960, 95728, 113404, 129956, 95480, 113278, 129954, 95356, 95294, 127784, 129430, 78588, 128872, 129974, 95996, 78462, 128868, 127778, 95870, 128866, 123432, 127254, 124520, 123428, 126696, 128886, 123426, 126692, 124514, 126690, 115816, 123446, 117992, 115812, 122344, 117988, 115810, 122340, 117986, 122338, 100584, 115830, 104936, 100580, 113640, 104932, 100578, 113636, 104930, 113634, 70120, 100598, 78824, 70116, 96232, 78820, 70114, 96228, 78818, 96226, 70134, 78838, 129940, 94968, 113022, 129938, 94844, 94782, 127764, 78206, 128820, 127762, 95102, 128818, 123412, 124468, 123410, 126580, 124466, 126578, 115764, 117876, 115762, 122100, 117874, 122098, 100468, 104692, 100466, 113140, 104690, 113138, 69876, 78324, 69874, 95220, 78322, 95218, 129930, 94588, 94526, 127754, 128794, 123402, 124442, 126522, 115738, 117818, 121978, 100410, 104570, 112890, 69754, 78074, 94714, 94398, 123216, 127148, 123208, 127142, 123204, 123202, 115408, 123244, 115400, 123238, 115396, 115394, 99792, 115436, 99784, 115430, 99780, 99778, 68560, 99820, 68552, 99814, 68548, 68546, 68588, 68582, 127400, 129238, 72444, 127396, 72318, 127394, 123176, 127126, 123752, 123172, 123748, 123170, 123746, 115304, 123190, 116456, 115300, 116452, 115298, 116450, 99560, 115318, 101864, 99556, 101860, 99554, 101858, 68072, 99574, 72680, 68068, 72676, 68066, 72674, 68086, 72694, 129492, 80632, 105854, 129490, 80508, 80446, 127380, 72062, 127924, 127378, 80766, 127922, 123156, 123700, 123154, 124788, 123698, 124786, 115252, 116340, 115250, 118516, 116338, 118514, 99444, 101620, 99442, 105972, 101618, 105970, 67828, 72180, 67826, 80884, 72178, 80882, 97008, 114044, 96888, 113982, 96828, 96798, 129482, 80252, 130010, 97148, 80190, 97086, 127370, 127898, 128954, 123146, 123674, 124730, 126842, 115226, 116282, 118394, 122618, 99386, 101498, 105722, 114170, 67706, 71930, 80378, 96632, 113854, 96572, 96542, 80062, 96702, 96444, 96414, 96350, 123048, 123044, 123042, 115048, 123062, 115044, 115042, 99048, 115062, 99044, 99042, 67048, 99062, 67044, 67042, 67062, 127188, 68990, 127186, 123028, 123316, 123026, 123314, 114996, 115572, 114994, 115570, 98932, 100084, 98930, 100082, 66804, 69108, 66802, 69106, 129258, 73084, 73022, 127178, 127450, 123018, 123290, 123834, 114970, 115514, 116602, 98874, 99962, 102138, 66682, 68858, 73210, 81272, 106174, 81212, 81182, 72894, 81342, 97648, 114364, 97592, 114334, 97564, 97550, 81084, 97724, 81054, 97694, 97464, 114270, 97436, 97422, 80990, 97502, 97372, 97358, 97326, 114868, 114866, 98676, 98674, 66292, 66290, 123098, 114842, 115130, 98618, 99194, 66170, 67322, 69310, 73404, 73374, 81592, 106334, 81564, 81550, 73310, 81630, 97968, 114524, 97944, 114510, 97932, 97926, 81500, 98012, 81486, 97998, 97880, 114478, 97868, 97862, 81454, 97902, 97836, 97830, 69470, 73564, 73550, 81752, 106414, 81740, 81734, 73518, 81774, 81708, 81702]), $a([109536, 120312, 86976, 109040, 120060, 86496, 108792, 119934, 86256, 108668, 86136, 129744, 89056, 110072, 129736, 88560, 109820, 129732, 88312, 109694, 129730, 88188, 128464, 129772, 89592, 128456, 129766, 89340, 128452, 89214, 128450, 125904, 128492, 125896, 128486, 125892, 125890, 120784, 125932, 120776, 125926, 120772, 120770, 110544, 120812, 110536, 120806, 110532, 84928, 108016, 119548, 84448, 107768, 119422, 84208, 107644, 84088, 107582, 84028, 129640, 85488, 108284, 129636, 85240, 108158, 129634, 85116, 85054, 128232, 129654, 85756, 128228, 85630, 128226, 125416, 128246, 125412, 125410, 119784, 125430, 119780, 119778, 108520, 119798, 108516, 108514, 83424, 107256, 119166, 83184, 107132, 83064, 107070, 83004, 82974, 129588, 83704, 107390, 129586, 83580, 83518, 128116, 83838, 128114, 125172, 125170, 119284, 119282, 107508, 107506, 82672, 106876, 82552, 106814, 82492, 82462, 129562, 82812, 82750, 128058, 125050, 119034, 82296, 106686, 82236, 82206, 82366, 82108, 82078, 76736, 103920, 117500, 76256, 103672, 117374, 76016, 103548, 75896, 103486, 75836, 129384, 77296, 104188, 129380, 77048, 104062, 129378, 76924, 76862, 127720, 129398, 77564, 127716, 77438, 127714, 124392, 127734, 124388, 124386, 117736, 124406, 117732, 117730, 104424, 117750, 104420, 104418, 112096, 121592, 126334, 92608, 111856, 121468, 92384, 111736, 121406, 92272, 111676, 92216, 111646, 92188, 75232, 103160, 117118, 93664, 74992, 103036, 93424, 112252, 102974, 93304, 74812, 93244, 74782, 93214, 129332, 75512, 103294, 129908, 129330, 93944, 75388, 129906, 93820, 75326, 93758, 127604, 75646, 128756, 127602, 94078, 128754, 124148, 126452, 124146, 126450, 117236, 121844, 117234, 121842, 103412, 103410, 91584, 111344, 121212, 91360, 111224, 121150, 91248, 111164, 91192, 111134, 91164, 91150, 74480, 102780, 91888, 74360, 102718, 91768, 111422, 91708, 74270, 91678, 129306, 74620, 129850, 92028, 74558, 91966, 127546, 128634, 124026, 126202, 116986, 121338, 102906, 90848, 110968, 121022, 90736, 110908, 90680, 110878, 90652, 90638, 74104, 102590, 91000, 74044, 90940, 74014, 90910, 74174, 91070, 90480, 110780, 90424, 110750, 90396, 90382, 73916, 90556, 73886, 90526, 90296, 110686, 90268, 90254, 73822, 90334, 90204, 90190, 71136, 101112, 116094, 70896, 100988, 70776, 100926, 70716, 70686, 129204, 71416, 101246, 129202, 71292, 71230, 127348, 71550, 127346, 123636, 123634, 116212, 116210, 101364, 101362, 79296, 105200, 118140, 79072, 105080, 118078, 78960, 105020, 78904, 104990, 78876, 78862, 70384, 100732, 79600, 70264, 100670, 79480, 105278, 79420, 70174, 79390, 129178, 70524, 129466, 79740, 70462, 79678, 127290, 127866, 123514, 124666, 115962, 118266, 100858, 113376, 122232, 126654, 95424, 113264, 122172, 95328, 113208, 122142, 95280, 113180, 95256, 113166, 95244, 78560, 104824, 117950, 95968, 78448, 104764, 95856, 113468, 104734, 95800, 78364, 95772, 78350, 95758, 70008, 100542, 78712, 69948, 96120, 78652, 69918, 96060, 78622, 96030, 70078, 78782, 96190, 94912, 113008, 122044, 94816, 112952, 122014, 94768, 112924, 94744, 112910, 94732, 94726, 78192, 104636, 95088, 78136, 104606, 95032, 113054, 95004, 78094, 94990, 69820, 78268, 69790, 95164, 78238, 95134, 94560, 112824, 121950, 94512, 112796, 94488, 112782, 94476, 94470, 78008, 104542, 94648, 77980, 94620, 77966, 94606, 69726, 78046, 94686, 94384, 112732, 94360, 112718, 94348, 94342, 77916, 94428, 77902, 94414, 94296, 112686, 94284, 94278, 77870, 94318, 94252, 94246, 68336, 99708, 68216, 99646, 68156, 68126, 68476, 68414, 127162, 123258, 115450, 99834, 72416, 101752, 116414, 72304, 101692, 72248, 101662, 72220, 72206, 67960, 99518, 72568, 67900, 72508, 67870, 72478, 68030, 72638, 80576, 105840, 118460, 80480, 105784, 118430, 80432, 105756, 80408, 105742, 80396, 80390, 72048, 101564, 80752, 71992, 101534, 80696, 71964, 80668, 71950, 80654, 67772, 72124, 67742, 80828, 72094, 80798, 114016, 122552, 126814, 96832, 113968, 122524, 96800, 113944, 122510, 96784, 113932, 96776, 113926, 96772, 80224, 105656, 118366, 97120, 80176, 105628, 97072, 114076, 105614, 97048, 80140, 97036, 80134, 97030, 71864, 101470, 80312, 71836, 97208, 80284, 71822, 97180, 80270, 97166, 67678, 71902, 80350, 97246, 96576, 113840, 122460, 96544, 113816, 122446, 96528, 113804, 96520, 113798, 96516, 96514, 80048, 105564, 96688, 80024, 105550, 96664, 113870, 96652, 80006, 96646, 71772, 80092, 71758, 96732, 80078, 96718, 96416, 113752, 122414, 96400, 113740, 96392, 113734, 96388, 96386, 79960, 105518, 96472, 79948, 96460, 79942, 96454, 71726, 79982, 96494, 96336, 113708, 96328, 113702, 96324, 96322, 79916, 96364, 79910, 96358, 96296, 113686, 96292, 96290, 79894, 96310, 66936, 99006, 66876, 66846, 67006, 68976, 100028, 68920, 99998, 68892, 68878, 66748, 69052, 66718, 69022, 73056, 102072, 116574, 73008, 102044, 72984, 102030, 72972, 72966, 68792, 99934, 73144, 68764, 73116, 68750, 73102, 66654, 68830, 73182, 81216, 106160, 118620, 81184, 106136, 118606, 81168, 106124, 81160, 106118, 81156, 81154, 72880, 101980, 81328, 72856, 101966, 81304, 106190, 81292, 72838, 81286, 68700, 72924, 68686, 81372, 72910, 81358, 114336, 122712, 126894, 114320, 122700, 114312, 122694, 114308, 114306, 81056, 106072, 118574, 97696, 81040, 106060, 97680, 114380, 106054, 97672, 81028, 97668, 81026, 97666, 72792, 101934, 81112, 72780, 97752, 81100, 72774, 97740, 81094, 97734, 68654, 72814, 81134, 97774, 114256, 122668, 114248, 122662, 114244, 114242, 80976, 106028, 97488, 80968, 106022, 97480, 114278, 97476, 80962, 97474, 72748, 81004, 72742, 97516, 80998, 97510, 114216, 122646, 114212, 114210, 80936, 106006, 97384, 80932, 97380, 80930, 97378, 72726, 80950, 97398, 114196, 114194, 80916, 97332, 80914, 97330, 66236, 66206, 67256, 99166, 67228, 67214, 66142, 67294, 69296, 100188, 69272, 100174, 69260, 69254, 67164, 69340, 67150, 69326, 73376, 102232, 116654, 73360, 102220, 73352, 102214, 73348, 73346, 69208, 100142, 73432, 102254, 73420, 69190, 73414, 67118, 69230, 73454, 106320, 118700, 106312, 118694, 106308, 106306, 73296, 102188, 81616, 106348, 102182, 81608, 73284, 81604, 73282, 81602, 69164, 73324, 69158, 81644, 73318, 81638, 122792, 126934, 122788, 122786, 106280, 118678, 114536, 106276, 114532, 106274, 114530, 73256, 102166, 81512, 73252, 98024, 81508, 73250, 98020, 81506, 98018, 69142, 73270, 81526, 98038, 122772, 122770, 106260, 114484, 106258, 114482, 73236, 81460, 73234, 97908, 81458, 97906, 122762, 106250, 114458, 73226, 81434, 97850, 66396, 66382, 67416, 99246, 67404, 67398, 66350, 67438, 69456, 100268, 69448, 100262, 69444, 69442, 67372, 69484, 67366, 69478, 102312, 116694, 102308, 102306, 69416, 100246, 73576, 102326, 73572, 69410, 73570, 67350, 69430, 73590, 118740, 118738, 102292, 106420, 102290, 106418, 69396, 73524, 69394, 81780, 73522, 81778, 118730, 102282, 106394, 69386, 73498, 81722, 66476, 66470, 67496, 99286, 67492, 67490, 66454, 67510, 100308, 100306, 67476, 69556, 67474, 69554, 116714])]); //#17090
    $1.raps = $a([$a([802, 930, 946, 818, 882, 890, 826, 954, 922, 986, 970, 906, 778, 794, 786, 914, 978, 982, 980, 916, 948, 932, 934, 942, 940, 936, 808, 812, 814, 806, 822, 950, 918, 790, 788, 820, 884, 868, 870, 878, 876, 872, 840, 856, 860, 862, 846, 844, 836, 838, 834, 866]), $a([718, 590, 622, 558, 550, 566, 534, 530, 538, 570, 562, 546, 610, 626, 634, 762, 754, 758, 630, 628, 612, 614, 582, 578, 706, 738, 742, 740, 748, 620, 556, 552, 616, 744, 712, 716, 708, 710, 646, 654, 652, 668, 664, 696, 688, 656, 720, 592, 600, 604, 732, 734])]); //#17105
    $1.cwtobits = function() {
        var _G7 = $get($1.clusters, $k[--$j]); //#17109
        $1.v = $get(_G7, $k[--$j]); //#17109
        $k[$j++] = Infinity; //#17110
        for (var _GA = 0, _GB = 17; _GA < _GB; _GA++) { //#17110
            $k[$j++] = 0; //#17110
        } //#17110
        var _GE = $cvrs($s(17), $1.v, 2); //#17110
        for (var _GF = 0, _GG = _GE.length; _GF < _GG; _GF++) { //#17110
            $k[$j++] = $get(_GE, _GF) - 48; //#17110
        } //#17110
        var _GI = $a(); //#17110
        $k[$j++] = $geti(_GI, _GI.length - 17, 17); //#17111
    }; //#17112
    $1.raptobits = function() {
        var _GM = $get($1.raps, $k[--$j]); //#17116
        $1.v = $get(_GM, $k[--$j]); //#17116
        $k[$j++] = Infinity; //#17117
        for (var _GP = 0, _GQ = 10; _GP < _GQ; _GP++) { //#17117
            $k[$j++] = 0; //#17117
        } //#17117
        var _GT = $cvrs($s(10), $1.v, 2); //#17117
        for (var _GU = 0, _GV = _GT.length; _GU < _GV; _GU++) { //#17117
            $k[$j++] = $get(_GT, _GU) - 48; //#17117
        } //#17117
        var _GX = $a(); //#17117
        $k[$j++] = $geti(_GX, _GX.length - 10, 10); //#17118
    }; //#17119
    $1.rwid = $get($a([38, 55, 82, 99]), $f($1.c - 1)); //#17122
    if (($1.c == 3) && $1.cca) { //#17123
        $1.rwid = 72; //#17123
    } //#17123
    $1.pixs = $a($1.rwid * $1.r); //#17124
    for (var _Gj = 0, _Gi = $f($1.r - 1); _Gj <= _Gi; _Gj += 1) { //#17162
        $1.i = _Gj; //#17127
        $1.clst = ($f($f($1.i + $1.rapl) - 1)) % 3; //#17128
        $k[$j++] = $1.pixs; //#17160
        $k[$j++] = $1.rwid * $1.i; //#17160
        $k[$j++] = Infinity; //#17160
        if ($1.c == 1) { //#17134
            $k[$j++] = ($f($f($1.i + $1.rapl) - 1)) % 52; //#17131
            $k[$j++] = 0; //#17131
            $1.raptobits(); //#17131
            $aload($k[--$j]); //#17131
            $k[$j++] = $get($1.cws, $1.i); //#17132
            $k[$j++] = $1.clst; //#17132
            $1.cwtobits(); //#17132
            $aload($k[--$j]); //#17132
            $k[$j++] = ($f($f($1.i + $1.rapr) - 1)) % 52; //#17133
            $k[$j++] = 0; //#17133
            $1.raptobits(); //#17133
            $aload($k[--$j]); //#17133
        } //#17133
        if ($1.c == 2) { //#17140
            $k[$j++] = ($f($f($1.i + $1.rapl) - 1)) % 52; //#17136
            $k[$j++] = 0; //#17136
            $1.raptobits(); //#17136
            $aload($k[--$j]); //#17136
            $k[$j++] = $get($1.cws, $1.i * 2); //#17137
            $k[$j++] = $1.clst; //#17137
            $1.cwtobits(); //#17137
            $aload($k[--$j]); //#17137
            $k[$j++] = $get($1.cws, ($1.i * 2) + 1); //#17138
            $k[$j++] = $1.clst; //#17138
            $1.cwtobits(); //#17138
            $aload($k[--$j]); //#17138
            $k[$j++] = ($f($f($1.i + $1.rapr) - 1)) % 52; //#17139
            $k[$j++] = 0; //#17139
            $1.raptobits(); //#17139
            $aload($k[--$j]); //#17139
        } //#17139
        if ($1.c == 3) { //#17150
            if (!$1.cca) { //#17144
                $k[$j++] = ($f($f($1.i + $1.rapl) - 1)) % 52; //#17143
                $k[$j++] = 0; //#17143
                $1.raptobits(); //#17143
                $aload($k[--$j]); //#17143
            } //#17143
            $k[$j++] = $get($1.cws, $1.i * 3); //#17145
            $k[$j++] = $1.clst; //#17145
            $1.cwtobits(); //#17145
            $aload($k[--$j]); //#17145
            $k[$j++] = ($f($f($1.i + $1.rapc) - 1)) % 52; //#17146
            $k[$j++] = 1; //#17146
            $1.raptobits(); //#17146
            $aload($k[--$j]); //#17146
            $k[$j++] = $get($1.cws, ($1.i * 3) + 1); //#17147
            $k[$j++] = $1.clst; //#17147
            $1.cwtobits(); //#17147
            $aload($k[--$j]); //#17147
            $k[$j++] = $get($1.cws, ($1.i * 3) + 2); //#17148
            $k[$j++] = $1.clst; //#17148
            $1.cwtobits(); //#17148
            $aload($k[--$j]); //#17148
            $k[$j++] = ($f($f($1.i + $1.rapr) - 1)) % 52; //#17149
            $k[$j++] = 0; //#17149
            $1.raptobits(); //#17149
            $aload($k[--$j]); //#17149
        } //#17149
        if ($1.c == 4) { //#17159
            $k[$j++] = ($f($f($1.i + $1.rapl) - 1)) % 52; //#17152
            $k[$j++] = 0; //#17152
            $1.raptobits(); //#17152
            $aload($k[--$j]); //#17152
            $k[$j++] = $get($1.cws, $1.i * 4); //#17153
            $k[$j++] = $1.clst; //#17153
            $1.cwtobits(); //#17153
            $aload($k[--$j]); //#17153
            $k[$j++] = $get($1.cws, ($1.i * 4) + 1); //#17154
            $k[$j++] = $1.clst; //#17154
            $1.cwtobits(); //#17154
            $aload($k[--$j]); //#17154
            $k[$j++] = ($f($f($1.i + $1.rapc) - 1)) % 52; //#17155
            $k[$j++] = 1; //#17155
            $1.raptobits(); //#17155
            $aload($k[--$j]); //#17155
            $k[$j++] = $get($1.cws, ($1.i * 4) + 2); //#17156
            $k[$j++] = $1.clst; //#17156
            $1.cwtobits(); //#17156
            $aload($k[--$j]); //#17156
            $k[$j++] = $get($1.cws, ($1.i * 4) + 3); //#17157
            $k[$j++] = $1.clst; //#17157
            $1.cwtobits(); //#17157
            $aload($k[--$j]); //#17157
            $k[$j++] = ($f($f($1.i + $1.rapr) - 1)) % 52; //#17158
            $k[$j++] = 0; //#17158
            $1.raptobits(); //#17158
            $aload($k[--$j]); //#17158
        } //#17158
        $k[$j++] = 1; //#17160
        var _IC = $a(); //#17160
        var _ID = $k[--$j]; //#17161
        $puti($k[--$j], _ID, _IC); //#17161
    } //#17161
    var _IM = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.rwid],
        ["pixy", $1.r],
        ["height", ($1.r / 72) * $1.rowmult],
        ["width", $1.rwid / 72],
        ["opt", $1.options]
    ]); //#17172
    $k[$j++] = _IM; //#17175
    if (!$1.dontdraw) { //#17175
        bwipp_renmatrix(); //#17175
    } //#17175
}

function bwipp_datamatrix() {
    var $1 = {}; //#17205
    $1.options = $k[--$j]; //#17207
    $1.barcode = $k[--$j]; //#17208
    $1.dontdraw = false; //#17210
    $1.columns = 0; //#17211
    $1.rows = 0; //#17212
    $1.format = "square"; //#17213
    $1.version = "unset"; //#17214
    $1.parse = false; //#17215
    $1.parsefnc = false; //#17216
    $1.encoding = "auto"; //#17217
    $1.mailmark = false; //#17218
    $1.raw = false; //#17219
    $1.dmre = false; //#17220
    $1.dindmre = false; //#17221
    $1.isodmre = false; //#17222
    $forall($1.options, function() { //#17233
        var _3 = $k[--$j]; //#17233
        $1[$k[--$j]] = _3; //#17233
    }); //#17233
    if ($ne($1.version, "unset")) { //#17239
        $search($1.version, "x"); //#17236
        $j--; //#17237
        $1.rows = $k[--$j]; //#17237
        $j--; //#17238
        $1.columns = $k[--$j]; //#17238
    } //#17238
    $1.columns = $cvi($1.columns); //#17241
    $1.rows = $cvi($1.rows); //#17242
    $1.isodmre = $1.dmre; //#17244
    $k[$j++] = Infinity; //#17301
    $k[$j++] = $a([10, 10, 1, 1, 5, 1]); //#17277
    $k[$j++] = $a([12, 12, 1, 1, 7, 1]); //#17277
    $k[$j++] = $a([14, 14, 1, 1, 10, 1]); //#17277
    $k[$j++] = $a([16, 16, 1, 1, 12, 1]); //#17277
    $k[$j++] = $a([18, 18, 1, 1, 14, 1]); //#17277
    $k[$j++] = $a([20, 20, 1, 1, 18, 1]); //#17277
    $k[$j++] = $a([22, 22, 1, 1, 20, 1]); //#17277
    $k[$j++] = $a([24, 24, 1, 1, 24, 1]); //#17277
    $k[$j++] = $a([26, 26, 1, 1, 28, 1]); //#17277
    $k[$j++] = $a([32, 32, 2, 2, 36, 1]); //#17277
    $k[$j++] = $a([36, 36, 2, 2, 42, 1]); //#17277
    $k[$j++] = $a([40, 40, 2, 2, 48, 1]); //#17277
    $k[$j++] = $a([44, 44, 2, 2, 56, 1]); //#17277
    $k[$j++] = $a([48, 48, 2, 2, 68, 1]); //#17277
    $k[$j++] = $a([52, 52, 2, 2, 84, 2]); //#17277
    $k[$j++] = $a([64, 64, 4, 4, 112, 2]); //#17277
    $k[$j++] = $a([72, 72, 4, 4, 144, 4]); //#17277
    $k[$j++] = $a([80, 80, 4, 4, 192, 4]); //#17277
    $k[$j++] = $a([88, 88, 4, 4, 224, 4]); //#17277
    $k[$j++] = $a([96, 96, 4, 4, 272, 4]); //#17277
    $k[$j++] = $a([104, 104, 4, 4, 336, 6]); //#17277
    $k[$j++] = $a([120, 120, 6, 6, 408, 6]); //#17277
    $k[$j++] = $a([132, 132, 6, 6, 496, 8]); //#17277
    $k[$j++] = $a([144, 144, 6, 6, 620, 10]); //#17277
    $k[$j++] = $a([8, 18, 1, 1, 7, 1]); //#17277
    $k[$j++] = $a([8, 32, 1, 2, 11, 1]); //#17277
    if ($1.dindmre || $1.isodmre) { //#17277
        $k[$j++] = $a([8, 48, 1, 2, 15, 1]); //#17277
    } //#17277
    if ($1.dindmre || $1.isodmre) { //#17278
        $k[$j++] = $a([8, 64, 1, 4, 18, 1]); //#17278
    } //#17278
    if ($1.isodmre) { //#17279
        $k[$j++] = $a([8, 80, 1, 4, 22, 1]); //#17279
    } //#17279
    if ($1.isodmre) { //#17280
        $k[$j++] = $a([8, 96, 1, 4, 28, 1]); //#17280
    } //#17280
    if ($1.isodmre) { //#17281
        $k[$j++] = $a([8, 120, 1, 6, 32, 1]); //#17281
    } //#17281
    if ($1.isodmre) { //#17282
        $k[$j++] = $a([8, 144, 1, 6, 36, 1]); //#17282
    } //#17282
    $k[$j++] = $a([12, 26, 1, 1, 14, 1]); //#17285
    $k[$j++] = $a([12, 36, 1, 2, 18, 1]); //#17285
    if ($1.dindmre || $1.isodmre) { //#17285
        $k[$j++] = $a([12, 64, 1, 4, 27, 1]); //#17285
    } //#17285
    if ($1.isodmre) { //#17286
        $k[$j++] = $a([12, 88, 1, 4, 36, 1]); //#17286
    } //#17286
    $k[$j++] = $a([16, 36, 1, 2, 24, 1]); //#17289
    $k[$j++] = $a([16, 48, 1, 2, 28, 1]); //#17289
    if ($1.dindmre || $1.isodmre) { //#17289
        $k[$j++] = $a([16, 64, 1, 4, 36, 1]); //#17289
    } //#17289
    if ($1.isodmre) { //#17290
        $k[$j++] = $a([20, 36, 1, 2, 28, 1]); //#17290
    } //#17290
    if ($1.isodmre) { //#17291
        $k[$j++] = $a([20, 44, 1, 2, 34, 1]); //#17291
    } //#17291
    if ($1.isodmre) { //#17292
        $k[$j++] = $a([20, 64, 1, 4, 42, 1]); //#17292
    } //#17292
    if ($1.isodmre) { //#17293
        $k[$j++] = $a([22, 48, 1, 2, 38, 1]); //#17293
    } //#17293
    if ($1.dindmre) { //#17294
        $k[$j++] = $a([24, 32, 1, 2, 28, 1]); //#17294
    } //#17294
    if ($1.dindmre) { //#17295
        $k[$j++] = $a([24, 36, 1, 2, 33, 1]); //#17295
    } //#17295
    if ($1.dindmre || $1.isodmre) { //#17296
        $k[$j++] = $a([24, 48, 1, 2, 41, 1]); //#17296
    } //#17296
    if ($1.dindmre || $1.isodmre) { //#17297
        $k[$j++] = $a([24, 64, 1, 4, 46, 1]); //#17297
    } //#17297
    if ($1.dindmre) { //#17298
        $k[$j++] = $a([26, 32, 1, 2, 32, 1]); //#17298
    } //#17298
    if ($1.dindmre || $1.isodmre) { //#17299
        $k[$j++] = $a([26, 40, 1, 2, 38, 1]); //#17299
    } //#17299
    if ($1.dindmre || $1.isodmre) { //#17300
        $k[$j++] = $a([26, 48, 1, 2, 42, 1]); //#17300
    } //#17300
    if ($1.dindmre || $1.isodmre) { //#17301
        $k[$j++] = $a([26, 64, 1, 4, 50, 1]); //#17301
    } //#17301
    $1.metrics = $a(); //#17301
    $1.urows = $1.rows; //#17305
    $1.ucols = $1.columns; //#17306
    $1.fullcws = $a([]); //#17307
    var _1Z = $1.metrics; //#17308
    for (var _1a = 0, _1b = _1Z.length; _1a < _1b; _1a++) { //#17325
        $1.m = $get(_1Z, _1a); //#17309
        $1.rows = $get($1.m, 0); //#17310
        $1.cols = $get($1.m, 1); //#17311
        $1.regh = $get($1.m, 2); //#17312
        $1.regv = $get($1.m, 3); //#17313
        $1.rscw = $get($1.m, 4); //#17314
        $1.rsbl = $get($1.m, 5); //#17315
        $1.mrows = $f($1.rows - (2 * $1.regh)); //#17316
        $1.mcols = $f($1.cols - (2 * $1.regv)); //#17317
        $1.ncws = $f((~~(($1.mrows * $1.mcols) / 8)) - $1.rscw); //#17318
        $1.okay = true; //#17319
        if (($1.urows != 0) && ($1.urows != $1.rows)) { //#17320
            $1.okay = false; //#17320
        } //#17320
        if (($1.ucols != 0) && ($1.ucols != $1.cols)) { //#17321
            $1.okay = false; //#17321
        } //#17321
        if ($eq($1.format, "square") && $ne($1.rows, $1.cols)) { //#17322
            $1.okay = false; //#17322
        } //#17322
        if ($eq($1.format, "rectangle") && $eq($1.rows, $1.cols)) { //#17323
            $1.okay = false; //#17323
        } //#17323
        if ($1.okay) { //#17324
            $k[$j++] = Infinity; //#17324
            $aload($1.fullcws); //#17324
            $k[$j++] = $1.ncws; //#17324
            $1.fullcws = $a(); //#17324
        } //#17324
    } //#17324
    $k[$j++] = Infinity; //#17326
    for (var _2C = 0, _2D = 1558; _2C < _2D; _2C++) { //#17326
        $k[$j++] = 10000; //#17326
    } //#17326
    $1.numremcws = $a(); //#17326
    var _2F = $1.fullcws; //#17327
    for (var _2G = 0, _2H = _2F.length; _2G < _2H; _2G++) { //#17327
        $put($1.numremcws, $f($get(_2F, _2G) - 1), 1); //#17327
    } //#17327
    for (var _2K = 1556; _2K >= 0; _2K -= 1) { //#17333
        $1.i = _2K; //#17329
        if ($get($1.numremcws, $1.i) != 1) { //#17332
            $put($1.numremcws, $1.i, $f($get($1.numremcws, $1.i + 1) + 1)); //#17331
        } //#17331
    } //#17331
    if ($1.raw) { //#17335
        $1.encoding = "raw"; //#17335
    } //#17335
    if ($eq($1.encoding, "raw")) { //#17348
        $1.cws = $a($1.barcode.length); //#17338
        $1.i = 0; //#17339
        $1.j = 0; //#17339
        for (;;) { //#17346
            if ($1.i == $1.barcode.length) { //#17341
                break; //#17341
            } //#17341
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#17342
            $put($1.cws, $1.j, $1.cw); //#17343
            $1.i = $1.i + 4; //#17344
            $1.j = $1.j + 1; //#17345
        } //#17345
        $1.cws = $geti($1.cws, 0, $1.j); //#17347
    } //#17347
    if ($eq($1.encoding, "auto")) { //#17851
        $1.fnc1 = -1; //#17353
        $1.prog = -2; //#17353
        $1.m05 = -3; //#17353
        $1.m06 = -4; //#17353
        $1.lC = -5; //#17354
        $1.lB = -6; //#17354
        $1.lX = -7; //#17354
        $1.lT = -8; //#17354
        $1.lE = -9; //#17354
        $1.unl = -10; //#17354
        $1.sapp = -11; //#17355
        $1.usft = -12; //#17355
        $1.sft1 = -13; //#17355
        $1.sft2 = -14; //#17355
        $1.sft3 = -15; //#17355
        $1.eci = -16; //#17355
        $1.pad = -17; //#17355
        $1.unlcw = 254; //#17356
        var _2p = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true],
            ["FNC1", $1.fnc1],
            ["PROG", $1.prog]
        ]); //#17364
        $1.fncvals = _2p; //#17367
        $k[$j++] = 'msg'; //#17368
        $k[$j++] = $1.barcode; //#17368
        $k[$j++] = $1.fncvals; //#17368
        bwipp_parseinput(); //#17368
        var _2s = $k[--$j]; //#17368
        $1[$k[--$j]] = _2s; //#17368
        $1.msglen = $1.msg.length; //#17369
        if ($1.msglen >= 9) { //#17387
            $aload($geti($1.msg, 0, 7)); //#17373
            var _2y = $k[--$j]; //#17374
            var _2z = $k[--$j]; //#17374
            $k[$j++] = _2y == 29; //#17374
            $k[$j++] = _2z; //#17374
            $j--; //#17374
            var _30 = $k[--$j]; //#17374
            var _31 = $k[--$j]; //#17374
            var _32 = $k[--$j]; //#17374
            var _33 = $k[--$j]; //#17375
            var _34 = $k[--$j]; //#17375
            var _35 = $k[--$j]; //#17375
            if (((((_30 && (_31 == 48)) && (_32 == 30)) && (_33 == 62)) && (_34 == 41)) && (_35 == 91)) { //#17386
                $aload($geti($1.msg, $1.msglen - 2, 2)); //#17376
                var _39 = $k[--$j]; //#17377
                var _3A = $k[--$j]; //#17377
                if ((_39 == 4) && (_3A == 30)) { //#17385
                    if ($get($1.msg, 5) == 53) { //#17382
                        $k[$j++] = Infinity; //#17379
                        $k[$j++] = $1.m05; //#17379
                        $aload($geti($1.msg, 7, $1.msg.length - 9)); //#17379
                        $1.msg = $a(); //#17379
                    } else { //#17382
                        if ($get($1.msg, 5) == 54) { //#17383
                            $k[$j++] = Infinity; //#17382
                            $k[$j++] = $1.m06; //#17382
                            $aload($geti($1.msg, 7, $1.msg.length - 9)); //#17382
                            $1.msg = $a(); //#17382
                        } //#17382
                    } //#17382
                } //#17382
            } //#17382
        } //#17382
        $1.msglen = $1.msg.length; //#17388
        $k[$j++] = Infinity; //#17397
        for (var _3Q = 0; _3Q <= 128; _3Q += 1) { //#17391
            $k[$j++] = _3Q; //#17391
            $k[$j++] = _3Q + 1; //#17391
        } //#17391
        $k[$j++] = $1.pad; //#17396
        $k[$j++] = 129; //#17396
        for (var _3S = 0; _3S <= 99; _3S += 1) { //#17396
            var _3U = $cvrs($s(2), _3S, 10); //#17394
            var _3W = $strcpy($s(2), "00"); //#17394
            $puti(_3W, 2 - _3U.length, _3U); //#17394
            $k[$j++] = _3W; //#17395
            $k[$j++] = _3S + 130; //#17395
        } //#17395
        var _3j = $a([$1.lC, $1.lB, $1.fnc1, $1.sapp, $1.prog, $1.usft, $1.m05, $1.m06, $1.lX, $1.lT, $1.lE, $1.eci]); //#17397
        $k[$j++] = 229; //#17397
        for (var _3k = 0, _3l = _3j.length; _3k < _3l; _3k++) { //#17397
            var _3o = $f($k[--$j] + 1); //#17397
            $k[$j++] = $get(_3j, _3k); //#17397
            $k[$j++] = _3o; //#17397
            $k[$j++] = _3o; //#17397
        } //#17397
        $j--; //#17397
        $1.Avals = $d(); //#17398
        $k[$j++] = Infinity; //#17400
        var _3q = $1.Avals; //#17400
        for (var _3v = _3q.size, _3u = _3q.keys(), _3t = 0; _3t < _3v; _3t++) { //#17400
            var _3r = _3u.next().value; //#17400
            $k[$j++] = _3r; //#17400
            $k[$j++] = _3q.get(_3r); //#17400
            $k[$j++] = Infinity; //#17400
            var _3w = $k[--$j]; //#17400
            var _3x = $k[--$j]; //#17400
            $k[$j++] = _3w; //#17400
            $k[$j++] = _3x; //#17400
            var _3y = $a(); //#17400
            $k[$j++] = _3y; //#17400
        } //#17400
        $1.Avals = $d(); //#17401
        $k[$j++] = Infinity; //#17409
        $k[$j++] = $1.sft1; //#17408
        $k[$j++] = 0; //#17408
        $k[$j++] = $1.sft2; //#17408
        $k[$j++] = 1; //#17408
        $k[$j++] = $1.sft3; //#17408
        $k[$j++] = 2; //#17408
        $k[$j++] = 32; //#17408
        $k[$j++] = 3; //#17408
        for (var _43 = 48; _43 <= 57; _43 += 1) { //#17408
            $k[$j++] = _43; //#17408
            $k[$j++] = _43 - 44; //#17408
        } //#17408
        for (var _44 = 65; _44 <= 90; _44 += 1) { //#17409
            $k[$j++] = _44; //#17409
            $k[$j++] = _44 - 51; //#17409
        } //#17409
        $1.CNvals = $d(); //#17410
        $k[$j++] = Infinity; //#17411
        for (var _46 = 0; _46 <= 31; _46 += 1) { //#17411
            $k[$j++] = _46; //#17411
            $k[$j++] = _46; //#17411
        } //#17411
        $1.C1vals = $d(); //#17411
        $k[$j++] = Infinity; //#17417
        for (var _48 = 33; _48 <= 47; _48 += 1) { //#17413
            $k[$j++] = _48; //#17413
            $k[$j++] = _48 - 33; //#17413
        } //#17413
        for (var _49 = 58; _49 <= 64; _49 += 1) { //#17414
            $k[$j++] = _49; //#17414
            $k[$j++] = _49 - 43; //#17414
        } //#17414
        for (var _4A = 91; _4A <= 95; _4A += 1) { //#17415
            $k[$j++] = _4A; //#17415
            $k[$j++] = _4A - 69; //#17415
        } //#17415
        $k[$j++] = $1.fnc1; //#17417
        $k[$j++] = 27; //#17417
        $k[$j++] = $1.usft; //#17417
        $k[$j++] = 30; //#17417
        $1.C2vals = $d(); //#17418
        $k[$j++] = Infinity; //#17419
        for (var _4E = 96; _4E <= 127; _4E += 1) { //#17419
            $k[$j++] = _4E; //#17419
            $k[$j++] = _4E - 96; //#17419
        } //#17419
        $1.C3vals = $d(); //#17419
        $k[$j++] = Infinity; //#17424
        var _4G = $1.CNvals; //#17421
        for (var _4L = _4G.size, _4K = _4G.keys(), _4J = 0; _4J < _4L; _4J++) { //#17421
            var _4H = _4K.next().value; //#17421
            $k[$j++] = _4H; //#17421
            $k[$j++] = _4G.get(_4H); //#17421
            $k[$j++] = Infinity; //#17421
            var _4M = $k[--$j]; //#17421
            var _4N = $k[--$j]; //#17421
            $k[$j++] = _4M; //#17421
            $k[$j++] = _4N; //#17421
            var _4O = $a(); //#17421
            $k[$j++] = _4O; //#17421
        } //#17421
        var _4P = $1.C1vals; //#17422
        for (var _4U = _4P.size, _4T = _4P.keys(), _4S = 0; _4S < _4U; _4S++) { //#17422
            var _4Q = _4T.next().value; //#17422
            $k[$j++] = _4Q; //#17422
            $k[$j++] = _4P.get(_4Q); //#17422
            $k[$j++] = Infinity; //#17422
            var _4V = $k[--$j]; //#17422
            var _4W = $k[--$j]; //#17422
            $k[$j++] = _4V; //#17422
            $k[$j++] = $get($1.CNvals, $1.sft1); //#17422
            $k[$j++] = _4W; //#17422
            var _4a = $a(); //#17422
            $k[$j++] = _4a; //#17422
        } //#17422
        var _4b = $1.C2vals; //#17423
        for (var _4g = _4b.size, _4f = _4b.keys(), _4e = 0; _4e < _4g; _4e++) { //#17423
            var _4c = _4f.next().value; //#17423
            $k[$j++] = _4c; //#17423
            $k[$j++] = _4b.get(_4c); //#17423
            $k[$j++] = Infinity; //#17423
            var _4h = $k[--$j]; //#17423
            var _4i = $k[--$j]; //#17423
            $k[$j++] = _4h; //#17423
            $k[$j++] = $get($1.CNvals, $1.sft2); //#17423
            $k[$j++] = _4i; //#17423
            var _4m = $a(); //#17423
            $k[$j++] = _4m; //#17423
        } //#17423
        var _4n = $1.C3vals; //#17424
        for (var _4s = _4n.size, _4r = _4n.keys(), _4q = 0; _4q < _4s; _4q++) { //#17424
            var _4o = _4r.next().value; //#17424
            $k[$j++] = _4o; //#17424
            $k[$j++] = _4n.get(_4o); //#17424
            $k[$j++] = Infinity; //#17424
            var _4t = $k[--$j]; //#17424
            var _4u = $k[--$j]; //#17424
            $k[$j++] = _4t; //#17424
            $k[$j++] = $get($1.CNvals, $1.sft3); //#17424
            $k[$j++] = _4u; //#17424
            var _4y = $a(); //#17424
            $k[$j++] = _4y; //#17424
        } //#17424
        $1.Cvals = $d(); //#17425
        $k[$j++] = Infinity; //#17433
        $k[$j++] = $1.sft1; //#17432
        $k[$j++] = 0; //#17432
        $k[$j++] = $1.sft2; //#17432
        $k[$j++] = 1; //#17432
        $k[$j++] = $1.sft3; //#17432
        $k[$j++] = 2; //#17432
        $k[$j++] = 32; //#17432
        $k[$j++] = 3; //#17432
        for (var _53 = 48; _53 <= 57; _53 += 1) { //#17432
            $k[$j++] = _53; //#17432
            $k[$j++] = _53 - 44; //#17432
        } //#17432
        for (var _54 = 97; _54 <= 122; _54 += 1) { //#17433
            $k[$j++] = _54; //#17433
            $k[$j++] = _54 - 83; //#17433
        } //#17433
        $1.TNvals = $d(); //#17434
        $k[$j++] = Infinity; //#17435
        for (var _56 = 0; _56 <= 31; _56 += 1) { //#17435
            $k[$j++] = _56; //#17435
            $k[$j++] = _56; //#17435
        } //#17435
        $1.T1vals = $d(); //#17435
        $k[$j++] = Infinity; //#17441
        for (var _58 = 33; _58 <= 47; _58 += 1) { //#17437
            $k[$j++] = _58; //#17437
            $k[$j++] = _58 - 33; //#17437
        } //#17437
        for (var _59 = 58; _59 <= 64; _59 += 1) { //#17438
            $k[$j++] = _59; //#17438
            $k[$j++] = _59 - 43; //#17438
        } //#17438
        for (var _5A = 91; _5A <= 95; _5A += 1) { //#17439
            $k[$j++] = _5A; //#17439
            $k[$j++] = _5A - 69; //#17439
        } //#17439
        $k[$j++] = $1.fnc1; //#17441
        $k[$j++] = 27; //#17441
        $k[$j++] = $1.usft; //#17441
        $k[$j++] = 30; //#17441
        $1.T2vals = $d(); //#17442
        $k[$j++] = Infinity; //#17446
        $k[$j++] = 96; //#17445
        $k[$j++] = 0; //#17445
        for (var _5E = 65; _5E <= 90; _5E += 1) { //#17445
            $k[$j++] = _5E; //#17445
            $k[$j++] = _5E - 64; //#17445
        } //#17445
        for (var _5F = 123; _5F <= 127; _5F += 1) { //#17446
            $k[$j++] = _5F; //#17446
            $k[$j++] = _5F - 96; //#17446
        } //#17446
        $1.T3vals = $d(); //#17447
        $k[$j++] = Infinity; //#17452
        var _5H = $1.TNvals; //#17449
        for (var _5M = _5H.size, _5L = _5H.keys(), _5K = 0; _5K < _5M; _5K++) { //#17449
            var _5I = _5L.next().value; //#17449
            $k[$j++] = _5I; //#17449
            $k[$j++] = _5H.get(_5I); //#17449
            $k[$j++] = Infinity; //#17449
            var _5N = $k[--$j]; //#17449
            var _5O = $k[--$j]; //#17449
            $k[$j++] = _5N; //#17449
            $k[$j++] = _5O; //#17449
            var _5P = $a(); //#17449
            $k[$j++] = _5P; //#17449
        } //#17449
        var _5Q = $1.T1vals; //#17450
        for (var _5V = _5Q.size, _5U = _5Q.keys(), _5T = 0; _5T < _5V; _5T++) { //#17450
            var _5R = _5U.next().value; //#17450
            $k[$j++] = _5R; //#17450
            $k[$j++] = _5Q.get(_5R); //#17450
            $k[$j++] = Infinity; //#17450
            var _5W = $k[--$j]; //#17450
            var _5X = $k[--$j]; //#17450
            $k[$j++] = _5W; //#17450
            $k[$j++] = $get($1.TNvals, $1.sft1); //#17450
            $k[$j++] = _5X; //#17450
            var _5b = $a(); //#17450
            $k[$j++] = _5b; //#17450
        } //#17450
        var _5c = $1.T2vals; //#17451
        for (var _5h = _5c.size, _5g = _5c.keys(), _5f = 0; _5f < _5h; _5f++) { //#17451
            var _5d = _5g.next().value; //#17451
            $k[$j++] = _5d; //#17451
            $k[$j++] = _5c.get(_5d); //#17451
            $k[$j++] = Infinity; //#17451
            var _5i = $k[--$j]; //#17451
            var _5j = $k[--$j]; //#17451
            $k[$j++] = _5i; //#17451
            $k[$j++] = $get($1.TNvals, $1.sft2); //#17451
            $k[$j++] = _5j; //#17451
            var _5n = $a(); //#17451
            $k[$j++] = _5n; //#17451
        } //#17451
        var _5o = $1.T3vals; //#17452
        for (var _5t = _5o.size, _5s = _5o.keys(), _5r = 0; _5r < _5t; _5r++) { //#17452
            var _5p = _5s.next().value; //#17452
            $k[$j++] = _5p; //#17452
            $k[$j++] = _5o.get(_5p); //#17452
            $k[$j++] = Infinity; //#17452
            var _5u = $k[--$j]; //#17452
            var _5v = $k[--$j]; //#17452
            $k[$j++] = _5u; //#17452
            $k[$j++] = $get($1.TNvals, $1.sft3); //#17452
            $k[$j++] = _5v; //#17452
            var _5z = $a(); //#17452
            $k[$j++] = _5z; //#17452
        } //#17452
        $1.Tvals = $d(); //#17453
        for (var _61 = 128; _61 <= 255; _61 += 1) { //#17461
            $1.i = _61; //#17457
            $k[$j++] = $1.Avals; //#17458
            $k[$j++] = $1.i; //#17458
            $k[$j++] = Infinity; //#17458
            $aload($get($1.Avals, $1.usft)); //#17458
            $aload($get($1.Avals, $1.i - 128)); //#17458
            var _6A = $a(); //#17458
            var _6B = $k[--$j]; //#17458
            $put($k[--$j], _6B, _6A); //#17458
            $k[$j++] = $1.Cvals; //#17459
            $k[$j++] = $1.i; //#17459
            $k[$j++] = Infinity; //#17459
            $aload($get($1.Cvals, $1.usft)); //#17459
            $aload($get($1.Cvals, $1.i - 128)); //#17459
            var _6L = $a(); //#17459
            var _6M = $k[--$j]; //#17459
            $put($k[--$j], _6M, _6L); //#17459
            $k[$j++] = $1.Tvals; //#17460
            $k[$j++] = $1.i; //#17460
            $k[$j++] = Infinity; //#17460
            $aload($get($1.Tvals, $1.usft)); //#17460
            $aload($get($1.Tvals, $1.i - 128)); //#17460
            var _6W = $a(); //#17460
            var _6X = $k[--$j]; //#17460
            $put($k[--$j], _6X, _6W); //#17460
        } //#17460
        $k[$j++] = Infinity; //#17469
        $k[$j++] = 13; //#17468
        $k[$j++] = 0; //#17468
        $k[$j++] = 42; //#17468
        $k[$j++] = 1; //#17468
        $k[$j++] = 62; //#17468
        $k[$j++] = 2; //#17468
        $k[$j++] = 32; //#17468
        $k[$j++] = 3; //#17468
        for (var _6Z = 48; _6Z <= 57; _6Z += 1) { //#17468
            $k[$j++] = _6Z; //#17468
            $k[$j++] = _6Z - 44; //#17468
        } //#17468
        for (var _6a = 65; _6a <= 90; _6a += 1) { //#17469
            $k[$j++] = _6a; //#17469
            $k[$j++] = _6a - 51; //#17469
        } //#17469
        $1.Xvals = $d(); //#17470
        $k[$j++] = Infinity; //#17472
        var _6c = $1.Xvals; //#17472
        for (var _6h = _6c.size, _6g = _6c.keys(), _6f = 0; _6f < _6h; _6f++) { //#17472
            var _6d = _6g.next().value; //#17472
            $k[$j++] = _6d; //#17472
            $k[$j++] = _6c.get(_6d); //#17472
            $k[$j++] = Infinity; //#17472
            var _6i = $k[--$j]; //#17472
            var _6j = $k[--$j]; //#17472
            $k[$j++] = _6i; //#17472
            $k[$j++] = _6j; //#17472
            var _6k = $a(); //#17472
            $k[$j++] = _6k; //#17472
        } //#17472
        $1.Xvals = $d(); //#17473
        $k[$j++] = Infinity; //#17478
        for (var _6m = 64; _6m <= 94; _6m += 1) { //#17476
            $k[$j++] = _6m; //#17476
            $k[$j++] = _6m - 64; //#17476
        } //#17476
        $k[$j++] = $1.unl; //#17478
        $k[$j++] = 31; //#17478
        for (var _6o = 32; _6o <= 63; _6o += 1) { //#17478
            $k[$j++] = _6o; //#17478
            $k[$j++] = _6o; //#17478
        } //#17478
        $1.Evals = $d(); //#17479
        $k[$j++] = Infinity; //#17481
        var _6q = $1.Evals; //#17481
        for (var _6v = _6q.size, _6u = _6q.keys(), _6t = 0; _6t < _6v; _6t++) { //#17481
            var _6r = _6u.next().value; //#17481
            $k[$j++] = _6r; //#17481
            $k[$j++] = _6q.get(_6r); //#17481
            $k[$j++] = Infinity; //#17481
            var _6w = $k[--$j]; //#17481
            var _6x = $k[--$j]; //#17481
            $k[$j++] = _6w; //#17481
            $k[$j++] = _6x; //#17481
            var _6y = $a(); //#17481
            $k[$j++] = _6y; //#17481
        } //#17481
        $1.Evals = $d(); //#17482
        $k[$j++] = Infinity; //#17485
        for (var _70 = 0; _70 <= 255; _70 += 1) { //#17485
            $k[$j++] = _70; //#17485
            $k[$j++] = _70; //#17485
        } //#17485
        $1.Bvals = $d(); //#17486
        $k[$j++] = Infinity; //#17488
        var _72 = $1.Bvals; //#17488
        for (var _77 = _72.size, _76 = _72.keys(), _75 = 0; _75 < _77; _75++) { //#17488
            var _73 = _76.next().value; //#17488
            $k[$j++] = _73; //#17488
            $k[$j++] = _72.get(_73); //#17488
            $k[$j++] = Infinity; //#17488
            var _78 = $k[--$j]; //#17488
            var _79 = $k[--$j]; //#17488
            $k[$j++] = _78; //#17488
            $k[$j++] = _79; //#17488
            var _7A = $a(); //#17488
            $k[$j++] = _7A; //#17488
        } //#17488
        $1.Bvals = $d(); //#17489
        $1.encvals = $a([$1.Avals, $1.Cvals, $1.Tvals, $1.Xvals, $1.Evals, $1.Bvals]); //#17491
        $k[$j++] = Infinity; //#17493
        for (var _7K = 0, _7L = $1.msglen; _7K < _7L; _7K++) { //#17493
            $k[$j++] = 0; //#17493
        } //#17493
        $k[$j++] = 0; //#17493
        $1.numD = $a(); //#17493
        $k[$j++] = Infinity; //#17494
        for (var _7O = 0, _7P = $1.msglen; _7O < _7P; _7O++) { //#17494
            $k[$j++] = 0; //#17494
        } //#17494
        $k[$j++] = 9999; //#17494
        $1.nextXterm = $a(); //#17494
        $k[$j++] = Infinity; //#17495
        for (var _7S = 0, _7T = $1.msglen; _7S < _7T; _7S++) { //#17495
            $k[$j++] = 0; //#17495
        } //#17495
        $k[$j++] = 9999; //#17495
        $1.nextNonX = $a(); //#17495
        $k[$j++] = Infinity; //#17496
        for (var _7W = 0, _7X = $1.msglen; _7W < _7X; _7W++) { //#17496
            $k[$j++] = false; //#17496
        } //#17496
        $k[$j++] = false; //#17496
        $1.isECI = $a(); //#17496
        for (var _7a = $1.msglen - 1; _7a >= 0; _7a -= 1) { //#17514
            $1.i = _7a; //#17498
            $1.barchar = $get($1.msg, $1.i); //#17499
            if (($1.barchar >= 48) && ($1.barchar <= 57)) { //#17502
                $put($1.numD, $1.i, $f($get($1.numD, $1.i + 1) + 1)); //#17501
            } //#17501
            if ((($1.barchar == 13) || ($1.barchar == 42)) || ($1.barchar == 62)) { //#17506
                $put($1.nextXterm, $1.i, 0); //#17504
            } else { //#17506
                $put($1.nextXterm, $1.i, $f($get($1.nextXterm, $1.i + 1) + 1)); //#17506
            } //#17506
            var _7x = $get($1.Xvals, $1.barchar) !== undefined; //#17508
            if (!_7x) { //#17511
                $put($1.nextNonX, $1.i, 0); //#17509
            } else { //#17511
                $put($1.nextNonX, $1.i, $f($get($1.nextNonX, $1.i + 1) + 1)); //#17511
            } //#17511
            $put($1.isECI, $1.i, $1.barchar <= -1000000); //#17513
        } //#17513
        $k[$j++] = Infinity; //#17515
        var _88 = $1.nextXterm; //#17515
        for (var _89 = 0, _8A = _88.length; _89 < _8A; _89++) { //#17515
            var _8B = $get(_88, _89); //#17515
            $k[$j++] = _8B; //#17515
            if (_8B > 10000) { //#17515
                $j--; //#17515
                $k[$j++] = 10000; //#17515
            } //#17515
        } //#17515
        $1.nextXterm = $a(); //#17515
        $k[$j++] = Infinity; //#17516
        var _8D = $1.nextNonX; //#17516
        for (var _8E = 0, _8F = _8D.length; _8E < _8F; _8E++) { //#17516
            var _8G = $get(_8D, _8E); //#17516
            $k[$j++] = _8G; //#17516
            if (_8G > 10000) { //#17516
                $j--; //#17516
                $k[$j++] = 10000; //#17516
            } //#17516
        } //#17516
        $1.nextNonX = $a(); //#17516
        $1.isD = function() {
            $k[$j++] = ($1.char >= 48) && ($1.char <= 57); //#17518
        }; //#17518
        $1.isC = function() {
            var _8M = $get($1.CNvals, $1.char) !== undefined; //#17519
            $k[$j++] = _8M; //#17519
        }; //#17519
        $1.isT = function() {
            var _8P = $get($1.TNvals, $1.char) !== undefined; //#17520
            $k[$j++] = _8P; //#17520
        }; //#17520
        $1.isX = function() {
            var _8S = $get($1.Xvals, $1.char) !== undefined; //#17521
            $k[$j++] = _8S; //#17521
        }; //#17521
        $1.isE = function() {
            var _8V = $get($1.Evals, $1.char) !== undefined; //#17522
            $k[$j++] = _8V; //#17522
        }; //#17522
        $1.isEA = function() {
            $k[$j++] = $1.char > 127; //#17523
        }; //#17523
        $1.isFN = function() {
            $k[$j++] = $1.char < 0; //#17524
        }; //#17524
        $1.XtermFirst = function() {
            var _8Y = $k[--$j]; //#17525
            $k[$j++] = $lt($get($1.nextXterm, _8Y), $get($1.nextNonX, _8Y)); //#17525
        }; //#17525
        $1.A = 0; //#17527
        $1.C = 1; //#17527
        $1.T = 2; //#17527
        $1.X = 3; //#17527
        $1.E = 4; //#17527
        $1.B = 5; //#17527
        $1.lookup = function() {
            $1.ac = 1; //#17530
            $1.cc = 2; //#17530
            $1.tc = 2; //#17530
            $1.xc = 2; //#17530
            $1.ec = 2; //#17530
            $1.bc = 2.25; //#17530
            if ($1.mode == $1.A) { //#17531
                $1.ac = 0; //#17531
                $1.cc = 1; //#17531
                $1.tc = 1; //#17531
                $1.xc = 1; //#17531
                $1.ec = 1; //#17531
                $1.bc = 1.25; //#17531
            } //#17531
            if ($1.mode == $1.C) { //#17532
                $1.cc = 0; //#17532
            } //#17532
            if ($1.mode == $1.T) { //#17533
                $1.tc = 0; //#17533
            } //#17533
            if ($1.mode == $1.X) { //#17534
                $1.xc = 0; //#17534
            } //#17534
            if ($1.mode == $1.E) { //#17535
                $1.ec = 0; //#17535
            } //#17535
            if ($1.mode == $1.B) { //#17536
                $1.bc = 0; //#17536
            } //#17536
            for (var _8p = 0, _8q = 1; _8p < _8q; _8p++) { //#17571
                if ($get($1.isECI, $1.i)) { //#17538
                    $k[$j++] = $1.A; //#17538
                    break; //#17538
                } //#17538
                if ($1.mailmark && ($1.i < 45)) { //#17539
                    $k[$j++] = $1.C; //#17539
                    break; //#17539
                } //#17539
                $1.k = 0; //#17540
                for (;;) { //#17570
                    if (($1.i + $1.k) == $1.msglen) { //#17549
                        var _91 = $a(['ac', 'cc', 'tc', 'xc', 'ec', 'bc']); //#17542
                        for (var _92 = 0, _93 = _91.length; _92 < _93; _92++) { //#17542
                            var _94 = $get(_91, _92); //#17542
                            $1[_94] = Math.ceil($1[_94]); //#17542
                        } //#17542
                        var _9B = $a([$1.cc, $1.tc, $1.xc, $1.ec, $1.bc]); //#17543
                        $k[$j++] = true; //#17543
                        for (var _9C = 0, _9D = _9B.length; _9C < _9D; _9C++) { //#17543
                            var _9G = $k[--$j]; //#17543
                            $k[$j++] = _9G && ($1.ac <= $get(_9B, _9C)); //#17543
                        } //#17543
                        if ($k[--$j]) { //#17543
                            $k[$j++] = $1.A; //#17543
                            break; //#17543
                        } //#17543
                        var _9O = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.ec]); //#17544
                        $k[$j++] = true; //#17544
                        for (var _9P = 0, _9Q = _9O.length; _9P < _9Q; _9P++) { //#17544
                            var _9T = $k[--$j]; //#17544
                            $k[$j++] = _9T && ($1.bc < $get(_9O, _9P)); //#17544
                        } //#17544
                        if ($k[--$j]) { //#17544
                            $k[$j++] = $1.B; //#17544
                            break; //#17544
                        } //#17544
                        var _9b = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.bc]); //#17545
                        $k[$j++] = true; //#17545
                        for (var _9c = 0, _9d = _9b.length; _9c < _9d; _9c++) { //#17545
                            var _9g = $k[--$j]; //#17545
                            $k[$j++] = _9g && ($1.ec < $get(_9b, _9c)); //#17545
                        } //#17545
                        if ($k[--$j]) { //#17545
                            $k[$j++] = $1.E; //#17545
                            break; //#17545
                        } //#17545
                        var _9o = $a([$1.ac, $1.cc, $1.xc, $1.ec, $1.bc]); //#17546
                        $k[$j++] = true; //#17546
                        for (var _9p = 0, _9q = _9o.length; _9p < _9q; _9p++) { //#17546
                            var _9t = $k[--$j]; //#17546
                            $k[$j++] = _9t && ($1.tc < $get(_9o, _9p)); //#17546
                        } //#17546
                        if ($k[--$j]) { //#17546
                            $k[$j++] = $1.T; //#17546
                            break; //#17546
                        } //#17546
                        var _A1 = $a([$1.ac, $1.cc, $1.tc, $1.ec, $1.bc]); //#17547
                        $k[$j++] = true; //#17547
                        for (var _A2 = 0, _A3 = _A1.length; _A2 < _A3; _A2++) { //#17547
                            var _A6 = $k[--$j]; //#17547
                            $k[$j++] = _A6 && ($1.xc < $get(_A1, _A2)); //#17547
                        } //#17547
                        if ($k[--$j]) { //#17547
                            $k[$j++] = $1.X; //#17547
                            break; //#17547
                        } //#17547
                        $k[$j++] = $1.C; //#17548
                        break; //#17548
                    } //#17548
                    $1.char = $get($1.msg, $1.i + $1.k); //#17550
                    $k[$j++] = 'ac'; //#17551
                    $k[$j++] = $1.ac; //#17551
                    $1.isD(); //#17551
                    if ($k[--$j]) { //#17551
                        var _AG = $k[--$j]; //#17551
                        $k[$j++] = $f(_AG + (1 / 2)); //#17551
                    } else { //#17551
                        $1.isEA(); //#17551
                        if ($k[--$j]) { //#17551
                            var _AI = $k[--$j]; //#17551
                            $k[$j++] = Math.ceil(_AI) + 2; //#17551
                        } else { //#17551
                            var _AJ = $k[--$j]; //#17551
                            $k[$j++] = Math.ceil(_AJ) + 1; //#17551
                        } //#17551
                    } //#17551
                    var _AK = $k[--$j]; //#17551
                    $1[$k[--$j]] = _AK; //#17551
                    $k[$j++] = 'cc'; //#17552
                    $k[$j++] = $1.cc; //#17552
                    $1.isC(); //#17552
                    if ($k[--$j]) { //#17552
                        var _AO = $k[--$j]; //#17552
                        $k[$j++] = $f(_AO + 0.6666667); //#17552
                    } else { //#17552
                        $1.isEA(); //#17552
                        if ($k[--$j]) { //#17552
                            var _AQ = $k[--$j]; //#17552
                            $k[$j++] = $f(_AQ + 2.6666667); //#17552
                        } else { //#17552
                            var _AR = $k[--$j]; //#17552
                            $k[$j++] = $f(_AR + 1.3333334); //#17552
                        } //#17552
                    } //#17552
                    var _AS = $k[--$j]; //#17552
                    $1[$k[--$j]] = _AS; //#17552
                    $k[$j++] = 'tc'; //#17553
                    $k[$j++] = $1.tc; //#17553
                    $1.isT(); //#17553
                    if ($k[--$j]) { //#17553
                        var _AW = $k[--$j]; //#17553
                        $k[$j++] = $f(_AW + 0.6666667); //#17553
                    } else { //#17553
                        $1.isEA(); //#17553
                        if ($k[--$j]) { //#17553
                            var _AY = $k[--$j]; //#17553
                            $k[$j++] = $f(_AY + 2.6666667); //#17553
                        } else { //#17553
                            var _AZ = $k[--$j]; //#17553
                            $k[$j++] = $f(_AZ + 1.3333334); //#17553
                        } //#17553
                    } //#17553
                    var _Aa = $k[--$j]; //#17553
                    $1[$k[--$j]] = _Aa; //#17553
                    $k[$j++] = 'xc'; //#17554
                    $k[$j++] = $1.xc; //#17554
                    $1.isX(); //#17554
                    if ($k[--$j]) { //#17554
                        var _Ae = $k[--$j]; //#17554
                        $k[$j++] = $f(_Ae + 0.6666667); //#17554
                    } else { //#17554
                        $1.isEA(); //#17554
                        if ($k[--$j]) { //#17554
                            var _Ag = $k[--$j]; //#17554
                            $k[$j++] = $f(_Ag + 4.3333334); //#17554
                        } else { //#17554
                            var _Ah = $k[--$j]; //#17554
                            $k[$j++] = $f(_Ah + 3.3333334); //#17554
                        } //#17554
                    } //#17554
                    var _Ai = $k[--$j]; //#17554
                    $1[$k[--$j]] = _Ai; //#17554
                    $k[$j++] = 'ec'; //#17555
                    $k[$j++] = $1.ec; //#17555
                    $1.isE(); //#17555
                    if ($k[--$j]) { //#17555
                        var _Am = $k[--$j]; //#17555
                        $k[$j++] = $f(_Am + (3 / 4)); //#17555
                    } else { //#17555
                        $1.isEA(); //#17555
                        if ($k[--$j]) { //#17555
                            var _Ao = $k[--$j]; //#17555
                            $k[$j++] = $f(_Ao + (17 / 4)); //#17555
                        } else { //#17555
                            var _Ap = $k[--$j]; //#17555
                            $k[$j++] = $f(_Ap + (13 / 4)); //#17555
                        } //#17555
                    } //#17555
                    var _Aq = $k[--$j]; //#17555
                    $1[$k[--$j]] = _Aq; //#17555
                    $k[$j++] = 'bc'; //#17556
                    $k[$j++] = $1.bc; //#17556
                    $1.isFN(); //#17556
                    if ($k[--$j]) { //#17556
                        var _Au = $k[--$j]; //#17556
                        $k[$j++] = $f(_Au + 4); //#17556
                    } else { //#17556
                        var _Av = $k[--$j]; //#17556
                        $k[$j++] = $f(_Av + 1); //#17556
                    } //#17556
                    var _Aw = $k[--$j]; //#17556
                    $1[$k[--$j]] = _Aw; //#17556
                    if ($1.k >= 4) { //#17568
                        var _B4 = $a([$1.cc, $1.tc, $1.xc, $1.ec, $1.bc]); //#17558
                        $k[$j++] = true; //#17558
                        for (var _B5 = 0, _B6 = _B4.length; _B5 < _B6; _B5++) { //#17558
                            var _B9 = $k[--$j]; //#17558
                            $k[$j++] = _B9 && (($1.ac + 1) <= $get(_B4, _B5)); //#17558
                        } //#17558
                        if ($k[--$j]) { //#17558
                            $k[$j++] = $1.A; //#17558
                            break; //#17558
                        } //#17558
                        if (($1.bc + 1) <= $1.ac) { //#17559
                            $k[$j++] = $1.B; //#17559
                            break; //#17559
                        } //#17559
                        var _BJ = $a([$1.cc, $1.tc, $1.xc, $1.ec]); //#17560
                        $k[$j++] = true; //#17560
                        for (var _BK = 0, _BL = _BJ.length; _BK < _BL; _BK++) { //#17560
                            var _BO = $k[--$j]; //#17560
                            $k[$j++] = _BO && (($1.bc + 1) < $get(_BJ, _BK)); //#17560
                        } //#17560
                        if ($k[--$j]) { //#17560
                            $k[$j++] = $1.B; //#17560
                            break; //#17560
                        } //#17560
                        var _BW = $a([$1.ac, $1.cc, $1.tc, $1.xc, $1.bc]); //#17561
                        $k[$j++] = true; //#17561
                        for (var _BX = 0, _BY = _BW.length; _BX < _BY; _BX++) { //#17561
                            var _Bb = $k[--$j]; //#17561
                            $k[$j++] = _Bb && (($1.ec + 1) < $get(_BW, _BX)); //#17561
                        } //#17561
                        if ($k[--$j]) { //#17561
                            $k[$j++] = $1.E; //#17561
                            break; //#17561
                        } //#17561
                        var _Bj = $a([$1.ac, $1.cc, $1.xc, $1.ec, $1.bc]); //#17562
                        $k[$j++] = true; //#17562
                        for (var _Bk = 0, _Bl = _Bj.length; _Bk < _Bl; _Bk++) { //#17562
                            var _Bo = $k[--$j]; //#17562
                            $k[$j++] = _Bo && (($1.tc + 1) < $get(_Bj, _Bk)); //#17562
                        } //#17562
                        if ($k[--$j]) { //#17562
                            $k[$j++] = $1.T; //#17562
                            break; //#17562
                        } //#17562
                        var _Bw = $a([$1.ac, $1.cc, $1.tc, $1.ec, $1.bc]); //#17563
                        $k[$j++] = true; //#17563
                        for (var _Bx = 0, _By = _Bw.length; _Bx < _By; _Bx++) { //#17563
                            var _C1 = $k[--$j]; //#17563
                            $k[$j++] = _C1 && (($1.xc + 1) < $get(_Bw, _Bx)); //#17563
                        } //#17563
                        if ($k[--$j]) { //#17563
                            $k[$j++] = $1.X; //#17563
                            break; //#17563
                        } //#17563
                        var _C8 = $a([$1.ac, $1.tc, $1.ec, $1.bc]); //#17564
                        $k[$j++] = true; //#17564
                        for (var _C9 = 0, _CA = _C8.length; _C9 < _CA; _C9++) { //#17564
                            var _CD = $k[--$j]; //#17564
                            $k[$j++] = _CD && (($1.cc + 1) < $get(_C8, _C9)); //#17564
                        } //#17564
                        if ($k[--$j]) { //#17567
                            if ($1.cc < $1.xc) { //#17565
                                $k[$j++] = $1.C; //#17565
                                break; //#17565
                            } //#17565
                            if ($1.cc == $1.xc) { //#17566
                                $k[$j++] = ($1.i + $1.k) + 1; //#17566
                                $1.XtermFirst(); //#17566
                                if ($k[--$j]) { //#17566
                                    $k[$j++] = $1.X; //#17566
                                    break; //#17566
                                } else { //#17566
                                    $k[$j++] = $1.C; //#17566
                                    break; //#17566
                                } //#17566
                            } //#17566
                        } //#17566
                    } //#17566
                    $1.k = $1.k + 1; //#17569
                } //#17569
            } //#17569
        }; //#17572
        $1.addtocws = function() {
            var _CQ = $k[--$j]; //#17575
            $puti($1.cws, $1.j, _CQ); //#17575
            $1.j = _CQ.length + $1.j; //#17576
        }; //#17577
        $1.ECItocws = function() {
            var _CV = $f((-$k[--$j]) - 1000000); //#17581
            $k[$j++] = _CV; //#17595
            if (_CV <= 126) { //#17594
                var _CW = $k[--$j]; //#17582
                $k[$j++] = $f(_CW + 1); //#17583
                $astore($a(1)); //#17583
            } else { //#17594
                var _CY = $k[--$j]; //#17584
                $k[$j++] = _CY; //#17595
                if (_CY <= 16382) { //#17594
                    var _Ca = $f($k[--$j] - 127); //#17586
                    $k[$j++] = (~~(_Ca / 254)) + 128; //#17588
                    $k[$j++] = $f((_Ca % 254) + 1); //#17588
                    $astore($a(2)); //#17588
                } else { //#17594
                    var _Cd = $f($k[--$j] - 16383); //#17591
                    $k[$j++] = (~~(_Cd / 64516)) + 192; //#17594
                    $k[$j++] = ((~~(_Cd / 254)) % 254) + 1; //#17594
                    $k[$j++] = $f((_Cd % 254) + 1); //#17594
                    $astore($a(3)); //#17594
                } //#17594
            } //#17594
        }; //#17596
        $1.encA = function() {
            for (var _Cf = 0, _Cg = 1; _Cf < _Cg; _Cf++) { //#17620
                if ($get($1.isECI, $1.i)) { //#17605
                    $k[$j++] = $get($1.Avals, $1.eci); //#17601
                    $1.addtocws(); //#17601
                    $k[$j++] = $get($1.msg, $1.i); //#17602
                    $1.ECItocws(); //#17602
                    $1.addtocws(); //#17602
                    $1.i = $1.i + 1; //#17603
                    break; //#17604
                } //#17604
                if ($get($1.numD, $1.i) >= 2) { //#17610
                    var _Cu = $s(2); //#17607
                    $put(_Cu, 0, $get($1.msg, $1.i)); //#17607
                    $put(_Cu, 1, $get($1.msg, $1.i + 1)); //#17607
                    $k[$j++] = $get($1.Avals, _Cu); //#17607
                    $1.addtocws(); //#17607
                    $1.i = $1.i + 2; //#17608
                    break; //#17609
                } //#17609
                $k[$j++] = 'newmode'; //#17611
                $1.lookup(); //#17611
                var _D4 = $k[--$j]; //#17611
                $1[$k[--$j]] = _D4; //#17611
                if ($1.newmode != $1.mode) { //#17616
                    $k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lE, $1.lB]), $1.newmode)); //#17613
                    $1.addtocws(); //#17613
                    $1.mode = $1.newmode; //#17614
                    break; //#17615
                } //#17615
                $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#17617
                $1.addtocws(); //#17617
                $1.i = $1.i + 1; //#17618
                break; //#17619
            } //#17619
        }; //#17621
        $1.CTXvalstocws = function() {
            $1.in = $k[--$j]; //#17624
            $k[$j++] = Infinity; //#17625
            for (var _DS = 0, _DR = $1.in.length - 1; _DS <= _DR; _DS += 3) { //#17629
                var _DU = $geti($1.in, _DS, 3); //#17627
                $k[$j++] = 0; //#17627
                for (var _DV = 0, _DW = _DU.length; _DV < _DW; _DV++) { //#17627
                    var _DY = $k[--$j]; //#17627
                    $k[$j++] = $f(_DY + $get(_DU, _DV)) * 40; //#17627
                } //#17627
                var _Da = (~~($k[--$j] / 40)) + 1; //#17628
                $k[$j++] = ~~(_Da / 256); //#17628
                $k[$j++] = _Da % 256; //#17628
            } //#17628
            $astore($a($counttomark())); //#17630
            var _Dd = $k[--$j]; //#17630
            var _De = $k[--$j]; //#17630
            $k[$j++] = _Dd; //#17630
            $k[$j++] = _De; //#17630
            $j--; //#17630
        }; //#17631
        $1.encCTX = function() {
            $1.p = 0; //#17634
            $1.ctxvals = $a(2500); //#17635
            $1.done = false; //#17636
            for (;;) { //#17715
                if ($1.i == $1.msglen) { //#17640
                    break; //#17640
                } //#17640
                var _Do = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)) !== undefined; //#17641
                if (!_Do) { //#17641
                    break; //#17641
                } //#17641
                if (($1.p % 3) == 0) { //#17710
                    if ($1.p > 0) { //#17655
                        $k[$j++] = 'newmode'; //#17644
                        $1.lookup(); //#17644
                        var _Dr = $k[--$j]; //#17644
                        $1[$k[--$j]] = _Dr; //#17644
                        if ($ne($1.newmode, $1.mode)) { //#17654
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#17646
                            $1.CTXvalstocws(); //#17646
                            $1.addtocws(); //#17646
                            $k[$j++] = $a([$1.unlcw]); //#17647
                            $1.addtocws(); //#17647
                            if ($1.newmode != $1.A) { //#17650
                                $k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lE, $1.lB]), $1.newmode)); //#17649
                                $1.addtocws(); //#17649
                            } //#17649
                            $1.mode = $1.newmode; //#17651
                            $1.done = true; //#17652
                            break; //#17653
                        } //#17653
                    } //#17653
                    if (($1.msglen - $1.i) <= 3) { //#17709
                        $1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 3)) * 2)); //#17657
                        $k[$j++] = Infinity; //#17663
                        var _EN = $geti($1.msg, $1.i, $1.msglen - $1.i); //#17659
                        for (var _EO = 0, _EP = _EN.length; _EO < _EP; _EO++) { //#17665
                            var _EQ = $get(_EN, _EO); //#17665
                            var _EU = $get($get($1.encvals, $1.mode), _EQ) !== undefined; //#17660
                            $k[$j++] = _EQ; //#17664
                            if (_EU) { //#17663
                                $aload($get($get($1.encvals, $1.mode), $k[--$j])); //#17661
                            } else { //#17663
                                $j--; //#17663
                                $k[$j++] = -1; //#17663
                                $k[$j++] = -1; //#17663
                                $k[$j++] = -1; //#17663
                                $k[$j++] = -1; //#17663
                            } //#17663
                        } //#17663
                        $1.remvals = $a(); //#17663
                        if (($1.remcws == 2) && ($1.remvals.length == 3)) { //#17677
                            $k[$j++] = Infinity; //#17671
                            $aload($geti($1.ctxvals, 0, $1.p)); //#17670
                            $aload($1.remvals); //#17671
                            var _Eh = $a(); //#17671
                            $k[$j++] = _Eh; //#17672
                            $1.CTXvalstocws(); //#17672
                            $1.addtocws(); //#17672
                            $1.mode = $1.A; //#17673
                            $1.i = $1.msglen; //#17674
                            $1.done = true; //#17675
                            break; //#17676
                        } //#17676
                        if ((($1.remcws == 2) && ($1.remvals.length == 2)) && ($1.mode != $1.X)) { //#17689
                            $k[$j++] = Infinity; //#17683
                            $aload($geti($1.ctxvals, 0, $1.p)); //#17681
                            $aload($1.remvals); //#17682
                            $aload($get($get($1.encvals, $1.mode), $1.sft1)); //#17683
                            var _Ex = $a(); //#17683
                            $k[$j++] = _Ex; //#17684
                            $1.CTXvalstocws(); //#17684
                            $1.addtocws(); //#17684
                            $1.mode = $1.A; //#17685
                            $1.i = $1.msglen; //#17686
                            $1.done = true; //#17687
                            break; //#17688
                        } //#17688
                        if (($1.remcws == 2) && ($1.remvals.length == 1)) { //#17699
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#17692
                            $1.CTXvalstocws(); //#17692
                            $1.addtocws(); //#17692
                            $k[$j++] = $a([$1.unlcw]); //#17693
                            $1.addtocws(); //#17693
                            $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#17694
                            $1.addtocws(); //#17694
                            $1.mode = $1.A; //#17695
                            $1.i = $1.msglen; //#17696
                            $1.done = true; //#17697
                            break; //#17698
                        } //#17698
                        if (($1.remcws == 1) && ($1.remvals.length == 1)) { //#17708
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#17702
                            $1.CTXvalstocws(); //#17702
                            $1.addtocws(); //#17702
                            $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#17703
                            $1.addtocws(); //#17703
                            $1.mode = $1.A; //#17704
                            $1.i = $1.msglen; //#17705
                            $1.done = true; //#17706
                            break; //#17707
                        } //#17707
                    } //#17707
                } //#17707
                var _FW = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)); //#17711
                $puti($1.ctxvals, $1.p, _FW); //#17712
                $1.p = _FW.length + $1.p; //#17713
                $1.i = $1.i + 1; //#17714
            } //#17714
            if (!$1.done) { //#17739
                for (;;) { //#17723
                    if (($1.p % 3) == 0) { //#17720
                        break; //#17720
                    } //#17720
                    $1.i = $1.i - 1; //#17721
                    $1.p = $1.p - $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)).length; //#17722
                } //#17722
                $k[$j++] = Infinity; //#17725
                $aload($geti($1.ctxvals, 0, $1.p)); //#17725
                var _Fp = $a(); //#17725
                $k[$j++] = _Fp; //#17726
                $1.CTXvalstocws(); //#17726
                $1.addtocws(); //#17726
                $k[$j++] = $a([$1.unlcw]); //#17727
                $1.addtocws(); //#17727
                $1.mode = $1.A; //#17728
                if (($1.i != $1.msglen) && $nt($get($1.isECI, $1.i))) { //#17738
                    if ($get($1.numD, $1.i) >= 2) { //#17736
                        var _G1 = $s(2); //#17732
                        $put(_G1, 0, $get($1.msg, $1.i)); //#17732
                        $put(_G1, 1, $get($1.msg, $1.i + 1)); //#17732
                        $k[$j++] = $get($1.Avals, _G1); //#17732
                        $1.addtocws(); //#17732
                        $1.i = $1.i + 2; //#17733
                    } else { //#17736
                        $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#17735
                        $1.addtocws(); //#17735
                        $1.i = $1.i + 1; //#17736
                    } //#17736
                } //#17736
            } //#17736
        }; //#17741
        $1.Evalstocws = function() {
            $1.in = $k[--$j]; //#17744
            $1.inlen = $1.in.length; //#17745
            $1.outlen = ~~(Math.ceil(($1.in.length / 4) * 3)); //#17746
            $k[$j++] = Infinity; //#17747
            $aload($1.in); //#17747
            $k[$j++] = 0; //#17747
            $k[$j++] = 0; //#17747
            $k[$j++] = 0; //#17747
            $1.in = $a(); //#17747
            $k[$j++] = Infinity; //#17748
            for (var _GO = 0, _GN = $1.inlen - 1; _GO <= _GN; _GO += 4) { //#17754
                var _GQ = $geti($1.in, _GO, 4); //#17750
                $k[$j++] = 0; //#17750
                for (var _GR = 0, _GS = _GQ.length; _GR < _GS; _GR++) { //#17750
                    var _GU = $k[--$j]; //#17750
                    $k[$j++] = $or(_GU, $get(_GQ, _GR)) << 6; //#17750
                } //#17750
                var _GW = $k[--$j] >>> 6; //#17751
                $k[$j++] = (_GW >>> 16) & 255; //#17753
                $k[$j++] = (_GW >>> 8) & 255; //#17753
                $k[$j++] = _GW & 255; //#17753
            } //#17753
            $astore($a($counttomark())); //#17755
            var _GZ = $k[--$j]; //#17755
            var _Ga = $k[--$j]; //#17755
            $k[$j++] = _GZ; //#17755
            $k[$j++] = _Ga; //#17755
            $j--; //#17755
            var _Gd = $geti($k[--$j], 0, $1.outlen); //#17756
            $k[$j++] = _Gd; //#17756
        }; //#17757
        $1.encE = function() {
            $1.p = 0; //#17760
            $1.edifactvals = $a(2100); //#17761
            for (;;) { //#17790
                if ($1.i == $1.msglen) { //#17765
                    break; //#17765
                } //#17765
                var _Gl = $get($1.Evals, $get($1.msg, $1.i)) !== undefined; //#17766
                if (!_Gl) { //#17766
                    break; //#17766
                } //#17766
                if (($1.p % 4) == 0) { //#17785
                    if (($1.msglen - $1.i) <= 2) { //#17783
                        $1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 4)) * 3)); //#17769
                        $k[$j++] = Infinity; //#17772
                        var _Gx = $geti($1.msg, $1.i, $1.msglen - $1.i); //#17771
                        for (var _Gy = 0, _Gz = _Gx.length; _Gy < _Gz; _Gy++) { //#17773
                            $aload($get($1.Avals, $get(_Gx, _Gy))); //#17772
                        } //#17772
                        $1.remvals = $a(); //#17772
                        if ((($1.remcws == 1) || ($1.remcws == 2)) && ($1.remvals.length <= $1.remcws)) { //#17782
                            $k[$j++] = $geti($1.edifactvals, 0, $1.p); //#17777
                            $1.Evalstocws(); //#17777
                            $1.addtocws(); //#17777
                            $k[$j++] = $1.remvals; //#17778
                            $1.addtocws(); //#17778
                            $1.mode = $1.A; //#17779
                            $1.i = $1.msglen; //#17780
                            break; //#17781
                        } //#17781
                    } //#17781
                    $1.lookup(); //#17784
                    if ($k[--$j] != $1.mode) { //#17784
                        break; //#17784
                    } //#17784
                } //#17784
                var _HK = $get($1.Evals, $get($1.msg, $1.i)); //#17786
                $puti($1.edifactvals, $1.p, _HK); //#17787
                $1.p = _HK.length + $1.p; //#17788
                $1.i = $1.i + 1; //#17789
            } //#17789
            if ($1.mode != $1.A) { //#17812
                $1.remcws = $f($get($1.numremcws, ($1.j + ((~~($1.p / 4)) * 3)) - 1) - 1); //#17794
                if (((($1.p % 4) != 0) || ($1.i != $1.msglen)) || ($1.remcws >= 3)) { //#17799
                    var _Hb = $get($1.Evals, $1.unl); //#17796
                    $puti($1.edifactvals, $1.p, _Hb); //#17797
                    $1.p = _Hb.length + $1.p; //#17798
                } //#17798
                $k[$j++] = $geti($1.edifactvals, 0, $1.p); //#17800
                $1.Evalstocws(); //#17800
                $1.addtocws(); //#17800
                $1.mode = $1.A; //#17801
                if (($1.i != $1.msglen) && $nt($get($1.isECI, $1.i))) { //#17811
                    if ($get($1.numD, $1.i) >= 2) { //#17809
                        var _Hr = $s(2); //#17805
                        $put(_Hr, 0, $get($1.msg, $1.i)); //#17805
                        $put(_Hr, 1, $get($1.msg, $1.i + 1)); //#17805
                        $k[$j++] = $get($1.Avals, _Hr); //#17805
                        $1.addtocws(); //#17805
                        $1.i = $1.i + 2; //#17806
                    } else { //#17809
                        $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#17808
                        $1.addtocws(); //#17808
                        $1.i = $1.i + 1; //#17809
                    } //#17809
                } //#17809
            } //#17809
        }; //#17814
        $1.encB = function() {
            $1.p = 0; //#17817
            $1.bvals = $a(1558); //#17817
            for (;;) { //#17823
                if ($1.i == $1.msglen) { //#17818
                    break; //#17818
                } //#17818
                $1.lookup(); //#17819
                if ($k[--$j] != $1.mode) { //#17819
                    break; //#17819
                } //#17819
                $put($1.bvals, $1.p, $get($1.msg, $1.i)); //#17820
                $1.p = $1.p + 1; //#17821
                $1.i = $1.i + 1; //#17822
            } //#17822
            $1.remcws = $f($get($1.numremcws, $1.j + $1.p) - 1); //#17824
            $k[$j++] = Infinity; //#17831
            if (($1.remcws == 0) && ($1.i == $1.msglen)) { //#17829
                $k[$j++] = 0; //#17827
            } else { //#17829
                if ($1.p < 250) { //#17829
                    $k[$j++] = $1.p; //#17829
                } else { //#17829
                    $k[$j++] = (~~($1.p / 250)) + 249; //#17829
                    $k[$j++] = $1.p % 250; //#17829
                } //#17829
            } //#17829
            $aload($geti($1.bvals, 0, $1.p)); //#17831
            $1.bvals = $a(); //#17831
            for (var _Ia = 0, _IZ = $1.bvals.length - 1; _Ia <= _IZ; _Ia += 1) { //#17838
                $1.p = _Ia; //#17834
                var _Ig = $f(((((($1.j + $1.p) + 1) * 149) % 255) + 1) + $get($1.bvals, $1.p)); //#17836
                $k[$j++] = _Ig; //#17836
                if (_Ig >= 256) { //#17836
                    var _Ih = $k[--$j]; //#17836
                    $k[$j++] = $f(_Ih - 256); //#17836
                } //#17836
                $put($1.bvals, $1.p, $k[--$j]); //#17837
            } //#17837
            $k[$j++] = $1.bvals; //#17839
            $1.addtocws(); //#17839
            $1.mode = $1.A; //#17840
        }; //#17841
        $1.cws = $a(1558); //#17844
        $1.mode = $1.A; //#17845
        $1.i = 0; //#17845
        $1.j = 0; //#17845
        for (;;) { //#17848
            if ($1.i >= $1.msglen) { //#17846
                break; //#17846
            } //#17846
            if ($1[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encE', 'encB']), $1.mode)]() === true) {
                break;
            } //#17847
        } //#17847
        $1.cws = $geti($1.cws, 0, $1.j); //#17849
    } //#17849
    $1.datlen = $1.cws.length; //#17854
    $1.remcws = $f($get($1.numremcws, $1.j - 1) - 1); //#17855
    if ($1.remcws > 0) { //#17864
        $k[$j++] = Infinity; //#17857
        $aload($1.cws); //#17857
        for (var _J5 = 0, _J6 = $1.remcws; _J5 < _J6; _J5++) { //#17857
            $k[$j++] = 129; //#17857
        } //#17857
        $1.cws = $a(); //#17857
        for (var _JC = $1.datlen + 1, _JB = $f($f($1.datlen + $1.remcws) - 1); _JC <= _JB; _JC += 1) { //#17863
            $1.i = _JC; //#17859
            var _JE = (((($1.i + 1) * 149) % 253) + 1) + 129; //#17861
            $k[$j++] = _JE; //#17861
            if (_JE > 254) { //#17861
                var _JF = $k[--$j]; //#17861
                $k[$j++] = $f(_JF - 254); //#17861
            } //#17861
            $put($1.cws, $1.i, $k[--$j]); //#17862
        } //#17862
    } //#17862
    var _JK = $get($1.options, 'debugcws') !== undefined; //#17866
    if (_JK) { //#17866
        $k[$j++] = 'bwipp.debugcws'; //#17866
        $k[$j++] = $1.cws; //#17866
        bwipp_raiseerror(); //#17866
    } //#17866
    $1.i = 0; //#17869
    for (;;) { //#17890
        $1.m = $get($1.metrics, $1.i); //#17870
        $1.rows = $get($1.m, 0); //#17871
        $1.cols = $get($1.m, 1); //#17872
        $1.regh = $get($1.m, 2); //#17873
        $1.regv = $get($1.m, 3); //#17874
        $1.rscw = $get($1.m, 4); //#17875
        $1.rsbl = $get($1.m, 5); //#17876
        $1.mrows = $f($1.rows - (2 * $1.regh)); //#17877
        $1.mcols = $f($1.cols - (2 * $1.regv)); //#17878
        $1.rrows = ~~($1.mrows / $1.regh); //#17879
        $1.rcols = ~~($1.mcols / $1.regv); //#17880
        $1.ncws = $f((~~(($1.mrows * $1.mcols) / 8)) - $1.rscw); //#17881
        $1.okay = true; //#17882
        if ($1.cws.length != $1.ncws) { //#17883
            $1.okay = false; //#17883
        } //#17883
        if (($1.urows != 0) && ($1.urows != $1.rows)) { //#17884
            $1.okay = false; //#17884
        } //#17884
        if (($1.ucols != 0) && ($1.ucols != $1.cols)) { //#17885
            $1.okay = false; //#17885
        } //#17885
        if ($eq($1.format, "square") && $ne($1.rows, $1.cols)) { //#17886
            $1.okay = false; //#17886
        } //#17886
        if ($eq($1.format, "rectangle") && $eq($1.rows, $1.cols)) { //#17887
            $1.okay = false; //#17887
        } //#17887
        if ($1.okay) { //#17888
            break; //#17888
        } //#17888
        $1.i = $1.i + 1; //#17889
    } //#17889
    $1.cwbs = $a($1.rsbl); //#17893
    $1.ecbs = $a($1.rsbl); //#17894
    for (var _K8 = 0, _K7 = $f($1.rsbl - 1); _K8 <= _K7; _K8 += 1) { //#17909
        $1.i = _K8; //#17896
        if ($1.cws.length != 1558) { //#17900
            $1.cwbsize = ~~($1.cws.length / $1.rsbl); //#17898
        } else { //#17900
            if ($1.i <= 7) { //#17900
                $1.cwbsize = 156; //#17900
            } else { //#17900
                $1.cwbsize = 155; //#17900
            } //#17900
        } //#17900
        $1.cwb = $a($1.cwbsize); //#17902
        for (var _KH = 0, _KG = $1.cwbsize - 1; _KH <= _KG; _KH += 1) { //#17906
            $1.j = _KH; //#17904
            $put($1.cwb, $1.j, $get($1.cws, $f(($1.j * $1.rsbl) + $1.i))); //#17905
        } //#17905
        $put($1.cwbs, $1.i, $1.cwb); //#17907
        $k[$j++] = $1.ecbs; //#17908
        $k[$j++] = $1.i; //#17908
        $k[$j++] = Infinity; //#17908
        for (var _KW = 0, _KX = ~~($1.rscw / $1.rsbl); _KW < _KX; _KW++) { //#17908
            $k[$j++] = 0; //#17908
        } //#17908
        var _KY = $a(); //#17908
        var _KZ = $k[--$j]; //#17908
        $put($k[--$j], _KZ, _KY); //#17908
    } //#17908
    $k[$j++] = Infinity; //#17912
    $k[$j++] = 1; //#17912
    for (var _Kb = 0, _Kc = 255; _Kb < _Kc; _Kb++) { //#17912
        var _Kd = $k[--$j]; //#17912
        var _Ke = _Kd * 2; //#17912
        $k[$j++] = _Kd; //#17912
        $k[$j++] = _Ke; //#17912
        if (_Ke >= 256) { //#17912
            var _Kf = $k[--$j]; //#17912
            $k[$j++] = _Kf ^ 301; //#17912
        } //#17912
    } //#17912
    $1.rsalog = $a(); //#17912
    $1.rslog = $a(256); //#17913
    for (var _Ki = 1; _Ki <= 255; _Ki += 1) { //#17914
        $put($1.rslog, $get($1.rsalog, _Ki), _Ki); //#17914
    } //#17914
    $1.rsprod = function() {
        var _Km = $k[--$j]; //#17918
        var _Kn = $k[--$j]; //#17918
        $k[$j++] = _Kn; //#17922
        $k[$j++] = _Km; //#17922
        if ((_Km != 0) && (_Kn != 0)) { //#17921
            var _Kq = $get($1.rslog, $k[--$j]); //#17919
            var _Kv = $get($1.rsalog, $f(_Kq + $get($1.rslog, $k[--$j])) % 255); //#17919
            $k[$j++] = _Kv; //#17919
        } else { //#17921
            $j -= 2; //#17921
            $k[$j++] = 0; //#17921
        } //#17921
    }; //#17923
    $k[$j++] = Infinity; //#17926
    $k[$j++] = 1; //#17926
    for (var _Ky = 0, _Kz = ~~($1.rscw / $1.rsbl); _Ky < _Kz; _Ky++) { //#17926
        $k[$j++] = 0; //#17926
    } //#17926
    $1.coeffs = $a(); //#17926
    for (var _L4 = 1, _L3 = ~~($1.rscw / $1.rsbl); _L4 <= _L3; _L4 += 1) { //#17935
        $1.i = _L4; //#17928
        $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#17929
        for (var _LB = $1.i - 1; _LB >= 1; _LB -= 1) { //#17933
            $1.j = _LB; //#17931
            $k[$j++] = $1.coeffs; //#17932
            $k[$j++] = $1.j; //#17932
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#17932
            $k[$j++] = $get($1.coeffs, $1.j); //#17932
            $k[$j++] = $get($1.rsalog, $1.i); //#17932
            $1.rsprod(); //#17932
            var _LN = $k[--$j]; //#17932
            var _LO = $k[--$j]; //#17932
            var _LP = $k[--$j]; //#17932
            $put($k[--$j], _LP, $xo(_LO, _LN)); //#17932
        } //#17932
        $k[$j++] = $1.coeffs; //#17934
        $k[$j++] = 0; //#17934
        $k[$j++] = $get($1.coeffs, 0); //#17934
        $k[$j++] = $get($1.rsalog, $1.i); //#17934
        $1.rsprod(); //#17934
        var _LX = $k[--$j]; //#17934
        var _LY = $k[--$j]; //#17934
        $put($k[--$j], _LY, _LX); //#17934
    } //#17934
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#17936
    for (var _Lf = 0, _Le = $1.cwbs.length - 1; _Lf <= _Le; _Lf += 1) { //#17952
        $1.i = _Lf; //#17940
        $1.cwb = $get($1.cwbs, $1.i); //#17941
        $1.ecb = $get($1.ecbs, $1.i); //#17942
        for (var _Lo = 0, _Ln = $1.cwb.length - 1; _Lo <= _Ln; _Lo += 1) { //#17951
            $1.t = $xo($get($1.cwb, _Lo), $get($1.ecb, 0)); //#17944
            for (var _Lu = $1.ecb.length - 1; _Lu >= 0; _Lu -= 1) { //#17950
                $1.j = _Lu; //#17946
                $1.p = ($1.ecb.length - $1.j) - 1; //#17947
                $k[$j++] = $1.ecb; //#17948
                $k[$j++] = $1.p; //#17948
                $k[$j++] = $1.t; //#17948
                $k[$j++] = $get($1.coeffs, $1.j); //#17948
                $1.rsprod(); //#17948
                var _M3 = $k[--$j]; //#17948
                var _M4 = $k[--$j]; //#17948
                $put($k[--$j], _M4, _M3); //#17948
                if ($1.j > 0) { //#17949
                    $put($1.ecb, $1.p, $xo($get($1.ecb, $1.p + 1), $get($1.ecb, $1.p))); //#17949
                } //#17949
            } //#17949
        } //#17949
    } //#17949
    if ($1.ncws == 1558) { //#17957
        $k[$j++] = Infinity; //#17956
        var _MH = $geti($1.ecbs, 8, 2); //#17956
        for (var _MI = 0, _MJ = _MH.length; _MI < _MJ; _MI++) { //#17956
            $k[$j++] = $get(_MH, _MI); //#17956
        } //#17956
        var _MM = $geti($1.ecbs, 0, 8); //#17956
        for (var _MN = 0, _MO = _MM.length; _MN < _MO; _MN++) { //#17956
            $k[$j++] = $get(_MM, _MN); //#17956
        } //#17956
        $1.ecbs = $a(); //#17956
    } //#17956
    $k[$j++] = Infinity; //#17960
    var _MR = $1.cws; //#17960
    for (var _MS = 0, _MT = _MR.length; _MS < _MT; _MS++) { //#17960
        $k[$j++] = $get(_MR, _MS); //#17960
    } //#17960
    for (var _MW = 0, _MX = $1.rscw; _MW < _MX; _MW++) { //#17960
        $k[$j++] = 0; //#17960
    } //#17960
    $1.cws = $a(); //#17960
    for (var _Mb = 0, _Ma = $f($1.rscw - 1); _Mb <= _Ma; _Mb += 1) { //#17964
        $1.i = _Mb; //#17962
        $put($1.cws, $f($1.ncws + $1.i), $get($get($1.ecbs, $1.i % $1.rsbl), ~~($1.i / $1.rsbl))); //#17963
    } //#17963
    $1.module = function() {
        var _Mm = $k[--$j]; //#17969
        var _Mn = $k[--$j]; //#17969
        var _Mo = $k[--$j]; //#17969
        var _Mr = $strcpy($s(8), "00000000"); //#17970
        var _Mt = $cvrs($s(8), $k[--$j], 2); //#17970
        $puti(_Mr, 8 - _Mt.length, _Mt); //#17971
        $k[$j++] = _Mo; //#17972
        $k[$j++] = _Mn; //#17972
        $k[$j++] = _Mm; //#17972
        $k[$j++] = _Mr; //#17972
        for (var _Mu = 7; _Mu >= 0; _Mu -= 1) { //#17972
            var _Mv = $k[--$j]; //#17972
            $k[$j++] = $f($get(_Mv, _Mu) - 48); //#17972
            $k[$j++] = _Mv; //#17972
        } //#17972
        $j--; //#17972
        var _Mx = $k[--$j]; //#17973
        var _My = $k[--$j]; //#17973
        var _Mz = $k[--$j]; //#17973
        var _N0 = $k[--$j]; //#17973
        var _N1 = $k[--$j]; //#17973
        var _N2 = $k[--$j]; //#17973
        var _N3 = $k[--$j]; //#17973
        var _N4 = $k[--$j]; //#17973
        var _N5 = $k[--$j]; //#17973
        var _N6 = $k[--$j]; //#17973
        var _N7 = $k[--$j]; //#17973
        $k[$j++] = _N4; //#17990
        $k[$j++] = _N3; //#17990
        $k[$j++] = _N2; //#17990
        $k[$j++] = _N1; //#17990
        $k[$j++] = _N0; //#17990
        $k[$j++] = _Mz; //#17990
        $k[$j++] = _My; //#17990
        $k[$j++] = _Mx; //#17990
        $k[$j++] = _N7; //#17990
        $k[$j++] = _N6; //#17990
        $forall(_N5, function() { //#17990
            if ($k[--$j]() === true) {
                return true;
            } //#17976
            var _N9 = $k[--$j]; //#17977
            var _NA = $k[--$j]; //#17977
            $k[$j++] = _NA; //#17980
            $k[$j++] = _N9; //#17980
            if (_NA < 0) { //#17980
                var _NB = $k[--$j]; //#17978
                var _NC = $k[--$j]; //#17978
                $k[$j++] = $f(_NC + $1.mrows); //#17979
                $k[$j++] = $f(_NB + ($f(4 - ($f($1.mrows + 4) % 8)))); //#17979
            } //#17979
            var _NF = $k[--$j]; //#17981
            $k[$j++] = _NF; //#17984
            if (_NF < 0) { //#17984
                var _NH = $k[--$j]; //#17982
                var _NI = $k[--$j]; //#17982
                $k[$j++] = $f(_NI + ($f(4 - ($f($1.mcols + 4) % 8)))); //#17983
                $k[$j++] = $f(_NH + $1.mcols); //#17983
            } //#17983
            var _NK = $k[--$j]; //#17985
            var _NL = $k[--$j]; //#17985
            $k[$j++] = _NL; //#17987
            $k[$j++] = _NK; //#17987
            if (_NL >= $1.mrows) { //#17987
                var _NN = $k[--$j]; //#17986
                var _NO = $k[--$j]; //#17986
                $k[$j++] = $f(_NO - $1.mrows); //#17986
                $k[$j++] = _NN; //#17986
            } //#17986
            var _NQ = $k[--$j]; //#17988
            var _NR = $k[--$j]; //#17988
            var _NU = $k[--$j]; //#17989
            var _NV = $k[--$j]; //#17989
            $put($1.mmat, $f(_NQ + (_NR * $1.mcols)), $k[--$j]); //#17989
            $k[$j++] = _NV; //#17989
            $k[$j++] = _NU; //#17989
        }); //#17989
    }; //#17991
    var _Nn = $a([function() {
        var _NX = $k[--$j]; //#17995
        var _NY = $k[--$j]; //#17995
        $k[$j++] = _NY; //#17995
        $k[$j++] = _NX; //#17995
        $k[$j++] = $f(_NY - 2); //#17995
        $k[$j++] = $f(_NX - 2); //#17995
    }, function() {
        var _NZ = $k[--$j]; //#17995
        var _Na = $k[--$j]; //#17995
        $k[$j++] = _Na; //#17995
        $k[$j++] = _NZ; //#17995
        $k[$j++] = $f(_Na - 2); //#17995
        $k[$j++] = $f(_NZ - 1); //#17995
    }, function() {
        var _Nb = $k[--$j]; //#17996
        var _Nc = $k[--$j]; //#17996
        $k[$j++] = _Nc; //#17996
        $k[$j++] = _Nb; //#17996
        $k[$j++] = $f(_Nc - 1); //#17996
        $k[$j++] = $f(_Nb - 2); //#17996
    }, function() {
        var _Nd = $k[--$j]; //#17996
        var _Ne = $k[--$j]; //#17996
        $k[$j++] = _Ne; //#17996
        $k[$j++] = _Nd; //#17996
        $k[$j++] = $f(_Ne - 1); //#17996
        $k[$j++] = $f(_Nd - 1); //#17996
    }, function() {
        var _Nf = $k[--$j]; //#17997
        var _Ng = $k[--$j]; //#17997
        $k[$j++] = _Ng; //#17997
        $k[$j++] = _Nf; //#17997
        $k[$j++] = $f(_Ng - 1); //#17997
        $k[$j++] = _Nf; //#17997
    }, function() {
        var _Nh = $k[--$j]; //#17997
        var _Ni = $k[--$j]; //#17997
        $k[$j++] = _Ni; //#17997
        $k[$j++] = _Nh; //#17997
        $k[$j++] = _Ni; //#17997
        $k[$j++] = $f(_Nh - 2); //#17997
    }, function() {
        var _Nj = $k[--$j]; //#17998
        var _Nk = $k[--$j]; //#17998
        $k[$j++] = _Nk; //#17998
        $k[$j++] = _Nj; //#17998
        $k[$j++] = _Nk; //#17998
        $k[$j++] = $f(_Nj - 1); //#17998
    }, function() {
        var _Nl = $k[--$j]; //#17998
        var _Nm = $k[--$j]; //#17998
        $k[$j++] = _Nm; //#17998
        $k[$j++] = _Nl; //#17998
        $k[$j++] = _Nm; //#17998
        $k[$j++] = _Nl; //#17998
    }]); //#17998
    $1.dmn = _Nn; //#17999
    var _Nw = $a([function() {
        $k[$j++] = $f($1.mrows - 1); //#18002
        $k[$j++] = 0; //#18002
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18002
        $k[$j++] = 1; //#18002
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18003
        $k[$j++] = 2; //#18003
    }, function() {
        $k[$j++] = 0; //#18003
        $k[$j++] = $f($1.mcols - 2); //#18003
    }, function() {
        $k[$j++] = 0; //#18004
        $k[$j++] = $f($1.mcols - 1); //#18004
    }, function() {
        $k[$j++] = 1; //#18004
        $k[$j++] = $f($1.mcols - 1); //#18004
    }, function() {
        $k[$j++] = 2; //#18005
        $k[$j++] = $f($1.mcols - 1); //#18005
    }, function() {
        $k[$j++] = 3; //#18005
        $k[$j++] = $f($1.mcols - 1); //#18005
    }]); //#18005
    $1.dmc1 = _Nw; //#18006
    var _O5 = $a([function() {
        $k[$j++] = $f($1.mrows - 3); //#18009
        $k[$j++] = 0; //#18009
    }, function() {
        $k[$j++] = $f($1.mrows - 2); //#18009
        $k[$j++] = 0; //#18009
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18010
        $k[$j++] = 0; //#18010
    }, function() {
        $k[$j++] = 0; //#18010
        $k[$j++] = $f($1.mcols - 4); //#18010
    }, function() {
        $k[$j++] = 0; //#18011
        $k[$j++] = $f($1.mcols - 3); //#18011
    }, function() {
        $k[$j++] = 0; //#18011
        $k[$j++] = $f($1.mcols - 2); //#18011
    }, function() {
        $k[$j++] = 0; //#18012
        $k[$j++] = $f($1.mcols - 1); //#18012
    }, function() {
        $k[$j++] = 1; //#18012
        $k[$j++] = $f($1.mcols - 1); //#18012
    }]); //#18012
    $1.dmc2 = _O5; //#18013
    var _OE = $a([function() {
        $k[$j++] = $f($1.mrows - 3); //#18016
        $k[$j++] = 0; //#18016
    }, function() {
        $k[$j++] = $f($1.mrows - 2); //#18016
        $k[$j++] = 0; //#18016
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18017
        $k[$j++] = 0; //#18017
    }, function() {
        $k[$j++] = 0; //#18017
        $k[$j++] = $f($1.mcols - 2); //#18017
    }, function() {
        $k[$j++] = 0; //#18018
        $k[$j++] = $f($1.mcols - 1); //#18018
    }, function() {
        $k[$j++] = 1; //#18018
        $k[$j++] = $f($1.mcols - 1); //#18018
    }, function() {
        $k[$j++] = 2; //#18019
        $k[$j++] = $f($1.mcols - 1); //#18019
    }, function() {
        $k[$j++] = 3; //#18019
        $k[$j++] = $f($1.mcols - 1); //#18019
    }]); //#18019
    $1.dmc3 = _OE; //#18020
    var _OO = $a([function() {
        $k[$j++] = $f($1.mrows - 1); //#18023
        $k[$j++] = 0; //#18023
    }, function() {
        $k[$j++] = $f($1.mrows - 1); //#18023
        $k[$j++] = $f($1.mcols - 1); //#18023
    }, function() {
        $k[$j++] = 0; //#18024
        $k[$j++] = $f($1.mcols - 3); //#18024
    }, function() {
        $k[$j++] = 0; //#18024
        $k[$j++] = $f($1.mcols - 2); //#18024
    }, function() {
        $k[$j++] = 0; //#18025
        $k[$j++] = $f($1.mcols - 1); //#18025
    }, function() {
        $k[$j++] = 1; //#18025
        $k[$j++] = $f($1.mcols - 3); //#18025
    }, function() {
        $k[$j++] = 1; //#18026
        $k[$j++] = $f($1.mcols - 2); //#18026
    }, function() {
        $k[$j++] = 1; //#18026
        $k[$j++] = $f($1.mcols - 1); //#18026
    }]); //#18026
    $1.dmc4 = _OO; //#18027
    $k[$j++] = Infinity; //#18029
    for (var _OR = 0, _OS = $1.mrows * $1.mcols; _OR < _OS; _OR++) { //#18029
        $k[$j++] = -1; //#18029
    } //#18029
    $1.mmat = $a(); //#18029
    for (var _OV = $1.cws.length - 1; _OV >= 0; _OV -= 1) { //#18030
        $k[$j++] = $get($1.cws, _OV); //#18030
    } //#18030
    $k[$j++] = 4; //#18070
    $k[$j++] = 0; //#18070
    for (;;) { //#18070
        var _OY = $k[--$j]; //#18033
        var _OZ = $k[--$j]; //#18033
        $k[$j++] = _OZ; //#18035
        $k[$j++] = _OY; //#18035
        if ((_OY == 0) && (_OZ == $1.mrows)) { //#18035
            $k[$j++] = $1.dmc1; //#18034
            $1.module(); //#18034
        } //#18034
        var _Oc = $k[--$j]; //#18036
        var _Od = $k[--$j]; //#18036
        $k[$j++] = _Od; //#18038
        $k[$j++] = _Oc; //#18038
        if (((_Oc == 0) && (_Od == $f($1.mrows - 2))) && (($1.mcols % 4) != 0)) { //#18038
            $k[$j++] = $1.dmc2; //#18037
            $1.module(); //#18037
        } //#18037
        var _Oh = $k[--$j]; //#18039
        var _Oi = $k[--$j]; //#18039
        $k[$j++] = _Oi; //#18041
        $k[$j++] = _Oh; //#18041
        if (((_Oh == 0) && (_Oi == $f($1.mrows - 2))) && (($1.mcols % 8) == 4)) { //#18041
            $k[$j++] = $1.dmc3; //#18040
            $1.module(); //#18040
        } //#18040
        var _Om = $k[--$j]; //#18042
        var _On = $k[--$j]; //#18042
        $k[$j++] = _On; //#18044
        $k[$j++] = _Om; //#18044
        if (((_Om == 2) && (_On == $f($1.mrows + 4))) && (($1.mcols % 8) == 0)) { //#18044
            $k[$j++] = $1.dmc4; //#18043
            $1.module(); //#18043
        } //#18043
        for (;;) { //#18054
            var _Or = $k[--$j]; //#18047
            var _Os = $k[--$j]; //#18047
            $k[$j++] = _Os; //#18051
            $k[$j++] = _Or; //#18051
            if ((_Or >= 0) && (_Os < $1.mrows)) { //#18051
                var _Ou = $k[--$j]; //#18048
                var _Ov = $k[--$j]; //#18048
                $k[$j++] = _Ov; //#18050
                $k[$j++] = _Ou; //#18050
                if ($get($1.mmat, $f(_Ou + (_Ov * $1.mcols))) == -1) { //#18050
                    $k[$j++] = $1.dmn; //#18049
                    $1.module(); //#18049
                } //#18049
            } //#18049
            var _P0 = $k[--$j]; //#18052
            var _P1 = $k[--$j]; //#18052
            $k[$j++] = $f(_P1 - 2); //#18053
            $k[$j++] = $f(_P0 + 2); //#18053
            if (!(($f(_P0 + 2) < $1.mcols) && ($f(_P1 - 2) >= 0))) { //#18053
                break; //#18053
            } //#18053
        } //#18053
        var _P3 = $k[--$j]; //#18055
        var _P4 = $k[--$j]; //#18055
        $k[$j++] = $f(_P4 + 1); //#18065
        $k[$j++] = $f(_P3 + 3); //#18065
        for (;;) { //#18065
            var _P5 = $k[--$j]; //#18058
            var _P6 = $k[--$j]; //#18058
            $k[$j++] = _P6; //#18062
            $k[$j++] = _P5; //#18062
            if ((_P5 < $1.mcols) && (_P6 >= 0)) { //#18062
                var _P8 = $k[--$j]; //#18059
                var _P9 = $k[--$j]; //#18059
                $k[$j++] = _P9; //#18061
                $k[$j++] = _P8; //#18061
                if ($get($1.mmat, $f(_P8 + (_P9 * $1.mcols))) == -1) { //#18061
                    $k[$j++] = $1.dmn; //#18060
                    $1.module(); //#18060
                } //#18060
            } //#18060
            var _PE = $k[--$j]; //#18063
            var _PF = $k[--$j]; //#18063
            $k[$j++] = $f(_PF + 2); //#18064
            $k[$j++] = $f(_PE - 2); //#18064
            if (!(($f(_PE - 2) >= 0) && ($f(_PF + 2) < $1.mrows))) { //#18064
                break; //#18064
            } //#18064
        } //#18064
        var _PH = $k[--$j]; //#18066
        var _PI = $k[--$j]; //#18066
        $k[$j++] = $f(_PI + 3); //#18068
        $k[$j++] = $f(_PH + 1); //#18068
        if (!(($f(_PH + 1) < $1.mcols) || ($f(_PI + 3) < $1.mrows))) { //#18068
            $j -= 2; //#18068
            break; //#18068
        } //#18068
    } //#18068
    if ($get($1.mmat, $f(($1.mrows * $1.mcols) - 1)) == -1) { //#18076
        $puti($1.mmat, $f(($1.mrows * $f($1.mcols - 1)) - 2), $a([1, 0])); //#18074
        $puti($1.mmat, $f(($1.mrows * $1.mcols) - 2), $a([0, 1])); //#18075
    } //#18075
    $1.pixs = $a($1.rows * $1.cols); //#18079
    $1.cwpos = 0; //#18080
    for (var _Pc = 0, _Pb = $f($1.rows - 1); _Pc <= _Pb; _Pc += 1) { //#18096
        $1.i = _Pc; //#18082
        if (($1.i % ($1.rrows + 2)) == 0) { //#18083
            $k[$j++] = $1.pixs; //#18083
            $k[$j++] = $1.i * $1.cols; //#18083
            $k[$j++] = Infinity; //#18083
            for (var _Pj = 0, _Pk = ~~($1.cols / 2); _Pj < _Pk; _Pj++) { //#18083
                $k[$j++] = 1; //#18083
                $k[$j++] = 0; //#18083
            } //#18083
            var _Pl = $a(); //#18083
            var _Pm = $k[--$j]; //#18083
            $puti($k[--$j], _Pm, _Pl); //#18083
        } //#18083
        if (($1.i % ($1.rrows + 2)) == ($1.rrows + 1)) { //#18084
            $k[$j++] = $1.pixs; //#18084
            $k[$j++] = $1.i * $1.cols; //#18084
            $k[$j++] = Infinity; //#18084
            for (var _Pv = 0, _Pw = $1.cols; _Pv < _Pw; _Pv++) { //#18084
                $k[$j++] = 1; //#18084
            } //#18084
            var _Px = $a(); //#18084
            var _Py = $k[--$j]; //#18084
            $puti($k[--$j], _Py, _Px); //#18084
        } //#18084
        if ((($1.i % ($1.rrows + 2)) != 0) && (($1.i % ($1.rrows + 2)) != ($1.rrows + 1))) { //#18095
            for (var _Q7 = 0, _Q6 = $f($1.cols - 1); _Q7 <= _Q6; _Q7 += 1) { //#18094
                $1.j = _Q7; //#18087
                if (($1.j % ($1.rcols + 2)) == 0) { //#18088
                    $put($1.pixs, $f(($1.i * $1.cols) + $1.j), 1); //#18088
                } //#18088
                if (($1.j % ($1.rcols + 2)) == ($1.rcols + 1)) { //#18089
                    $put($1.pixs, $f(($1.i * $1.cols) + $1.j), $1.i % 2); //#18089
                } //#18089
                if ((($1.j % ($1.rcols + 2)) != 0) && (($1.j % ($1.rcols + 2)) != ($1.rcols + 1))) { //#18093
                    $put($1.pixs, $f(($1.i * $1.cols) + $1.j), $get($1.mmat, $1.cwpos)); //#18091
                    $1.cwpos = $1.cwpos + 1; //#18092
                } //#18092
            } //#18092
        } //#18092
    } //#18092
    var _Qf = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.cols],
        ["pixy", $1.rows],
        ["height", ($1.rows * 2) / 72],
        ["width", ($1.cols * 2) / 72],
        ["opt", $1.options]
    ]); //#18106
    $k[$j++] = _Qf; //#18109
    if (!$1.dontdraw) { //#18109
        bwipp_renmatrix(); //#18109
    } //#18109
}

function bwipp_datamatrixrectangular() {
    var $1 = {}; //#18139
    $1.options = $k[--$j]; //#18141
    $1.barcode = $k[--$j]; //#18142
    $1.dontdraw = false; //#18144
    $forall($1.options, function() { //#18155
        var _3 = $k[--$j]; //#18155
        $1[$k[--$j]] = _3; //#18155
    }); //#18155
    $put($1.options, "dontdraw", true); //#18158
    $put($1.options, "format", "rectangle"); //#18159
    $k[$j++] = 'args'; //#18161
    $k[$j++] = $1.barcode; //#18161
    $k[$j++] = $1.options; //#18161
    bwipp_datamatrix(); //#18161
    var _9 = $k[--$j]; //#18161
    $1[$k[--$j]] = _9; //#18161
    $put($1.args, "opt", $1.options); //#18163
    $k[$j++] = $1.args; //#18166
    if (!$1.dontdraw) { //#18166
        bwipp_renmatrix(); //#18166
    } //#18166
}

function bwipp_datamatrixrectangularextension() {
    var $1 = {}; //#18196
    $1.options = $k[--$j]; //#18198
    $1.barcode = $k[--$j]; //#18199
    $1.dontdraw = false; //#18201
    $1.dmre = false; //#18203
    $1.dindmre = false; //#18204
    $forall($1.options, function() { //#18215
        var _3 = $k[--$j]; //#18215
        $1[$k[--$j]] = _3; //#18215
    }); //#18215
    $put($1.options, "dontdraw", true); //#18218
    $put($1.options, "format", "rectangle"); //#18219
    if (!($1.dindmre || $1.dmre)) { //#18225
        $put($1.options, "dmre", true); //#18222
    } else { //#18225
        $put($1.options, "dmre", $1.dmre); //#18224
        $put($1.options, "dindmre", $1.dindmre); //#18225
    } //#18225
    $k[$j++] = 'args'; //#18228
    $k[$j++] = $1.barcode; //#18228
    $k[$j++] = $1.options; //#18228
    bwipp_datamatrix(); //#18228
    var _G = $k[--$j]; //#18228
    $1[$k[--$j]] = _G; //#18228
    $put($1.args, "opt", $1.options); //#18230
    $k[$j++] = $1.args; //#18233
    if (!$1.dontdraw) { //#18233
        bwipp_renmatrix(); //#18233
    } //#18233
}

function bwipp_mailmark() {
    var $1 = {}; //#18264
    $1.options = $k[--$j]; //#18266
    $1.barcode = $k[--$j]; //#18267
    $1.type = "unset"; //#18269
    $1.parse = false; //#18270
    $1.dontdraw = false; //#18271
    $forall($1.options, function() { //#18282
        var _3 = $k[--$j]; //#18282
        $1[$k[--$j]] = _3; //#18282
    }); //#18282
    var _6 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#18288
    $1.fncvals = _6; //#18289
    $k[$j++] = 'barcode'; //#18290
    $k[$j++] = $1.barcode; //#18290
    $k[$j++] = $1.fncvals; //#18290
    bwipp_parseinput(); //#18290
    var _9 = $k[--$j]; //#18290
    $1[$k[--$j]] = _9; //#18290
    $1.barlen = $1.barcode.length; //#18291
    delete $1.options["parse"]; //#18292
    var _D = new Map([
        ["7", "24x24"],
        ["9", "32x32"],
        ["29", "16x48"]
    ]); //#18298
    $1.version = $get(_D, $1['type']); //#18299
    var _G = new Map([
        ["7", "square"],
        ["9", "square"],
        ["29", "rectangle"]
    ]); //#18304
    $1.format = $get(_G, $1['type']); //#18305
    if ($1.barcode.length < 45) { //#18310
        $k[$j++] = 'bwipp.mailmarkBadLength'; //#18309
        $k[$j++] = "Royal Mail Mailmark must contain at least 45 characters of Mailmark formatted data, including any required space padding"; //#18309
        bwipp_raiseerror(); //#18309
    } //#18309
    if ($ne($geti($1.barcode, 0, 4), "JGB ")) { //#18313
        $k[$j++] = 'bwipp.mailmarkBadIndicator'; //#18312
        $k[$j++] = "Royal Mail Mailmark must begin with JGB<space> identifier"; //#18312
        bwipp_raiseerror(); //#18312
    } //#18312
    $put($1.options, "dontdraw", true); //#18316
    $put($1.options, "version", $1.version); //#18317
    $put($1.options, "format", $1.format); //#18318
    $put($1.options, "mailmark", true); //#18319
    $k[$j++] = 'args'; //#18320
    $k[$j++] = $1.barcode; //#18320
    $k[$j++] = $1.options; //#18320
    bwipp_datamatrix(); //#18320
    var _U = $k[--$j]; //#18320
    $1[$k[--$j]] = _U; //#18320
    $put($1.args, "opt", $1.options); //#18322
    $k[$j++] = $1.args; //#18325
    if (!$1.dontdraw) { //#18325
        bwipp_renmatrix(); //#18325
    } //#18325
}

function bwipp_qrcode() {
    var $1 = {}; //#18355
    $1.options = $k[--$j]; //#18357
    $1.barcode = $k[--$j]; //#18358
    $1.dontdraw = false; //#18360
    $1.format = "unset"; //#18361
    $1.version = "unset"; //#18362
    $1.eclevel = "unset"; //#18363
    $1.parse = false; //#18364
    $1.parsefnc = false; //#18365
    $1.mask = -1; //#18366
    $forall($1.options, function() { //#18377
        var _3 = $k[--$j]; //#18377
        $1[$k[--$j]] = _3; //#18377
    }); //#18377
    $1.mask = ~~$1.mask; //#18379
    if ($ne($1.version, "unset")) { //#18390
        if ($eq($1.format, "unset")) { //#18388
            $k[$j++] = "full"; //#18385
            if ($eq($geti($1.version, 0, 1), "M")) { //#18385
                $j--; //#18385
                $k[$j++] = "micro"; //#18385
            } //#18385
            if ($eq($geti($1.version, 0, 1), "R")) { //#18386
                $j--; //#18386
                $k[$j++] = "rmqr"; //#18386
            } //#18386
            $1.format = $k[--$j]; //#18387
        } //#18387
    } else { //#18390
        if ($eq($1.format, "unset")) { //#18390
            $1.format = "full"; //#18390
        } //#18390
    } //#18390
    if ($eq($1.eclevel, "unset")) { //#18394
        $k[$j++] = 'eclevel'; //#18394
        if ($ne($1.format, "micro")) { //#18394
            $k[$j++] = "M"; //#18394
        } else { //#18394
            $k[$j++] = "L"; //#18394
        } //#18394
        var _G = $k[--$j]; //#18394
        $1[$k[--$j]] = _G; //#18394
    } //#18394
    $1.fn1 = -1; //#18397
    var _L = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["eci", true],
        ["FNC1", $1.fn1]
    ]); //#18402
    $1.fncvals = _L; //#18403
    $k[$j++] = 'msg'; //#18404
    $k[$j++] = $1.barcode; //#18404
    $k[$j++] = $1.fncvals; //#18404
    bwipp_parseinput(); //#18404
    var _O = $k[--$j]; //#18404
    $1[$k[--$j]] = _O; //#18404
    $1.msglen = $1.msg.length; //#18405
    $1.fnc1first = false; //#18408
    if ($1.msglen > 0) { //#18415
        if ($get($1.msg, 0) == $1.fn1) { //#18414
            $1.fnc1first = true; //#18411
            $k[$j++] = Infinity; //#18412
            var _X = $geti($1.msg, 1, $1.msglen - 1); //#18412
            for (var _Y = 0, _Z = _X.length; _Y < _Z; _Y++) { //#18412
                var _a = $get(_X, _Y); //#18412
                $k[$j++] = _a; //#18412
                if (_a == 37) { //#18412
                    var _b = $k[--$j]; //#18412
                    $k[$j++] = _b; //#18412
                    $k[$j++] = _b; //#18412
                } //#18412
            } //#18412
            $1.msg = $a(); //#18412
            $1.msglen = $1.msg.length; //#18413
        } //#18413
    } //#18413
    var _e = $a(['v1to9', 'v10to26', 'v27to40', 'vM1', 'vM2', 'vM3', 'vM4', 'vR7x43', 'vR7x59', 'vR7x77', 'vR7x99', 'vR7x139', 'vR9x43', 'vR9x59', 'vR9x77', 'vR9x99', 'vR9x139', 'vR11x27', 'vR11x43', 'vR11x59', 'vR11x77', 'vR11x99', 'vR11x139', 'vR13x27', 'vR13x43', 'vR13x59', 'vR13x77', 'vR13x99', 'vR13x139', 'vR15x43', 'vR15x59', 'vR15x77', 'vR15x99', 'vR15x139', 'vR17x43', 'vR17x59', 'vR17x77', 'vR17x99', 'vR17x139']); //#18426
    $k[$j++] = 0; //#18427
    for (var _f = 0, _g = _e.length; _f < _g; _f++) { //#18427
        var _i = $k[--$j]; //#18427
        $1[$get(_e, _f)] = _i; //#18427
        $k[$j++] = $f(_i + 1); //#18427
    } //#18427
    $j--; //#18427
    $1.N = 0; //#18433
    $1.A = 1; //#18433
    $1.B = 2; //#18433
    $1.K = 3; //#18433
    $1.E = 4; //#18433
    $k[$j++] = Infinity; //#18438
    $k[$j++] = Infinity; //#18437
    for (var _j = 48; _j <= 57; _j += 1) { //#18437
        $k[$j++] = _j; //#18437
    } //#18437
    var _k = $a(); //#18437
    for (var _l = 0, _m = _k.length; _l < _m; _l++) { //#18438
        $k[$j++] = $get(_k, _l); //#18438
        $k[$j++] = -1; //#18438
    } //#18438
    $1.Nexcl = $d(); //#18439
    $k[$j++] = Infinity; //#18446
    $k[$j++] = Infinity; //#18445
    $k[$j++] = 32; //#18444
    $k[$j++] = 36; //#18444
    $k[$j++] = 37; //#18444
    $k[$j++] = 42; //#18444
    $k[$j++] = 43; //#18444
    $k[$j++] = 45; //#18444
    $k[$j++] = 46; //#18444
    $k[$j++] = 47; //#18444
    $k[$j++] = 58; //#18444
    for (var _p = 65; _p <= 90; _p += 1) { //#18444
        $k[$j++] = _p; //#18444
    } //#18444
    $k[$j++] = $1.fn1; //#18445
    var _r = $a(); //#18445
    for (var _s = 0, _t = _r.length; _s < _t; _s++) { //#18446
        $k[$j++] = $get(_r, _s); //#18446
        $k[$j++] = -1; //#18446
    } //#18446
    $1.Aexcl = $d(); //#18447
    $k[$j++] = Infinity; //#18455
    $k[$j++] = Infinity; //#18454
    for (var _w = 129; _w <= 159; _w += 1) { //#18453
        $k[$j++] = _w; //#18453
    } //#18453
    for (var _x = 224; _x <= 235; _x += 1) { //#18454
        $k[$j++] = _x; //#18454
    } //#18454
    var _y = $a(); //#18454
    for (var _z = 0, _10 = _y.length; _z < _10; _z++) { //#18455
        $k[$j++] = $get(_y, _z); //#18455
        $k[$j++] = -1; //#18455
    } //#18455
    $1.Kexcl = $d(); //#18456
    $k[$j++] = Infinity; //#18468
    $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#18469
    $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#18469
    $k[$j++] = $a(["0001", "0010", "0100", "1000", "0111"]); //#18469
    $k[$j++] = $a(["", -1, -1, -1, -1]); //#18469
    $k[$j++] = $a(["0", "1", -1, -1, -1]); //#18469
    $k[$j++] = $a(["00", "01", "10", "11", -1]); //#18469
    $k[$j++] = $a(["000", "001", "010", "011", -1]); //#18469
    for (var _1A = 0, _1B = 32; _1A < _1B; _1A++) { //#18469
        $k[$j++] = $a(["001", "010", "011", "100", "111"]); //#18468
    } //#18468
    $1.mids = $a(); //#18468
    $1.cclens = $a([$a([10, 9, 8, 8]), $a([12, 11, 16, 10]), $a([14, 13, 16, 12]), $a([3, -1, -1, -1]), $a([4, 3, -1, -1]), $a([5, 4, 4, 3]), $a([6, 5, 5, 4]), $a([4, 3, 3, 2]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([5, 5, 4, 3]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([4, 4, 3, 2]), $a([6, 5, 5, 4]), $a([7, 6, 5, 5]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([5, 5, 4, 3]), $a([6, 6, 5, 5]), $a([7, 6, 6, 5]), $a([7, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 7]), $a([7, 6, 6, 5]), $a([7, 7, 6, 5]), $a([8, 7, 7, 6]), $a([8, 7, 7, 6]), $a([9, 8, 7, 7]), $a([7, 6, 6, 5]), $a([8, 7, 6, 6]), $a([8, 7, 7, 6]), $a([8, 8, 7, 6]), $a([9, 8, 8, 7])]); //#18512
    $k[$j++] = Infinity; //#18523
    for (var _1s = 0, _1t = 3; _1s < _1t; _1s++) { //#18517
        $k[$j++] = 4; //#18516
    } //#18516
    $k[$j++] = 3; //#18524
    $k[$j++] = 5; //#18524
    $k[$j++] = 7; //#18524
    $k[$j++] = 9; //#18524
    for (var _1u = 0, _1v = 32; _1u < _1v; _1u++) { //#18524
        $k[$j++] = 3; //#18523
    } //#18523
    $1.termlens = $a(); //#18523
    $1.tobin = function() {
        var _1y = $s($k[--$j]); //#18529
        $k[$j++] = _1y; //#18529
        for (var _20 = 0, _1z = _1y.length - 1; _20 <= _1z; _20 += 1) { //#18529
            var _21 = $k[--$j]; //#18529
            $put(_21, _20, 48); //#18529
            $k[$j++] = _21; //#18529
        } //#18529
        var _22 = $k[--$j]; //#18530
        var _25 = $cvrs($s(_22.length), $k[--$j], 2); //#18530
        $puti(_22, _22.length - _25.length, _25); //#18530
        $k[$j++] = _22; //#18530
    }; //#18531
    $1.charmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; //#18534
    $1.charvals = new Map; //#18535
    for (var _26 = 0; _26 <= 44; _26 += 1) { //#18536
        $put($1.charvals, $get($1.charmap, _26), _26); //#18536
    } //#18536
    $1.encA = function() {
        $1.in = $k[--$j]; //#18539
        if ($1.fnc1first) { //#18542
            $k[$j++] = Infinity; //#18541
            $forall($1.in, function() { //#18541
                var _2D = $k[--$j]; //#18541
                $k[$j++] = _2D; //#18541
                if (_2D == $1.fn1) { //#18541
                    $j--; //#18541
                    $k[$j++] = 37; //#18541
                } //#18541
            }); //#18541
            $1.in = $a(); //#18541
        } //#18541
        $1.out = $s((~~(($1.in.length * 11) / 2)) + 1); //#18543
        $1.k = 0; //#18544
        $1.m = 0; //#18544
        for (;;) { //#18555
            if ($1.k == $1.in.length) { //#18545
                break; //#18545
            } //#18545
            if ($1.k < ($1.in.length - 1)) { //#18551
                $k[$j++] = $f(($get($1.charvals, $get($1.in, $1.k)) * 45) + $get($1.charvals, $get($1.in, $1.k + 1))); //#18547
                $k[$j++] = 11; //#18547
                $1.tobin(); //#18547
                $1.k = $1.k + 2; //#18548
            } else { //#18551
                $k[$j++] = $get($1.charvals, $get($1.in, $1.k)); //#18550
                $k[$j++] = 6; //#18550
                $1.tobin(); //#18550
                $1.k = $1.k + 1; //#18551
            } //#18551
            var _2d = $k[--$j]; //#18553
            $puti($1.out, $1.m, _2d); //#18553
            $1.m = _2d.length + $1.m; //#18554
        } //#18554
        $k[$j++] = $geti($1.out, 0, $1.m); //#18556
    }; //#18557
    $1.encN = function() {
        $1.in = $k[--$j]; //#18560
        $1.out = $s((~~(($1.in.length * 10) / 3)) + 1); //#18561
        $1.k = 0; //#18562
        $1.m = 0; //#18562
        for (;;) { //#18578
            if ($1.k == $1.in.length) { //#18563
                break; //#18563
            } //#18563
            if ($1.k < ($1.in.length - 2)) { //#18573
                var _2t = $geti($1.in, $1.k, 3); //#18565
                $k[$j++] = 0; //#18565
                for (var _2u = 0, _2v = _2t.length; _2u < _2v; _2u++) { //#18565
                    var _2x = $k[--$j]; //#18565
                    $k[$j++] = $f($get(_2t, _2u) + ($f((_2x * 10) - 48))); //#18565
                } //#18565
                $k[$j++] = 10; //#18565
                $1.tobin(); //#18565
                $1.k = $1.k + 3; //#18566
            } else { //#18573
                if ($1.k == ($1.in.length - 2)) { //#18573
                    var _33 = $geti($1.in, $1.k, 2); //#18569
                    $k[$j++] = 0; //#18569
                    for (var _34 = 0, _35 = _33.length; _34 < _35; _34++) { //#18569
                        var _37 = $k[--$j]; //#18569
                        $k[$j++] = $f($get(_33, _34) + ($f((_37 * 10) - 48))); //#18569
                    } //#18569
                    $k[$j++] = 7; //#18569
                    $1.tobin(); //#18569
                    $1.k = $1.k + 2; //#18570
                } else { //#18573
                    var _3B = $geti($1.in, $1.k, 1); //#18572
                    $k[$j++] = 0; //#18572
                    for (var _3C = 0, _3D = _3B.length; _3C < _3D; _3C++) { //#18572
                        var _3F = $k[--$j]; //#18572
                        $k[$j++] = $f($get(_3B, _3C) + ($f((_3F * 10) - 48))); //#18572
                    } //#18572
                    $k[$j++] = 4; //#18572
                    $1.tobin(); //#18572
                    $1.k = $1.k + 1; //#18573
                } //#18573
            } //#18573
            var _3H = $k[--$j]; //#18576
            $puti($1.out, $1.m, _3H); //#18576
            $1.m = _3H.length + $1.m; //#18577
        } //#18577
        $k[$j++] = $geti($1.out, 0, $1.m); //#18579
    }; //#18580
    $1.encB = function() {
        $1.in = $k[--$j]; //#18583
        if ($1.fnc1first) { //#18586
            $k[$j++] = Infinity; //#18585
            $forall($1.in, function() { //#18585
                var _3R = $k[--$j]; //#18585
                $k[$j++] = _3R; //#18585
                if (_3R == $1.fn1) { //#18585
                    $j--; //#18585
                    $k[$j++] = 29; //#18585
                } //#18585
            }); //#18585
            $1.in = $a(); //#18585
        } //#18585
        $1.out = $s($1.in.length * 8); //#18587
        for (var _3Y = 0, _3X = $1.in.length - 1; _3Y <= _3X; _3Y += 1) { //#18592
            $1.k = _3Y; //#18589
            $k[$j++] = $cvi($get($1.in, $1.k)); //#18590
            $k[$j++] = 8; //#18590
            $1.tobin(); //#18590
            $puti($1.out, $1.k * 8, $k[--$j]); //#18591
        } //#18591
        $k[$j++] = $1.out; //#18593
    }; //#18594
    $1.encK = function() {
        $1.in = $k[--$j]; //#18597
        $1.out = $s((~~($1.in.length / 2)) * 13); //#18598
        $1.k = 0; //#18599
        $1.m = 0; //#18599
        for (;;) { //#18607
            if ($1.k == $1.in.length) { //#18600
                break; //#18600
            } //#18600
            var _3r = $f(($get($1.in, $1.k) * 256) + $get($1.in, $1.k + 1)); //#18602
            $k[$j++] = _3r; //#18602
            if (_3r < 57408) { //#18602
                $k[$j++] = 33088; //#18602
            } else { //#18602
                $k[$j++] = 49472; //#18602
            } //#18602
            var _3s = $k[--$j]; //#18602
            var _3u = $f($k[--$j] - _3s); //#18603
            $k[$j++] = $f(((_3u >>> 8) * 192) + (_3u & 255)); //#18604
            $k[$j++] = 13; //#18604
            $1.tobin(); //#18604
            var _3v = $k[--$j]; //#18604
            $puti($1.out, $1.m, _3v); //#18604
            $1.m = _3v.length + $1.m; //#18605
            $1.k = $1.k + 2; //#18606
        } //#18606
        $k[$j++] = $1.out; //#18608
    }; //#18609
    $1.encE = function() {
        var _43 = $f((-$get($k[--$j], 0)) - 1000000); //#18613
        $k[$j++] = _43; //#18619
        if (_43 <= 127) { //#18618
            $k[$j++] = 8; //#18614
            $1.tobin(); //#18614
        } else { //#18618
            var _44 = $k[--$j]; //#18615
            $k[$j++] = _44; //#18619
            if (_44 <= 16383) { //#18618
                var _45 = $k[--$j]; //#18616
                $k[$j++] = $f(_45 + 32768); //#18616
                $k[$j++] = 16; //#18616
                $1.tobin(); //#18616
            } else { //#18618
                var _46 = $k[--$j]; //#18618
                $k[$j++] = $f(_46 + 12582912); //#18618
                $k[$j++] = 24; //#18618
                $1.tobin(); //#18618
            } //#18618
        } //#18618
    }; //#18620
    $1.encfuncs = $a(['encN', 'encA', 'encB', 'encK', 'encE']); //#18622
    $1.addtobits = function() {
        var _48 = $k[--$j]; //#18625
        $puti($1.bits, $1.j, _48); //#18625
        $1.j = _48.length + $1.j; //#18626
    }; //#18627
    $k[$j++] = Infinity; //#18629
    for (var _4D = 0, _4E = $1.msglen; _4D < _4E; _4D++) { //#18629
        $k[$j++] = 0; //#18629
    } //#18629
    $k[$j++] = 0; //#18629
    $1.numNs = $a(); //#18629
    $k[$j++] = Infinity; //#18630
    for (var _4H = 0, _4I = $1.msglen; _4H < _4I; _4H++) { //#18630
        $k[$j++] = 0; //#18630
    } //#18630
    $k[$j++] = 0; //#18630
    $1.numAs = $a(); //#18630
    $k[$j++] = Infinity; //#18631
    for (var _4L = 0, _4M = $1.msglen; _4L < _4M; _4L++) { //#18631
        $k[$j++] = 0; //#18631
    } //#18631
    $k[$j++] = 0; //#18631
    $1.numBs = $a(); //#18631
    $k[$j++] = Infinity; //#18632
    for (var _4P = 0, _4Q = $1.msglen; _4P < _4Q; _4P++) { //#18632
        $k[$j++] = 0; //#18632
    } //#18632
    $k[$j++] = 0; //#18632
    $1.numKs = $a(); //#18632
    $k[$j++] = Infinity; //#18633
    for (var _4T = 0, _4U = $1.msglen; _4T < _4U; _4T++) { //#18633
        $k[$j++] = 0; //#18633
    } //#18633
    $k[$j++] = 9999; //#18633
    $1.nextNs = $a(); //#18633
    $k[$j++] = Infinity; //#18634
    for (var _4X = 0, _4Y = $1.msglen; _4X < _4Y; _4X++) { //#18634
        $k[$j++] = 0; //#18634
    } //#18634
    $k[$j++] = 9999; //#18634
    $1.nextBs = $a(); //#18634
    $k[$j++] = Infinity; //#18635
    for (var _4b = 0, _4c = $1.msglen; _4b < _4c; _4b++) { //#18635
        $k[$j++] = 0; //#18635
    } //#18635
    $k[$j++] = 9999; //#18635
    $1.nextAs = $a(); //#18635
    $k[$j++] = Infinity; //#18636
    for (var _4f = 0, _4g = $1.msglen; _4f < _4g; _4f++) { //#18636
        $k[$j++] = 0; //#18636
    } //#18636
    $k[$j++] = 9999; //#18636
    $1.nextKs = $a(); //#18636
    $1.isECI = $a($1.msglen); //#18637
    for (var _4l = $1.msglen - 1; _4l >= 0; _4l -= 1) { //#18665
        $1.i = _4l; //#18639
        $1.barchar = $get($1.msg, $1.i); //#18640
        var _4r = $get($1.Kexcl, $1.barchar) !== undefined; //#18641
        if (_4r) { //#18650
            $k[$j++] = 'sjis'; //#18642
            if (($1.i + 1) < $1.msglen) { //#18642
                $k[$j++] = $f(($1.barchar * 256) + $get($1.msg, $1.i + 1)); //#18642
            } else { //#18642
                $k[$j++] = 0; //#18642
            } //#18642
            var _4y = $k[--$j]; //#18642
            $1[$k[--$j]] = _4y; //#18642
            if ((($1.sjis >= 33088) && ($1.sjis <= 40956)) || (($1.sjis >= 57408) && ($1.sjis <= 60351))) { //#18647
                $put($1.nextKs, $1.i, 0); //#18644
                $put($1.numKs, $1.i, $f($get($1.numKs, $1.i + 2) + 1)); //#18645
            } else { //#18647
                $put($1.nextKs, $1.i, $f($get($1.nextKs, $1.i + 1) + 1)); //#18647
            } //#18647
        } else { //#18650
            $put($1.nextKs, $1.i, $f($get($1.nextKs, $1.i + 1) + 1)); //#18650
        } //#18650
        var _5N = $get($1.Nexcl, $1.barchar) !== undefined; //#18652
        if (_5N) { //#18656
            $put($1.nextNs, $1.i, 0); //#18653
            $put($1.numNs, $1.i, $f($get($1.numNs, $1.i + 1) + 1)); //#18654
        } else { //#18656
            $put($1.nextNs, $1.i, $f($get($1.nextNs, $1.i + 1) + 1)); //#18656
        } //#18656
        var _5c = $get($1.Aexcl, $1.barchar) !== undefined; //#18658
        if (_5c) { //#18662
            $put($1.nextAs, $1.i, 0); //#18659
            $put($1.numAs, $1.i, $f($get($1.numAs, $1.i + 1) + 1)); //#18660
        } else { //#18662
            $put($1.nextAs, $1.i, $f($get($1.nextAs, $1.i + 1) + 1)); //#18662
        } //#18662
        $put($1.isECI, $1.i, $1.barchar <= -1000000); //#18664
    } //#18664
    for (var _5u = 0, _5t = $1.msglen - 1; _5u <= _5t; _5u += 1) { //#18672
        $1.i = _5u; //#18667
        if ($get($1.numKs, $1.i) > 0) { //#18671
            $put($1.numKs, $1.i + 1, 0); //#18669
            $put($1.nextKs, $1.i + 1, $f($get($1.nextKs, $1.i + 1) + 1)); //#18670
        } //#18670
    } //#18670
    for (var _66 = $1.msglen - 1; _66 >= 0; _66 -= 1) { //#18681
        $1.i = _66; //#18674
        if ((($f($get($1.numNs, $1.i) + $f($get($1.numAs, $1.i) + $get($1.numKs, $1.i)))) == 0) && $nt($get($1.isECI, $1.i))) { //#18679
            $put($1.nextBs, $1.i, 0); //#18676
            $put($1.numBs, $1.i, $f($get($1.numBs, $1.i + 1) + 1)); //#18677
        } else { //#18679
            $put($1.nextBs, $1.i, $f($get($1.nextBs, $1.i + 1) + 1)); //#18679
        } //#18679
    } //#18679
    $1.KbeforeB = function() {
        var _6Y = $get($k[--$j], $1.ver); //#18683
        $k[$j++] = $ge($1.numK, _6Y) && ($get($1.nextBs, $f(($1.numK * 2) + $1.i)) == 0); //#18683
    }; //#18683
    $1.KbeforeA = function() {
        var _6g = $get($k[--$j], $1.ver); //#18684
        $k[$j++] = $ge($1.numK, _6g) && ($get($1.nextAs, $f(($1.numK * 2) + $1.i)) == 0); //#18684
    }; //#18684
    $1.KbeforeN = function() {
        var _6o = $get($k[--$j], $1.ver); //#18685
        $k[$j++] = $ge($1.numK, _6o) && ($get($1.nextNs, $f(($1.numK * 2) + $1.i)) == 0); //#18685
    }; //#18685
    $1.KbeforeE = function() {
        var _6w = $get($k[--$j], $1.ver); //#18686
        $k[$j++] = $ge($1.numK, _6w) && (($f(($1.numK * 2) + $1.i)) == $1.msglen); //#18686
    }; //#18686
    $1.AbeforeK = function() {
        var _73 = $get($k[--$j], $1.ver); //#18687
        $k[$j++] = $ge($1.numA, _73) && ($get($1.nextKs, $f($1.numA + $1.i)) == 0); //#18687
    }; //#18687
    $1.AbeforeB = function() {
        var _7B = $get($k[--$j], $1.ver); //#18688
        $k[$j++] = $ge($1.numA, _7B) && ($get($1.nextBs, $f($1.numA + $1.i)) == 0); //#18688
    }; //#18688
    $1.AbeforeN = function() {
        var _7J = $get($k[--$j], $1.ver); //#18689
        $k[$j++] = $ge($1.numA, _7J) && ($get($1.nextNs, $f($1.numA + $1.i)) == 0); //#18689
    }; //#18689
    $1.AbeforeE = function() {
        var _7R = $get($k[--$j], $1.ver); //#18690
        $k[$j++] = $ge($1.numA, _7R) && ($f($1.numA + $1.i) == $1.msglen); //#18690
    }; //#18690
    $1.NbeforeK = function() {
        var _7Y = $get($k[--$j], $1.ver); //#18691
        $k[$j++] = $ge($1.numN, _7Y) && ($get($1.nextKs, $f($1.numN + $1.i)) == 0); //#18691
    }; //#18691
    $1.NbeforeB = function() {
        var _7g = $get($k[--$j], $1.ver); //#18692
        $k[$j++] = $ge($1.numN, _7g) && ($get($1.nextBs, $f($1.numN + $1.i)) == 0); //#18692
    }; //#18692
    $1.NbeforeA = function() {
        var _7o = $get($k[--$j], $1.ver); //#18693
        $k[$j++] = $ge($1.numN, _7o) && ($get($1.nextAs, $f($1.numN + $1.i)) == 0); //#18693
    }; //#18693
    $1.NbeforeE = function() {
        var _7w = $get($k[--$j], $1.ver); //#18694
        $k[$j++] = $ge($1.numN, _7w) && ($f($1.numN + $1.i) == $1.msglen); //#18694
    }; //#18694
    if ($ne($1.version, "unset")) { //#18725
        $k[$j++] = Infinity; //#18720
        for (var _81 = 0; _81 <= 9; _81 += 1) { //#18707
            $k[$j++] = $cvrs($s(2), _81, 10); //#18707
            $k[$j++] = $1.v1to9; //#18707
        } //#18707
        for (var _85 = 10; _85 <= 26; _85 += 1) { //#18708
            $k[$j++] = $cvrs($s(2), _85, 10); //#18708
            $k[$j++] = $1.v10to26; //#18708
        } //#18708
        for (var _89 = 27; _89 <= 40; _89 += 1) { //#18709
            $k[$j++] = $cvrs($s(2), _89, 10); //#18709
            $k[$j++] = $1.v27to40; //#18709
        } //#18709
        $k[$j++] = "M1"; //#18720
        $k[$j++] = $1.vM1; //#18720
        $k[$j++] = "M2"; //#18720
        $k[$j++] = $1.vM2; //#18720
        $k[$j++] = "M3"; //#18720
        $k[$j++] = $1.vM3; //#18720
        $k[$j++] = "M4"; //#18720
        $k[$j++] = $1.vM4; //#18720
        $k[$j++] = "R7x43"; //#18720
        $k[$j++] = $1.vR7x43; //#18720
        $k[$j++] = "R7x59"; //#18720
        $k[$j++] = $1.vR7x59; //#18720
        $k[$j++] = "R7x77"; //#18720
        $k[$j++] = $1.vR7x77; //#18720
        $k[$j++] = "R7x99"; //#18720
        $k[$j++] = $1.vR7x99; //#18720
        $k[$j++] = "R7x139"; //#18720
        $k[$j++] = $1.vR7x139; //#18720
        $k[$j++] = "R9x43"; //#18720
        $k[$j++] = $1.vR9x43; //#18720
        $k[$j++] = "R9x59"; //#18720
        $k[$j++] = $1.vR9x59; //#18720
        $k[$j++] = "R9x77"; //#18720
        $k[$j++] = $1.vR9x77; //#18720
        $k[$j++] = "R9x99"; //#18720
        $k[$j++] = $1.vR9x99; //#18720
        $k[$j++] = "R9x139"; //#18720
        $k[$j++] = $1.vR9x139; //#18720
        $k[$j++] = "R11x27"; //#18720
        $k[$j++] = $1.vR11x27; //#18720
        $k[$j++] = "R11x43"; //#18720
        $k[$j++] = $1.vR11x43; //#18720
        $k[$j++] = "R11x59"; //#18720
        $k[$j++] = $1.vR11x59; //#18720
        $k[$j++] = "R11x77"; //#18720
        $k[$j++] = $1.vR11x77; //#18720
        $k[$j++] = "R11x99"; //#18720
        $k[$j++] = $1.vR11x99; //#18720
        $k[$j++] = "R11x139"; //#18720
        $k[$j++] = $1.vR11x139; //#18720
        $k[$j++] = "R13x27"; //#18720
        $k[$j++] = $1.vR13x27; //#18720
        $k[$j++] = "R13x43"; //#18720
        $k[$j++] = $1.vR13x43; //#18720
        $k[$j++] = "R13x59"; //#18720
        $k[$j++] = $1.vR13x59; //#18720
        $k[$j++] = "R13x77"; //#18720
        $k[$j++] = $1.vR13x77; //#18720
        $k[$j++] = "R13x99"; //#18720
        $k[$j++] = $1.vR13x99; //#18720
        $k[$j++] = "R13x139"; //#18720
        $k[$j++] = $1.vR13x139; //#18720
        $k[$j++] = "R15x43"; //#18720
        $k[$j++] = $1.vR15x43; //#18720
        $k[$j++] = "R15x59"; //#18720
        $k[$j++] = $1.vR15x59; //#18720
        $k[$j++] = "R15x77"; //#18720
        $k[$j++] = $1.vR15x77; //#18720
        $k[$j++] = "R15x99"; //#18720
        $k[$j++] = $1.vR15x99; //#18720
        $k[$j++] = "R15x139"; //#18720
        $k[$j++] = $1.vR15x139; //#18720
        $k[$j++] = "R17x43"; //#18720
        $k[$j++] = $1.vR17x43; //#18720
        $k[$j++] = "R17x59"; //#18720
        $k[$j++] = $1.vR17x59; //#18720
        $k[$j++] = "R17x77"; //#18720
        $k[$j++] = $1.vR17x77; //#18720
        $k[$j++] = "R17x99"; //#18720
        $k[$j++] = $1.vR17x99; //#18720
        $k[$j++] = "R17x139"; //#18720
        $k[$j++] = $1.vR17x139; //#18720
        var _8p = $get($d(), $1.version); //#18721
        $k[$j++] = 'verset'; //#18721
        $k[$j++] = _8p; //#18721
        $k[$j++] = Infinity; //#18721
        var _8q = $k[--$j]; //#18721
        var _8r = $k[--$j]; //#18721
        $k[$j++] = _8q; //#18721
        $k[$j++] = _8r; //#18721
        var _8s = $a(); //#18721
        $1[$k[--$j]] = _8s; //#18721
    } else { //#18725
        if ($eq($1.format, "full")) { //#18724
            $1.verset = $a([$1.v1to9, $1.v10to26, $1.v27to40]); //#18724
        } //#18724
        if ($eq($1.format, "micro")) { //#18725
            $1.verset = $a([$1.vM1, $1.vM2, $1.vM3, $1.vM4]); //#18725
        } //#18725
    } //#18725
    $k[$j++] = Infinity; //#18730
    for (var _95 = 0, _96 = 39; _95 < _96; _95++) { //#18730
        $k[$j++] = -1; //#18730
    } //#18730
    $1.msgbits = $a(); //#18730
    $1.e = 10000; //#18731
    $1.mode0forceKB = $a([1, 1, 1, $1.e, $1.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#18736
    $1.mode0forceA = $a([1, 1, 1, $1.e, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); //#18737
    $1.mode0NbeforeB = $a([4, 4, 5, $1.e, $1.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#18739
    $1.modeBKbeforeB = $a([9, 12, 13, $1.e, $1.e, 4, 6, 4, 5, 6, 6, 6, 5, 6, 6, 6, 7, 4, 6, 6, 6, 7, 7, 5, 6, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 7, 7, 7, 8]); //#18741
    $1.modeBKbeforeA = $a([8, 10, 11, $1.e, $1.e, 4, 5, 4, 5, 5, 6, 6, 5, 5, 6, 6, 6, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 7]); //#18742
    $1.modeBKbeforeN = $a([8, 9, 11, $1.e, $1.e, 3, 5, 3, 4, 5, 5, 5, 4, 5, 5, 5, 6, 3, 5, 5, 5, 6, 6, 4, 5, 5, 6, 6, 6, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7]); //#18743
    $1.modeBKbeforeE = $a([5, 5, 6, $1.e, $1.e, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4]); //#18744
    $1.modeBAbeforeK = $a([11, 12, 14, $1.e, $1.e, 5, 7, 5, 6, 7, 8, 8, 6, 7, 8, 8, 8, 6, 7, 8, 8, 8, 8, 6, 8, 8, 8, 8, 9, 8, 8, 8, 8, 9, 8, 8, 8, 9, 9]); //#18746
    $1.modeBAbeforeB = $a([11, 15, 16, $1.e, $1.e, 6, 7, 6, 7, 7, 8, 8, 7, 7, 8, 8, 8, 6, 7, 8, 8, 8, 9, 7, 8, 8, 8, 9, 9, 8, 8, 9, 9, 9, 8, 8, 9, 9, 10]); //#18747
    $1.modeBAbeforeN = $a([12, 13, 15, $1.e, $1.e, 6, 8, 6, 7, 8, 8, 8, 7, 8, 8, 8, 9, 6, 8, 8, 8, 9, 9, 7, 8, 8, 9, 9, 10, 8, 9, 9, 9, 10, 8, 9, 9, 10, 10]); //#18748
    $1.modeBAbeforeE = $a([6, 7, 8, $1.e, $1.e, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5]); //#18749
    $1.modeBNbeforeK = $a([6, 7, 8, $1.e, $1.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]); //#18751
    $1.modeBNbeforeB = $a([6, 8, 9, $1.e, $1.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 3, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]); //#18752
    $1.modeBNbeforeA = $a([6, 7, 8, $1.e, $1.e, 3, 4, 3, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6]); //#18753
    $1.modeBNbeforeE = $a([3, 4, 4, $1.e, $1.e, 2, 3, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]); //#18754
    $1.modeANbeforeA = $a([13, 15, 17, $1.e, 5, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 11, 7, 9, 9, 9, 11, 11, 8, 9, 9, 10, 11, 11, 9, 10, 11, 11, 11, 9, 11, 11, 11, 11]); //#18756
    $1.modeANbeforeB = $a([13, 17, 18, $1.e, $1.e, 7, 9, 7, 8, 9, 9, 9, 8, 9, 9, 9, 10, 7, 9, 9, 9, 10, 11, 8, 9, 9, 9, 11, 11, 9, 9, 11, 11, 11, 9, 10, 11, 11, 11]); //#18757
    $1.modeANbeforeE = $a([7, 8, 9, $1.e, 3, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6]); //#18758
    var _9x = $1.verset; //#18760
    for (var _9y = 0, _9z = _9x.length; _9y < _9z; _9y++) { //#18893
        $1.ver = $get(_9x, _9y); //#18761
        $1.mode = -1; //#18764
        $1.seq = $a([]); //#18764
        $1.i = 0; //#18764
        for (;;) { //#18862
            if ($1.i >= $1.msglen) { //#18765
                break; //#18765
            } //#18765
            $1.numK = $get($1.numKs, $1.i); //#18766
            $1.numB = $get($1.numBs, $1.i); //#18767
            $1.numA = $get($1.numAs, $1.i); //#18768
            $1.numN = $get($1.numNs, $1.i); //#18769
            $1.eci = $get($1.isECI, $1.i); //#18770
            if ($eq($1.ver, $1.vM1) && ($1.numA >= 1)) { //#18771
                $1.seq = -1; //#18771
                break; //#18771
            } //#18771
            if ($eq($1.ver, $1.vM1) && ($1.numB >= 1)) { //#18772
                $1.seq = -1; //#18772
                break; //#18772
            } //#18772
            if ($eq($1.ver, $1.vM1) && ($1.numK >= 1)) { //#18773
                $1.seq = -1; //#18773
                break; //#18773
            } //#18773
            if ($eq($1.ver, $1.vM1) && $1.eci) { //#18774
                $1.seq = -1; //#18774
                break; //#18774
            } //#18774
            if ($eq($1.ver, $1.vM2) && ($1.numB >= 1)) { //#18775
                $1.seq = -1; //#18775
                break; //#18775
            } //#18775
            if ($eq($1.ver, $1.vM2) && ($1.numK >= 1)) { //#18776
                $1.seq = -1; //#18776
                break; //#18776
            } //#18776
            if ($eq($1.ver, $1.vM2) && $1.eci) { //#18777
                $1.seq = -1; //#18777
                break; //#18777
            } //#18777
            if ($eq($1.ver, $1.vM3) && $1.eci) { //#18778
                $1.seq = -1; //#18778
                break; //#18778
            } //#18778
            if ($eq($1.ver, $1.vM4) && $1.eci) { //#18779
                $1.seq = -1; //#18779
                break; //#18779
            } //#18779
            for (;;) { //#18842
                if ($1.eci) { //#18783
                    $k[$j++] = $1.E; //#18782
                    break; //#18782
                } //#18782
                if ($1.mode == -1) { //#18803
                    $k[$j++] = $1.mode0forceKB; //#18785
                    $1.KbeforeA(); //#18785
                    if ($k[--$j]) { //#18785
                        $k[$j++] = $1.K; //#18785
                        break; //#18785
                    } //#18785
                    $k[$j++] = $1.mode0forceKB; //#18786
                    $1.KbeforeN(); //#18786
                    if ($k[--$j]) { //#18786
                        $k[$j++] = $1.K; //#18786
                        break; //#18786
                    } //#18786
                    $k[$j++] = $1.modeBKbeforeE; //#18787
                    $1.KbeforeB(); //#18787
                    if ($k[--$j]) { //#18787
                        $k[$j++] = $1.K; //#18787
                        break; //#18787
                    } //#18787
                    $k[$j++] = $1.mode0forceKB; //#18788
                    $1.KbeforeE(); //#18788
                    if ($k[--$j]) { //#18788
                        $k[$j++] = $1.K; //#18788
                        break; //#18788
                    } //#18788
                    if ($1.numK >= 1) { //#18789
                        $k[$j++] = $1.B; //#18789
                        break; //#18789
                    } //#18789
                    $k[$j++] = $1.modeBAbeforeE; //#18790
                    $1.AbeforeK(); //#18790
                    if ($k[--$j]) { //#18790
                        $k[$j++] = $1.A; //#18790
                        break; //#18790
                    } //#18790
                    $k[$j++] = $1.modeBAbeforeE; //#18791
                    $1.AbeforeB(); //#18791
                    if ($k[--$j]) { //#18791
                        $k[$j++] = $1.A; //#18791
                        break; //#18791
                    } //#18791
                    $k[$j++] = $1.mode0forceA; //#18792
                    $1.AbeforeN(); //#18792
                    if ($k[--$j]) { //#18792
                        $k[$j++] = $1.A; //#18792
                        break; //#18792
                    } //#18792
                    $k[$j++] = $1.mode0forceA; //#18793
                    $1.AbeforeE(); //#18793
                    if ($k[--$j]) { //#18793
                        $k[$j++] = $1.A; //#18793
                        break; //#18793
                    } //#18793
                    if ($1.numA >= 1) { //#18796
                        var _BG = $ne($1.ver, $1.vM2) ? $1.B : $1.A; //#18795
                        $k[$j++] = _BG; //#18795
                        break; //#18795
                    } //#18795
                    $k[$j++] = $1.mode0NbeforeB; //#18797
                    $1.NbeforeB(); //#18797
                    if ($k[--$j]) { //#18797
                        $k[$j++] = $1.N; //#18797
                        break; //#18797
                    } //#18797
                    $k[$j++] = $1.mode0forceKB; //#18798
                    $1.NbeforeB(); //#18798
                    if ($k[--$j]) { //#18798
                        $k[$j++] = $1.B; //#18798
                        break; //#18798
                    } //#18798
                    $k[$j++] = $1.modeANbeforeE; //#18799
                    $1.NbeforeA(); //#18799
                    if ($k[--$j]) { //#18799
                        $k[$j++] = $1.N; //#18799
                        break; //#18799
                    } //#18799
                    $k[$j++] = $1.mode0forceA; //#18800
                    $1.NbeforeA(); //#18800
                    if ($k[--$j]) { //#18800
                        $k[$j++] = $1.A; //#18800
                        break; //#18800
                    } //#18800
                    if ($1.numN >= 1) { //#18801
                        $k[$j++] = $1.N; //#18801
                        break; //#18801
                    } //#18801
                    $k[$j++] = $1.B; //#18802
                    break; //#18802
                } //#18802
                if ($1.mode == $1.B) { //#18818
                    $k[$j++] = $1.modeBKbeforeB; //#18805
                    $1.KbeforeB(); //#18805
                    if ($k[--$j]) { //#18805
                        $k[$j++] = $1.K; //#18805
                        break; //#18805
                    } //#18805
                    $k[$j++] = $1.modeBKbeforeA; //#18806
                    $1.KbeforeA(); //#18806
                    if ($k[--$j]) { //#18806
                        $k[$j++] = $1.K; //#18806
                        break; //#18806
                    } //#18806
                    $k[$j++] = $1.modeBKbeforeN; //#18807
                    $1.KbeforeN(); //#18807
                    if ($k[--$j]) { //#18807
                        $k[$j++] = $1.K; //#18807
                        break; //#18807
                    } //#18807
                    $k[$j++] = $1.modeBKbeforeE; //#18808
                    $1.KbeforeE(); //#18808
                    if ($k[--$j]) { //#18808
                        $k[$j++] = $1.K; //#18808
                        break; //#18808
                    } //#18808
                    $k[$j++] = $1.modeBAbeforeK; //#18809
                    $1.AbeforeK(); //#18809
                    if ($k[--$j]) { //#18809
                        $k[$j++] = $1.A; //#18809
                        break; //#18809
                    } //#18809
                    $k[$j++] = $1.modeBAbeforeB; //#18810
                    $1.AbeforeB(); //#18810
                    if ($k[--$j]) { //#18810
                        $k[$j++] = $1.A; //#18810
                        break; //#18810
                    } //#18810
                    $k[$j++] = $1.modeBAbeforeN; //#18811
                    $1.AbeforeN(); //#18811
                    if ($k[--$j]) { //#18811
                        $k[$j++] = $1.A; //#18811
                        break; //#18811
                    } //#18811
                    $k[$j++] = $1.modeBAbeforeE; //#18812
                    $1.AbeforeE(); //#18812
                    if ($k[--$j]) { //#18812
                        $k[$j++] = $1.A; //#18812
                        break; //#18812
                    } //#18812
                    $k[$j++] = $1.modeBNbeforeK; //#18813
                    $1.NbeforeK(); //#18813
                    if ($k[--$j]) { //#18813
                        $k[$j++] = $1.N; //#18813
                        break; //#18813
                    } //#18813
                    $k[$j++] = $1.modeBNbeforeB; //#18814
                    $1.NbeforeB(); //#18814
                    if ($k[--$j]) { //#18814
                        $k[$j++] = $1.N; //#18814
                        break; //#18814
                    } //#18814
                    $k[$j++] = $1.modeBNbeforeA; //#18815
                    $1.NbeforeA(); //#18815
                    if ($k[--$j]) { //#18815
                        $k[$j++] = $1.N; //#18815
                        break; //#18815
                    } //#18815
                    $k[$j++] = $1.modeBNbeforeE; //#18816
                    $1.NbeforeE(); //#18816
                    if ($k[--$j]) { //#18816
                        $k[$j++] = $1.N; //#18816
                        break; //#18816
                    } //#18816
                    $k[$j++] = $1.B; //#18817
                    break; //#18817
                } //#18817
                if ($1.mode == $1.A) { //#18827
                    if ($1.numK >= 1) { //#18820
                        $k[$j++] = $1.K; //#18820
                        break; //#18820
                    } //#18820
                    if ($1.numB >= 1) { //#18821
                        $k[$j++] = $1.B; //#18821
                        break; //#18821
                    } //#18821
                    $k[$j++] = $1.modeANbeforeA; //#18822
                    $1.NbeforeA(); //#18822
                    if ($k[--$j]) { //#18822
                        $k[$j++] = $1.N; //#18822
                        break; //#18822
                    } //#18822
                    $k[$j++] = $1.modeANbeforeB; //#18823
                    $1.NbeforeB(); //#18823
                    if ($k[--$j]) { //#18823
                        $k[$j++] = $1.N; //#18823
                        break; //#18823
                    } //#18823
                    $k[$j++] = $1.modeANbeforeE; //#18824
                    $1.NbeforeE(); //#18824
                    if ($k[--$j]) { //#18824
                        $k[$j++] = $1.N; //#18824
                        break; //#18824
                    } //#18824
                    if (($1.numA >= 1) || ($1.numN >= 1)) { //#18825
                        $k[$j++] = $1.A; //#18825
                        break; //#18825
                    } //#18825
                    $k[$j++] = $1.B; //#18826
                    break; //#18826
                } //#18826
                if ($1.mode == $1.N) { //#18834
                    if ($1.numK >= 1) { //#18829
                        $k[$j++] = $1.K; //#18829
                        break; //#18829
                    } //#18829
                    if ($1.numB >= 1) { //#18830
                        $k[$j++] = $1.B; //#18830
                        break; //#18830
                    } //#18830
                    if ($1.numA >= 1) { //#18831
                        $k[$j++] = $1.A; //#18831
                        break; //#18831
                    } //#18831
                    if ($1.numN >= 1) { //#18832
                        $k[$j++] = $1.N; //#18832
                        break; //#18832
                    } //#18832
                    $k[$j++] = $1.B; //#18833
                    break; //#18833
                } //#18833
                if ($1.mode == $1.K) { //#18841
                    if ($1.numB >= 1) { //#18836
                        $k[$j++] = $1.B; //#18836
                        break; //#18836
                    } //#18836
                    if ($1.numA >= 1) { //#18837
                        $k[$j++] = $1.A; //#18837
                        break; //#18837
                    } //#18837
                    if ($1.numN >= 1) { //#18838
                        $k[$j++] = $1.N; //#18838
                        break; //#18838
                    } //#18838
                    if ($1.numK >= 1) { //#18839
                        $k[$j++] = $1.K; //#18839
                        break; //#18839
                    } //#18839
                    $k[$j++] = $1.B; //#18840
                    break; //#18840
                } //#18840
            } //#18840
            var _Co = $k[--$j]; //#18843
            $k[$j++] = _Co; //#18843
            if ((_Co == $1.K) && $1.fnc1first) { //#18843
                $j--; //#18843
                $k[$j++] = $1.B; //#18843
            } //#18843
            var _Cs = $k[--$j]; //#18844
            $k[$j++] = _Cs; //#18860
            if (_Cs == $1.mode) { //#18859
                $j--; //#18845
                var _Cy = ($1.mode == $1.K) ? 2 : 1; //#18846
                $1.dat = $geti($1.msg, $1.i, _Cy); //#18846
                $k[$j++] = Infinity; //#18849
                $aload($1.seq); //#18848
                $k[$j++] = Infinity; //#18849
                var _D1 = $k[--$j]; //#18849
                var _D2 = $k[--$j]; //#18849
                $k[$j++] = _D1; //#18849
                $aload(_D2); //#18849
                $aload($1.dat); //#18849
                var _D4 = $a(); //#18849
                $k[$j++] = _D4; //#18849
                $1.seq = $a(); //#18849
            } else { //#18859
                $1.mode = $k[--$j]; //#18852
                if ($1.mode == $1.K) { //#18853
                    $k[$j++] = $1.K; //#18853
                    $k[$j++] = $geti($1.msg, $1.i, $1.numK * 2); //#18853
                } //#18853
                if ($1.mode == $1.B) { //#18854
                    $k[$j++] = $1.B; //#18854
                    $k[$j++] = $geti($1.msg, $1.i, $1.numB); //#18854
                } //#18854
                if ($1.mode == $1.A) { //#18855
                    $k[$j++] = $1.A; //#18855
                    $k[$j++] = $geti($1.msg, $1.i, $1.numA); //#18855
                } //#18855
                if ($1.mode == $1.N) { //#18856
                    $k[$j++] = $1.N; //#18856
                    $k[$j++] = $geti($1.msg, $1.i, $1.numN); //#18856
                } //#18856
                if ($1.mode == $1.E) { //#18857
                    $1.mode = -1; //#18857
                    $k[$j++] = $1.E; //#18857
                    $k[$j++] = $geti($1.msg, $1.i, 1); //#18857
                } //#18857
                $1.dat = $k[--$j]; //#18858
                $1.sw = $k[--$j]; //#18858
                $k[$j++] = Infinity; //#18859
                $aload($1.seq); //#18859
                $k[$j++] = $1.sw; //#18859
                $k[$j++] = $1.dat; //#18859
                $1.seq = $a(); //#18859
            } //#18859
            $1.i = $1.i + $1.dat.length; //#18861
        } //#18861
        for (;;) { //#18892
            if ($1.seq == -1) { //#18866
                break; //#18866
            } //#18866
            $1.bits = $s(23648); //#18867
            $1.j = 0; //#18868
            if ($1.fnc1first) { //#18871
                if ($lt($1.ver, $1.vR7x43)) { //#18870
                    $k[$j++] = "0101"; //#18870
                } else { //#18870
                    $k[$j++] = "101"; //#18870
                } //#18870
                $1.addtobits(); //#18870
            } //#18870
            $1.abort = false; //#18872
            for (var _Du = 0, _Dt = $1.seq.length - 1; _Du <= _Dt; _Du += 2) { //#18887
                $1.i = _Du; //#18874
                $1.mode = $get($1.seq, $1.i); //#18875
                $k[$j++] = $get($get($1.mids, $1.ver), $1.mode); //#18876
                $1.addtobits(); //#18876
                $1.chars = $get($1.seq, $1.i + 1); //#18877
                $k[$j++] = 'charslen'; //#18878
                $k[$j++] = $1.chars.length; //#18878
                if ($1.mode == $1.K) { //#18878
                    var _E9 = $k[--$j]; //#18878
                    $k[$j++] = ~~(_E9 / 2); //#18878
                } //#18878
                var _EA = $k[--$j]; //#18878
                $1[$k[--$j]] = _EA; //#18878
                if ($1.mode != $1.E) { //#18885
                    $1.cclen = $get($get($1.cclens, $1.ver), $1.mode); //#18880
                    if ($1.charslen >= (~~Math.pow(2, $1.cclen))) { //#18883
                        $1.abort = true; //#18882
                        break; //#18882
                    } //#18882
                    $k[$j++] = $1.charslen; //#18884
                    $k[$j++] = $1.cclen; //#18884
                    $1.tobin(); //#18884
                    $1.addtobits(); //#18884
                } //#18884
                $k[$j++] = $1.chars; //#18886
                if ($1[$get($1.encfuncs, $1.mode)]() === true) {
                    break;
                } //#18886
                $1.addtobits(); //#18886
            } //#18886
            if ($1.abort) { //#18888
                break; //#18888
            } //#18888
            $1.bits = $geti($1.bits, 0, $1.j); //#18889
            $put($1.msgbits, $1.ver, $1.bits); //#18890
            break; //#18891
        } //#18891
    } //#18891
    $1.metrics = $a([$a(["micro", "M1", $1.vM1, 11, 11, 98, 99, 36, $a([2, 99, 99, 99]), $a([1, 0, -1, -1, -1, -1, -1, -1])]), $a(["micro", "M2", $1.vM2, 13, 13, 98, 99, 80, $a([5, 6, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M3", $1.vM3, 15, 15, 98, 99, 132, $a([6, 8, 99, 99]), $a([1, 0, 1, 0, -1, -1, -1, -1])]), $a(["micro", "M4", $1.vM4, 17, 17, 98, 99, 192, $a([8, 10, 14, 99]), $a([1, 0, 1, 0, 1, 0, -1, -1])]), $a(["full", "1", $1.v1to9, 21, 21, 98, 99, 208, $a([7, 10, 13, 17]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "2", $1.v1to9, 25, 25, 18, 99, 359, $a([10, 16, 22, 28]), $a([1, 0, 1, 0, 1, 0, 1, 0])]), $a(["full", "3", $1.v1to9, 29, 29, 22, 99, 567, $a([15, 26, 36, 44]), $a([1, 0, 1, 0, 2, 0, 2, 0])]), $a(["full", "4", $1.v1to9, 33, 33, 26, 99, 807, $a([20, 36, 52, 64]), $a([1, 0, 2, 0, 2, 0, 4, 0])]), $a(["full", "5", $1.v1to9, 37, 37, 30, 99, 1079, $a([26, 48, 72, 88]), $a([1, 0, 2, 0, 2, 2, 2, 2])]), $a(["full", "6", $1.v1to9, 41, 41, 34, 99, 1383, $a([36, 64, 96, 112]), $a([2, 0, 4, 0, 4, 0, 4, 0])]), $a(["full", "7", $1.v1to9, 45, 45, 22, 38, 1568, $a([40, 72, 108, 130]), $a([2, 0, 4, 0, 2, 4, 4, 1])]), $a(["full", "8", $1.v1to9, 49, 49, 24, 42, 1936, $a([48, 88, 132, 156]), $a([2, 0, 2, 2, 4, 2, 4, 2])]), $a(["full", "9", $1.v1to9, 53, 53, 26, 46, 2336, $a([60, 110, 160, 192]), $a([2, 0, 3, 2, 4, 4, 4, 4])]), $a(["full", "10", $1.v10to26, 57, 57, 28, 50, 2768, $a([72, 130, 192, 224]), $a([2, 2, 4, 1, 6, 2, 6, 2])]), $a(["full", "11", $1.v10to26, 61, 61, 30, 54, 3232, $a([80, 150, 224, 264]), $a([4, 0, 1, 4, 4, 4, 3, 8])]), $a(["full", "12", $1.v10to26, 65, 65, 32, 58, 3728, $a([96, 176, 260, 308]), $a([2, 2, 6, 2, 4, 6, 7, 4])]), $a(["full", "13", $1.v10to26, 69, 69, 34, 62, 4256, $a([104, 198, 288, 352]), $a([4, 0, 8, 1, 8, 4, 12, 4])]), $a(["full", "14", $1.v10to26, 73, 73, 26, 46, 4651, $a([120, 216, 320, 384]), $a([3, 1, 4, 5, 11, 5, 11, 5])]), $a(["full", "15", $1.v10to26, 77, 77, 26, 48, 5243, $a([132, 240, 360, 432]), $a([5, 1, 5, 5, 5, 7, 11, 7])]), $a(["full", "16", $1.v10to26, 81, 81, 26, 50, 5867, $a([144, 280, 408, 480]), $a([5, 1, 7, 3, 15, 2, 3, 13])]), $a(["full", "17", $1.v10to26, 85, 85, 30, 54, 6523, $a([168, 308, 448, 532]), $a([1, 5, 10, 1, 1, 15, 2, 17])]), $a(["full", "18", $1.v10to26, 89, 89, 30, 56, 7211, $a([180, 338, 504, 588]), $a([5, 1, 9, 4, 17, 1, 2, 19])]), $a(["full", "19", $1.v10to26, 93, 93, 30, 58, 7931, $a([196, 364, 546, 650]), $a([3, 4, 3, 11, 17, 4, 9, 16])]), $a(["full", "20", $1.v10to26, 97, 97, 34, 62, 8683, $a([224, 416, 600, 700]), $a([3, 5, 3, 13, 15, 5, 15, 10])]), $a(["full", "21", $1.v10to26, 101, 101, 28, 50, 9252, $a([224, 442, 644, 750]), $a([4, 4, 17, 0, 17, 6, 19, 6])]), $a(["full", "22", $1.v10to26, 105, 105, 26, 50, 10068, $a([252, 476, 690, 816]), $a([2, 7, 17, 0, 7, 16, 34, 0])]), $a(["full", "23", $1.v10to26, 109, 109, 30, 54, 10916, $a([270, 504, 750, 900]), $a([4, 5, 4, 14, 11, 14, 16, 14])]), $a(["full", "24", $1.v10to26, 113, 113, 28, 54, 11796, $a([300, 560, 810, 960]), $a([6, 4, 6, 14, 11, 16, 30, 2])]), $a(["full", "25", $1.v10to26, 117, 117, 32, 58, 12708, $a([312, 588, 870, 1050]), $a([8, 4, 8, 13, 7, 22, 22, 13])]), $a(["full", "26", $1.v10to26, 121, 121, 30, 58, 13652, $a([336, 644, 952, 1110]), $a([10, 2, 19, 4, 28, 6, 33, 4])]), $a(["full", "27", $1.v27to40, 125, 125, 34, 62, 14628, $a([360, 700, 1020, 1200]), $a([8, 4, 22, 3, 8, 26, 12, 28])]), $a(["full", "28", $1.v27to40, 129, 129, 26, 50, 15371, $a([390, 728, 1050, 1260]), $a([3, 10, 3, 23, 4, 31, 11, 31])]), $a(["full", "29", $1.v27to40, 133, 133, 30, 54, 16411, $a([420, 784, 1140, 1350]), $a([7, 7, 21, 7, 1, 37, 19, 26])]), $a(["full", "30", $1.v27to40, 137, 137, 26, 52, 17483, $a([450, 812, 1200, 1440]), $a([5, 10, 19, 10, 15, 25, 23, 25])]), $a(["full", "31", $1.v27to40, 141, 141, 30, 56, 18587, $a([480, 868, 1290, 1530]), $a([13, 3, 2, 29, 42, 1, 23, 28])]), $a(["full", "32", $1.v27to40, 145, 145, 34, 60, 19723, $a([510, 924, 1350, 1620]), $a([17, 0, 10, 23, 10, 35, 19, 35])]), $a(["full", "33", $1.v27to40, 149, 149, 30, 58, 20891, $a([540, 980, 1440, 1710]), $a([17, 1, 14, 21, 29, 19, 11, 46])]), $a(["full", "34", $1.v27to40, 153, 153, 34, 62, 22091, $a([570, 1036, 1530, 1800]), $a([13, 6, 14, 23, 44, 7, 59, 1])]), $a(["full", "35", $1.v27to40, 157, 157, 30, 54, 23008, $a([570, 1064, 1590, 1890]), $a([12, 7, 12, 26, 39, 14, 22, 41])]), $a(["full", "36", $1.v27to40, 161, 161, 24, 50, 24272, $a([600, 1120, 1680, 1980]), $a([6, 14, 6, 34, 46, 10, 2, 64])]), $a(["full", "37", $1.v27to40, 165, 165, 28, 54, 25568, $a([630, 1204, 1770, 2100]), $a([17, 4, 29, 14, 49, 10, 24, 46])]), $a(["full", "38", $1.v27to40, 169, 169, 32, 58, 26896, $a([660, 1260, 1860, 2220]), $a([4, 18, 13, 32, 48, 14, 42, 32])]), $a(["full", "39", $1.v27to40, 173, 173, 26, 54, 28256, $a([720, 1316, 1950, 2310]), $a([20, 4, 40, 7, 43, 22, 10, 67])]), $a(["full", "40", $1.v27to40, 177, 177, 30, 58, 29648, $a([750, 1372, 2040, 2430]), $a([19, 6, 18, 31, 34, 34, 20, 61])]), $a(["rmqr", "R7x43", $1.vR7x43, 7, 43, 22, 99, 104, $a([99, 7, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x59", $1.vR7x59, 7, 59, 20, 40, 171, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x77", $1.vR7x77, 7, 77, 26, 52, 261, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x99", $1.vR7x99, 7, 99, 24, 50, 358, $a([99, 16, 99, 30]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R7x139", $1.vR7x139, 7, 139, 28, 56, 545, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x43", $1.vR9x43, 9, 43, 22, 99, 170, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x59", $1.vR9x59, 9, 59, 20, 40, 267, $a([99, 12, 99, 22]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R9x77", $1.vR9x77, 9, 77, 26, 52, 393, $a([99, 18, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R9x99", $1.vR9x99, 9, 99, 24, 50, 532, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R9x139", $1.vR9x139, 9, 139, 28, 56, 797, $a([99, 36, 99, 66]), $a([-1, -1, 1, 1, -1, -1, 3, 0])]), $a(["rmqr", "R11x27", $1.vR11x27, 11, 27, 98, 99, 122, $a([99, 8, 99, 10]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x43", $1.vR11x43, 11, 43, 22, 99, 249, $a([99, 12, 99, 20]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R11x59", $1.vR11x59, 11, 59, 20, 40, 376, $a([99, 16, 99, 32]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x77", $1.vR11x77, 11, 77, 26, 52, 538, $a([99, 24, 99, 44]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R11x99", $1.vR11x99, 11, 99, 24, 50, 719, $a([99, 32, 99, 60]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R11x139", $1.vR11x139, 11, 139, 28, 56, 1062, $a([99, 48, 99, 90]), $a([-1, -1, 2, 0, -1, -1, 3, 0])]), $a(["rmqr", "R13x27", $1.vR13x27, 13, 27, 98, 99, 172, $a([99, 9, 99, 14]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x43", $1.vR13x43, 13, 43, 22, 99, 329, $a([99, 14, 99, 28]), $a([-1, -1, 1, 0, -1, -1, 1, 0])]), $a(["rmqr", "R13x59", $1.vR13x59, 13, 59, 20, 40, 486, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R13x77", $1.vR13x77, 13, 77, 26, 52, 684, $a([99, 32, 99, 56]), $a([-1, -1, 1, 1, -1, -1, 1, 1])]), $a(["rmqr", "R13x99", $1.vR13x99, 13, 99, 24, 50, 907, $a([99, 40, 99, 78]), $a([-1, -1, 1, 1, -1, -1, 1, 2])]), $a(["rmqr", "R13x139", $1.vR13x139, 13, 139, 28, 56, 1328, $a([99, 60, 99, 112]), $a([-1, -1, 2, 1, -1, -1, 2, 2])]), $a(["rmqr", "R15x43", $1.vR15x43, 15, 43, 22, 99, 409, $a([99, 18, 99, 36]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R15x59", $1.vR15x59, 15, 59, 20, 40, 596, $a([99, 26, 99, 48]), $a([-1, -1, 1, 0, -1, -1, 2, 0])]), $a(["rmqr", "R15x77", $1.vR15x77, 15, 77, 26, 52, 830, $a([99, 36, 99, 72]), $a([-1, -1, 1, 1, -1, -1, 2, 1])]), $a(["rmqr", "R15x99", $1.vR15x99, 15, 99, 24, 50, 1095, $a([99, 48, 99, 88]), $a([-1, -1, 2, 0, -1, -1, 4, 0])]), $a(["rmqr", "R15x139", $1.vR15x139, 15, 139, 28, 56, 1594, $a([99, 72, 99, 130]), $a([-1, -1, 2, 1, -1, -1, 1, 4])]), $a(["rmqr", "R17x43", $1.vR17x43, 17, 43, 22, 99, 489, $a([99, 22, 99, 40]), $a([-1, -1, 1, 0, -1, -1, 1, 1])]), $a(["rmqr", "R17x59", $1.vR17x59, 17, 59, 20, 40, 706, $a([99, 32, 99, 60]), $a([-1, -1, 2, 0, -1, -1, 2, 0])]), $a(["rmqr", "R17x77", $1.vR17x77, 17, 77, 26, 52, 976, $a([99, 44, 99, 84]), $a([-1, -1, 2, 0, -1, -1, 1, 2])]), $a(["rmqr", "R17x99", $1.vR17x99, 17, 99, 24, 50, 1283, $a([99, 60, 99, 104]), $a([-1, -1, 2, 1, -1, -1, 4, 0])]), $a(["rmqr", "R17x139", $1.vR17x139, 17, 139, 28, 56, 1860, $a([99, 80, 99, 156]), $a([-1, -1, 4, 0, -1, -1, 2, 4])])]); //#18975
    $k[$j++] = 'eclval'; //#18976
    $search("LMQH", $1.eclevel); //#18976
    $j--; //#18976
    var _JV = $k[--$j]; //#18976
    var _JW = $k[--$j]; //#18976
    $k[$j++] = _JV.length; //#18976
    $k[$j++] = _JW; //#18976
    $j--; //#18976
    var _JX = $k[--$j]; //#18976
    var _JY = $k[--$j]; //#18976
    $k[$j++] = _JX; //#18976
    $k[$j++] = _JY; //#18976
    $j--; //#18976
    var _JZ = $k[--$j]; //#18976
    $1[$k[--$j]] = _JZ; //#18976
    for (var _Jd = 0, _Jc = $1.metrics.length - 1; _Jd <= _Jc; _Jd += 1) { //#19015
        $1.i = _Jd; //#18978
        $1.m = $get($1.metrics, $1.i); //#18979
        $1.frmt = $get($1.m, 0); //#18980
        $1.vers = $get($1.m, 1); //#18981
        $1.vergrp = $get($1.m, 2); //#18982
        $1.verind = $1.i - 44; //#18983
        $1.rows = $get($1.m, 3); //#18984
        $1.cols = $get($1.m, 4); //#18985
        $1.asp2 = $get($1.m, 5); //#18986
        $1.asp3 = $get($1.m, 6); //#18987
        $1.nmod = $get($1.m, 7); //#18988
        $1.ncws = ~~($1.nmod / 8); //#18989
        $1.rbit = $1.nmod % 8; //#18990
        $1.lc4b = false; //#18991
        if ($eq($1.vers, "M1") || $eq($1.vers, "M3")) { //#18996
            $1.ncws = $1.ncws + 1; //#18993
            $1.rbit = 0; //#18994
            $1.lc4b = true; //#18995
        } //#18995
        $1.ecws = $get($get($1.m, 8), $1.eclval); //#18997
        $1.dcws = $f($1.ncws - $1.ecws); //#18998
        var _KB = $1.lc4b ? 4 : 0; //#18999
        $1.dmod = $f(($1.dcws * 8) - _KB); //#18999
        $1.ecb1 = $get($get($1.m, 9), $1.eclval * 2); //#19000
        $1.ecb2 = $get($get($1.m, 9), $f(($1.eclval * 2) + 1)); //#19001
        $1.okay = true; //#19002
        if ($ne($1.format, $1.frmt)) { //#19003
            $1.okay = false; //#19003
        } //#19003
        if ($eq($1.frmt, "micro") && $1.fnc1first) { //#19004
            $1.okay = false; //#19004
        } //#19004
        if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //#19005
            $1.okay = false; //#19005
        } //#19005
        if (($1.ecb1 == -1) || ($1.ecb2 == -1)) { //#19006
            $1.okay = false; //#19006
        } //#19006
        $1.verbits = $get($1.msgbits, $1.vergrp); //#19007
        if ($1.verbits == -1) { //#19011
            $1.okay = false; //#19009
        } else { //#19011
            if ($1.verbits.length > $1.dmod) { //#19011
                $1.okay = false; //#19011
            } //#19011
        } //#19011
        $1.term = $geti("000000000", 0, $get($1.termlens, $1.vergrp)); //#19013
        if ($1.okay) { //#19014
            break; //#19014
        } //#19014
    } //#19014
    if (!$1.okay) { //#19019
        $k[$j++] = 'bwipp.qrcodeNoValidSymbol'; //#19018
        $k[$j++] = "Maximum length exceeded or invalid content"; //#19018
        bwipp_raiseerror(); //#19018
    } //#19018
    $1.format = $1.frmt; //#19021
    $1.version = $1.vers; //#19022
    $1.msgbits = $1.verbits; //#19023
    $1.dcpb = ~~($1.dcws / $f($1.ecb1 + $1.ecb2)); //#19024
    $1.ecpb = (~~($1.ncws / $f($1.ecb1 + $1.ecb2))) - $1.dcpb; //#19025
    var _Kp = $1.term; //#19028
    var _Kq = $1.dmod; //#19028
    var _Kr = $1.msgbits; //#19028
    var _Ks = $1.term; //#19028
    var _Kt = _Ks.length; //#19028
    var _Ku = $f(_Kq - _Kr.length); //#19028
    if ($f(_Kq - _Kr.length) > _Ks.length) { //#19028
        var _ = _Kt; //#19028
        _Kt = _Ku; //#19028
        _Ku = _; //#19028
    } //#19028
    $1.term = $geti(_Kp, 0, _Ku); //#19028
    var _Ky = $s($1.msgbits.length + $1.term.length); //#19029
    $puti(_Ky, 0, $1.msgbits); //#19030
    $puti(_Ky, $1.msgbits.length, $1.term); //#19031
    $1.msgbits = _Ky; //#19032
    $1.pad = $s($1.dmod); //#19035
    for (var _L6 = 0, _L5 = $1.pad.length - 1; _L6 <= _L5; _L6 += 1) { //#19036
        $put($1.pad, _L6, 48); //#19036
    } //#19036
    $puti($1.pad, 0, $1.msgbits); //#19037
    $1.padstrs = $a(["11101100", "00010001"]); //#19038
    $1.padnum = 0; //#19039
    var _LE = $1.lc4b ? 5 : 1; //#19040
    for (var _LG = ~~(Math.ceil($1.msgbits.length / 8) * 8), _LF = $f($1.dmod - _LE); _LG <= _LF; _LG += 8) { //#19043
        $puti($1.pad, _LG, $get($1.padstrs, $1.padnum)); //#19041
        $1.padnum = ($1.padnum + 1) % 2; //#19042
    } //#19042
    $1.cws = $a($1.dcws); //#19046
    for (var _LQ = 0, _LP = $1.cws.length - 1; _LQ <= _LP; _LQ += 1) { //#19058
        $1.c = _LQ; //#19048
        $1.bpcw = 8; //#19049
        if ($1.lc4b && ($1.c == ($1.cws.length - 1))) { //#19050
            $1.bpcw = 4; //#19050
        } //#19050
        $1.cwb = $geti($1.pad, $1.c * 8, $1.bpcw); //#19051
        $1.cw = 0; //#19052
        for (var _La = 0, _LZ = $1.bpcw - 1; _La <= _LZ; _La += 1) { //#19056
            $1.i = _La; //#19054
            $1.cw = $f($1.cw + ((~~(Math.pow(2, ($1.bpcw - $1.i) - 1))) * $f($get($1.cwb, $1.i) - 48))); //#19055
        } //#19055
        $put($1.cws, $1.c, $1.cw); //#19057
    } //#19057
    if ($1.lc4b) { //#19061
        var _Ll = $1.cws; //#19061
        var _Lm = $1.cws; //#19061
        $put(_Ll, _Lm.length - 1, $get(_Ll, _Lm.length - 1) << 4); //#19061
    } //#19061
    var _Lp = $get($1.options, 'debugcws') !== undefined; //#19063
    if (_Lp) { //#19063
        $k[$j++] = 'bwipp.debugcws'; //#19063
        $k[$j++] = $1.cws; //#19063
        bwipp_raiseerror(); //#19063
    } //#19063
    $k[$j++] = Infinity; //#19066
    $k[$j++] = 1; //#19066
    for (var _Lr = 0, _Ls = 255; _Lr < _Ls; _Lr++) { //#19066
        var _Lt = $k[--$j]; //#19066
        var _Lu = _Lt * 2; //#19066
        $k[$j++] = _Lt; //#19066
        $k[$j++] = _Lu; //#19066
        if (_Lu >= 256) { //#19066
            var _Lv = $k[--$j]; //#19066
            $k[$j++] = _Lv ^ 285; //#19066
        } //#19066
    } //#19066
    $1.rsalog = $a(); //#19066
    $1.rslog = $a(256); //#19067
    for (var _Ly = 1; _Ly <= 255; _Ly += 1) { //#19068
        $put($1.rslog, $get($1.rsalog, _Ly), _Ly); //#19068
    } //#19068
    $1.rsprod = function() {
        var _M2 = $k[--$j]; //#19072
        var _M3 = $k[--$j]; //#19072
        $k[$j++] = _M3; //#19076
        $k[$j++] = _M2; //#19076
        if ((_M2 != 0) && (_M3 != 0)) { //#19075
            var _M6 = $get($1.rslog, $k[--$j]); //#19073
            var _MB = $get($1.rsalog, $f(_M6 + $get($1.rslog, $k[--$j])) % 255); //#19073
            $k[$j++] = _MB; //#19073
        } else { //#19075
            $j -= 2; //#19075
            $k[$j++] = 0; //#19075
        } //#19075
    }; //#19077
    $k[$j++] = Infinity; //#19080
    $k[$j++] = 1; //#19080
    for (var _MD = 0, _ME = $1.ecpb; _MD < _ME; _MD++) { //#19080
        $k[$j++] = 0; //#19080
    } //#19080
    $1.coeffs = $a(); //#19080
    for (var _MI = 0, _MH = $1.ecpb - 1; _MI <= _MH; _MI += 1) { //#19089
        $1.i = _MI; //#19082
        $put($1.coeffs, $1.i + 1, $get($1.coeffs, $1.i)); //#19083
        for (var _MP = $1.i; _MP >= 1; _MP -= 1) { //#19087
            $1.j = _MP; //#19085
            $k[$j++] = $1.coeffs; //#19086
            $k[$j++] = $1.j; //#19086
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#19086
            $k[$j++] = $get($1.coeffs, $1.j); //#19086
            $k[$j++] = $get($1.rsalog, $1.i); //#19086
            $1.rsprod(); //#19086
            var _Mb = $k[--$j]; //#19086
            var _Mc = $k[--$j]; //#19086
            var _Md = $k[--$j]; //#19086
            $put($k[--$j], _Md, $xo(_Mc, _Mb)); //#19086
        } //#19086
        $k[$j++] = $1.coeffs; //#19088
        $k[$j++] = 0; //#19088
        $k[$j++] = $get($1.coeffs, 0); //#19088
        $k[$j++] = $get($1.rsalog, $1.i); //#19088
        $1.rsprod(); //#19088
        var _Ml = $k[--$j]; //#19088
        var _Mm = $k[--$j]; //#19088
        $put($k[--$j], _Mm, _Ml); //#19088
    } //#19088
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#19090
    $1.rscodes = function() {
        $1.rscws = $k[--$j]; //#19094
        $1.rsnd = $1.rscws.length; //#19095
        $k[$j++] = Infinity; //#19096
        $forall($1.rscws); //#19096
        for (var _Mv = 0, _Mw = $1.ecpb; _Mv < _Mw; _Mv++) { //#19096
            $k[$j++] = 0; //#19096
        } //#19096
        $1.rscws = $a(); //#19096
        for (var _N0 = 0, _Mz = $1.rsnd - 1; _N0 <= _Mz; _N0 += 1) { //#19104
            $1.m = _N0; //#19098
            $1.k = $get($1.rscws, $1.m); //#19099
            for (var _N6 = 0, _N5 = $1.ecpb - 1; _N6 <= _N5; _N6 += 1) { //#19103
                $1.j = _N6; //#19101
                $k[$j++] = $1.rscws; //#19102
                $k[$j++] = ($1.m + $1.j) + 1; //#19102
                $k[$j++] = $get($1.coeffs, ($1.ecpb - $1.j) - 1); //#19102
                $k[$j++] = $1.k; //#19102
                $1.rsprod(); //#19102
                var _NJ = $k[--$j]; //#19102
                var _NK = $k[--$j]; //#19102
                $put($k[--$j], _NK, $xo(_NJ, $get($1.rscws, ($1.m + $1.j) + 1))); //#19102
            } //#19102
        } //#19102
        $k[$j++] = $geti($1.rscws, $1.rsnd, $1.ecpb); //#19105
    }; //#19106
    $1.dcwsb = $a($f($1.ecb1 + $1.ecb2)); //#19109
    $1.ecwsb = $a($f($1.ecb1 + $1.ecb2)); //#19110
    for (var _NY = 0, _NX = $f($1.ecb1 - 1); _NY <= _NX; _NY += 1) { //#19115
        $1.i = _NY; //#19112
        $put($1.dcwsb, $1.i, $geti($1.cws, $1.i * $1.dcpb, $1.dcpb)); //#19113
        $k[$j++] = $1.ecwsb; //#19114
        $k[$j++] = $1.i; //#19114
        $k[$j++] = $get($1.dcwsb, $1.i); //#19114
        $1.rscodes(); //#19114
        var _Nl = $k[--$j]; //#19114
        var _Nm = $k[--$j]; //#19114
        $put($k[--$j], _Nm, _Nl); //#19114
    } //#19114
    for (var _Nq = 0, _Np = $f($1.ecb2 - 1); _Nq <= _Np; _Nq += 1) { //#19120
        $1.i = _Nq; //#19117
        $put($1.dcwsb, $f($1.ecb1 + $1.i), $geti($1.cws, $f(($1.ecb1 * $1.dcpb) + ($1.i * ($1.dcpb + 1))), $1.dcpb + 1)); //#19118
        $k[$j++] = $1.ecwsb; //#19119
        $k[$j++] = $f($1.ecb1 + $1.i); //#19119
        $k[$j++] = $get($1.dcwsb, $f($1.ecb1 + $1.i)); //#19119
        $1.rscodes(); //#19119
        var _O8 = $k[--$j]; //#19119
        var _O9 = $k[--$j]; //#19119
        $put($k[--$j], _O9, _O8); //#19119
    } //#19119
    $1.cws = $a($1.ncws); //#19123
    $1.cw = 0; //#19124
    for (var _OF = 0, _OE = $1.dcpb; _OF <= _OE; _OF += 1) { //#19134
        $1.i = _OF; //#19126
        for (var _OJ = 0, _OI = $f($f($1.ecb1 + $1.ecb2) - 1); _OJ <= _OI; _OJ += 1) { //#19133
            $1.j = _OJ; //#19128
            if ($1.i < $get($1.dcwsb, $1.j).length) { //#19132
                $put($1.cws, $1.cw, $get($get($1.dcwsb, $1.j), $1.i)); //#19130
                $1.cw = $1.cw + 1; //#19131
            } //#19131
        } //#19131
    } //#19131
    for (var _OY = 0, _OX = $1.ecpb - 1; _OY <= _OX; _OY += 1) { //#19142
        $1.i = _OY; //#19136
        for (var _Oc = 0, _Ob = $f($f($1.ecb1 + $1.ecb2) - 1); _Oc <= _Ob; _Oc += 1) { //#19141
            $1.j = _Oc; //#19138
            $put($1.cws, $1.cw, $get($get($1.ecwsb, $1.j), $1.i)); //#19139
            $1.cw = $1.cw + 1; //#19140
        } //#19140
    } //#19140
    if ($1.rbit > 0) { //#19150
        $1.pad = $a($1.cws.length + 1); //#19146
        $puti($1.pad, 0, $1.cws); //#19147
        $put($1.pad, $1.pad.length - 1, 0); //#19148
        $1.cws = $1.pad; //#19149
    } //#19149
    if ($1.lc4b) { //#19161
        var _Ou = $1.cws; //#19154
        var _Ov = $1.dcws; //#19154
        $put(_Ou, $f(_Ov - 1), $get(_Ou, $f(_Ov - 1)) >>> 4); //#19154
        for (var _P0 = $f($1.dcws - 1), _Oz = $1.ncws - 2; _P0 <= _Oz; _P0 += 1) { //#19159
            $1.i = _P0; //#19156
            $put($1.cws, $1.i, ($get($1.cws, $1.i) & 15) << 4); //#19157
            $put($1.cws, $1.i, (($get($1.cws, $1.i + 1) >>> 4) & 15) | $get($1.cws, $1.i)); //#19158
        } //#19158
        $put($1.cws, $1.ncws - 1, ($get($1.cws, $1.ncws - 1) & 15) << 4); //#19160
    } //#19160
    var _PK = $get($1.options, 'debugecc') !== undefined; //#19163
    if (_PK) { //#19163
        $k[$j++] = 'bwipp.debugecc'; //#19163
        $k[$j++] = $1.cws; //#19163
        bwipp_raiseerror(); //#19163
    } //#19163
    $k[$j++] = Infinity; //#19166
    for (var _PO = 0, _PP = $1.rows * $1.cols; _PO < _PP; _PO++) { //#19166
        $k[$j++] = -1; //#19166
    } //#19166
    $1.pixs = $a(); //#19166
    $1.qmv = function() {
        var _PS = $k[--$j]; //#19167
        var _PT = $k[--$j]; //#19167
        $k[$j++] = $f(_PT + (_PS * $1.cols)); //#19167
    }; //#19167
    if ($eq($1.format, "full")) { //#19176
        for (var _PX = 8, _PW = $f($1.cols - 9); _PX <= _PW; _PX += 1) { //#19175
            $1.i = _PX; //#19172
            $k[$j++] = $1.pixs; //#19173
            $k[$j++] = $1.i; //#19173
            $k[$j++] = 6; //#19173
            $1.qmv(); //#19173
            var _Pb = $k[--$j]; //#19173
            $put($k[--$j], _Pb, ($1.i + 1) % 2); //#19173
            $k[$j++] = $1.pixs; //#19174
            $k[$j++] = 6; //#19174
            $k[$j++] = $1.i; //#19174
            $1.qmv(); //#19174
            var _Pg = $k[--$j]; //#19174
            $put($k[--$j], _Pg, ($1.i + 1) % 2); //#19174
        } //#19174
    } //#19174
    if ($eq($1.format, "micro")) { //#19183
        for (var _Pl = 8, _Pk = $f($1.cols - 1); _Pl <= _Pk; _Pl += 1) { //#19182
            $1.i = _Pl; //#19179
            $k[$j++] = $1.pixs; //#19180
            $k[$j++] = $1.i; //#19180
            $k[$j++] = 0; //#19180
            $1.qmv(); //#19180
            var _Pp = $k[--$j]; //#19180
            $put($k[--$j], _Pp, ($1.i + 1) % 2); //#19180
            $k[$j++] = $1.pixs; //#19181
            $k[$j++] = 0; //#19181
            $k[$j++] = $1.i; //#19181
            $1.qmv(); //#19181
            var _Pu = $k[--$j]; //#19181
            $put($k[--$j], _Pu, ($1.i + 1) % 2); //#19181
        } //#19181
    } //#19181
    if ($eq($1.format, "rmqr")) { //#19202
        for (var _Pz = 3, _Py = $f($1.cols - 4); _Pz <= _Py; _Pz += 1) { //#19189
            $1.i = _Pz; //#19186
            $k[$j++] = $1.pixs; //#19187
            $k[$j++] = $1.i; //#19187
            $k[$j++] = 0; //#19187
            $1.qmv(); //#19187
            var _Q3 = $k[--$j]; //#19187
            $put($k[--$j], _Q3, ($1.i + 1) % 2); //#19187
            $k[$j++] = $1.pixs; //#19188
            $k[$j++] = $1.i; //#19188
            $k[$j++] = $f($1.rows - 1); //#19188
            $1.qmv(); //#19188
            var _Q9 = $k[--$j]; //#19188
            $put($k[--$j], _Q9, ($1.i + 1) % 2); //#19188
        } //#19188
        for (var _QD = 3, _QC = $f($1.rows - 4); _QD <= _QC; _QD += 1) { //#19194
            $1.i = _QD; //#19191
            $k[$j++] = $1.pixs; //#19192
            $k[$j++] = 0; //#19192
            $k[$j++] = $1.i; //#19192
            $1.qmv(); //#19192
            var _QH = $k[--$j]; //#19192
            $put($k[--$j], _QH, ($1.i + 1) % 2); //#19192
            $k[$j++] = $1.pixs; //#19193
            $k[$j++] = $f($1.cols - 1); //#19193
            $k[$j++] = $1.i; //#19193
            $1.qmv(); //#19193
            var _QN = $k[--$j]; //#19193
            $put($k[--$j], _QN, ($1.i + 1) % 2); //#19193
        } //#19193
        for (var _QU = $f($1.asp2 - 1), _QV = $f($1.asp3 - $1.asp2), _QT = $f($1.cols - 13); _QV < 0 ? _QU >= _QT : _QU <= _QT; _QU += _QV) { //#19201
            $1.i = _QU; //#19196
            for (var _QY = 3, _QX = $f($1.rows - 4); _QY <= _QX; _QY += 1) { //#19200
                $1.j = _QY; //#19198
                $k[$j++] = $1.pixs; //#19199
                $k[$j++] = $1.i; //#19199
                $k[$j++] = $1.j; //#19199
                $1.qmv(); //#19199
                var _Qd = $k[--$j]; //#19199
                $put($k[--$j], _Qd, ($1.j + 1) % 2); //#19199
            } //#19199
        } //#19199
    } //#19199
    $1.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 1, 1, 1, 0, 1, 0]), $a([1, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#19214
    $1.fsubpat = $a([$a([1, 1, 1, 1, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 0, 1, 0, 1, 9, 9, 9]), $a([1, 0, 0, 0, 1, 9, 9, 9]), $a([1, 1, 1, 1, 1, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#19224
    $1.fcorpat = $a([$a([1, 1, 1, 9, 9, 9, 9, 9]), $a([1, 0, 9, 9, 9, 9, 9, 9]), $a([1, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#19234
    $1.fnullpat = $a([$a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9, 9, 9, 9])]); //#19244
    var _RU = new Map([
        ["full", $a([$1.fpat, $1.fpat, $1.fpat, $1.fnullpat])],
        ["micro", $a([$1.fpat, $1.fnullpat, $1.fnullpat, $1.fnullpat])],
        ["rmqr", $a([$1.fpat, $1.fcorpat, $1.fcorpat, $1.fsubpat])]
    ]); //#19249
    $1.fpats = $get(_RU, $1.format); //#19250
    for (var _RX = 0; _RX <= 7; _RX += 1) { //#19264
        $1.y = _RX; //#19252
        for (var _RY = 0; _RY <= 7; _RY += 1) { //#19263
            $1.x = _RY; //#19254
            $1.fpb0 = $get($get($get($1.fpats, 0), $1.y), $1.x); //#19255
            $1.fpb1 = $get($get($get($1.fpats, 1), $1.y), $1.x); //#19256
            $1.fpb2 = $get($get($get($1.fpats, 2), $1.y), $1.x); //#19257
            $1.fpb3 = $get($get($get($1.fpats, 3), $1.y), $1.x); //#19258
            if (($1.fpb0 != 9) && ($1.y < $1.rows)) { //#19259
                $k[$j++] = $1.pixs; //#19259
                $k[$j++] = $1.x; //#19259
                $k[$j++] = $1.y; //#19259
                $1.qmv(); //#19259
                var _S4 = $k[--$j]; //#19259
                $put($k[--$j], _S4, $1.fpb0); //#19259
            } //#19259
            if ($1.fpb1 != 9) { //#19260
                $k[$j++] = $1.pixs; //#19260
                $k[$j++] = $f($f($1.cols - $1.x) - 1); //#19260
                $k[$j++] = $1.y; //#19260
                $1.qmv(); //#19260
                var _SC = $k[--$j]; //#19260
                $put($k[--$j], _SC, $1.fpb1); //#19260
            } //#19260
            if ($1.fpb2 != 9) { //#19261
                $k[$j++] = $1.pixs; //#19261
                $k[$j++] = $1.x; //#19261
                $k[$j++] = $f($f($1.rows - $1.y) - 1); //#19261
                $1.qmv(); //#19261
                var _SK = $k[--$j]; //#19261
                $put($k[--$j], _SK, $1.fpb2); //#19261
            } //#19261
            if ($1.fpb3 != 9) { //#19262
                $k[$j++] = $1.pixs; //#19262
                $k[$j++] = $f($f($1.cols - $1.x) - 1); //#19262
                $k[$j++] = $f($f($1.rows - $1.y) - 1); //#19262
                $1.qmv(); //#19262
                var _ST = $k[--$j]; //#19262
                $put($k[--$j], _ST, $1.fpb3); //#19262
            } //#19262
        } //#19262
    } //#19262
    $1.putalgnpat = function() {
        $1.py = $k[--$j]; //#19268
        $1.px = $k[--$j]; //#19269
        for (var _SX = 0; _SX <= 4; _SX += 1) { //#19279
            $1.pb = _SX; //#19271
            for (var _SY = 0; _SY <= 4; _SY += 1) { //#19278
                $1.pa = _SY; //#19273
                $1.algnb = $get($get($1.algnpat, $1.pb), $1.pa); //#19274
                if ($1.algnb != 9) { //#19277
                    $k[$j++] = $1.pixs; //#19276
                    $k[$j++] = $f($1.px + $1.pa); //#19276
                    $k[$j++] = $f($1.py + $1.pb); //#19276
                    $1.qmv(); //#19276
                    var _Sl = $k[--$j]; //#19276
                    $put($k[--$j], _Sl, $1.algnb); //#19276
                } //#19276
            } //#19276
        } //#19276
    }; //#19280
    if ($eq($1.format, "full")) { //#19301
        $1.algnpat = $a([$a([1, 1, 1, 1, 1]), $a([1, 0, 0, 0, 1]), $a([1, 0, 1, 0, 1]), $a([1, 0, 0, 0, 1]), $a([1, 1, 1, 1, 1])]); //#19288
        for (var _Sz = $f($1.asp2 - 2), _T0 = $f($1.asp3 - $1.asp2), _Sy = $f($1.cols - 13); _T0 < 0 ? _Sz >= _Sy : _Sz <= _Sy; _Sz += _T0) { //#19293
            $1.i = _Sz; //#19290
            $k[$j++] = $1.i; //#19291
            $k[$j++] = 4; //#19291
            $1.putalgnpat(); //#19291
            $k[$j++] = 4; //#19292
            $k[$j++] = $1.i; //#19292
            $1.putalgnpat(); //#19292
        } //#19292
        for (var _T8 = $f($1.asp2 - 2), _T9 = $f($1.asp3 - $1.asp2), _T7 = $f($1.cols - 9); _T9 < 0 ? _T8 >= _T7 : _T8 <= _T7; _T8 += _T9) { //#19300
            $1.x = _T8; //#19295
            for (var _TF = $f($1.asp2 - 2), _TG = $f($1.asp3 - $1.asp2), _TE = $f($1.rows - 9); _TG < 0 ? _TF >= _TE : _TF <= _TE; _TF += _TG) { //#19299
                $1.y = _TF; //#19297
                $k[$j++] = $1.x; //#19298
                $k[$j++] = $1.y; //#19298
                $1.putalgnpat(); //#19298
            } //#19298
        } //#19298
    } //#19298
    if ($eq($1.format, "rmqr")) { //#19315
        $1.algnpat = $a([$a([1, 1, 1, 9, 9]), $a([1, 0, 1, 9, 9]), $a([1, 1, 1, 9, 9]), $a([9, 9, 9, 9, 9]), $a([9, 9, 9, 9, 9])]); //#19309
        for (var _TV = $f($1.asp2 - 2), _TW = $f($1.asp3 - $1.asp2), _TU = $f($1.cols - 13); _TW < 0 ? _TV >= _TU : _TV <= _TU; _TV += _TW) { //#19314
            $1.i = _TV; //#19311
            $k[$j++] = $1.i; //#19312
            $k[$j++] = 0; //#19312
            $1.putalgnpat(); //#19312
            $k[$j++] = $1.i; //#19313
            $k[$j++] = $f($1.rows - 3); //#19313
            $1.putalgnpat(); //#19313
        } //#19313
    } //#19313
    var _WX = new Map([
        ["full", $a([$a([$a([0, 8]), $a([8, $f($1.cols - 1)])]), $a([$a([1, 8]), $a([8, $f($1.cols - 2)])]), $a([$a([2, 8]), $a([8, $f($1.cols - 3)])]), $a([$a([3, 8]), $a([8, $f($1.cols - 4)])]), $a([$a([4, 8]), $a([8, $f($1.cols - 5)])]), $a([$a([5, 8]), $a([8, $f($1.cols - 6)])]), $a([$a([7, 8]), $a([8, $f($1.cols - 7)])]), $a([$a([8, 8]), $a([$f($1.cols - 8), 8])]), $a([$a([8, 7]), $a([$f($1.cols - 7), 8])]), $a([$a([8, 5]), $a([$f($1.cols - 6), 8])]), $a([$a([8, 4]), $a([$f($1.cols - 5), 8])]), $a([$a([8, 3]), $a([$f($1.cols - 4), 8])]), $a([$a([8, 2]), $a([$f($1.cols - 3), 8])]), $a([$a([8, 1]), $a([$f($1.cols - 2), 8])]), $a([$a([8, 0]), $a([$f($1.cols - 1), 8])])])],
        ["micro", $a([$a([$a([1, 8])]), $a([$a([2, 8])]), $a([$a([3, 8])]), $a([$a([4, 8])]), $a([$a([5, 8])]), $a([$a([6, 8])]), $a([$a([7, 8])]), $a([$a([8, 8])]), $a([$a([8, 7])]), $a([$a([8, 6])]), $a([$a([8, 5])]), $a([$a([8, 4])]), $a([$a([8, 3])]), $a([$a([8, 2])]), $a([$a([8, 1])])])],
        ["rmqr", $a([$a([$a([11, 3]), $a([$f($1.cols - 3), $f($1.rows - 6)])]), $a([$a([11, 2]), $a([$f($1.cols - 4), $f($1.rows - 6)])]), $a([$a([11, 1]), $a([$f($1.cols - 5), $f($1.rows - 6)])]), $a([$a([10, 5]), $a([$f($1.cols - 6), $f($1.rows - 2)])]), $a([$a([10, 4]), $a([$f($1.cols - 6), $f($1.rows - 3)])]), $a([$a([10, 3]), $a([$f($1.cols - 6), $f($1.rows - 4)])]), $a([$a([10, 2]), $a([$f($1.cols - 6), $f($1.rows - 5)])]), $a([$a([10, 1]), $a([$f($1.cols - 6), $f($1.rows - 6)])]), $a([$a([9, 5]), $a([$f($1.cols - 7), $f($1.rows - 2)])]), $a([$a([9, 4]), $a([$f($1.cols - 7), $f($1.rows - 3)])]), $a([$a([9, 3]), $a([$f($1.cols - 7), $f($1.rows - 4)])]), $a([$a([9, 2]), $a([$f($1.cols - 7), $f($1.rows - 5)])]), $a([$a([9, 1]), $a([$f($1.cols - 7), $f($1.rows - 6)])]), $a([$a([8, 5]), $a([$f($1.cols - 8), $f($1.rows - 2)])]), $a([$a([8, 4]), $a([$f($1.cols - 8), $f($1.rows - 3)])]), $a([$a([8, 3]), $a([$f($1.cols - 8), $f($1.rows - 4)])]), $a([$a([8, 2]), $a([$f($1.cols - 8), $f($1.rows - 5)])]), $a([$a([8, 1]), $a([$f($1.cols - 8), $f($1.rows - 6)])])])]
    ]); //#19337
    $1.formatmap = $get(_WX, $1.format); //#19339
    $forall($1.formatmap, function() { //#19342
        $forall($k[--$j], function() { //#19341
            $forall($k[--$j]); //#19341
            $1.qmv(); //#19341
            $put($1.pixs, $k[--$j], 1); //#19341
        }); //#19341
    }); //#19341
    if ($eq($1.format, "full") && ($1.cols >= 45)) { //#19358
        $1.versionmap = $a([$a([$a([$f($1.cols - 9), 5]), $a([5, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 5]), $a([5, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 5]), $a([5, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 4]), $a([4, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 4]), $a([4, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 4]), $a([4, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 3]), $a([3, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 3]), $a([3, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 3]), $a([3, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 2]), $a([2, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 2]), $a([2, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 2]), $a([2, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 1]), $a([1, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 1]), $a([1, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 1]), $a([1, $f($1.cols - 11)])]), $a([$a([$f($1.cols - 9), 0]), $a([0, $f($1.cols - 9)])]), $a([$a([$f($1.cols - 10), 0]), $a([0, $f($1.cols - 10)])]), $a([$a([$f($1.cols - 11), 0]), $a([0, $f($1.cols - 11)])])]); //#19356
    } else { //#19358
        $1.versionmap = $a([]); //#19358
    } //#19358
    var _YB = $1.versionmap; //#19360
    for (var _YC = 0, _YD = _YB.length; _YC < _YD; _YC++) { //#19362
        $forall($get(_YB, _YC), function() { //#19361
            $forall($k[--$j]); //#19361
            $1.qmv(); //#19361
            $put($1.pixs, $k[--$j], 0); //#19361
        }); //#19361
    } //#19361
    if ($eq($1.format, "full")) { //#19367
        $k[$j++] = $1.pixs; //#19366
        $k[$j++] = 8; //#19366
        $k[$j++] = $f($1.rows - 8); //#19366
        $1.qmv(); //#19366
        var _YL = $k[--$j]; //#19366
        $put($k[--$j], _YL, 0); //#19366
    } //#19366
    var _Yf = $a([function() {
        var _YN = $k[--$j]; //#19372
        var _YO = $k[--$j]; //#19372
        $k[$j++] = $f(_YO + _YN) % 2; //#19372
    }, function() {
        var _YP = $k[--$j]; //#19373
        var _YQ = $k[--$j]; //#19373
        $k[$j++] = _YP; //#19373
        $k[$j++] = _YQ; //#19373
        $j--; //#19373
        var _YR = $k[--$j]; //#19373
        $k[$j++] = _YR % 2; //#19373
    }, function() {
        $j--; //#19374
        var _YS = $k[--$j]; //#19374
        $k[$j++] = _YS % 3; //#19374
    }, function() {
        var _YT = $k[--$j]; //#19375
        var _YU = $k[--$j]; //#19375
        $k[$j++] = $f(_YU + _YT) % 3; //#19375
    }, function() {
        var _YV = $k[--$j]; //#19376
        var _YW = $k[--$j]; //#19376
        $k[$j++] = ((~~(_YV / 2)) + (~~(_YW / 3))) % 2; //#19376
    }, function() {
        var _YX = $k[--$j]; //#19377
        var _YZ = $k[--$j] * _YX; //#19377
        $k[$j++] = $f((_YZ % 2) + (_YZ % 3)); //#19377
    }, function() {
        var _Ya = $k[--$j]; //#19378
        var _Yc = $k[--$j] * _Ya; //#19378
        $k[$j++] = ($f((_Yc % 2) + (_Yc % 3))) % 2; //#19378
    }, function() {
        var _Yd = $k[--$j]; //#19379
        var _Ye = $k[--$j]; //#19379
        $k[$j++] = ($f(((_Ye * _Yd) % 3) + ($f(_Ye + _Yd) % 2))) % 2; //#19379
    }]); //#19379
    var _Yq = $a([function() {
        var _Yg = $k[--$j]; //#19382
        var _Yh = $k[--$j]; //#19382
        $k[$j++] = _Yg; //#19382
        $k[$j++] = _Yh; //#19382
        $j--; //#19382
        var _Yi = $k[--$j]; //#19382
        $k[$j++] = _Yi % 2; //#19382
    }, function() {
        var _Yj = $k[--$j]; //#19383
        var _Yk = $k[--$j]; //#19383
        $k[$j++] = ((~~(_Yj / 2)) + (~~(_Yk / 3))) % 2; //#19383
    }, function() {
        var _Yl = $k[--$j]; //#19384
        var _Yn = $k[--$j] * _Yl; //#19384
        $k[$j++] = ($f((_Yn % 2) + (_Yn % 3))) % 2; //#19384
    }, function() {
        var _Yo = $k[--$j]; //#19385
        var _Yp = $k[--$j]; //#19385
        $k[$j++] = ($f(((_Yp * _Yo) % 3) + ($f(_Yp + _Yo) % 2))) % 2; //#19385
    }]); //#19385
    var _Yt = $a([function() {
        var _Yr = $k[--$j]; //#19388
        var _Ys = $k[--$j]; //#19388
        $k[$j++] = ((~~(_Yr / 2)) + (~~(_Ys / 3))) % 2; //#19388
    }]); //#19388
    var _Yu = new Map([
        ["full", _Yf],
        ["micro", _Yq],
        ["rmqr", _Yt]
    ]); //#19388
    $1.maskfuncs = $get(_Yu, $1.format); //#19390
    if ($1.mask != -1) { //#19394
        $1.maskfuncs = $a([$get($1.maskfuncs, $1.mask - 1)]); //#19392
        $1.bestmaskval = $1.mask - 1; //#19393
    } //#19393
    $1.masks = $a($1.maskfuncs.length); //#19395
    for (var _Z7 = 0, _Z6 = $1.masks.length - 1; _Z7 <= _Z6; _Z7 += 1) { //#19409
        $1.m = _Z7; //#19397
        $1.mask = $a($1.rows * $1.cols); //#19398
        for (var _ZD = 0, _ZC = $f($1.rows - 1); _ZD <= _ZC; _ZD += 1) { //#19407
            $1.j = _ZD; //#19400
            for (var _ZG = 0, _ZF = $f($1.cols - 1); _ZG <= _ZF; _ZG += 1) { //#19406
                $1.i = _ZG; //#19402
                $k[$j++] = $1.i; //#19403
                $k[$j++] = $1.j; //#19403
                if ($get($1.maskfuncs, $1.m)() === true) {
                    break;
                } //#19403
                var _ZM = $k[--$j]; //#19403
                $k[$j++] = _ZM == 0; //#19404
                $k[$j++] = $1.pixs; //#19404
                $k[$j++] = $1.i; //#19404
                $k[$j++] = $1.j; //#19404
                $1.qmv(); //#19404
                var _ZQ = $k[--$j]; //#19404
                var _ZS = $get($k[--$j], _ZQ); //#19404
                var _ZT = $k[--$j]; //#19404
                var _ZU = (_ZT && (_ZS == -1)) ? 1 : 0; //#19404
                $k[$j++] = _ZU; //#19405
                $k[$j++] = $1.mask; //#19405
                $k[$j++] = $1.i; //#19405
                $k[$j++] = $1.j; //#19405
                $1.qmv(); //#19405
                var _ZY = $k[--$j]; //#19405
                var _ZZ = $k[--$j]; //#19405
                $put(_ZZ, _ZY, $k[--$j]); //#19405
            } //#19405
        } //#19405
        $put($1.masks, $1.m, $1.mask); //#19408
    } //#19408
    var _Zg = $ne($1.format, "rmqr") ? 1 : 2; //#19412
    $1.posx = $f($1.cols - _Zg); //#19412
    $1.posy = $f($1.rows - 1); //#19413
    $1.dir = -1; //#19414
    $1.col = 1; //#19415
    $1.num = 0; //#19416
    for (;;) { //#19439
        if ($1.posx < 0) { //#19418
            break; //#19418
        } //#19418
        $k[$j++] = $1.pixs; //#19419
        $k[$j++] = $1.posx; //#19419
        $k[$j++] = $1.posy; //#19419
        $1.qmv(); //#19419
        var _Zm = $k[--$j]; //#19419
        if ($get($k[--$j], _Zm) == -1) { //#19423
            var _Zr = $get($1.cws, ~~($1.num / 8)); //#19420
            var _Zt = -(7 - ($1.num % 8)); //#19420
            $k[$j++] = ((_Zt < 0 ? _Zr >>> -_Zt : _Zr << _Zt)) & 1; //#19421
            $k[$j++] = $1.pixs; //#19421
            $k[$j++] = $1.posx; //#19421
            $k[$j++] = $1.posy; //#19421
            $1.qmv(); //#19421
            var _Zx = $k[--$j]; //#19421
            var _Zy = $k[--$j]; //#19421
            $put(_Zy, _Zx, $k[--$j]); //#19421
            $1.num = $1.num + 1; //#19422
        } //#19422
        if ($1.col == 1) { //#19436
            $1.col = 0; //#19425
            $1.posx = $f($1.posx - 1); //#19426
        } else { //#19436
            $1.col = 1; //#19428
            $1.posx = $f($1.posx + 1); //#19429
            $1.posy = $f($1.posy + $1.dir); //#19430
            if (($1.posy < 0) || ($1.posy >= $1.rows)) { //#19437
                $1.dir = $1.dir * -1; //#19432
                $1.posy = $f($1.posy + $1.dir); //#19433
                $1.posx = $f($1.posx - 2); //#19434
                if ($eq($1.format, "full") && ($1.posx == 6)) { //#19436
                    $1.posx = $f($1.posx - 1); //#19436
                } //#19436
            } //#19436
        } //#19436
    } //#19436
    $1.evalfulln1n3 = function() {
        $1.scrle = $k[--$j]; //#19443
        $k[$j++] = 'scr1'; //#19445
        $k[$j++] = 0; //#19445
        $forall($1.scrle, function() { //#19445
            var _aI = $k[--$j]; //#19445
            $k[$j++] = _aI; //#19445
            if (_aI >= 5) { //#19445
                var _aJ = $k[--$j]; //#19445
                var _aL = $f($f($k[--$j] + _aJ) - 2); //#19445
                $k[$j++] = _aL; //#19445
                $k[$j++] = _aL; //#19445
            } //#19445
            $j--; //#19445
        }); //#19445
        var _aM = $k[--$j]; //#19445
        $1[$k[--$j]] = _aM; //#19445
        $1.scr3 = 0; //#19447
        for (var _aQ = 3, _aP = $1.scrle.length - 3; _aQ <= _aP; _aQ += 2) { //#19462
            $1.j = _aQ; //#19449
            if (($get($1.scrle, $1.j) % 3) == 0) { //#19461
                $1.fact = ~~($get($1.scrle, $1.j) / 3); //#19451
                var _aZ = $geti($1.scrle, $1.j - 2, 5); //#19452
                for (var _aa = 0, _ab = _aZ.length; _aa < _ab; _aa++) { //#19452
                    $k[$j++] = $get(_aZ, _aa) == $1.fact; //#19452
                } //#19452
                var _ae = $k[--$j]; //#19452
                var _af = $k[--$j]; //#19452
                var _ag = $k[--$j]; //#19452
                $k[$j++] = $an(_af, _ae); //#19452
                $k[$j++] = _ag; //#19452
                $j--; //#19452
                var _ah = $k[--$j]; //#19452
                var _ai = $k[--$j]; //#19452
                var _aj = $k[--$j]; //#19452
                if (_aj && (_ai && _ah)) { //#19460
                    if (($1.j == 3) || (($1.j + 4) >= $1.scrle.length)) { //#19457
                        $1.scr3 = $1.scr3 + 40; //#19454
                    } else { //#19457
                        if (($get($1.scrle, $1.j - 3) >= 4) || ($get($1.scrle, $1.j + 3) >= 4)) { //#19458
                            $1.scr3 = $1.scr3 + 40; //#19457
                        } //#19457
                    } //#19457
                } //#19457
            } //#19457
        } //#19457
        $k[$j++] = $1.scr1; //#19463
        $k[$j++] = $1.scr3; //#19463
    }; //#19464
    $1.evalfull = function() {
        $1.sym = $k[--$j]; //#19468
        $1.n1 = 0; //#19470
        $1.n2 = 0; //#19470
        $1.n3 = 0; //#19470
        $1.rle = $a($f($1.cols + 1)); //#19471
        $1.lastpairs = $a($1.cols); //#19472
        $1.thispairs = $a($1.cols); //#19473
        $1.colsadd1 = $f($1.cols + 1); //#19474
        for (var _b7 = 0, _b6 = $f($1.cols - 1); _b7 <= _b6; _b7 += 1) { //#19513
            $1.i = _b7; //#19476
            $k[$j++] = Infinity; //#19479
            var _b9 = $1.cols; //#19480
            $k[$j++] = 0; //#19482
            $k[$j++] = 0; //#19482
            for (var _bB = $1.i, _bC = _b9, _bA = $f((_b9 * _b9) - 1); _bC < 0 ? _bB >= _bA : _bB <= _bA; _bB += _bC) { //#19482
                var _bE = $get($1.sym, _bB); //#19481
                var _bF = $k[--$j]; //#19481
                $k[$j++] = _bE; //#19481
                if ($eq(_bF, _bE)) { //#19481
                    var _bG = $k[--$j]; //#19481
                    var _bH = $k[--$j]; //#19481
                    $k[$j++] = $f(_bH + 1); //#19481
                    $k[$j++] = _bG; //#19481
                } else { //#19481
                    var _bI = $k[--$j]; //#19481
                    $k[$j++] = 1; //#19481
                    $k[$j++] = _bI; //#19481
                } //#19481
            } //#19481
            $j--; //#19483
            var _bK = $counttomark() + 2; //#19484
            $astore($geti($1.rle, 0, _bK - 2)); //#19484
            $1.evalfulln1n3(); //#19485
            $1.n3 = $f($k[--$j] + $1.n3); //#19485
            $1.n1 = $f($k[--$j] + $1.n1); //#19485
            $j--; //#19486
            $1.symrow = $geti($1.sym, $1.i * $1.cols, $1.cols); //#19489
            $k[$j++] = Infinity; //#19490
            var _bV = $1.symrow; //#19491
            $k[$j++] = 0; //#19493
            $k[$j++] = 0; //#19493
            for (var _bW = 0, _bX = _bV.length; _bW < _bX; _bW++) { //#19493
                var _bY = $get(_bV, _bW); //#19493
                var _bZ = $k[--$j]; //#19492
                $k[$j++] = _bY; //#19492
                if ($eq(_bZ, _bY)) { //#19492
                    var _ba = $k[--$j]; //#19492
                    var _bb = $k[--$j]; //#19492
                    $k[$j++] = $f(_bb + 1); //#19492
                    $k[$j++] = _ba; //#19492
                } else { //#19492
                    var _bc = $k[--$j]; //#19492
                    $k[$j++] = 1; //#19492
                    $k[$j++] = _bc; //#19492
                } //#19492
            } //#19492
            $j--; //#19494
            var _be = $counttomark() + 2; //#19495
            $astore($geti($1.rle, 0, _be - 2)); //#19495
            $1.evalfulln1n3(); //#19496
            $1.n3 = $f($k[--$j] + $1.n3); //#19496
            $1.n1 = $f($k[--$j] + $1.n1); //#19496
            $j--; //#19497
            var _bk = $1.thispairs; //#19500
            $1.thispairs = $1.lastpairs; //#19500
            $1.lastpairs = _bk; //#19500
            var _bo = ($get($1.symrow, 0) == 1) ? 0 : 1; //#19501
            var _bp = $1.symrow; //#19502
            $k[$j++] = _bo; //#19502
            for (var _bq = 0, _br = _bp.length; _bq < _br; _bq++) { //#19502
                var _bs = $get(_bp, _bq); //#19502
                var _bt = $k[--$j]; //#19502
                $k[$j++] = $f(_bt + _bs); //#19502
                $k[$j++] = _bs; //#19502
            } //#19502
            $j--; //#19503
            $astore($1.thispairs); //#19504
            $j--; //#19504
            if ($1.i > 0) { //#19511
                $k[$j++] = Infinity; //#19506
                $aload($1.lastpairs); //#19507
                $aload($1.thispairs); //#19507
                $k[$j++] = $1.n2; //#19508
                for (var _c0 = 0, _c1 = $1.cols; _c0 < _c1; _c0++) { //#19508
                    var _c2 = $k[--$j]; //#19508
                    var _c3 = $k[--$j]; //#19508
                    $k[$j++] = _c2; //#19508
                    $k[$j++] = _c3; //#19508
                    var _c5 = $k[$j - 1 - $1.colsadd1]; //#19508
                    if (($f($k[--$j] + _c5) & 3) == 0) { //#19508
                        var _c7 = $k[--$j]; //#19508
                        $k[$j++] = $f(_c7 + 3); //#19508
                    } //#19508
                } //#19508
                $1.n2 = $k[--$j]; //#19509
                $cleartomark(); //#19510
            } //#19510
        } //#19510
        $k[$j++] = 'dark'; //#19516
        $k[$j++] = 0; //#19516
        $forall($1.sym, function() { //#19516
            var _cA = $k[--$j]; //#19516
            var _cB = $k[--$j]; //#19516
            $k[$j++] = $f(_cB + _cA); //#19516
        }); //#19516
        var _cC = $k[--$j]; //#19516
        $1[$k[--$j]] = _cC; //#19516
        var _cF = $1.cols; //#19517
        $1.n4 = (~~((Math.abs($f((($1.dark * 100) / (_cF * _cF)) - 50))) / 5)) * 10; //#19517
        $k[$j++] = $f(($f($f($1.n1 + $1.n2) + $1.n3)) + $1.n4); //#19519
    }; //#19520
    $1.evalmicro = function() {
        $1.sym = $k[--$j]; //#19524
        $1.dkrhs = 0; //#19525
        $1.dkbot = 0; //#19525
        for (var _cN = 1, _cM = $f($1.cols - 1); _cN <= _cM; _cN += 1) { //#19530
            $1.i = _cN; //#19527
            $k[$j++] = 'dkrhs'; //#19528
            $k[$j++] = $1.dkrhs; //#19528
            $k[$j++] = $1.sym; //#19528
            $k[$j++] = $f($1.cols - 1); //#19528
            $k[$j++] = $1.i; //#19528
            $1.qmv(); //#19528
            var _cS = $k[--$j]; //#19528
            var _cU = $get($k[--$j], _cS); //#19528
            var _cV = $k[--$j]; //#19528
            $1[$k[--$j]] = $f(_cV + _cU); //#19528
            $k[$j++] = 'dkbot'; //#19529
            $k[$j++] = $1.dkbot; //#19529
            $k[$j++] = $1.sym; //#19529
            $k[$j++] = $1.i; //#19529
            $k[$j++] = $f($1.cols - 1); //#19529
            $1.qmv(); //#19529
            var _cb = $k[--$j]; //#19529
            var _cd = $get($k[--$j], _cb); //#19529
            var _ce = $k[--$j]; //#19529
            $1[$k[--$j]] = $f(_ce + _cd); //#19529
        } //#19529
        if ($1.dkrhs <= $1.dkbot) { //#19534
            $k[$j++] = -(($1.dkrhs * 16) + $1.dkbot); //#19532
        } else { //#19534
            $k[$j++] = -(($1.dkbot * 16) + $1.dkrhs); //#19534
        } //#19534
    }; //#19536
    $1.bestscore = 999999999; //#19539
    for (var _co = 0, _cn = $1.masks.length - 1; _co <= _cn; _co += 1) { //#19561
        $1.m = _co; //#19541
        $1.masksym = $a($1.rows * $1.cols); //#19542
        for (var _cv = 0, _cu = $f(($1.rows * $1.cols) - 1); _cv <= _cu; _cv += 1) { //#19546
            $1.i = _cv; //#19544
            $put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); //#19545
        } //#19545
        if ($1.masks.length != 1) { //#19559
            if ($eq($1.format, "full")) { //#19551
                $k[$j++] = $1.masksym; //#19549
                $1.evalfull(); //#19549
                $1.score = $k[--$j]; //#19549
            } else { //#19551
                $k[$j++] = $1.masksym; //#19551
                $1.evalmicro(); //#19551
                $1.score = $k[--$j]; //#19551
            } //#19551
            if ($1.score < $1.bestscore) { //#19557
                $1.bestsym = $1.masksym; //#19554
                $1.bestmaskval = $1.m; //#19555
                $1.bestscore = $1.score; //#19556
            } //#19556
        } else { //#19559
            $1.bestsym = $1.masksym; //#19559
        } //#19559
    } //#19559
    $1.pixs = $1.bestsym; //#19562
    if ($eq($1.format, "full")) { //#19567
        $k[$j++] = $1.pixs; //#19566
        $k[$j++] = 8; //#19566
        $k[$j++] = $f($1.cols - 8); //#19566
        $1.qmv(); //#19566
        var _dM = $k[--$j]; //#19566
        $put($k[--$j], _dM, 1); //#19566
    } //#19566
    if ($eq($1.format, "full")) { //#19585
        $1.fmtvals = $a([21522, 20773, 24188, 23371, 17913, 16590, 20375, 19104, 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 5769, 5054, 7399, 6608, 1890, 597, 3340, 2107, 13663, 12392, 16177, 14854, 9396, 8579, 11994, 11245]); //#19576
        $k[$j++] = 'ecid'; //#19577
        $search("MLHQ", $1.eclevel); //#19577
        $j--; //#19577
        var _dR = $k[--$j]; //#19577
        var _dS = $k[--$j]; //#19577
        $k[$j++] = _dR.length; //#19577
        $k[$j++] = _dS; //#19577
        $j--; //#19577
        var _dT = $k[--$j]; //#19577
        var _dU = $k[--$j]; //#19577
        $k[$j++] = _dT; //#19577
        $k[$j++] = _dU; //#19577
        $j--; //#19577
        var _dV = $k[--$j]; //#19577
        $1[$k[--$j]] = _dV; //#19577
        $1.fmtval = $get($1.fmtvals, ($1.ecid << 3) + $1.bestmaskval); //#19578
        for (var _dd = 0, _dc = $1.formatmap.length - 1; _dd <= _dc; _dd += 1) { //#19584
            $1.i = _dd; //#19580
            $forall($get($1.formatmap, $1.i), function() { //#19583
                var _di = $k[--$j]; //#19582
                $k[$j++] = $1.pixs; //#19582
                $aload(_di); //#19582
                $1.qmv(); //#19582
                var _dj = $1.fmtval; //#19582
                var _dl = -(14 - $1.i); //#19582
                var _dm = $k[--$j]; //#19582
                $put($k[--$j], _dm, ((_dl < 0 ? _dj >>> -_dl : _dj << _dl)) & 1); //#19582
            }); //#19582
        } //#19582
    } //#19582
    if ($eq($1.format, "micro")) { //#19599
        $1.fmtvals = $a([17477, 16754, 20011, 19228, 21934, 20633, 24512, 23287, 26515, 25252, 28157, 26826, 30328, 29519, 31766, 31009, 1758, 1001, 3248, 2439, 5941, 4610, 7515, 6252, 9480, 8255, 12134, 10833, 13539, 12756, 16013, 15290]); //#19592
        $1.symid = $get($get($a([$a([0]), $a([1, 2]), $a([3, 4]), $a([5, 6, 7])]), ~~($f($1.cols - 11) / 2)), $1.eclval); //#19593
        $1.fmtval = $get($1.fmtvals, ($1.symid << 2) + $1.bestmaskval); //#19594
        for (var _e5 = 0, _e4 = $1.formatmap.length - 1; _e5 <= _e4; _e5 += 1) { //#19598
            $1.i = _e5; //#19596
            $k[$j++] = $1.pixs; //#19597
            $aload($get($get($1.formatmap, $1.i), 0)); //#19597
            $1.qmv(); //#19597
            var _eB = $1.fmtval; //#19597
            var _eD = -(14 - $1.i); //#19597
            var _eE = $k[--$j]; //#19597
            $put($k[--$j], _eE, ((_eD < 0 ? _eB >>> -_eD : _eB << _eD)) & 1); //#19597
        } //#19597
    } //#19597
    if ($eq($1.format, "rmqr")) { //#19629
        $1.fmtvals1 = $a([129714, 124311, 121821, 115960, 112748, 108361, 104707, 99878, 98062, 90155, 89697, 82244, 81360, 74485, 72895, 66458, 61898, 61167, 53413, 53120, 45844, 44081, 37499, 36190, 29814, 27475, 21785, 19004, 13992, 10637, 6087, 2274, 258919, 257090, 250376, 249133, 242105, 241308, 233686, 233459, 227035, 223742, 219060, 215185, 209925, 207648, 202090, 199247, 194591, 190266, 186736, 181845, 178881, 173540, 170926, 165003, 163235, 156294, 154828, 148457, 147325, 139352, 138770, 131383]); //#19610
        $1.fmtvals2 = $a([133755, 136542, 142100, 144433, 149669, 153472, 158154, 161519, 167879, 168162, 175784, 176525, 183577, 184892, 191606, 193363, 196867, 204326, 204908, 212809, 213981, 220408, 221874, 228759, 230591, 236442, 239056, 244469, 247393, 252228, 255758, 260139, 942, 7307, 8897, 15844, 16752, 24149, 24607, 32570, 34322, 39223, 42877, 47192, 50380, 56297, 58787, 64134, 67798, 71667, 76217, 79516, 84488, 87341, 93031, 95298, 101738, 102991, 109573, 111392, 118708, 118929, 126683, 127486]); //#19620
        $k[$j++] = 'fmtvalu'; //#19621
        $search("MH", $1.eclevel); //#19621
        $j--; //#19621
        var _eK = $k[--$j]; //#19621
        var _eL = $k[--$j]; //#19621
        $k[$j++] = _eK.length; //#19621
        $k[$j++] = _eL; //#19621
        $j--; //#19621
        var _eM = $k[--$j]; //#19621
        var _eN = $k[--$j]; //#19621
        $k[$j++] = _eM; //#19621
        $k[$j++] = _eN; //#19621
        $j--; //#19621
        var _eO = $k[--$j]; //#19621
        $1[$k[--$j]] = (_eO << 5) + $1.verind; //#19621
        $1.fmtval1 = $get($1.fmtvals1, $1.fmtvalu); //#19622
        $1.fmtval2 = $get($1.fmtvals2, $1.fmtvalu); //#19623
        for (var _eZ = 0, _eY = $1.formatmap.length - 1; _eZ <= _eY; _eZ += 1) { //#19628
            $1.i = _eZ; //#19625
            $k[$j++] = $1.pixs; //#19626
            $aload($get($get($1.formatmap, $1.i), 0)); //#19626
            $1.qmv(); //#19626
            var _ef = $1.fmtval1; //#19626
            var _eh = -(17 - $1.i); //#19626
            var _ei = $k[--$j]; //#19626
            $put($k[--$j], _ei, ((_eh < 0 ? _ef >>> -_eh : _ef << _eh)) & 1); //#19626
            $k[$j++] = $1.pixs; //#19627
            $aload($get($get($1.formatmap, $1.i), 1)); //#19627
            $1.qmv(); //#19627
            var _ep = $1.fmtval2; //#19627
            var _er = -(17 - $1.i); //#19627
            var _es = $k[--$j]; //#19627
            $put($k[--$j], _es, ((_er < 0 ? _ep >>> -_er : _ep << _er)) & 1); //#19627
        } //#19627
    } //#19627
    if ($eq($1.format, "full") && ($1.cols >= 45)) { //#19647
        $1.vervals = $a([31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136957, 141498, 145311, 150283, 152622, 158308, 161089, 167017]); //#19639
        $1.verval = $get($1.vervals, (~~($f($1.cols - 17) / 4)) - 7); //#19640
        for (var _f2 = 0, _f1 = $1.versionmap.length - 1; _f2 <= _f1; _f2 += 1) { //#19646
            $1.i = _f2; //#19642
            $forall($get($1.versionmap, $1.i), function() { //#19645
                var _f7 = $k[--$j]; //#19644
                $k[$j++] = $1.pixs; //#19644
                $forall(_f7); //#19644
                $1.qmv(); //#19644
                var _f8 = $1.verval; //#19644
                var _fA = -(17 - $1.i); //#19644
                var _fB = $k[--$j]; //#19644
                $put($k[--$j], _fB, ((_fA < 0 ? _f8 >>> -_fA : _f8 << _fA)) & 1); //#19644
            }); //#19644
        } //#19644
    } //#19644
    var _fJ = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.cols],
        ["pixy", $1.rows],
        ["height", ($1.rows * 2) / 72],
        ["width", ($1.cols * 2) / 72],
        ["opt", $1.options]
    ]); //#19657
    $k[$j++] = _fJ; //#19660
    if (!$1.dontdraw) { //#19660
        bwipp_renmatrix(); //#19660
    } //#19660
}

function bwipp_swissqrcode() {
    var $1 = {}; //#19691
    $1.options = $k[--$j]; //#19693
    $1.barcode = $k[--$j]; //#19694
    $1.dontdraw = false; //#19696
    $1.parse = false; //#19698
    $forall($1.options, function() { //#19709
        var _3 = $k[--$j]; //#19709
        $1[$k[--$j]] = _3; //#19709
    }); //#19709
    var _6 = new Map([
        ["parse", $1.parse],
        ["parseonly", true],
        ["parsefnc", false]
    ]); //#19715
    $1.fncvals = _6; //#19716
    $k[$j++] = 'barcode'; //#19717
    $k[$j++] = $1.barcode; //#19717
    $k[$j++] = $1.fncvals; //#19717
    bwipp_parseinput(); //#19717
    var _9 = $k[--$j]; //#19717
    $1[$k[--$j]] = _9; //#19717
    $1.barlen = $1.barcode.length; //#19718
    delete $1.options["parse"]; //#19719
    if ($1.barcode.length > 997) { //#19724
        $k[$j++] = 'bwipp.swissqrcodeBadLength'; //#19723
        $k[$j++] = "Swiss QR Code input must not exceed 997 digits"; //#19723
        bwipp_raiseerror(); //#19723
    } //#19723
    $put($1.options, "dontdraw", true); //#19727
    $k[$j++] = 'args'; //#19728
    $k[$j++] = $1.barcode; //#19728
    $k[$j++] = $1.options; //#19728
    bwipp_qrcode(); //#19728
    var _H = $k[--$j]; //#19728
    $1[$k[--$j]] = _H; //#19728
    $put($1.args, "opt", $1.options); //#19730
    $k[$j++] = $1.args; //#19799
    if (!$1.dontdraw) { //#19799
        $$.save(); //#19744
        var _N = $$.currpos(); //#19745
        $$.translate(_N.x, _N.y); //#19745
        var _O = 72 / 25.4; //#19746
        $$.scale(_O, _O); //#19746
        $$.save(); //#19749
        $$.newpath(); //#19750
        $$.moveto(0, 0); //#19751
        $$.lineto(46, 0); //#19752
        $$.lineto(46, 46); //#19753
        $$.lineto(0, 46); //#19754
        $$.closepath(); //#19755
        $$.moveto(19.5, 19.5); //#19756
        $$.lineto(19.5, 26.5); //#19757
        $$.lineto(26.5, 26.5); //#19758
        $$.lineto(26.5, 19.5); //#19759
        $$.closepath(); //#19760
        $$.clip(); //#19761
        $$.save(); //#19764
        $$.moveto(0, 0); //#19765
        var _R = (46 / $get($1.args, "pixx")) / 2; //#19766
        $$.scale(_R, _R); //#19766
        bwipp_renmatrix(); //#19767
        $$.restore(); //#19768
        $$.restore(); //#19770
        $$.translate(19.5, 19.5); //#19773
        var _S = 7 / 83; //#19774
        $$.scale(_S, _S); //#19774
        $$.newpath(); //#19776
        $$.moveto(6, 6); //#19777
        $$.lineto(6, 77); //#19778
        $$.lineto(77, 77); //#19779
        $$.lineto(77, 6); //#19780
        $$.closepath(); //#19781
        $$.moveto(49, 18); //#19782
        $$.lineto(49, 34); //#19783
        $$.lineto(65, 34); //#19784
        $$.lineto(65, 49); //#19785
        $$.lineto(49, 49); //#19786
        $$.lineto(49, 65); //#19787
        $$.lineto(34, 65); //#19788
        $$.lineto(34, 49); //#19789
        $$.lineto(18, 49); //#19790
        $$.lineto(18, 34); //#19791
        $$.lineto(34, 34); //#19792
        $$.lineto(34, 18); //#19793
        $$.closepath(); //#19794
        $$.setrgbcolor(0, 0, 0); //#19795
        $$.fill(); //#19795
        $$.restore(); //#19797
    } //#19797
}

function bwipp_microqrcode() {
    var $1 = {}; //#19829
    $1.options = $k[--$j]; //#19831
    $1.barcode = $k[--$j]; //#19832
    $1.dontdraw = false; //#19834
    $forall($1.options, function() { //#19845
        var _3 = $k[--$j]; //#19845
        $1[$k[--$j]] = _3; //#19845
    }); //#19845
    $put($1.options, "dontdraw", true); //#19848
    $put($1.options, "format", "micro"); //#19849
    $k[$j++] = 'args'; //#19851
    $k[$j++] = $1.barcode; //#19851
    $k[$j++] = $1.options; //#19851
    bwipp_qrcode(); //#19851
    var _9 = $k[--$j]; //#19851
    $1[$k[--$j]] = _9; //#19851
    $put($1.args, "opt", $1.options); //#19853
    $k[$j++] = $1.args; //#19856
    if (!$1.dontdraw) { //#19856
        bwipp_renmatrix(); //#19856
    } //#19856
}

function bwipp_rectangularmicroqrcode() {
    var $1 = {}; //#19886
    $1.options = $k[--$j]; //#19888
    $1.barcode = $k[--$j]; //#19889
    $1.dontdraw = false; //#19891
    $forall($1.options, function() { //#19902
        var _3 = $k[--$j]; //#19902
        $1[$k[--$j]] = _3; //#19902
    }); //#19902
    $put($1.options, "dontdraw", true); //#19905
    $put($1.options, "format", "rmqr"); //#19906
    $k[$j++] = 'args'; //#19908
    $k[$j++] = $1.barcode; //#19908
    $k[$j++] = $1.options; //#19908
    bwipp_qrcode(); //#19908
    var _9 = $k[--$j]; //#19908
    $1[$k[--$j]] = _9; //#19908
    $put($1.args, "opt", $1.options); //#19910
    $k[$j++] = $1.args; //#19913
    if (!$1.dontdraw) { //#19913
        bwipp_renmatrix(); //#19913
    } //#19913
}

function bwipp_maxicode() {
    var $1 = {}; //#19943
    $1.options = $k[--$j]; //#19945
    $1.barcode = $k[--$j]; //#19946
    $1.dontdraw = false; //#19948
    $1.mode = -1; //#19949
    $1.sam = -1; //#19950
    $1.parse = false; //#19951
    $1.parsefnc = false; //#19952
    $forall($1.options, function() { //#19963
        var _3 = $k[--$j]; //#19963
        $1[$k[--$j]] = _3; //#19963
    }); //#19963
    $1.mode = ~~$1.mode; //#19965
    $1.sam = ~~$1.sam; //#19966
    var _9 = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["eci", true]
    ]); //#19972
    $1.fncvals = _9; //#19974
    $k[$j++] = 'msg'; //#19975
    $k[$j++] = $1.barcode; //#19975
    $k[$j++] = $1.fncvals; //#19975
    bwipp_parseinput(); //#19975
    var _C = $k[--$j]; //#19975
    $1[$k[--$j]] = _C; //#19975
    $1.msglen = $1.msg.length; //#19976
    if (($1.mode == 2) || ($1.mode == 3)) { //#20015
        $1.barcode = $s($1.msglen); //#19982
        for (var _L = 0, _K = $1.msglen - 1; _L <= _K; _L += 1) { //#19988
            $1.i = _L; //#19984
            if ($get($1.msg, $1.i) > 0) { //#19987
                $put($1.barcode, $1.i, $get($1.msg, $1.i)); //#19986
            } //#19986
        } //#19986
        $1.barlen = $1.barcode.length; //#19989
        if ($eq($geti($1.barcode, 0, 7), "\x5b\x29\x3e\x1e\x30\x31\x1d")) { //#19996
            $1.fid = $geti($1.barcode, 0, 9); //#19993
            $1.barcode = $geti($1.barcode, 9, $1.barlen - 9); //#19994
        } else { //#19996
            $1.fid = ""; //#19996
        } //#19996
        $search($1.barcode, "\x1d"); //#20000
        $j--; //#20000
        $1.pcode = $k[--$j]; //#20000
        $j--; //#20001
        $search($k[--$j], "\x1d"); //#20001
        $j--; //#20001
        $1.ccode = $k[--$j]; //#20001
        $j--; //#20002
        $search($k[--$j], "\x1d"); //#20002
        $j--; //#20002
        $1.scode = $k[--$j]; //#20002
        $j--; //#20003
        $1.barcode = $k[--$j]; //#20003
        var _l = $s($1.barcode.length + $1.fid.length); //#20006
        $puti(_l, 0, $1.fid); //#20007
        $puti(_l, $1.fid.length, $1.barcode); //#20008
        $1.barcode = _l; //#20009
        $1.barlen = $1.barcode.length; //#20010
        $k[$j++] = Infinity; //#20012
        var _q = $1.barcode; //#20012
        for (var _r = 0, _s = _q.length; _r < _s; _r++) { //#20012
            $k[$j++] = $get(_q, _r); //#20012
        } //#20012
        $1.msg = $a(); //#20012
        $1.msglen = $1.msg.length; //#20013
    } //#20013
    $1.eci = -1; //#20018
    $1.pad = -2; //#20018
    $1.ns = -3; //#20018
    $1.la = -4; //#20019
    $1.lb = -5; //#20019
    $1.sa = -6; //#20020
    $1.sb = -7; //#20020
    $1.sc = -8; //#20020
    $1.sd = -9; //#20020
    $1.se = -10; //#20020
    $1.sa2 = -11; //#20021
    $1.sa3 = -12; //#20021
    $1.lkc = -13; //#20022
    $1.lkd = -14; //#20022
    $1.lke = -15; //#20022
    $1.pd2 = -16; //#20023
    $1.pd3 = -17; //#20023
    $1.charmaps = $a([$a([13, "`", 192, 224, 0]), $a(["A", "a", 193, 225, 1]), $a(["B", "b", 194, 226, 2]), $a(["C", "c", 195, 227, 3]), $a(["D", "d", 196, 228, 4]), $a(["E", "e", 197, 229, 5]), $a(["F", "f", 198, 230, 6]), $a(["G", "g", 199, 231, 7]), $a(["H", "h", 200, 232, 8]), $a(["I", "i", 201, 233, 9]), $a(["J", "j", 202, 234, 10]), $a(["K", "k", 203, 235, 11]), $a(["L", "l", 204, 236, 12]), $a(["M", "m", 205, 237, 13]), $a(["N", "n", 206, 238, 14]), $a(["O", "o", 207, 239, 15]), $a(["P", "p", 208, 240, 16]), $a(["Q", "q", 209, 241, 17]), $a(["R", "r", 210, 242, 18]), $a(["S", "s", 211, 243, 19]), $a(["T", "t", 212, 244, 20]), $a(["U", "u", 213, 245, 21]), $a(["V", "v", 214, 246, 22]), $a(["W", "w", 215, 247, 23]), $a(["X", "x", 216, 248, 24]), $a(["Y", "y", 217, 249, 25]), $a(["Z", "z", 218, 250, 26]), $a([$1.eci, $1.eci, $1.eci, $1.eci, $1.eci]), $a([28, 28, 28, 28, $1.pad]), $a([29, 29, 29, 29, $1.pad]), $a([30, 30, 30, 30, 27]), $a([$1.ns, $1.ns, $1.ns, $1.ns, $1.ns]), $a([" ", "{", 219, 251, 28]), $a([$1.pad, $1.pad, 220, 252, 29]), $a(["\"", "}", 221, 253, 30]), $a(["#", "~", 222, 254, 31]), $a(["$", 127, 223, 255, 159]), $a(["%", ";", 170, 161, 160]), $a(["&", "<", 172, 168, 162]), $a(["'", "=", 177, 171, 163]), $a([40, ">", 178, 175, 164]), $a([41, "?", 179, 176, 165]), $a(["*", "[", 181, 180, 166]), $a(["+", 92, 185, 183, 167]), $a([",", "]", 186, 184, 169]), $a(["-", "^", 188, 187, 173]), $a([".", "_", 189, 191, 174]), $a(["/", " ", 190, 138, 182]), $a(["0", ",", 128, 139, 149]), $a(["1", ".", 129, 140, 150]), $a(["2", "/", 130, 141, 151]), $a(["3", ":", 131, 142, 152]), $a(["4", "@", 132, 143, 153]), $a(["5", "!", 133, 144, 154]), $a(["6", "|", 134, 145, 155]), $a(["7", $1.pd2, 135, 146, 156]), $a(["8", $1.sa2, 136, 147, 157]), $a(["9", $1.sa3, 137, 148, 158]), $a([":", $1.pd3, $1.la, $1.la, $1.la]), $a([$1.sb, $1.sa, " ", " ", " "]), $a([$1.sc, $1.sc, $1.lkc, $1.sc, $1.sc]), $a([$1.sd, $1.sd, $1.sd, $1.lkd, $1.sd]), $a([$1.se, $1.se, $1.se, $1.se, $1.lke]), $a([$1.lb, $1.la, $1.lb, $1.lb, $1.lb])]); //#20092
    $1.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#20095
    for (var _2j = 0, _2i = $1.charmaps.length - 1; _2j <= _2i; _2j += 1) { //#20104
        $1.i = _2j; //#20097
        $1.encs = $get($1.charmaps, $1.i); //#20098
        for (var _2n = 0; _2n <= 4; _2n += 1) { //#20103
            $1.j = _2n; //#20100
            var _2q = $get($1.encs, $1.j); //#20101
            $k[$j++] = _2q; //#20101
            if ($eq($type(_2q), 'stringtype')) { //#20101
                var _2t = $get($k[--$j], 0); //#20101
                $k[$j++] = _2t; //#20101
            } //#20101
            $put($get($1.charvals, $1.j), $k[--$j], $1.i); //#20102
        } //#20102
    } //#20102
    $1.seta = $get($1.charvals, 0); //#20105
    $1.setb = $get($1.charvals, 1); //#20106
    $1.setc = $get($1.charvals, 2); //#20107
    $1.setd = $get($1.charvals, 3); //#20108
    $1.sete = $get($1.charvals, 4); //#20109
    $k[$j++] = Infinity; //#20112
    for (var _3A = 0, _3B = $1.msglen + 1; _3A < _3B; _3A++) { //#20112
        $k[$j++] = 0; //#20112
    } //#20112
    $1.nseq = $a(); //#20112
    for (var _3E = $1.msglen - 1; _3E >= 0; _3E -= 1) { //#20120
        $1.i = _3E; //#20114
        var _3H = $get($1.msg, $1.i); //#20115
        if ((_3H >= 48) && (_3H <= 57)) { //#20118
            $put($1.nseq, $1.i, $f($get($1.nseq, $1.i + 1) + 1)); //#20116
        } else { //#20118
            $put($1.nseq, $1.i, 0); //#20118
        } //#20118
    } //#20118
    $1.nseq = $geti($1.nseq, 0, $1.msglen); //#20121
    $1.prefixinset = function() {
        $k[$j++] = 0; //#20128
        for (;;) { //#20128
            var _3S = $k[--$j]; //#20126
            var _3T = $k[--$j]; //#20126
            $k[$j++] = _3T; //#20126
            $k[$j++] = _3S; //#20126
            if (_3S >= _3T.length) { //#20126
                break; //#20126
            } //#20126
            var _3U = $k[--$j]; //#20127
            var _3V = $k[--$j]; //#20127
            var _3X = $k[--$j]; //#20127
            var _3Y = $get(_3X, $get(_3V, _3U)) !== undefined; //#20127
            $k[$j++] = _3X; //#20127
            $k[$j++] = _3V; //#20127
            $k[$j++] = _3U; //#20127
            if (_3Y) { //#20127
                var _3Z = $k[--$j]; //#20127
                $k[$j++] = $f(_3Z + 1); //#20127
            } else { //#20127
                break; //#20127
            } //#20127
        } //#20127
        var _3a = $k[--$j]; //#20129
        var _3b = $k[--$j]; //#20129
        $k[$j++] = _3a; //#20129
        $k[$j++] = _3b; //#20129
        $j--; //#20129
        var _3c = $k[--$j]; //#20129
        var _3d = $k[--$j]; //#20129
        $k[$j++] = _3c; //#20129
        $k[$j++] = _3d; //#20129
        $j--; //#20129
    }; //#20130
    $1.enc = function() {
        var _3e = $k[--$j]; //#20133
        $put($1.out, $1.j, $get(_3e, $k[--$j])); //#20133
        $1.j = $1.j + 1; //#20134
    }; //#20135
    $1.out = $a(144); //#20137
    $1.i = 0; //#20138
    $1.j = 0; //#20138
    $1.cset = "seta"; //#20138
    for (;;) { //#20290
        if ($1.i == $1.msglen) { //#20147
            if ($ne($1.cset, "seta") && $ne($1.cset, "setb")) { //#20145
                $k[$j++] = $1.la; //#20143
                $k[$j++] = $1[$1.cset]; //#20143
                $1.enc(); //#20143
                $1.cset = "seta"; //#20144
            } //#20144
            break; //#20146
        } //#20146
        for (;;) { //#20289
            if ($get($1.msg, $1.i) <= -1000000) { //#20176
                $k[$j++] = $1.eci; //#20151
                $k[$j++] = $1[$1.cset]; //#20151
                $1.enc(); //#20151
                var _41 = $f((-$get($1.msg, $1.i)) - 1000000); //#20153
                $k[$j++] = _41; //#20171
                if (_41 <= 31) { //#20170
                    var _42 = $k[--$j]; //#20154
                    $k[$j++] = _42 & 63; //#20155
                    $astore($a(1)); //#20155
                } else { //#20170
                    var _44 = $k[--$j]; //#20156
                    $k[$j++] = _44; //#20171
                    if (_44 <= 1023) { //#20170
                        var _45 = $k[--$j]; //#20157
                        $k[$j++] = ((_45 >>> 6) & 31) | 32; //#20159
                        $k[$j++] = _45 & 63; //#20159
                        $astore($a(2)); //#20159
                    } else { //#20170
                        var _47 = $k[--$j]; //#20160
                        $k[$j++] = _47; //#20171
                        if (_47 <= 32767) { //#20170
                            var _48 = $k[--$j]; //#20161
                            $k[$j++] = ((_48 >>> 12) & 47) | 48; //#20164
                            $k[$j++] = (_48 >>> 6) & 63; //#20164
                            $k[$j++] = _48 & 63; //#20164
                            $astore($a(3)); //#20164
                        } else { //#20170
                            var _4A = $k[--$j]; //#20166
                            $k[$j++] = ((_4A >>> 18) & 55) | 56; //#20170
                            $k[$j++] = (_4A >>> 12) & 63; //#20170
                            $k[$j++] = (_4A >>> 6) & 63; //#20170
                            $k[$j++] = _4A & 63; //#20170
                            $astore($a(4)); //#20170
                        } //#20170
                    } //#20170
                } //#20170
                var _4C = $k[--$j]; //#20172
                $puti($1.out, $1.j, _4C); //#20172
                $1.j = _4C.length + $1.j; //#20173
                $1.i = $1.i + 1; //#20174
                break; //#20175
            } //#20175
            if ($get($1.nseq, $1.i) >= 9) { //#20187
                var _4M = $geti($1.msg, $1.i, 9); //#20180
                $k[$j++] = 0; //#20180
                for (var _4N = 0, _4O = _4M.length; _4N < _4O; _4N++) { //#20180
                    var _4Q = $k[--$j]; //#20180
                    $k[$j++] = ($f(_4Q + $f($get(_4M, _4N) - 48))) * 10; //#20180
                } //#20180
                var _4R = $k[--$j]; //#20180
                $k[$j++] = ~~(_4R / 10); //#20181
                for (var _4S = 0, _4T = 4; _4S < _4T; _4S++) { //#20181
                    var _4U = $k[--$j]; //#20181
                    $k[$j++] = _4U & 63; //#20181
                    $k[$j++] = _4U >>> 6; //#20181
                } //#20181
                $k[$j++] = $get($1[$1.cset], $1.ns); //#20182
                for (var _4Z = 0; _4Z <= 10; _4Z += 2) { //#20182
                    var _4a = $k[$j - 1 - _4Z]; //#20182
                    $k[$j++] = _4a; //#20182
                } //#20182
                $astore($a(6)); //#20182
                var _4c = $k[--$j]; //#20182
                var _4d = $k[--$j]; //#20182
                var _4e = $k[--$j]; //#20182
                var _4f = $k[--$j]; //#20182
                var _4g = $k[--$j]; //#20182
                var _4h = $k[--$j]; //#20182
                var _4i = $k[--$j]; //#20182
                $k[$j++] = _4c; //#20182
                $k[$j++] = _4i; //#20182
                $k[$j++] = _4h; //#20182
                $k[$j++] = _4g; //#20182
                $k[$j++] = _4f; //#20182
                $k[$j++] = _4e; //#20182
                $k[$j++] = _4d; //#20182
                for (var _4j = 0, _4k = 6; _4j < _4k; _4j++) { //#20182
                    $j--; //#20182
                } //#20182
                $puti($1.out, $1.j, $k[--$j]); //#20183
                $1.i = $1.i + 9; //#20184
                $1.j = $1.j + 6; //#20185
                break; //#20186
            } //#20186
            $1.char1 = $get($1.msg, $1.i); //#20190
            $k[$j++] = 'char2'; //#20191
            if (($1.i + 1) < $1.msglen) { //#20191
                $k[$j++] = $get($1.msg, $1.i + 1); //#20191
            } else { //#20191
                $k[$j++] = -99; //#20191
            } //#20191
            var _4y = $k[--$j]; //#20191
            $1[$k[--$j]] = _4y; //#20191
            $k[$j++] = 'char3'; //#20192
            if (($1.i + 2) < $1.msglen) { //#20192
                $k[$j++] = $get($1.msg, $1.i + 2); //#20192
            } else { //#20192
                $k[$j++] = -99; //#20192
            } //#20192
            var _55 = $k[--$j]; //#20192
            $1[$k[--$j]] = _55; //#20192
            var _5A = $get($1[$1.cset], $1.char1) !== undefined; //#20195
            if (_5A) { //#20199
                $k[$j++] = $1.char1; //#20196
                $k[$j++] = $1[$1.cset]; //#20196
                $1.enc(); //#20196
                $1.i = $1.i + 1; //#20197
                break; //#20198
            } //#20198
            var _5I = $get($1.setb, $1.char1) !== undefined; //#20202
            if ($eq($1.cset, "seta") && _5I) { //#20212
                var _5L = $get($1.setb, $1.char2) !== undefined; //#20203
                if (_5L) { //#20209
                    $k[$j++] = $1.lb; //#20204
                    $k[$j++] = $1.seta; //#20204
                    $1.enc(); //#20204
                    $1.cset = "setb"; //#20205
                } else { //#20209
                    $k[$j++] = $1.sb; //#20207
                    $k[$j++] = $1.seta; //#20207
                    $1.enc(); //#20207
                    $k[$j++] = $1.char1; //#20208
                    $k[$j++] = $1.setb; //#20208
                    $1.enc(); //#20208
                    $1.i = $1.i + 1; //#20209
                } //#20209
                break; //#20211
            } //#20211
            var _5W = $get($1.seta, $1.char1) !== undefined; //#20215
            if ($eq($1.cset, "setb") && _5W) { //#20240
                var _5X = $1.seta; //#20216
                var _5Y = $1.msg; //#20216
                var _5Z = $1.i; //#20216
                var _5a = $1.msglen; //#20216
                var _5b = $1.i; //#20216
                var _5c = _5a - _5b; //#20216
                var _5d = 4; //#20216
                if (4 > (_5a - _5b)) { //#20216
                    var _ = _5c; //#20216
                    _5c = _5d; //#20216
                    _5d = _; //#20216
                } //#20216
                $k[$j++] = 'p'; //#20216
                $k[$j++] = _5X; //#20216
                $k[$j++] = $geti(_5Y, _5Z, _5d); //#20216
                $1.prefixinset(); //#20216
                var _5f = $k[--$j]; //#20216
                $1[$k[--$j]] = _5f; //#20216
                if ($1.p == 1) { //#20221
                    $k[$j++] = $1.sa; //#20218
                    $k[$j++] = $1.setb; //#20218
                    $1.enc(); //#20218
                    $k[$j++] = $1.char1; //#20219
                    $k[$j++] = $1.seta; //#20219
                    $1.enc(); //#20219
                    $1.i = $1.i + 1; //#20220
                } //#20220
                if ($1.p == 2) { //#20227
                    $k[$j++] = $1.sa2; //#20223
                    $k[$j++] = $1.setb; //#20223
                    $1.enc(); //#20223
                    $k[$j++] = $1.char1; //#20224
                    $k[$j++] = $1.seta; //#20224
                    $1.enc(); //#20224
                    $k[$j++] = $1.char2; //#20225
                    $k[$j++] = $1.seta; //#20225
                    $1.enc(); //#20225
                    $1.i = $1.i + 2; //#20226
                } //#20226
                if ($1.p == 3) { //#20234
                    $k[$j++] = $1.sa3; //#20229
                    $k[$j++] = $1.setb; //#20229
                    $1.enc(); //#20229
                    $k[$j++] = $1.char1; //#20230
                    $k[$j++] = $1.seta; //#20230
                    $1.enc(); //#20230
                    $k[$j++] = $1.char2; //#20231
                    $k[$j++] = $1.seta; //#20231
                    $1.enc(); //#20231
                    $k[$j++] = $1.char3; //#20232
                    $k[$j++] = $1.seta; //#20232
                    $1.enc(); //#20232
                    $1.i = $1.i + 3; //#20233
                } //#20233
                if ($1.p >= 4) { //#20238
                    $k[$j++] = $1.la; //#20236
                    $k[$j++] = $1.setb; //#20236
                    $1.enc(); //#20236
                    $1.cset = "seta"; //#20237
                } //#20237
                break; //#20239
            } //#20239
            var _6A = $get($1.seta, $1.char1) !== undefined; //#20243
            if (_6A) { //#20247
                $k[$j++] = $1.la; //#20244
                $k[$j++] = $1[$1.cset]; //#20244
                $1.enc(); //#20244
                $1.cset = "seta"; //#20245
                break; //#20246
            } //#20246
            var _6G = $get($1.setb, $1.char1) !== undefined; //#20248
            if (_6G) { //#20252
                $k[$j++] = $1.lb; //#20249
                $k[$j++] = $1[$1.cset]; //#20249
                $1.enc(); //#20249
                $1.cset = "setb"; //#20250
                break; //#20251
            } //#20251
            var _6M = $get($1.setc, $1.char1) !== undefined; //#20255
            if (_6M) { //#20255
                $1.setx = "setc"; //#20255
                $1.sx = $1.sc; //#20255
                $1.lkx = $1.lkc; //#20255
            } //#20255
            var _6R = $get($1.setd, $1.char1) !== undefined; //#20256
            if (_6R) { //#20256
                $1.setx = "setd"; //#20256
                $1.sx = $1.sd; //#20256
                $1.lkx = $1.lkd; //#20256
            } //#20256
            var _6W = $get($1.sete, $1.char1) !== undefined; //#20257
            if (_6W) { //#20257
                $1.setx = "sete"; //#20257
                $1.sx = $1.se; //#20257
                $1.lkx = $1.lke; //#20257
            } //#20257
            var _6a = $1[$1.setx]; //#20260
            var _6b = $1.msg; //#20260
            var _6c = $1.i; //#20260
            var _6d = $1.msglen; //#20260
            var _6e = $1.i; //#20260
            var _6f = _6d - _6e; //#20260
            var _6g = 4; //#20260
            if (4 > (_6d - _6e)) { //#20260
                var _ = _6f; //#20260
                _6f = _6g; //#20260
                _6g = _; //#20260
            } //#20260
            $k[$j++] = 'p'; //#20260
            $k[$j++] = _6a; //#20260
            $k[$j++] = $geti(_6b, _6c, _6g); //#20260
            $1.prefixinset(); //#20260
            var _6i = $k[--$j]; //#20260
            $1[$k[--$j]] = _6i; //#20260
            if ($1.p == 1) { //#20265
                $k[$j++] = $1.sx; //#20262
                $k[$j++] = $1[$1.cset]; //#20262
                $1.enc(); //#20262
                $k[$j++] = $1.char1; //#20263
                $k[$j++] = $1[$1.setx]; //#20263
                $1.enc(); //#20263
                $1.i = $1.i + 1; //#20264
            } //#20264
            if ($1.p == 2) { //#20272
                $k[$j++] = $1.sx; //#20267
                $k[$j++] = $1[$1.cset]; //#20267
                $1.enc(); //#20267
                $k[$j++] = $1.char1; //#20268
                $k[$j++] = $1[$1.setx]; //#20268
                $1.enc(); //#20268
                $k[$j++] = $1.sx; //#20269
                $k[$j++] = $1[$1.cset]; //#20269
                $1.enc(); //#20269
                $k[$j++] = $1.char2; //#20270
                $k[$j++] = $1[$1.setx]; //#20270
                $1.enc(); //#20270
                $1.i = $1.i + 2; //#20271
            } //#20271
            if ($1.p == 3) { //#20281
                $k[$j++] = $1.sx; //#20274
                $k[$j++] = $1[$1.cset]; //#20274
                $1.enc(); //#20274
                $k[$j++] = $1.char1; //#20275
                $k[$j++] = $1[$1.setx]; //#20275
                $1.enc(); //#20275
                $k[$j++] = $1.sx; //#20276
                $k[$j++] = $1[$1.cset]; //#20276
                $1.enc(); //#20276
                $k[$j++] = $1.char2; //#20277
                $k[$j++] = $1[$1.setx]; //#20277
                $1.enc(); //#20277
                $k[$j++] = $1.sx; //#20278
                $k[$j++] = $1[$1.cset]; //#20278
                $1.enc(); //#20278
                $k[$j++] = $1.char3; //#20279
                $k[$j++] = $1[$1.setx]; //#20279
                $1.enc(); //#20279
                $1.i = $1.i + 3; //#20280
            } //#20280
            if ($1.p >= 4) { //#20286
                $k[$j++] = $1.sx; //#20283
                $k[$j++] = $1[$1.cset]; //#20283
                $1.enc(); //#20283
                $k[$j++] = $1.lkx; //#20284
                $k[$j++] = $1[$1.setx]; //#20284
                $1.enc(); //#20284
                $1.cset = $1.setx; //#20285
            } //#20285
            break; //#20288
        } //#20288
    } //#20288
    $1.encmsg = $geti($1.out, 0, $1.j); //#20291
    $1.padval = $get($1[$1.cset], $1.pad); //#20292
    $1.sami = $a([]); //#20295
    if ($1.sam != -1) { //#20300
        $1.sami = $a(2); //#20297
        $put($1.sami, 0, $get($1.seta, $1.pad)); //#20298
        $put($1.sami, 1, (((~~($1.sam / 10)) - 1) * 8) + (($1.sam % 10) - 1)); //#20299
    } //#20299
    $k[$j++] = Infinity; //#20301
    $aload($1.sami); //#20301
    $aload($1.encmsg); //#20301
    $1.encmsg = $a(); //#20301
    if (($1.mode == 2) || ($1.mode == 3)) { //#20356
        var _7v = $strcpy($s(4), "0000"); //#20307
        var _7y = $cvrs($s(4), ~~$1.mode, 2); //#20307
        $puti(_7v, 4 - _7y.length, _7y); //#20307
        $1.mdb = _7v; //#20307
        var _80 = $strcpy($s(10), "0000000000"); //#20308
        var _83 = $cvrs($s(10), $cvi($1.ccode), 2); //#20308
        $puti(_80, 10 - _83.length, _83); //#20308
        $1.ccb = _80; //#20308
        var _85 = $strcpy($s(10), "0000000000"); //#20309
        var _88 = $cvrs($s(10), $cvi($1.scode), 2); //#20309
        $puti(_85, 10 - _88.length, _88); //#20309
        $1.scb = _85; //#20309
        $1.pcb = $strcpy($s(36), "000000000000000000000000000000000000"); //#20310
        if ($1.mode == 2) { //#20323
            var _8F = $cvrs($s(6), $1.pcode.length, 2); //#20313
            $puti($1.pcb, 6 - _8F.length, _8F); //#20313
            var _8J = $cvrs($s(30), $cvi($1.pcode), 2); //#20314
            $puti($1.pcb, 36 - _8J.length, _8J); //#20314
        } else { //#20323
            $k[$j++] = Infinity; //#20319
            var _8L = $strcpy($s(6), "      "); //#20318
            $k[$j++] = _8L; //#20318
            $k[$j++] = _8L; //#20318
            $k[$j++] = 0; //#20318
            if ($1.pcode.length > 6) { //#20318
                $k[$j++] = $geti($1.pcode, 0, 6); //#20318
            } else { //#20318
                $k[$j++] = $1.pcode; //#20318
            } //#20318
            var _8Q = $k[--$j]; //#20318
            var _8R = $k[--$j]; //#20318
            $puti($k[--$j], _8R, _8Q); //#20318
            $forall($k[--$j], function() { //#20319
                var _8W = $get($1.seta, $k[--$j]); //#20319
                $k[$j++] = _8W; //#20319
            }); //#20319
            $1.pccw = $a(); //#20319
            for (var _8Y = 0; _8Y <= 5; _8Y += 1) { //#20324
                $1.i = _8Y; //#20322
                var _8e = $cvrs($s(6), $get($1.pccw, $1.i), 2); //#20323
                $puti($1.pcb, ((6 * $1.i) + 6) - _8e.length, _8e); //#20323
            } //#20323
        } //#20323
        $1.scm = $s(60); //#20328
        $puti($1.scm, 2, $1.mdb); //#20329
        $puti($1.scm, 38, $geti($1.pcb, 0, 4)); //#20330
        $puti($1.scm, 30, $geti($1.pcb, 4, 6)); //#20331
        $puti($1.scm, 24, $geti($1.pcb, 10, 6)); //#20332
        $puti($1.scm, 18, $geti($1.pcb, 16, 6)); //#20333
        $puti($1.scm, 12, $geti($1.pcb, 22, 6)); //#20334
        $puti($1.scm, 6, $geti($1.pcb, 28, 6)); //#20335
        $puti($1.scm, 0, $geti($1.pcb, 34, 2)); //#20336
        $puti($1.scm, 52, $geti($1.ccb, 0, 2)); //#20337
        $puti($1.scm, 42, $geti($1.ccb, 2, 6)); //#20338
        $puti($1.scm, 36, $geti($1.ccb, 8, 2)); //#20339
        $puti($1.scm, 54, $geti($1.scb, 0, 6)); //#20340
        $puti($1.scm, 48, $geti($1.scb, 6, 4)); //#20341
        $1.pri = $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); //#20344
        for (var _9K = 0; _9K <= 59; _9K += 1) { //#20350
            $1.i = _9K; //#20346
            $1.ps = ~~($1.i / 6); //#20347
            $1.ep = (~~(Math.pow(2, 5 - ($1.i % 6)))) * ($get($1.scm, $1.i) - 48); //#20348
            $put($1.pri, $1.ps, $f($get($1.pri, $1.ps) + $1.ep)); //#20349
        } //#20349
        $k[$j++] = Infinity; //#20353
        for (var _9W = 0, _9X = 84; _9W < _9X; _9W++) { //#20353
            $k[$j++] = $1.padval; //#20353
        } //#20353
        $1.sec = $a(); //#20353
        $puti($1.sec, 0, $1.encmsg); //#20354
    } //#20354
    if (((($1.mode == 4) || ($1.mode == 5)) || ($1.mode == 6)) || ($1.mode == -1)) { //#20375
        if ($1.mode == -1) { //#20364
            var _9i = ($1.encmsg.length <= 77) ? 5 : 4; //#20363
            $1.mode = _9i; //#20363
        } //#20363
        $k[$j++] = Infinity; //#20367
        var _9k = ($1.mode == 5) ? 78 : 94; //#20367
        for (var _9l = 0, _9m = _9k; _9l < _9m; _9l++) { //#20367
            $k[$j++] = $1.padval; //#20367
        } //#20367
        $1.cws = $a(); //#20367
        $put($1.cws, 0, $1.mode); //#20368
        $puti($1.cws, 1, $1.encmsg); //#20369
        $1.pri = $geti($1.cws, 0, 10); //#20372
        $1.sec = $geti($1.cws, 10, $1.cws.length - 10); //#20373
    } //#20373
    $k[$j++] = Infinity; //#20378
    $k[$j++] = 1; //#20378
    for (var _9y = 0, _9z = 63; _9y < _9z; _9y++) { //#20378
        var _A0 = $k[--$j]; //#20378
        var _A1 = _A0 * 2; //#20378
        $k[$j++] = _A0; //#20378
        $k[$j++] = _A1; //#20378
        if (_A1 >= 64) { //#20378
            var _A2 = $k[--$j]; //#20378
            $k[$j++] = _A2 ^ 67; //#20378
        } //#20378
    } //#20378
    $1.rsalog = $a(); //#20378
    $1.rslog = $a(64); //#20379
    for (var _A5 = 1; _A5 <= 63; _A5 += 1) { //#20380
        $put($1.rslog, $get($1.rsalog, _A5), _A5); //#20380
    } //#20380
    $1.rsprod = function() {
        var _A9 = $k[--$j]; //#20384
        var _AA = $k[--$j]; //#20384
        $k[$j++] = _AA; //#20388
        $k[$j++] = _A9; //#20388
        if ((_A9 != 0) && (_AA != 0)) { //#20387
            var _AD = $get($1.rslog, $k[--$j]); //#20385
            var _AI = $get($1.rsalog, $f(_AD + $get($1.rslog, $k[--$j])) % 63); //#20385
            $k[$j++] = _AI; //#20385
        } else { //#20387
            $j -= 2; //#20387
            $k[$j++] = 0; //#20387
        } //#20387
    }; //#20389
    $1.rscodes = function() {
        $1.rsnum = $k[--$j]; //#20394
        $1.cwb = $k[--$j]; //#20395
        $k[$j++] = Infinity; //#20398
        $k[$j++] = 1; //#20398
        for (var _AM = 0, _AN = $1.rsnum; _AM < _AN; _AM++) { //#20398
            $k[$j++] = 0; //#20398
        } //#20398
        $1.coeffs = $a(); //#20398
        for (var _AR = 1, _AQ = $1.rsnum; _AR <= _AQ; _AR += 1) { //#20407
            $1.i = _AR; //#20400
            $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#20401
            for (var _AY = $1.i - 1; _AY >= 1; _AY -= 1) { //#20405
                $1.j = _AY; //#20403
                $k[$j++] = $1.coeffs; //#20404
                $k[$j++] = $1.j; //#20404
                $k[$j++] = $get($1.coeffs, $1.j - 1); //#20404
                $k[$j++] = $get($1.coeffs, $1.j); //#20404
                $k[$j++] = $get($1.rsalog, $1.i); //#20404
                $1.rsprod(); //#20404
                var _Ak = $k[--$j]; //#20404
                var _Al = $k[--$j]; //#20404
                var _Am = $k[--$j]; //#20404
                $put($k[--$j], _Am, $xo(_Al, _Ak)); //#20404
            } //#20404
            $k[$j++] = $1.coeffs; //#20406
            $k[$j++] = 0; //#20406
            $k[$j++] = $get($1.coeffs, 0); //#20406
            $k[$j++] = $get($1.rsalog, $1.i); //#20406
            $1.rsprod(); //#20406
            var _Au = $k[--$j]; //#20406
            var _Av = $k[--$j]; //#20406
            $put($k[--$j], _Av, _Au); //#20406
        } //#20406
        $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#20408
        $k[$j++] = Infinity; //#20411
        for (var _B1 = 0, _B2 = $1.rsnum; _B1 < _B2; _B1++) { //#20411
            $k[$j++] = 0; //#20411
        } //#20411
        $1.ecb = $a(); //#20411
        for (var _B6 = 0, _B5 = $1.cwb.length - 1; _B6 <= _B5; _B6 += 1) { //#20420
            $1.t = $xo($get($1.cwb, _B6), $get($1.ecb, 0)); //#20413
            for (var _BC = $1.ecb.length - 1; _BC >= 0; _BC -= 1) { //#20419
                $1.i = _BC; //#20415
                $1.p = ($1.ecb.length - $1.i) - 1; //#20416
                $k[$j++] = $1.ecb; //#20417
                $k[$j++] = $1.p; //#20417
                $k[$j++] = $1.t; //#20417
                $k[$j++] = $get($1.coeffs, $1.i); //#20417
                $1.rsprod(); //#20417
                var _BL = $k[--$j]; //#20417
                var _BM = $k[--$j]; //#20417
                $put($k[--$j], _BM, _BL); //#20417
                if ($1.i > 0) { //#20418
                    $put($1.ecb, $1.p, $xo($get($1.ecb, $1.p + 1), $get($1.ecb, $1.p))); //#20418
                } //#20418
            } //#20418
        } //#20418
        $k[$j++] = $1.ecb; //#20422
    }; //#20424
    $k[$j++] = Infinity; //#20427
    for (var _Ba = 0, _BZ = $1.sec.length - 1; _Ba <= _BZ; _Ba += 2) { //#20427
        $k[$j++] = $get($1.sec, _Ba); //#20427
    } //#20427
    $1.seco = $a(); //#20427
    $k[$j++] = Infinity; //#20428
    for (var _Bg = 1, _Bf = $1.sec.length - 1; _Bg <= _Bf; _Bg += 2) { //#20428
        $k[$j++] = $get($1.sec, _Bg); //#20428
    } //#20428
    $1.sece = $a(); //#20428
    var _Bl = ($1.sec.length == 84) ? 20 : 28; //#20431
    $1.scodes = _Bl; //#20431
    $k[$j++] = 'secochk'; //#20432
    $k[$j++] = $1.seco; //#20432
    $k[$j++] = $1.scodes; //#20432
    $1.rscodes(); //#20432
    var _Bo = $k[--$j]; //#20432
    $1[$k[--$j]] = _Bo; //#20432
    $k[$j++] = 'secechk'; //#20433
    $k[$j++] = $1.sece; //#20433
    $k[$j++] = $1.scodes; //#20433
    $1.rscodes(); //#20433
    var _Bs = $k[--$j]; //#20433
    $1[$k[--$j]] = _Bs; //#20433
    $k[$j++] = Infinity; //#20436
    for (var _Bw = 0, _Bv = $1.scodes - 1; _Bw <= _Bv; _Bw += 1) { //#20436
        $k[$j++] = $get($1.secochk, _Bw); //#20436
        $k[$j++] = $get($1.secechk, _Bw); //#20436
    } //#20436
    $1.secchk = $a(); //#20436
    $k[$j++] = Infinity; //#20443
    $aload($1.pri); //#20440
    $k[$j++] = $1.pri; //#20441
    $k[$j++] = 10; //#20441
    $1.rscodes(); //#20441
    $aload($k[--$j]); //#20441
    $aload($1.sec); //#20442
    $aload($1.secchk); //#20443
    $1.codewords = $a(); //#20443
    $k[$j++] = Infinity; //#20447
    for (var _C8 = 0, _C9 = 864; _C8 < _C9; _C8++) { //#20447
        $k[$j++] = 0; //#20447
    } //#20447
    $1.mods = $a(); //#20447
    for (var _CB = 0; _CB <= 143; _CB += 1) { //#20452
        $1.i = _CB; //#20449
        $k[$j++] = Infinity; //#20450
        var _CG = $cvrs($s(6), $get($1.codewords, $1.i), 2); //#20450
        for (var _CH = 0, _CI = _CG.length; _CH < _CI; _CH++) { //#20450
            $k[$j++] = $get(_CG, _CH) - 48; //#20450
        } //#20450
        $1.cw = $a(); //#20450
        $puti($1.mods, (6 * $1.i) + (6 - $1.cw.length), $1.cw); //#20451
    } //#20451
    $1.modmap = $a([469, 529, 286, 316, 347, 346, 673, 672, 703, 702, 647, 676, 283, 282, 313, 312, 370, 610, 618, 379, 378, 409, 408, 439, 705, 704, 559, 589, 588, 619, 458, 518, 640, 701, 675, 674, 285, 284, 315, 314, 310, 340, 531, 289, 288, 319, 349, 348, 456, 486, 517, 516, 471, 470, 369, 368, 399, 398, 429, 428, 549, 548, 579, 578, 609, 608, 649, 648, 679, 678, 709, 708, 639, 638, 669, 668, 699, 698, 279, 278, 309, 308, 339, 338, 381, 380, 411, 410, 441, 440, 561, 560, 591, 590, 621, 620, 547, 546, 577, 576, 607, 606, 367, 366, 397, 396, 427, 426, 291, 290, 321, 320, 351, 350, 651, 650, 681, 680, 711, 710, 1, 0, 31, 30, 61, 60, 3, 2, 33, 32, 63, 62, 5, 4, 35, 34, 65, 64, 7, 6, 37, 36, 67, 66, 9, 8, 39, 38, 69, 68, 11, 10, 41, 40, 71, 70, 13, 12, 43, 42, 73, 72, 15, 14, 45, 44, 75, 74, 17, 16, 47, 46, 77, 76, 19, 18, 49, 48, 79, 78, 21, 20, 51, 50, 81, 80, 23, 22, 53, 52, 83, 82, 25, 24, 55, 54, 85, 84, 27, 26, 57, 56, 87, 86, 117, 116, 147, 146, 177, 176, 115, 114, 145, 144, 175, 174, 113, 112, 143, 142, 173, 172, 111, 110, 141, 140, 171, 170, 109, 108, 139, 138, 169, 168, 107, 106, 137, 136, 167, 166, 105, 104, 135, 134, 165, 164, 103, 102, 133, 132, 163, 162, 101, 100, 131, 130, 161, 160, 99, 98, 129, 128, 159, 158, 97, 96, 127, 126, 157, 156, 95, 94, 125, 124, 155, 154, 93, 92, 123, 122, 153, 152, 91, 90, 121, 120, 151, 150, 181, 180, 211, 210, 241, 240, 183, 182, 213, 212, 243, 242, 185, 184, 215, 214, 245, 244, 187, 186, 217, 216, 247, 246, 189, 188, 219, 218, 249, 248, 191, 190, 221, 220, 251, 250, 193, 192, 223, 222, 253, 252, 195, 194, 225, 224, 255, 254, 197, 196, 227, 226, 257, 256, 199, 198, 229, 228, 259, 258, 201, 200, 231, 230, 261, 260, 203, 202, 233, 232, 263, 262, 205, 204, 235, 234, 265, 264, 207, 206, 237, 236, 267, 266, 297, 296, 327, 326, 357, 356, 295, 294, 325, 324, 355, 354, 293, 292, 323, 322, 353, 352, 277, 276, 307, 306, 337, 336, 275, 274, 305, 304, 335, 334, 273, 272, 303, 302, 333, 332, 271, 270, 301, 300, 331, 330, 361, 360, 391, 390, 421, 420, 363, 362, 393, 392, 423, 422, 365, 364, 395, 394, 425, 424, 383, 382, 413, 412, 443, 442, 385, 384, 415, 414, 445, 444, 387, 386, 417, 416, 447, 446, 477, 476, 507, 506, 537, 536, 475, 474, 505, 504, 535, 534, 473, 472, 503, 502, 533, 532, 455, 454, 485, 484, 515, 514, 453, 452, 483, 482, 513, 512, 451, 450, 481, 480, 511, 510, 541, 540, 571, 570, 601, 600, 543, 542, 573, 572, 603, 602, 545, 544, 575, 574, 605, 604, 563, 562, 593, 592, 623, 622, 565, 564, 595, 594, 625, 624, 567, 566, 597, 596, 627, 626, 657, 656, 687, 686, 717, 716, 655, 654, 685, 684, 715, 714, 653, 652, 683, 682, 713, 712, 637, 636, 667, 666, 697, 696, 635, 634, 665, 664, 695, 694, 633, 632, 663, 662, 693, 692, 631, 630, 661, 660, 691, 690, 721, 720, 751, 750, 781, 780, 723, 722, 753, 752, 783, 782, 725, 724, 755, 754, 785, 784, 727, 726, 757, 756, 787, 786, 729, 728, 759, 758, 789, 788, 731, 730, 761, 760, 791, 790, 733, 732, 763, 762, 793, 792, 735, 734, 765, 764, 795, 794, 737, 736, 767, 766, 797, 796, 739, 738, 769, 768, 799, 798, 741, 740, 771, 770, 801, 800, 743, 742, 773, 772, 803, 802, 745, 744, 775, 774, 805, 804, 747, 746, 777, 776, 807, 806, 837, 836, 867, 866, 897, 896, 835, 834, 865, 864, 895, 894, 833, 832, 863, 862, 893, 892, 831, 830, 861, 860, 891, 890, 829, 828, 859, 858, 889, 888, 827, 826, 857, 856, 887, 886, 825, 824, 855, 854, 885, 884, 823, 822, 853, 852, 883, 882, 821, 820, 851, 850, 881, 880, 819, 818, 849, 848, 879, 878, 817, 816, 847, 846, 877, 876, 815, 814, 845, 844, 875, 874, 813, 812, 843, 842, 873, 872, 811, 810, 841, 840, 871, 870, 901, 900, 931, 930, 961, 960, 903, 902, 933, 932, 963, 962, 905, 904, 935, 934, 965, 964, 907, 906, 937, 936, 967, 966, 909, 908, 939, 938, 969, 968, 911, 910, 941, 940, 971, 970, 913, 912, 943, 942, 973, 972, 915, 914, 945, 944, 975, 974, 917, 916, 947, 946, 977, 976, 919, 918, 949, 948, 979, 978, 921, 920, 951, 950, 981, 980, 923, 922, 953, 952, 983, 982, 925, 924, 955, 954, 985, 984, 927, 926, 957, 956, 987, 986, 58, 89, 88, 118, 149, 148, 178, 209, 208, 238, 269, 268, 298, 329, 328, 358, 389, 388, 418, 449, 448, 478, 509, 508, 538, 569, 568, 598, 629, 628, 658, 689, 688, 718, 749, 748, 778, 809, 808, 838, 869, 868, 898, 929, 928, 958, 989, 988]); //#20500
    $1.pixs = $a(864); //#20503
    $1.j = 0; //#20504
    for (var _CT = 0, _CS = $1.mods.length - 1; _CT <= _CS; _CT += 1) { //#20511
        $1.i = _CT; //#20506
        if ($get($1.mods, $1.i) == 1) { //#20510
            $put($1.pixs, $1.j, $get($1.modmap, $1.i)); //#20508
            $1.j = $1.j + 1; //#20509
        } //#20509
    } //#20509
    $k[$j++] = Infinity; //#20512
    var _Cf = $geti($1.pixs, 0, $1.j); //#20512
    for (var _Cg = 0, _Ch = _Cf.length; _Cg < _Ch; _Cg++) { //#20512
        $k[$j++] = $get(_Cf, _Cg); //#20512
    } //#20512
    $k[$j++] = 28; //#20512
    $k[$j++] = 29; //#20512
    $k[$j++] = 280; //#20512
    $k[$j++] = 281; //#20512
    $k[$j++] = 311; //#20512
    $k[$j++] = 457; //#20512
    $k[$j++] = 488; //#20512
    $k[$j++] = 500; //#20512
    $k[$j++] = 530; //#20512
    $k[$j++] = 670; //#20512
    $k[$j++] = 700; //#20512
    $k[$j++] = 677; //#20512
    $k[$j++] = 707; //#20512
    $1.pixs = $a(); //#20512
    var _Cm = new Map([
        ["ren", bwipp_renmaximatrix],
        ["pixs", $1.pixs],
        ["opt", $1.options]
    ]); //#20518
    $k[$j++] = _Cm; //#20521
    if (!$1.dontdraw) { //#20521
        bwipp_renmaximatrix(); //#20521
    } //#20521
}

function bwipp_azteccode() {
    var $1 = {}; //#20551
    $1.options = $k[--$j]; //#20553
    $1.barcode = $k[--$j]; //#20554
    $1.dontdraw = false; //#20556
    $1.format = "unset"; //#20557
    $1.readerinit = false; //#20558
    $1.layers = -1; //#20559
    $1.eclevel = 23; //#20560
    $1.ecaddchars = 3; //#20561
    $1.raw = false; //#20562
    $1.parse = false; //#20563
    $1.parsefnc = false; //#20564
    $forall($1.options, function() { //#20575
        var _3 = $k[--$j]; //#20575
        $1[$k[--$j]] = _3; //#20575
    }); //#20575
    $1.layers = ~~$1.layers; //#20577
    $1.eclevel = +$1.eclevel; //#20578
    $1.ecaddchars = ~~$1.ecaddchars; //#20579
    if ($eq($1.format, "rune")) { //#20593
        if ($1.barcode.length == 0) { //#20584
            $k[$j++] = 'bwipp.aztecRuneNotNumeric'; //#20583
            $k[$j++] = "Aztec runes must be numeric"; //#20583
            bwipp_raiseerror(); //#20583
        } //#20583
        $forall($1.barcode, function() { //#20589
            var _B = $k[--$j]; //#20586
            if ((_B < 48) || (_B > 57)) { //#20588
                $k[$j++] = 'bwipp.aztecRuneNotNumeric'; //#20587
                $k[$j++] = "Aztec runes must be numeric"; //#20587
                bwipp_raiseerror(); //#20587
            } //#20587
        }); //#20587
        var _D = $cvi($1.barcode); //#20590
        if ((_D < 0) || (_D > 255)) { //#20592
            $k[$j++] = 'bwipp.aztecRuneInvalid'; //#20591
            $k[$j++] = "Aztec runes must be 0 to 255"; //#20591
            bwipp_raiseerror(); //#20591
        } //#20591
    } //#20591
    $1.fn1 = -1; //#20596
    var _H = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["eci", true],
        ["FNC1", $1.fn1]
    ]); //#20601
    $1.fncvals = _H; //#20602
    $k[$j++] = 'msg'; //#20603
    $k[$j++] = $1.barcode; //#20603
    $k[$j++] = $1.fncvals; //#20603
    bwipp_parseinput(); //#20603
    var _K = $k[--$j]; //#20603
    $1[$k[--$j]] = _K; //#20603
    $1.msglen = $1.msg.length; //#20604
    $1.msgbits = ""; //#20607
    if ($ne($1.format, "rune") && $1.raw) { //#20608
        $1.msgbits = $1.barcode; //#20608
    } //#20608
    if ($ne($1.format, "rune") && (!$1.raw)) { //#20996
        $1.U = 0; //#20612
        $1.L = 1; //#20612
        $1.M = 2; //#20612
        $1.P = 3; //#20612
        $1.D = 4; //#20612
        $1.B = 5; //#20612
        $1.lu = -2; //#20615
        $1.ll = -3; //#20615
        $1.lm = -4; //#20615
        $1.lp = -5; //#20616
        $1.ld = -6; //#20616
        $1.su = -7; //#20616
        $1.sp = -8; //#20617
        $1.sb = -9; //#20617
        $1.fl = -10; //#20617
        $1.p2 = -11; //#20618
        $1.p3 = -12; //#20618
        $1.p4 = -13; //#20618
        $1.p5 = -14; //#20618
        $1.charmaps = $a([$a([$1.sp, $1.sp, $1.sp, $1.fl, $1.sp]), $a([32, 32, 32, 13, 32]), $a(["A", "a", 1, $1.p2, "0"]), $a(["B", "b", 2, $1.p3, "1"]), $a(["C", "c", 3, $1.p4, "2"]), $a(["D", "d", 4, $1.p5, "3"]), $a(["E", "e", 5, "!", "4"]), $a(["F", "f", 6, "\"", "5"]), $a(["G", "g", 7, "#", "6"]), $a(["H", "h", 8, "$", "7"]), $a(["I", "i", 9, "%", "8"]), $a(["J", "j", 10, "&", "9"]), $a(["K", "k", 11, "'", ","]), $a(["L", "l", 12, 40, "."]), $a(["M", "m", 13, 41, $1.lu]), $a(["N", "n", 27, "*", $1.su]), $a(["O", "o", 28, "+", -99]), $a(["P", "p", 29, ",", -99]), $a(["Q", "q", 30, "-", -99]), $a(["R", "r", 31, ".", -99]), $a(["S", "s", "@", "/", -99]), $a(["T", "t", 92, ":", -99]), $a(["U", "u", "^", ";", -99]), $a(["V", "v", "_", "<", -99]), $a(["W", "w", "`", "=", -99]), $a(["X", "x", "|", ">", -99]), $a(["Y", "y", "~", "?", -99]), $a(["Z", "z", 127, "[", -99]), $a([$1.ll, $1.su, $1.ll, "]", -99]), $a([$1.lm, $1.lm, $1.lu, "{", -99]), $a([$1.ld, $1.ld, $1.lp, "}", -99]), $a([$1.sb, $1.sb, $1.sb, $1.lu, -99])]); //#20655
        $1.charvals = $a([new Map, new Map, new Map, new Map, new Map]); //#20658
        for (var _1Q = 0, _1P = $1.charmaps.length - 1; _1Q <= _1P; _1Q += 1) { //#20667
            $1.i = _1Q; //#20660
            $1.encs = $get($1.charmaps, $1.i); //#20661
            for (var _1U = 0; _1U <= 4; _1U += 1) { //#20666
                $1.j = _1U; //#20663
                var _1X = $get($1.encs, $1.j); //#20664
                $k[$j++] = _1X; //#20664
                if ($eq($type(_1X), 'stringtype')) { //#20664
                    var _1a = $get($k[--$j], 0); //#20664
                    $k[$j++] = _1a; //#20664
                } //#20664
                $put($get($1.charvals, $1.j), $k[--$j], $1.i); //#20665
            } //#20665
        } //#20665
        var _1k = new Map([
            ["\x0d\x0a", $1.p2],
            [". ", $1.p3],
            [", ", $1.p4],
            [": ", $1.p5]
        ]); //#20674
        $1.pcomp = _1k; //#20675
        $1.e = 10000; //#20677
        $1.latlen = $a([$a([0, 5, 5, 10, 5, 10]), $a([9, 0, 5, 10, 5, 10]), $a([5, 5, 0, 5, 10, 10]), $a([5, 10, 10, 0, 10, 15]), $a([4, 9, 9, 14, 0, 14]), $a([0, 0, 0, 0, 0, 0])]); //#20687
        $1.latseq = $a([$a([$a([]), $a([$1.ll]), $a([$1.lm]), $a([$1.lm, $1.lp]), $a([$1.ld]), $a([$1.sb])]), $a([$a([$1.ld, $1.lu]), $a([]), $a([$1.lm]), $a([$1.lm, $1.lp]), $a([$1.ld]), $a([$1.sb])]), $a([$a([$1.lu]), $a([$1.ll]), $a([]), $a([$1.lp]), $a([$1.lu, $1.ld]), $a([$1.sb])]), $a([$a([$1.lu]), $a([$1.lu, $1.ll]), $a([$1.lu, $1.lm]), $a([]), $a([$1.lu, $1.ld]), $a([$1.lu, $1.sb])]), $a([$a([$1.lu]), $a([$1.lu, $1.ll]), $a([$1.lu, $1.lm]), $a([$1.lu, $1.lm, $1.lp]), $a([]), $a([$1.lu, $1.sb])]), $a([$a([$1.lu]), $a([$1.ll]), $a([$1.lm]), $a([]), $a([]), $a([])])]); //#20697
        $1.shftlen = $a([$a([$1.e, $1.e, $1.e, 5, $1.e]), $a([5, $1.e, $1.e, 5, $1.e]), $a([$1.e, $1.e, $1.e, 5, $1.e]), $a([$1.e, $1.e, $1.e, $1.e, $1.e]), $a([4, $1.e, $1.e, 4, $1.e])]); //#20706
        $1.charsize = function() {
            var _3d = $k[--$j]; //#20709
            $k[$j++] = _3d; //#20720
            if (_3d >= 0) { //#20718
                $j--; //#20711
                var _3g = $get($a([5, 5, 5, 5, 4, 8]), $k[--$j]); //#20711
                $k[$j++] = _3g; //#20711
            } else { //#20718
                var _3h = $k[--$j]; //#20713
                var _3i = $k[--$j]; //#20713
                $k[$j++] = _3h; //#20713
                $k[$j++] = _3i; //#20713
                $j--; //#20713
                var _3j = $k[--$j]; //#20714
                $k[$j++] = _3j; //#20719
                if (_3j == $1.fn1) { //#20718
                    $j--; //#20715
                    $k[$j++] = 8; //#20715
                } else { //#20718
                    var _3m = $f((-$k[--$j]) - 1000000); //#20717
                    $k[$j++] = _3m; //#20717
                    if (_3m == 0) { //#20717
                        $j--; //#20717
                        $k[$j++] = 1; //#20717
                    } //#20717
                    var _3n = $k[--$j]; //#20718
                    $k[$j++] = (((~~(Math.log(_3n) / Math.log(10))) + 1) * 4) + 8; //#20718
                } //#20718
            } //#20718
        }; //#20721
        $1.curlen = $a([0, $1.e, $1.e, $1.e, $1.e, $1.e]); //#20724
        $1.curseq = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([])]); //#20725
        $1.backto = $1.U; //#20727
        $1.lastchar = ""; //#20728
        $forall($1.msg, function() { //#20880
            $1.char = $k[--$j]; //#20733
            for (;;) { //#20759
                $1.imp = false; //#20737
                var _4A = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); //#20738
                for (var _4B = 0, _4C = _4A.length; _4B < _4C; _4B++) { //#20757
                    $1.x = $get(_4A, _4B); //#20739
                    var _4K = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); //#20740
                    for (var _4L = 0, _4M = _4K.length; _4L < _4M; _4L++) { //#20756
                        $1.y = $get(_4K, _4L); //#20741
                        if (($1.x != $1.B) || ($1.y == $1.backto)) { //#20755
                            $1.cost = $f($get($1.curlen, $1.x) + $get($get($1.latlen, $1.x), $1.y)); //#20743
                            if ($1.cost < $get($1.curlen, $1.y)) { //#20754
                                $put($1.curlen, $1.y, $1.cost); //#20745
                                $k[$j++] = $1.curseq; //#20748
                                $k[$j++] = $1.y; //#20748
                                $k[$j++] = Infinity; //#20748
                                $aload($get($1.curseq, $1.x)); //#20747
                                $aload($get($get($1.latseq, $1.x), $1.y)); //#20748
                                var _4r = $a(); //#20748
                                var _4s = $k[--$j]; //#20749
                                $put($k[--$j], _4s, _4r); //#20749
                                if ($1.y == $1.B) { //#20752
                                    $k[$j++] = 'backto'; //#20751
                                    if (($1.x == $1.P) || ($1.x == $1.D)) { //#20751
                                        $k[$j++] = $1.U; //#20751
                                    } else { //#20751
                                        $k[$j++] = $1.x; //#20751
                                    } //#20751
                                    var _52 = $k[--$j]; //#20751
                                    $1[$k[--$j]] = _52; //#20751
                                } //#20751
                                $1.imp = true; //#20753
                            } //#20753
                        } //#20753
                    } //#20753
                } //#20753
                if (!$1.imp) { //#20758
                    break; //#20758
                } //#20758
            } //#20758
            $1.nxtlen = $a([$1.e, $1.e, $1.e, $1.e, $1.e, $1.e]); //#20762
            $1.nxtseq = $a(6); //#20763
            var _5J = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); //#20765
            for (var _5K = 0, _5L = _5J.length; _5K < _5L; _5K++) { //#20804
                $1.x = $get(_5J, _5K); //#20766
                for (;;) { //#20802
                    if ($1.char >= 0) { //#20774
                        if ($1.x != $1.B) { //#20772
                            var _5U = $get($get($1.charvals, $1.x), $1.char) !== undefined; //#20772
                            if (!_5U) { //#20772
                                break; //#20772
                            } //#20772
                        } //#20772
                    } else { //#20774
                        if ($1.x != $1.P) { //#20774
                            break; //#20774
                        } //#20774
                    } //#20774
                    $k[$j++] = 'cost'; //#20778
                    $k[$j++] = $get($1.curlen, $1.x); //#20778
                    $k[$j++] = $1.x; //#20778
                    $k[$j++] = $1.char; //#20778
                    $1.charsize(); //#20778
                    var _5c = $k[--$j]; //#20778
                    var _5d = $k[--$j]; //#20778
                    $1[$k[--$j]] = $f(_5d + _5c); //#20778
                    if ($1.cost < $get($1.nxtlen, $1.x)) { //#20782
                        $put($1.nxtlen, $1.x, $1.cost); //#20780
                        $k[$j++] = $1.nxtseq; //#20781
                        $k[$j++] = $1.x; //#20781
                        $k[$j++] = Infinity; //#20781
                        $aload($get($1.curseq, $1.x)); //#20781
                        $k[$j++] = $1.char; //#20781
                        var _5s = $a(); //#20781
                        var _5t = $k[--$j]; //#20781
                        $put($k[--$j], _5t, _5s); //#20781
                    } //#20781
                    if ($1.x == $1.B) { //#20785
                        break; //#20785
                    } //#20785
                    var _62 = $a([$1.U, $1.L, $1.M, $1.P, $1.D]); //#20786
                    for (var _63 = 0, _64 = _62.length; _63 < _64; _63++) { //#20799
                        $1.y = $get(_62, _63); //#20787
                        if ($ne($1.x, $1.y)) { //#20798
                            $k[$j++] = 'cost'; //#20789
                            $k[$j++] = $f($get($1.curlen, $1.y) + $get($get($1.shftlen, $1.y), $1.x)); //#20789
                            $k[$j++] = $1.x; //#20789
                            $k[$j++] = $1.char; //#20789
                            $1.charsize(); //#20789
                            var _6I = $k[--$j]; //#20789
                            var _6J = $k[--$j]; //#20789
                            $1[$k[--$j]] = $f(_6J + _6I); //#20789
                            if ($1.cost < $get($1.nxtlen, $1.y)) { //#20797
                                $put($1.nxtlen, $1.y, $1.cost); //#20791
                                $k[$j++] = $1.nxtseq; //#20795
                                $k[$j++] = $1.y; //#20795
                                $k[$j++] = Infinity; //#20795
                                $aload($get($1.curseq, $1.y)); //#20793
                                var _6Z = ($1.x == $1.U) ? $1.su : $1.sp; //#20794
                                $k[$j++] = _6Z; //#20795
                                $k[$j++] = $1.char; //#20795
                                var _6b = $a(); //#20795
                                var _6c = $k[--$j]; //#20796
                                $put($k[--$j], _6c, _6b); //#20796
                            } //#20796
                        } //#20796
                    } //#20796
                    break; //#20801
                } //#20801
            } //#20801
            if ($ne($1.lastchar, "") && ($1.char >= 0)) { //#20865
                var _6g = $s(2); //#20808
                $put(_6g, 0, $1.lastchar); //#20808
                $put(_6g, 1, $1.char); //#20808
                $1.pchars = _6g; //#20808
                var _6l = $get($1.pcomp, $1.pchars) !== undefined; //#20809
                if (_6l) { //#20864
                    var _6r = $a([$1.U, $1.L, $1.M, $1.P, $1.D]); //#20810
                    for (var _6s = 0, _6t = _6r.length; _6s < _6t; _6s++) { //#20863
                        $1.i = $get(_6r, _6s); //#20811
                        $1.inP = true; //#20812
                        if ($1.i == $1.M) { //#20817
                            if ($1.lastchar == 13) { //#20814
                                $1.inP = false; //#20814
                            } //#20814
                        } else { //#20817
                            if ($1.i == $1.D) { //#20818
                                if (($1.lastchar == 44) || ($1.lastchar == 46)) { //#20817
                                    $1.inP = false; //#20817
                                } //#20817
                            } //#20817
                        } //#20817
                        if ($1.inP && $lt($get($1.curlen, $1.i), $get($1.nxtlen, $1.i))) { //#20862
                            $1.curseqi = $get($1.curseq, $1.i); //#20821
                            $1.lastld = false; //#20822
                            $1.lastsp = false; //#20823
                            $1.lastidx = -1; //#20824
                            for (var _7D = $1.curseqi.length - 1; _7D >= 0; _7D -= 1) { //#20845
                                $1.idx = _7D; //#20826
                                $1.ch = $get($1.curseqi, $1.idx); //#20827
                                if ($1.lastidx == -1) { //#20842
                                    if ($eq($1.ch, $1.lastchar)) { //#20834
                                        $1.lastidx = $1.idx; //#20830
                                        if ($1.idx > 0) { //#20833
                                            if ($get($1.curseqi, $1.idx - 1) == $1.sp) { //#20832
                                                $1.lastsp = true; //#20832
                                            } //#20832
                                        } //#20832
                                    } //#20832
                                } else { //#20842
                                    if (($1.ch < 0) && ($1.ch >= $1.ld)) { //#20843
                                        if ($1.i == $1.P) { //#20840
                                            if ($1.ch == $1.ld) { //#20838
                                                $1.lastld = true; //#20838
                                            } //#20838
                                        } else { //#20840
                                            if ($1.ch != $1.lp) { //#20840
                                                $1.inP = $1.lastsp; //#20840
                                            } //#20840
                                        } //#20840
                                        break; //#20842
                                    } //#20842
                                } //#20842
                            } //#20842
                            if ($1.inP && ($1.lastidx >= 0)) { //#20861
                                $put($1.nxtlen, $1.i, $get($1.curlen, $1.i)); //#20847
                                if ($1.lastidx < ($1.curseqi.length - 1)) { //#20859
                                    if ($1.i == $1.P) { //#20856
                                        if ($1.lastld) { //#20850
                                            $put($1.nxtlen, $1.i, $f($get($1.nxtlen, $1.i) + 1)); //#20850
                                        } //#20850
                                        $k[$j++] = $1.nxtseq; //#20852
                                        $k[$j++] = $1.i; //#20852
                                        $k[$j++] = Infinity; //#20852
                                        $aload($1.curseqi); //#20852
                                        $r($1.curseqi.length - $1.lastidx, -1); //#20852
                                        $j--; //#20852
                                        $k[$j++] = $get($1.pcomp, $1.pchars); //#20852
                                        var _7z = $a(); //#20852
                                        var _80 = $k[--$j]; //#20852
                                        $put($k[--$j], _80, _7z); //#20852
                                    } else { //#20856
                                        $k[$j++] = $1.nxtseq; //#20855
                                        $k[$j++] = $1.i; //#20855
                                        $k[$j++] = Infinity; //#20855
                                        $aload($1.curseqi); //#20855
                                        var _85 = $a(); //#20855
                                        var _86 = $k[--$j]; //#20855
                                        $put($k[--$j], _86, _85); //#20855
                                        $put($get($1.nxtseq, $1.i), $1.lastidx, $get($1.pcomp, $1.pchars)); //#20856
                                    } //#20856
                                } else { //#20859
                                    $k[$j++] = $1.nxtseq; //#20859
                                    $k[$j++] = $1.i; //#20859
                                    $k[$j++] = Infinity; //#20859
                                    $aload($1.curseqi); //#20859
                                    $j--; //#20859
                                    $k[$j++] = $get($1.pcomp, $1.pchars); //#20859
                                    var _8L = $a(); //#20859
                                    var _8M = $k[--$j]; //#20859
                                    $put($k[--$j], _8M, _8L); //#20859
                                } //#20859
                            } //#20859
                        } //#20859
                    } //#20859
                } //#20859
            } //#20859
            if ($ne($get($1.nxtseq, $1.B), null)) { //#20874
                $1.numbytes = 0; //#20869
                $forall($get($1.nxtseq, $1.B), function() { //#20872
                    if ($k[--$j] == $1.sb) { //#20871
                        $k[$j++] = 0; //#20871
                    } else { //#20871
                        $k[$j++] = $1.numbytes + 1; //#20871
                    } //#20871
                    $1.numbytes = $k[--$j]; //#20871
                }); //#20871
                if ($1.numbytes == 32) { //#20873
                    $put($1.nxtlen, $1.B, $f($get($1.nxtlen, $1.B) + 11)); //#20873
                } //#20873
            } //#20873
            $1.curlen = $1.nxtlen; //#20876
            $1.curseq = $1.nxtseq; //#20877
            $k[$j++] = 'lastchar'; //#20878
            if ($1.char >= 0) { //#20878
                $k[$j++] = $1.char; //#20878
            } else { //#20878
                $k[$j++] = ""; //#20878
            } //#20878
            var _8i = $k[--$j]; //#20878
            $1[$k[--$j]] = _8i; //#20878
        }); //#20878
        $1.minseq = $1.e; //#20883
        var _8r = $a([$1.U, $1.L, $1.M, $1.P, $1.D, $1.B]); //#20884
        for (var _8s = 0, _8t = _8r.length; _8s < _8t; _8s++) { //#20890
            $1.i = $get(_8r, _8s); //#20885
            if ($get($1.curlen, $1.i) < $1.minseq) { //#20889
                $1.minseq = $get($1.curlen, $1.i); //#20887
                $1.seq = $get($1.curseq, $1.i); //#20888
            } //#20888
        } //#20888
        $1.tobin = function() {
            var _96 = $s($k[--$j]); //#20894
            $k[$j++] = _96; //#20894
            for (var _98 = 0, _97 = _96.length - 1; _98 <= _97; _98 += 1) { //#20894
                var _99 = $k[--$j]; //#20894
                $put(_99, _98, 48); //#20894
                $k[$j++] = _99; //#20894
            } //#20894
            var _9A = $k[--$j]; //#20895
            var _9D = $cvrs($s(_9A.length), $k[--$j], 2); //#20895
            $puti(_9A, _9A.length - _9D.length, _9D); //#20895
            $k[$j++] = _9A; //#20895
        }; //#20896
        $1.encu = function() {
            var _9I = $get($get($1.charvals, $1.U), $k[--$j]); //#20898
            $k[$j++] = _9I; //#20898
            $k[$j++] = 5; //#20898
            $1.tobin(); //#20898
        }; //#20898
        $1.encl = function() {
            var _9N = $get($get($1.charvals, $1.L), $k[--$j]); //#20899
            $k[$j++] = _9N; //#20899
            $k[$j++] = 5; //#20899
            $1.tobin(); //#20899
        }; //#20899
        $1.encm = function() {
            var _9S = $get($get($1.charvals, $1.M), $k[--$j]); //#20900
            $k[$j++] = _9S; //#20900
            $k[$j++] = 5; //#20900
            $1.tobin(); //#20900
        }; //#20900
        $1.encd = function() {
            var _9X = $get($get($1.charvals, $1.D), $k[--$j]); //#20901
            $k[$j++] = _9X; //#20901
            $k[$j++] = 4; //#20901
            $1.tobin(); //#20901
        }; //#20901
        $1.encp = function() {
            var _9Y = $k[--$j]; //#20904
            $k[$j++] = _9Y; //#20921
            if (_9Y == $1.fn1) { //#20920
                $j--; //#20905
                $k[$j++] = "00000000"; //#20905
            } else { //#20920
                var _9a = $k[--$j]; //#20907
                $k[$j++] = _9a; //#20921
                if (_9a <= -1000000) { //#20920
                    var _9c = $f((-$k[--$j]) - 1000000); //#20908
                    $k[$j++] = _9c; //#20908
                    $k[$j++] = _9c; //#20908
                    if (_9c == 0) { //#20908
                        $j--; //#20908
                        $k[$j++] = 1; //#20908
                    } //#20908
                    var _9e = ~~(Math.log($k[--$j]) / Math.log(10)); //#20910
                    var _9f = $s(((_9e + 1) * 4) + 8); //#20910
                    $puti(_9f, 0, "00000"); //#20911
                    $k[$j++] = _9e; //#20912
                    $k[$j++] = _9f; //#20912
                    $k[$j++] = _9f; //#20912
                    $k[$j++] = _9e + 1; //#20912
                    $k[$j++] = 3; //#20912
                    $1.tobin(); //#20912
                    var _9g = $k[--$j]; //#20912
                    $puti($k[--$j], 5, _9g); //#20912
                    var _9i = $k[--$j]; //#20913
                    var _9j = $k[--$j]; //#20913
                    var _9k = $k[--$j]; //#20913
                    $k[$j++] = _9i; //#20917
                    $k[$j++] = _9k; //#20917
                    for (var _9l = _9j; _9l >= 0; _9l -= 1) { //#20917
                        var _9m = $k[--$j]; //#20914
                        var _9n = $k[--$j]; //#20915
                        $k[$j++] = _9n; //#20916
                        $k[$j++] = ~~(_9m / 10); //#20916
                        $k[$j++] = _9n; //#20916
                        $k[$j++] = (_9l * 4) + 8; //#20916
                        $k[$j++] = $f((_9m % 10) + 2); //#20916
                        $k[$j++] = 4; //#20916
                        $1.tobin(); //#20916
                        var _9o = $k[--$j]; //#20916
                        var _9p = $k[--$j]; //#20916
                        $puti($k[--$j], _9p, _9o); //#20916
                    } //#20916
                    $j--; //#20918
                } else { //#20920
                    var _9v = $get($get($1.charvals, $1.P), $k[--$j]); //#20920
                    $k[$j++] = _9v; //#20920
                    $k[$j++] = 5; //#20920
                    $1.tobin(); //#20920
                } //#20920
            } //#20920
        }; //#20922
        $1.encfuncs = $a(['encu', 'encl', 'encm', 'encp', 'encd']); //#20924
        $1.addtomsgbits = function() {
            $1.v = $k[--$j]; //#20927
            $puti($1.msgbits, $1.j, $1.v); //#20928
            $1.j = $1.j + $1.v.length; //#20929
        }; //#20930
        $1.state = $1.U; //#20933
        $1.msgbits = $s($1.minseq); //#20934
        $1.i = 0; //#20935
        $1.j = 0; //#20935
        for (;;) { //#20994
            if ($1.i >= $1.seq.length) { //#20936
                break; //#20936
            } //#20936
            if ($1.state != $1.B) { //#20989
                $1.char = $get($1.seq, $1.i); //#20940
                $k[$j++] = $1.char; //#20943
                if ($1[$get($1.encfuncs, $1.state)]() === true) {
                    break;
                } //#20943
                $1.addtomsgbits(); //#20943
                $1.i = $1.i + 1; //#20944
                if (($1.char == $1.su) || ($1.char == $1.sp)) { //#20950
                    $k[$j++] = $get($1.seq, $1.i); //#20948
                    if ($1.char == $1.su) { //#20948
                        $1.encu(); //#20948
                    } else { //#20948
                        $1.encp(); //#20948
                    } //#20948
                    $1.addtomsgbits(); //#20948
                    $1.i = $1.i + 1; //#20949
                } //#20949
                if ($1.char == $1.lu) { //#20953
                    $1.state = $1.U; //#20953
                } //#20953
                if ($1.char == $1.ll) { //#20954
                    $1.state = $1.L; //#20954
                } //#20954
                if ($1.char == $1.lm) { //#20955
                    $1.state = $1.M; //#20955
                } //#20955
                if ($1.char == $1.lp) { //#20956
                    $1.state = $1.P; //#20956
                } //#20956
                if ($1.char == $1.ld) { //#20957
                    $1.state = $1.D; //#20957
                } //#20957
                if ($1.char == $1.sb) { //#20958
                    $1.state = $1.B; //#20958
                } //#20958
            } else { //#20989
                $1.numbytes = 0; //#20963
                for (;;) { //#20967
                    if (($1.i + $1.numbytes) >= $1.seq.length) { //#20964
                        break; //#20964
                    } //#20964
                    if ($get($1.seq, $1.i + $1.numbytes) < 0) { //#20965
                        break; //#20965
                    } //#20965
                    $1.numbytes = $1.numbytes + 1; //#20966
                } //#20966
                if ($1.numbytes <= 31) { //#20974
                    $k[$j++] = $1.numbytes; //#20971
                    $k[$j++] = 5; //#20971
                    $1.tobin(); //#20971
                    $1.addtomsgbits(); //#20971
                } else { //#20974
                    $k[$j++] = 0; //#20973
                    $k[$j++] = 5; //#20973
                    $1.tobin(); //#20973
                    $1.addtomsgbits(); //#20973
                    $k[$j++] = $1.numbytes - 31; //#20974
                    $k[$j++] = 11; //#20974
                    $1.tobin(); //#20974
                    $1.addtomsgbits(); //#20974
                } //#20974
                for (var _Ax = 0, _Ay = $1.numbytes; _Ax < _Ay; _Ax++) { //#20981
                    $k[$j++] = $get($1.seq, $1.i); //#20979
                    $k[$j++] = 8; //#20979
                    $1.tobin(); //#20979
                    $1.addtomsgbits(); //#20979
                    $1.i = $1.i + 1; //#20980
                } //#20980
                if ($1.i < $1.seq.length) { //#20990
                    $1.char = $get($1.seq, $1.i); //#20985
                    $1.i = $1.i + 1; //#20986
                    if ($1.char == $1.lu) { //#20987
                        $1.state = $1.U; //#20987
                    } //#20987
                    if ($1.char == $1.ll) { //#20988
                        $1.state = $1.L; //#20988
                    } //#20988
                    if ($1.char == $1.lm) { //#20989
                        $1.state = $1.M; //#20989
                    } //#20989
                } //#20989
            } //#20989
        } //#20989
    } //#20989
    $1.metrics = $a([$a(["rune", 0, 0, 0, 6]), $a(["compact", 1, 1, 17, 6]), $a(["full", 1, 1, 21, 6]), $a(["compact", 2, 0, 40, 6]), $a(["full", 2, 1, 48, 6]), $a(["compact", 3, 0, 51, 8]), $a(["full", 3, 1, 60, 8]), $a(["compact", 4, 0, 76, 8]), $a(["full", 4, 1, 88, 8]), $a(["full", 5, 1, 120, 8]), $a(["full", 6, 1, 156, 8]), $a(["full", 7, 1, 196, 8]), $a(["full", 8, 1, 240, 8]), $a(["full", 9, 1, 230, 10]), $a(["full", 10, 1, 272, 10]), $a(["full", 11, 1, 316, 10]), $a(["full", 12, 1, 364, 10]), $a(["full", 13, 1, 416, 10]), $a(["full", 14, 1, 470, 10]), $a(["full", 15, 1, 528, 10]), $a(["full", 16, 1, 588, 10]), $a(["full", 17, 1, 652, 10]), $a(["full", 18, 1, 720, 10]), $a(["full", 19, 1, 790, 10]), $a(["full", 20, 1, 864, 10]), $a(["full", 21, 1, 940, 10]), $a(["full", 22, 1, 1020, 10]), $a(["full", 23, 0, 920, 12]), $a(["full", 24, 0, 992, 12]), $a(["full", 25, 0, 1066, 12]), $a(["full", 26, 0, 1144, 12]), $a(["full", 27, 0, 1224, 12]), $a(["full", 28, 0, 1306, 12]), $a(["full", 29, 0, 1392, 12]), $a(["full", 30, 0, 1480, 12]), $a(["full", 31, 0, 1570, 12]), $a(["full", 32, 0, 1664, 12])]); //#21013
    $1.i = 0; //#21015
    for (;;) { //#21033
        $1.m = $get($1.metrics, $1.i); //#21017
        $1.frmt = $get($1.m, 0); //#21018
        $1.mlyr = $get($1.m, 1); //#21019
        $1.icap = $get($1.m, 2); //#21020
        $1.ncws = $get($1.m, 3); //#21021
        $1.bpcw = $get($1.m, 4); //#21022
        $1.numecw = ~~(Math.ceil($f((($1.ncws * $1.eclevel) / 100) + $1.ecaddchars))); //#21023
        if ($1.msgbits.length == 0) { //#21024
            $1.numecw = 0; //#21024
        } //#21024
        $1.numdcw = $f($1.ncws - $1.numecw); //#21025
        $1.okay = true; //#21026
        if ($ne($1.format, "unset") && $ne($1.format, $1.frmt)) { //#21027
            $1.okay = false; //#21027
        } //#21027
        if ($1.readerinit && ($1.icap != 1)) { //#21028
            $1.okay = false; //#21028
        } //#21028
        if (($1.layers != -1) && ($1.layers != $1.mlyr)) { //#21029
            $1.okay = false; //#21029
        } //#21029
        if ((~~Math.ceil($1.msgbits.length / $1.bpcw)) > $1.numdcw) { //#21030
            $1.okay = false; //#21030
        } //#21030
        if ($1.okay) { //#21031
            break; //#21031
        } //#21031
        $1.i = $1.i + 1; //#21032
    } //#21032
    $1.layers = $1.mlyr; //#21034
    $1.format = $1.frmt; //#21035
    $1.allzero = function() {
        var _CS = $k[--$j]; //#21038
        $k[$j++] = $eq(_CS, $geti("000000000000", 0, _CS.length)); //#21038
    }; //#21038
    $1.allones = function() {
        var _CU = $k[--$j]; //#21039
        $k[$j++] = $eq(_CU, $geti("111111111111", 0, _CU.length)); //#21039
    }; //#21039
    $1.cws = $a($1.ncws); //#21040
    $1.m = 0; //#21041
    $1.c = 0; //#21041
    for (;;) { //#21068
        if ($1.msgbits.length <= $1.m) { //#21043
            break; //#21043
        } //#21043
        if (($1.msgbits.length - $1.m) >= $1.bpcw) { //#21057
            $1.cwb = $geti($1.msgbits, $1.m, $f($1.bpcw - 1)); //#21045
            $1.cwf = $geti($1.msgbits, $f($f($1.m + $1.bpcw) - 1), 1); //#21046
            $k[$j++] = $1.cwb; //#21047
            $1.allzero(); //#21047
            if ($k[--$j]) { //#21047
                $1.cwf = "1"; //#21047
                $1.m = $1.m - 1; //#21047
            } //#21047
            $k[$j++] = $1.cwb; //#21048
            $1.allones(); //#21048
            if ($k[--$j]) { //#21048
                $1.cwf = "0"; //#21048
                $1.m = $1.m - 1; //#21048
            } //#21048
            var _Cr = $s(12); //#21050
            $puti(_Cr, 0, $1.cwb); //#21050
            $puti(_Cr, $f($1.bpcw - 1), $1.cwf); //#21051
            $1.cwb = $geti(_Cr, 0, $1.bpcw); //#21053
        } else { //#21057
            $1.cwb = $geti($1.msgbits, $1.m, $1.msgbits.length - $1.m); //#21055
            var _D3 = $strcpy($s(12), "111111111111"); //#21056
            $puti(_D3, 0, $1.cwb); //#21056
            $1.cwb = $geti(_D3, 0, $1.bpcw); //#21056
            $k[$j++] = $1.cwb; //#21057
            $1.allones(); //#21057
            if ($k[--$j]) { //#21057
                $puti($1.cwb, $1.cwb.length - 1, "0"); //#21057
            } //#21057
        } //#21057
        $1.cw = 0; //#21060
        for (var _DD = 0, _DC = $f($1.bpcw - 1); _DD <= _DC; _DD += 1) { //#21064
            $1.i = _DD; //#21062
            $1.cw = $f($1.cw + ((~~(Math.pow(2, $f($f($1.bpcw - $1.i) - 1)))) * $f($get($1.cwb, $1.i) - 48))); //#21063
        } //#21063
        $put($1.cws, $1.c, $1.cw); //#21065
        $1.m = $f($1.m + $1.bpcw); //#21066
        $1.c = $1.c + 1; //#21067
    } //#21067
    $1.cws = $geti($1.cws, 0, $1.c); //#21069
    var _DU = $get($1.options, 'debugcws') !== undefined; //#21071
    if (_DU) { //#21071
        $k[$j++] = 'bwipp.debugcws'; //#21071
        $k[$j++] = $1.cws; //#21071
        bwipp_raiseerror(); //#21071
    } //#21071
    $1.rscodes = function() {
        $1.rspm = $k[--$j]; //#21076
        $1.rsgf = $k[--$j]; //#21077
        $1.rsnc = $k[--$j]; //#21078
        $1.rscws = $k[--$j]; //#21079
        $k[$j++] = Infinity; //#21082
        $k[$j++] = 1; //#21082
        for (var _Db = 0, _Dc = $f($1.rsgf - 1); _Db < _Dc; _Db++) { //#21082
            var _Dd = $k[--$j]; //#21082
            var _De = _Dd * 2; //#21082
            $k[$j++] = _Dd; //#21082
            $k[$j++] = _De; //#21082
            if (_De >= $1.rsgf) { //#21082
                var _Dh = $k[--$j]; //#21082
                $k[$j++] = $xo(_Dh, $1.rspm); //#21082
            } //#21082
        } //#21082
        $1.rsalog = $a(); //#21082
        $1.rslog = $a($1.rsgf); //#21083
        for (var _Dn = 1, _Dm = $f($1.rsgf - 1); _Dn <= _Dm; _Dn += 1) { //#21084
            $put($1.rslog, $get($1.rsalog, _Dn), _Dn); //#21084
        } //#21084
        $1.rsprod = function() {
            var _Dr = $k[--$j]; //#21088
            var _Ds = $k[--$j]; //#21088
            $k[$j++] = _Ds; //#21092
            $k[$j++] = _Dr; //#21092
            if ((_Dr != 0) && (_Ds != 0)) { //#21091
                var _Dv = $get($1.rslog, $k[--$j]); //#21089
                var _E1 = $get($1.rsalog, $f(_Dv + $get($1.rslog, $k[--$j])) % $f($1.rsgf - 1)); //#21089
                $k[$j++] = _E1; //#21089
            } else { //#21091
                $j -= 2; //#21091
                $k[$j++] = 0; //#21091
            } //#21091
        }; //#21093
        $k[$j++] = Infinity; //#21096
        $k[$j++] = 1; //#21096
        for (var _E3 = 0, _E4 = $1.rsnc; _E3 < _E4; _E3++) { //#21096
            $k[$j++] = 0; //#21096
        } //#21096
        $1.coeffs = $a(); //#21096
        for (var _E8 = 1, _E7 = $1.rsnc; _E8 <= _E7; _E8 += 1) { //#21105
            $1.i = _E8; //#21098
            $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#21099
            for (var _EF = $1.i - 1; _EF >= 1; _EF -= 1) { //#21103
                $1.j = _EF; //#21101
                $k[$j++] = $1.coeffs; //#21102
                $k[$j++] = $1.j; //#21102
                $k[$j++] = $get($1.coeffs, $1.j - 1); //#21102
                $k[$j++] = $get($1.coeffs, $1.j); //#21102
                $k[$j++] = $get($1.rsalog, $1.i); //#21102
                $1.rsprod(); //#21102
                var _ER = $k[--$j]; //#21102
                var _ES = $k[--$j]; //#21102
                var _ET = $k[--$j]; //#21102
                $put($k[--$j], _ET, $xo(_ES, _ER)); //#21102
            } //#21102
            $k[$j++] = $1.coeffs; //#21104
            $k[$j++] = 0; //#21104
            $k[$j++] = $get($1.coeffs, 0); //#21104
            $k[$j++] = $get($1.rsalog, $1.i); //#21104
            $1.rsprod(); //#21104
            var _Eb = $k[--$j]; //#21104
            var _Ec = $k[--$j]; //#21104
            $put($k[--$j], _Ec, _Eb); //#21104
        } //#21104
        $1.nd = $1.rscws.length; //#21108
        $k[$j++] = Infinity; //#21109
        $forall($1.rscws); //#21109
        for (var _Eh = 0, _Ei = $1.rsnc; _Eh < _Ei; _Eh++) { //#21109
            $k[$j++] = 0; //#21109
        } //#21109
        $k[$j++] = 0; //#21109
        $1.rscws = $a(); //#21109
        for (var _Em = 0, _El = $1.nd - 1; _Em <= _El; _Em += 1) { //#21116
            $1.k = $xo($get($1.rscws, _Em), $get($1.rscws, $1.nd)); //#21111
            for (var _Eu = 0, _Et = $f($1.rsnc - 1); _Eu <= _Et; _Eu += 1) { //#21115
                $1.j = _Eu; //#21113
                $k[$j++] = $1.rscws; //#21114
                $k[$j++] = $1.nd + $1.j; //#21114
                $k[$j++] = $get($1.rscws, ($1.nd + $1.j) + 1); //#21114
                $k[$j++] = $1.k; //#21114
                $k[$j++] = $get($1.coeffs, $f($f($1.rsnc - $1.j) - 1)); //#21114
                $1.rsprod(); //#21114
                var _F7 = $k[--$j]; //#21114
                var _F8 = $k[--$j]; //#21114
                var _F9 = $k[--$j]; //#21114
                $put($k[--$j], _F9, $xo(_F8, _F7)); //#21114
            } //#21114
        } //#21114
        $k[$j++] = $geti($1.rscws, 0, $1.rscws.length - 1); //#21119
    }; //#21121
    if ($eq($1.format, "full")) { //#21134
        $1.mode = ($f($1.layers - 1) << 11) + ($1.cws.length - 1); //#21125
        if ($1.readerinit) { //#21126
            $1.mode = $1.mode | 1024; //#21126
        } //#21126
        $1.mode = $a([($1.mode & 61440) >>> 12, ($1.mode & 3840) >>> 8, ($1.mode & 240) >>> 4, $1.mode & 15]); //#21132
        $k[$j++] = 'mode'; //#21133
        $k[$j++] = $1.mode; //#21133
        $k[$j++] = 6; //#21133
        $k[$j++] = 16; //#21133
        $k[$j++] = 19; //#21133
        $1.rscodes(); //#21133
        var _FP = $k[--$j]; //#21133
        $1[$k[--$j]] = _FP; //#21133
    } //#21133
    if ($eq($1.format, "compact")) { //#21143
        $1.mode = ($f($1.layers - 1) << 6) + ($1.cws.length - 1); //#21136
        if ($1.readerinit) { //#21137
            $1.mode = $1.mode | 32; //#21137
        } //#21137
        $1.mode = $a([($1.mode & 240) >>> 4, $1.mode & 15]); //#21141
        $k[$j++] = 'mode'; //#21142
        $k[$j++] = $1.mode; //#21142
        $k[$j++] = 5; //#21142
        $k[$j++] = 16; //#21142
        $k[$j++] = 19; //#21142
        $1.rscodes(); //#21142
        var _Fa = $k[--$j]; //#21142
        $1[$k[--$j]] = _Fa; //#21142
    } //#21142
    if ($eq($1.format, "rune")) { //#21152
        $1.mode = $cvi($1.barcode); //#21145
        $1.mode = $a([($1.mode & 240) >>> 4, $1.mode & 15]); //#21149
        $k[$j++] = 'mode'; //#21150
        $k[$j++] = $1.mode; //#21150
        $k[$j++] = 5; //#21150
        $k[$j++] = 16; //#21150
        $k[$j++] = 19; //#21150
        $1.rscodes(); //#21150
        var _Fi = $k[--$j]; //#21150
        $1[$k[--$j]] = _Fi; //#21150
        $k[$j++] = Infinity; //#21151
        var _Fk = $1.mode; //#21151
        for (var _Fl = 0, _Fm = _Fk.length; _Fl < _Fm; _Fl++) { //#21151
            $k[$j++] = $get(_Fk, _Fl) ^ 10; //#21151
        } //#21151
        $1.mode = $a(); //#21151
    } //#21151
    $1.modebits = $s($1.mode.length * 4); //#21153
    for (var _Ft = 0, _Fs = $1.modebits.length - 1; _Ft <= _Fs; _Ft += 1) { //#21154
        $puti($1.modebits, _Ft, "0"); //#21154
    } //#21154
    for (var _Fx = 0, _Fw = $1.mode.length - 1; _Fx <= _Fw; _Fx += 1) { //#21158
        $1.i = _Fx; //#21156
        var _G3 = $cvrs($s(4), $get($1.mode, $1.i), 2); //#21157
        $puti($1.modebits, (4 - _G3.length) + (4 * $1.i), _G3); //#21157
    } //#21157
    $1.rsparams = $a([$a([]), $a([]), $a([]), $a([]), $a([]), $a([]), $a([64, 67]), $a([]), $a([256, 301]), $a([]), $a([1024, 1033]), $a([]), $a([4096, 4201])]); //#21170
    $k[$j++] = 'cws'; //#21171
    $k[$j++] = $1.cws; //#21171
    $k[$j++] = $f($1.ncws - $1.cws.length); //#21171
    $forall($get($1.rsparams, $1.bpcw)); //#21171
    $1.rscodes(); //#21171
    var _GP = $k[--$j]; //#21171
    $1[$k[--$j]] = _GP; //#21171
    if ($eq($1.format, "full")) { //#21175
        $1.databits = $s($f((($1.layers * $1.layers) * 16) + ($1.layers * 112))); //#21173
    } else { //#21175
        $1.databits = $s($f((($1.layers * $1.layers) * 16) + ($1.layers * 88))); //#21175
    } //#21175
    for (var _Gc = 0, _Gb = $1.databits.length - 1; _Gc <= _Gb; _Gc += 1) { //#21177
        $puti($1.databits, _Gc, "0"); //#21177
    } //#21177
    for (var _Gg = 0, _Gf = $f($1.ncws - 1); _Gg <= _Gf; _Gg += 1) { //#21183
        $1.i = _Gg; //#21179
        var _Gn = $cvrs($s($1.bpcw), $get($1.cws, $1.i), 2); //#21180
        $puti($1.databits, $f(($f($f($1.bpcw - _Gn.length) + ($1.bpcw * $1.i))) + ($f($1.databits.length - ($1.ncws * $1.bpcw)))), _Gn); //#21182
    } //#21182
    $1.cmv = function() {
        var _Gv = $k[--$j]; //#21186
        var _Gw = $k[--$j]; //#21186
        $k[$j++] = $f(($f(_Gw - (_Gv * $1.size))) + $1.mid); //#21186
    }; //#21186
    $1.lmv = function() {
        $1.lbit = $k[--$j]; //#21190
        $1.llyr = $k[--$j]; //#21191
        $1.lwid = $f($1.fw + ($1.llyr * 4)); //#21192
        $1.ldir = ~~((~~($1.lbit / 2)) / $1.lwid); //#21193
        if ($1.ldir == 0) { //#21198
            $k[$j++] = $f(((-(~~($f($1.lwid - 1) / 2))) + 1) + ((~~($1.lbit / 2)) % $1.lwid)); //#21197
            $k[$j++] = $f(($f((~~(($1.fw - 1) / 2)) + ($1.llyr * 2))) + ($1.lbit % 2)); //#21197
            $1.cmv(); //#21197
        } //#21197
        if ($1.ldir == 1) { //#21203
            $k[$j++] = $f(($f((~~($1.fw / 2)) + ($1.llyr * 2))) + ($1.lbit % 2)); //#21202
            $k[$j++] = $f(((~~($f($1.lwid - 1) / 2)) - 1) - ((~~($1.lbit / 2)) % $1.lwid)); //#21202
            $1.cmv(); //#21202
        } //#21202
        if ($1.ldir == 2) { //#21208
            $k[$j++] = -($f(((-(~~($1.lwid / 2))) + 1) + ((~~($1.lbit / 2)) % $1.lwid))); //#21207
            $k[$j++] = -($f(($f((~~($1.fw / 2)) + ($1.llyr * 2))) + ($1.lbit % 2))); //#21207
            $1.cmv(); //#21207
        } //#21207
        if ($1.ldir == 3) { //#21213
            $k[$j++] = -($f(($f((~~(($1.fw - 1) / 2)) + ($1.llyr * 2))) + ($1.lbit % 2))); //#21212
            $k[$j++] = -($f(((~~($1.lwid / 2)) - 1) - ((~~($1.lbit / 2)) % $1.lwid))); //#21212
            $1.cmv(); //#21212
        } //#21212
    }; //#21214
    if ($eq($1.format, "full")) { //#21218
        $1.fw = 12; //#21218
    } else { //#21218
        $1.fw = 9; //#21218
    } //#21218
    $1.size = $f(($f($1.fw + ($1.layers * 4))) + 2); //#21219
    $k[$j++] = Infinity; //#21220
    for (var _Hb = 0, _Hc = $1.size * $1.size; _Hb < _Hc; _Hb++) { //#21220
        $k[$j++] = -1; //#21220
    } //#21220
    $1.pixs = $a(); //#21220
    $1.mid = $f(((~~($f($1.size - 1) / 2)) * $1.size) + (~~($f($1.size - 1) / 2))); //#21221
    $1.i = 0; //#21224
    for (var _Hj = 1, _Hi = $1.layers; _Hj <= _Hi; _Hj += 1) { //#21232
        $1.layer = _Hj; //#21226
        for (var _Hn = 0, _Hm = (($1.fw + ($1.layer * 4)) * 8) - 1; _Hn <= _Hm; _Hn += 1) { //#21231
            $1.pos = _Hn; //#21228
            $k[$j++] = $1.pixs; //#21229
            $k[$j++] = $1.layer; //#21229
            $k[$j++] = $1.pos; //#21229
            $1.lmv(); //#21229
            var _Hv = $k[--$j]; //#21229
            $put($k[--$j], _Hv, $get($1.databits, ($1.databits.length - $1.i) - 1) - 48); //#21229
            $1.i = $1.i + 1; //#21230
        } //#21230
    } //#21230
    if ($eq($1.format, "full")) { //#21259
        $1.fw = 13; //#21236
        $1.size = $f(($f(($f($1.fw + ($1.layers * 4))) + 2)) + ((~~($f(($f($1.layers + 10.5) / 7.5) - 1))) * 2)); //#21237
        $1.mid = ~~(($1.size * $1.size) / 2); //#21238
        $k[$j++] = Infinity; //#21239
        for (var _I6 = 0, _I7 = $1.size * $1.size; _I6 < _I7; _I6++) { //#21239
            $k[$j++] = -2; //#21239
        } //#21239
        $1.npixs = $a(); //#21239
        for (var _IB = 0, _IA = ~~($1.size / 2); _IB <= _IA; _IB += 16) { //#21249
            $1.i = _IB; //#21241
            for (var _IE = 0, _ID = $f($1.size - 1); _IE <= _ID; _IE += 1) { //#21248
                $1.j = _IE; //#21243
                $k[$j++] = $1.npixs; //#21244
                $k[$j++] = (-(~~($1.size / 2))) + $1.j; //#21244
                $k[$j++] = $1.i; //#21244
                $1.cmv(); //#21244
                var _IN = $k[--$j]; //#21244
                $puti($k[--$j], _IN, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); //#21244
                $k[$j++] = $1.npixs; //#21245
                $k[$j++] = (-(~~($1.size / 2))) + $1.j; //#21245
                $k[$j++] = -$1.i; //#21245
                $1.cmv(); //#21245
                var _IX = $k[--$j]; //#21245
                $puti($k[--$j], _IX, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); //#21245
                $k[$j++] = $1.npixs; //#21246
                $k[$j++] = $1.i; //#21246
                $k[$j++] = (-(~~($1.size / 2))) + $1.j; //#21246
                $1.cmv(); //#21246
                var _Ih = $k[--$j]; //#21246
                $puti($k[--$j], _Ih, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); //#21246
                $k[$j++] = $1.npixs; //#21247
                $k[$j++] = -$1.i; //#21247
                $k[$j++] = (-(~~($1.size / 2))) + $1.j; //#21247
                $1.cmv(); //#21247
                var _Ir = $k[--$j]; //#21247
                $puti($k[--$j], _Ir, $a([((((~~($1.size / 2)) + $1.j) + $1.i) + 1) % 2])); //#21247
            } //#21247
        } //#21247
        $1.j = 0; //#21250
        for (var _Iv = 0, _Iu = $1.npixs.length - 1; _Iv <= _Iu; _Iv += 1) { //#21257
            $1.i = _Iv; //#21252
            if ($get($1.npixs, $1.i) == -2) { //#21256
                $put($1.npixs, $1.i, $get($1.pixs, $1.j)); //#21254
                $1.j = $1.j + 1; //#21255
            } //#21255
        } //#21255
        $1.pixs = $1.npixs; //#21258
    } //#21258
    $1.fw = ~~($1.fw / 2); //#21262
    for (var _JA = -$1.fw, _J9 = $1.fw; _JA <= _J9; _JA += 1) { //#21271
        $1.i = _JA; //#21264
        for (var _JE = -$1.fw, _JD = $1.fw; _JE <= _JD; _JE += 1) { //#21270
            $1.j = _JE; //#21266
            $k[$j++] = $1.pixs; //#21267
            $k[$j++] = $1.i; //#21267
            $k[$j++] = $1.j; //#21267
            $1.cmv(); //#21267
            if (Math.abs($1.i) > Math.abs($1.j)) { //#21268
                $k[$j++] = Math.abs($1.i); //#21268
            } else { //#21268
                $k[$j++] = Math.abs($1.j); //#21268
            } //#21268
            var _JM = $k[--$j]; //#21268
            var _JN = $k[--$j]; //#21269
            $put($k[--$j], _JN, $f(_JM + 1) % 2); //#21269
        } //#21269
    } //#21269
    var _Jz = $a([$a([-($1.fw + 1), $1.fw, 1]), $a([-($1.fw + 1), $1.fw + 1, 1]), $a([-$1.fw, $1.fw + 1, 1]), $a([$1.fw + 1, $1.fw + 1, 1]), $a([$1.fw + 1, $1.fw, 1]), $a([$1.fw + 1, -$1.fw, 1]), $a([$1.fw, $1.fw + 1, 0]), $a([$1.fw + 1, -($1.fw + 1), 0]), $a([$1.fw, -($1.fw + 1), 0]), $a([-$1.fw, -($1.fw + 1), 0]), $a([-($1.fw + 1), -($1.fw + 1), 0]), $a([-($1.fw + 1), -$1.fw, 0])]); //#21279
    for (var _K0 = 0, _K1 = _Jz.length; _K0 < _K1; _K0++) { //#21280
        $k[$j++] = $1.pixs; //#21280
        $forall($get(_Jz, _K0)); //#21280
        var _K4 = $k[--$j]; //#21280
        var _K5 = $k[--$j]; //#21280
        var _K6 = $k[--$j]; //#21280
        $k[$j++] = _K4; //#21280
        $k[$j++] = _K6; //#21280
        $k[$j++] = _K5; //#21280
        $1.cmv(); //#21280
        var _K7 = $k[--$j]; //#21280
        var _K8 = $k[--$j]; //#21280
        $put($k[--$j], _K7, _K8); //#21280
    } //#21280
    if ($eq($1.format, "full")) { //#21296
        $1.modemap = $a([$a([-5, 7]), $a([-4, 7]), $a([-3, 7]), $a([-2, 7]), $a([-1, 7]), $a([1, 7]), $a([2, 7]), $a([3, 7]), $a([4, 7]), $a([5, 7]), $a([7, 5]), $a([7, 4]), $a([7, 3]), $a([7, 2]), $a([7, 1]), $a([7, -1]), $a([7, -2]), $a([7, -3]), $a([7, -4]), $a([7, -5]), $a([5, -7]), $a([4, -7]), $a([3, -7]), $a([2, -7]), $a([1, -7]), $a([-1, -7]), $a([-2, -7]), $a([-3, -7]), $a([-4, -7]), $a([-5, -7]), $a([-7, -5]), $a([-7, -4]), $a([-7, -3]), $a([-7, -2]), $a([-7, -1]), $a([-7, 1]), $a([-7, 2]), $a([-7, 3]), $a([-7, 4]), $a([-7, 5])]); //#21289
    } else { //#21296
        $1.modemap = $a([$a([-3, 5]), $a([-2, 5]), $a([-1, 5]), $a([0, 5]), $a([1, 5]), $a([2, 5]), $a([3, 5]), $a([5, 3]), $a([5, 2]), $a([5, 1]), $a([5, 0]), $a([5, -1]), $a([5, -2]), $a([5, -3]), $a([3, -5]), $a([2, -5]), $a([1, -5]), $a([0, -5]), $a([-1, -5]), $a([-2, -5]), $a([-3, -5]), $a([-5, -3]), $a([-5, -2]), $a([-5, -1]), $a([-5, 0]), $a([-5, 1]), $a([-5, 2]), $a([-5, 3])]); //#21296
    } //#21296
    for (var _LL = 0, _LK = $1.modemap.length - 1; _LL <= _LK; _LL += 1) { //#21301
        $1.i = _LL; //#21299
        $k[$j++] = $1.pixs; //#21300
        $forall($get($1.modemap, $1.i)); //#21300
        $1.cmv(); //#21300
        var _LT = $k[--$j]; //#21300
        $put($k[--$j], _LT, $get($1.modebits, $1.i) - 48); //#21300
    } //#21300
    var _Lb = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.size],
        ["pixy", $1.size],
        ["height", ($1.size * 2) / 72],
        ["width", ($1.size * 2) / 72],
        ["opt", $1.options]
    ]); //#21310
    $k[$j++] = _Lb; //#21313
    if (!$1.dontdraw) { //#21313
        bwipp_renmatrix(); //#21313
    } //#21313
}

function bwipp_azteccodecompact() {
    var $1 = {}; //#21343
    $1.options = $k[--$j]; //#21345
    $1.barcode = $k[--$j]; //#21346
    $1.dontdraw = false; //#21348
    $forall($1.options, function() { //#21359
        var _3 = $k[--$j]; //#21359
        $1[$k[--$j]] = _3; //#21359
    }); //#21359
    $put($1.options, "dontdraw", true); //#21362
    $put($1.options, "format", "compact"); //#21363
    $k[$j++] = 'args'; //#21365
    $k[$j++] = $1.barcode; //#21365
    $k[$j++] = $1.options; //#21365
    bwipp_azteccode(); //#21365
    var _9 = $k[--$j]; //#21365
    $1[$k[--$j]] = _9; //#21365
    $put($1.args, "opt", $1.options); //#21367
    $k[$j++] = $1.args; //#21370
    if (!$1.dontdraw) { //#21370
        bwipp_renmatrix(); //#21370
    } //#21370
}

function bwipp_aztecrune() {
    var $1 = {}; //#21400
    $1.options = $k[--$j]; //#21402
    $1.barcode = $k[--$j]; //#21403
    $1.dontdraw = false; //#21405
    $forall($1.options, function() { //#21416
        var _3 = $k[--$j]; //#21416
        $1[$k[--$j]] = _3; //#21416
    }); //#21416
    $put($1.options, "dontdraw", true); //#21419
    $put($1.options, "format", "rune"); //#21420
    $k[$j++] = 'args'; //#21422
    $k[$j++] = $1.barcode; //#21422
    $k[$j++] = $1.options; //#21422
    bwipp_azteccode(); //#21422
    var _9 = $k[--$j]; //#21422
    $1[$k[--$j]] = _9; //#21422
    $put($1.args, "opt", $1.options); //#21424
    $k[$j++] = $1.args; //#21427
    if (!$1.dontdraw) { //#21427
        bwipp_renmatrix(); //#21427
    } //#21427
}

function bwipp_codeone() {
    var $1 = {}; //#21457
    $1.options = $k[--$j]; //#21459
    $1.barcode = $k[--$j]; //#21460
    $1.dontdraw = false; //#21462
    $1.version = "unset"; //#21463
    $1.parse = false; //#21464
    $1.parsefnc = false; //#21465
    $forall($1.options, function() { //#21476
        var _3 = $k[--$j]; //#21476
        $1[$k[--$j]] = _3; //#21476
    }); //#21476
    $1.stype = $eq($geti($1.version, 0, 1), "S"); //#21478
    if ($1.stype) { //#22113
        $1.vals = $a(["1", "1010", "1100100", "1111101000", "10011100010000", "11000011010100000", "11110100001001000000", "100110001001011010000000", "101111101011110000100000000", "111011100110101100101000000000", "1001010100000010111110010000000000", "1011101001000011101101110100000000000", "1110100011010100101001010001000000000000", "10010001100001001110011100101010000000000000", "10110101111001100010000011110100100000000000000", "11100011010111111010100100110001101000000000000000", "100011100001101111001001101111110000010000000000000000", "101100011010001010111100001011101100010100000000000000000"]); //#21500
        $1.normalize = function() {
            $1.base = $k[--$j]; //#21503
            $1.num = $k[--$j]; //#21504
            for (var _C = $1.num.length - 1; _C >= 1; _C -= 1) { //#21509
                $1.i = _C; //#21506
                var _D = $1.num; //#21507
                var _E = $1.i; //#21507
                $put(_D, _E - 1, $f($get(_D, _E - 1) + (~~($get($1.num, $1.i) / $1.base)))); //#21507
                $put($1.num, $1.i, $get($1.num, $1.i) % $1.base); //#21508
            } //#21508
            for (;;) { //#21515
                if ($lt($get($1.num, 0), $1.base)) { //#21511
                    break; //#21511
                } //#21511
                $k[$j++] = Infinity; //#21512
                $k[$j++] = 0; //#21512
                $forall($1.num); //#21512
                $1.num = $a(); //#21512
                $put($1.num, 0, $f($get($1.num, 0) + (~~($get($1.num, 1) / $1.base)))); //#21513
                $put($1.num, 1, $get($1.num, 1) % $1.base); //#21514
            } //#21514
            $k[$j++] = Infinity; //#21517
            $1.i = true; //#21517
            var _f = $1.num; //#21517
            for (var _g = 0, _h = _f.length; _g < _h; _g++) { //#21517
                var _i = $get(_f, _g); //#21517
                $k[$j++] = _i; //#21517
                if ((_i == 0) && $1.i) { //#21517
                    $j--; //#21517
                } else { //#21517
                    $1.i = false; //#21517
                } //#21517
            } //#21517
            $1.num = $a(); //#21517
            if ($1.num.length == 0) { //#21518
                $1.num = $a([0]); //#21518
            } //#21518
            $k[$j++] = $1.num; //#21519
        }; //#21520
        $1.bigadd = function() {
            var _o = $k[--$j]; //#21523
            var _p = $k[--$j]; //#21523
            $1.offset = Math.abs(_o.length - _p.length); //#21524
            if (_o.length < _p.length) { //#21525
                var _ = _o; //#21525
                _o = _p; //#21525
                _p = _; //#21525
            } //#21525
            $1.a = _o; //#21526
            $1.b = _p; //#21526
            for (var _s = 0, _r = $1.b.length - 1; _s <= _r; _s += 1) { //#21529
                var _t = $1.a; //#21528
                var _u = $1.offset; //#21528
                $put(_t, _s + _u, $f($get(_t, _s + _u) + $get($1.b, _s))); //#21528
            } //#21528
            $k[$j++] = $1.a; //#21530
        }; //#21531
        $1.barlen = $1.barcode.length; //#21533
        $1.v = $a([1]); //#21536
        for (var _13 = 0, _12 = $1.barlen - 1; _13 <= _12; _13 += 1) { //#21541
            $1.i = _13; //#21538
            $k[$j++] = Infinity; //#21539
            $forall($get($1.vals, $1.i), function() { //#21539
                var _17 = $k[--$j]; //#21539
                $k[$j++] = $f(_17 - 48) * $f($get($1.barcode, ($1.barlen - $1.i) - 1) - 48); //#21539
            }); //#21539
            var _1C = $a(); //#21539
            $k[$j++] = _1C; //#21540
            $k[$j++] = $1.v; //#21540
            $1.bigadd(); //#21540
            $1.v = $k[--$j]; //#21540
        } //#21540
        $k[$j++] = 'v'; //#21542
        $k[$j++] = $1.v; //#21542
        $k[$j++] = 2; //#21542
        $1.normalize(); //#21542
        var _1G = $k[--$j]; //#21542
        $1[$k[--$j]] = _1G; //#21542
        $k[$j++] = Infinity; //#21545
        for (var _1J = 0, _1K = (5 - ($1.v.length % 5)) % 5; _1J < _1K; _1J++) { //#21545
            $k[$j++] = 0; //#21545
        } //#21545
        $aload($1.v); //#21545
        $1.v = $a(); //#21545
        $1.cws = $a(~~($1.v.length / 5)); //#21546
        for (var _1R = 0, _1Q = $1.cws.length - 1; _1R <= _1Q; _1R += 1) { //#21552
            $1.i = _1R; //#21548
            var _1U = $geti($1.v, $1.i * 5, 5); //#21549
            $k[$j++] = 0; //#21550
            for (var _1V = 0, _1W = _1U.length; _1V < _1W; _1V++) { //#21550
                var _1Y = $k[--$j]; //#21550
                $k[$j++] = $f(_1Y + $get(_1U, _1V)) * 2; //#21550
            } //#21550
            $put($1.cws, $1.i, ~~($k[--$j] / 2)); //#21551
        } //#21551
        $1.metrics = $a([$a(["S-10", 8, 11, 10, 4, 4, 1, 99, 99, 99]), $a(["S-20", 8, 21, 20, 8, 8, 1, 99, 99, 99]), $a(["S-30", 8, 31, 30, 12, 12, 1, 99, 99, 99])]); //#21560
    } else { //#22113
        $1.fnc1 = -1; //#21565
        $1.fnc3 = -2; //#21565
        var _1k = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["eci", true],
            ["FNC1", $1.fnc1],
            ["FNC3", $1.fnc3]
        ]); //#21571
        $1.fncvals = _1k; //#21572
        $k[$j++] = 'msg'; //#21573
        $k[$j++] = $1.barcode; //#21573
        $k[$j++] = $1.fncvals; //#21573
        bwipp_parseinput(); //#21573
        var _1n = $k[--$j]; //#21573
        $1[$k[--$j]] = _1n; //#21573
        $1.msglen = $1.msg.length; //#21574
        $1.lC = -5; //#21577
        $1.lB = -6; //#21577
        $1.lX = -7; //#21577
        $1.lT = -8; //#21577
        $1.lD = -9; //#21577
        $1.unl = -10; //#21577
        $1.fnc2 = -11; //#21578
        $1.fnc4 = -12; //#21578
        $1.sft1 = -13; //#21578
        $1.sft2 = -14; //#21578
        $1.sft3 = -15; //#21578
        $1.eci = -16; //#21578
        $1.pad = -17; //#21578
        $1.fnc1lD = -18; //#21578
        $1.unlcw = 255; //#21579
        $1.eciesc = 92; //#21582
        var _1q = $1.msg; //#21583
        $k[$j++] = 'numecis'; //#21583
        $k[$j++] = 0; //#21583
        for (var _1r = 0, _1s = _1q.length; _1r < _1s; _1r++) { //#21583
            if ($get(_1q, _1r) <= -1000000) { //#21583
                var _1u = $k[--$j]; //#21583
                $k[$j++] = $f(_1u + 1); //#21583
            } //#21583
        } //#21583
        var _1v = $k[--$j]; //#21583
        $1[$k[--$j]] = _1v; //#21583
        if ($1.numecis > 0) { //#21610
            $1.msgtmp = $a($f(($f(($1.msg.length * 2) + ($1.numecis * 6))) + 2)); //#21585
            $put($1.msgtmp, 0, $1.pad); //#21586
            $put($1.msgtmp, 1, $1.eciesc); //#21587
            $1.j = 2; //#21588
            for (var _27 = 0, _26 = $1.msg.length - 1; _27 <= _26; _27 += 1) { //#21607
                var _29 = $get($1.msg, _27); //#21590
                $k[$j++] = _29; //#21606
                if (_29 <= -1000000) { //#21604
                    var _2D = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#21592
                    for (var _2E = 0, _2F = _2D.length; _2E < _2F; _2E++) { //#21592
                        $k[$j++] = $get(_2D, _2E); //#21592
                    } //#21592
                    $astore($a(6)); //#21592
                    $puti($1.msgtmp, $1.j + 1, $k[--$j]); //#21593
                    $put($1.msgtmp, $1.j, $1.eciesc); //#21594
                    $1.j = $1.j + 7; //#21595
                } else { //#21604
                    var _2P = $k[--$j]; //#21597
                    $k[$j++] = _2P; //#21605
                    if (_2P != $1.eciesc) { //#21604
                        $put($1.msgtmp, $1.j, $k[--$j]); //#21598
                        $1.j = $1.j + 1; //#21599
                    } else { //#21604
                        $j--; //#21601
                        $put($1.msgtmp, $1.j, $1.eciesc); //#21602
                        $put($1.msgtmp, $1.j + 1, $1.eciesc); //#21603
                        $1.j = $1.j + 2; //#21604
                    } //#21604
                } //#21604
            } //#21604
            $1.msg = $geti($1.msgtmp, 0, $1.j); //#21608
            $1.msglen = $1.msg.length; //#21609
        } //#21609
        $1.metrics = $a([$a(["A", 16, 18, 16, 10, 10, 1, 4, 99, 6]), $a(["B", 22, 22, 20, 19, 16, 1, 4, 99, 8]), $a(["C", 28, 32, 28, 44, 26, 1, 4, 22, 11]), $a(["D", 40, 42, 36, 91, 44, 1, 4, 16, 16]), $a(["E", 52, 54, 48, 182, 70, 1, 4, 22, 22]), $a(["F", 70, 76, 68, 370, 140, 2, 4, 22, 31]), $a(["G", 104, 98, 88, 732, 280, 4, 6, 21, 47]), $a(["H", 148, 134, 120, 1480, 560, 8, 6, 20, 69]), $a(["T-16", 16, 17, 16, 10, 10, 1, 99, 99, 99]), $a(["T-32", 16, 33, 32, 24, 16, 1, 99, 99, 99]), $a(["T-48", 16, 49, 48, 38, 22, 1, 99, 99, 99])]); //#21626
        $1.fullcws = $a([]); //#21629
        var _2t = $1.metrics; //#21630
        for (var _2u = 0, _2v = _2t.length; _2u < _2v; _2u++) { //#21641
            $1.m = $get(_2t, _2u); //#21631
            $1.vers = $get($1.m, 0); //#21632
            $1.dcws = $get($1.m, 4); //#21633
            $1.okay = true; //#21634
            if ($eq($1.version, "unset")) { //#21638
                if ($1.vers.length != 1) { //#21636
                    $1.okay = false; //#21636
                } //#21636
            } else { //#21638
                if ($ne($1.version, $1.vers)) { //#21638
                    $1.okay = false; //#21638
                } //#21638
            } //#21638
            if ($1.okay) { //#21640
                $k[$j++] = Infinity; //#21640
                $aload($1.fullcws); //#21640
                $k[$j++] = $1.dcws; //#21640
                $1.fullcws = $a(); //#21640
            } //#21640
        } //#21640
        $k[$j++] = Infinity; //#21642
        for (var _39 = 0, _3A = 1480; _39 < _3A; _39++) { //#21642
            $k[$j++] = 10000; //#21642
        } //#21642
        $1.numremcws = $a(); //#21642
        var _3C = $1.fullcws; //#21643
        for (var _3D = 0, _3E = _3C.length; _3D < _3E; _3D++) { //#21643
            $put($1.numremcws, $f($get(_3C, _3D) - 1), 1); //#21643
        } //#21643
        for (var _3H = 1478; _3H >= 0; _3H -= 1) { //#21649
            $1.i = _3H; //#21645
            if ($get($1.numremcws, $1.i) != 1) { //#21648
                $put($1.numremcws, $1.i, $f($get($1.numremcws, $1.i + 1) + 1)); //#21647
            } //#21647
        } //#21647
        $k[$j++] = Infinity; //#21660
        for (var _3Q = 0; _3Q <= 128; _3Q += 1) { //#21652
            $k[$j++] = _3Q; //#21652
            $k[$j++] = _3Q + 1; //#21652
        } //#21652
        $k[$j++] = $1.pad; //#21657
        $k[$j++] = 129; //#21657
        for (var _3S = 0; _3S <= 99; _3S += 1) { //#21657
            var _3U = $cvrs($s(2), _3S, 10); //#21655
            var _3W = $strcpy($s(2), "00"); //#21655
            $puti(_3W, 2 - _3U.length, _3U); //#21655
            $k[$j++] = _3W; //#21656
            $k[$j++] = _3S + 130; //#21656
        } //#21656
        var _3e = $a([$1.lC, $1.lB, $1.fnc1, $1.fnc2, $1.fnc3, $1.fnc4, $1.fnc1lD]); //#21658
        $k[$j++] = 229; //#21658
        for (var _3f = 0, _3g = _3e.length; _3f < _3g; _3f++) { //#21658
            var _3j = $f($k[--$j] + 1); //#21658
            $k[$j++] = $get(_3e, _3f); //#21658
            $k[$j++] = _3j; //#21658
            $k[$j++] = _3j; //#21658
        } //#21658
        $j--; //#21658
        $k[$j++] = $1.lX; //#21660
        $k[$j++] = 238; //#21660
        $k[$j++] = $1.lT; //#21660
        $k[$j++] = 239; //#21660
        $1.Avals = $d(); //#21662
        $k[$j++] = Infinity; //#21664
        var _3n = $1.Avals; //#21664
        for (var _3s = _3n.size, _3r = _3n.keys(), _3q = 0; _3q < _3s; _3q++) { //#21664
            var _3o = _3r.next().value; //#21664
            $k[$j++] = _3o; //#21664
            $k[$j++] = _3n.get(_3o); //#21664
            $k[$j++] = Infinity; //#21664
            var _3t = $k[--$j]; //#21664
            var _3u = $k[--$j]; //#21664
            $k[$j++] = _3t; //#21664
            $k[$j++] = _3u; //#21664
            var _3v = $a(); //#21664
            $k[$j++] = _3v; //#21664
        } //#21664
        $1.Avals = $d(); //#21665
        $k[$j++] = Infinity; //#21673
        $k[$j++] = $1.sft1; //#21672
        $k[$j++] = 0; //#21672
        $k[$j++] = $1.sft2; //#21672
        $k[$j++] = 1; //#21672
        $k[$j++] = $1.sft3; //#21672
        $k[$j++] = 2; //#21672
        $k[$j++] = 32; //#21672
        $k[$j++] = 3; //#21672
        for (var _40 = 48; _40 <= 57; _40 += 1) { //#21672
            $k[$j++] = _40; //#21672
            $k[$j++] = _40 - 44; //#21672
        } //#21672
        for (var _41 = 65; _41 <= 90; _41 += 1) { //#21673
            $k[$j++] = _41; //#21673
            $k[$j++] = _41 - 51; //#21673
        } //#21673
        $1.CNvals = $d(); //#21674
        $k[$j++] = Infinity; //#21675
        for (var _43 = 0; _43 <= 31; _43 += 1) { //#21675
            $k[$j++] = _43; //#21675
            $k[$j++] = _43; //#21675
        } //#21675
        $1.C1vals = $d(); //#21675
        $k[$j++] = Infinity; //#21684
        for (var _45 = 33; _45 <= 47; _45 += 1) { //#21677
            $k[$j++] = _45; //#21677
            $k[$j++] = _45 - 33; //#21677
        } //#21677
        for (var _46 = 58; _46 <= 64; _46 += 1) { //#21678
            $k[$j++] = _46; //#21678
            $k[$j++] = _46 - 43; //#21678
        } //#21678
        for (var _47 = 91; _47 <= 95; _47 += 1) { //#21679
            $k[$j++] = _47; //#21679
            $k[$j++] = _47 - 69; //#21679
        } //#21679
        $k[$j++] = $1.fnc1; //#21684
        $k[$j++] = 27; //#21684
        $k[$j++] = $1.fnc2; //#21684
        $k[$j++] = 28; //#21684
        $k[$j++] = $1.fnc3; //#21684
        $k[$j++] = 29; //#21684
        $k[$j++] = $1.fnc4; //#21684
        $k[$j++] = 30; //#21684
        $k[$j++] = $1.pad; //#21684
        $k[$j++] = 31; //#21684
        $1.C2vals = $d(); //#21685
        $k[$j++] = Infinity; //#21686
        for (var _4E = 96; _4E <= 127; _4E += 1) { //#21686
            $k[$j++] = _4E; //#21686
            $k[$j++] = _4E - 96; //#21686
        } //#21686
        $1.C3vals = $d(); //#21686
        $k[$j++] = Infinity; //#21691
        var _4G = $1.CNvals; //#21688
        for (var _4L = _4G.size, _4K = _4G.keys(), _4J = 0; _4J < _4L; _4J++) { //#21688
            var _4H = _4K.next().value; //#21688
            $k[$j++] = _4H; //#21688
            $k[$j++] = _4G.get(_4H); //#21688
            $k[$j++] = Infinity; //#21688
            var _4M = $k[--$j]; //#21688
            var _4N = $k[--$j]; //#21688
            $k[$j++] = _4M; //#21688
            $k[$j++] = _4N; //#21688
            var _4O = $a(); //#21688
            $k[$j++] = _4O; //#21688
        } //#21688
        var _4P = $1.C1vals; //#21689
        for (var _4U = _4P.size, _4T = _4P.keys(), _4S = 0; _4S < _4U; _4S++) { //#21689
            var _4Q = _4T.next().value; //#21689
            $k[$j++] = _4Q; //#21689
            $k[$j++] = _4P.get(_4Q); //#21689
            $k[$j++] = Infinity; //#21689
            var _4V = $k[--$j]; //#21689
            var _4W = $k[--$j]; //#21689
            $k[$j++] = _4V; //#21689
            $k[$j++] = $get($1.CNvals, $1.sft1); //#21689
            $k[$j++] = _4W; //#21689
            var _4a = $a(); //#21689
            $k[$j++] = _4a; //#21689
        } //#21689
        var _4b = $1.C2vals; //#21690
        for (var _4g = _4b.size, _4f = _4b.keys(), _4e = 0; _4e < _4g; _4e++) { //#21690
            var _4c = _4f.next().value; //#21690
            $k[$j++] = _4c; //#21690
            $k[$j++] = _4b.get(_4c); //#21690
            $k[$j++] = Infinity; //#21690
            var _4h = $k[--$j]; //#21690
            var _4i = $k[--$j]; //#21690
            $k[$j++] = _4h; //#21690
            $k[$j++] = $get($1.CNvals, $1.sft2); //#21690
            $k[$j++] = _4i; //#21690
            var _4m = $a(); //#21690
            $k[$j++] = _4m; //#21690
        } //#21690
        var _4n = $1.C3vals; //#21691
        for (var _4s = _4n.size, _4r = _4n.keys(), _4q = 0; _4q < _4s; _4q++) { //#21691
            var _4o = _4r.next().value; //#21691
            $k[$j++] = _4o; //#21691
            $k[$j++] = _4n.get(_4o); //#21691
            $k[$j++] = Infinity; //#21691
            var _4t = $k[--$j]; //#21691
            var _4u = $k[--$j]; //#21691
            $k[$j++] = _4t; //#21691
            $k[$j++] = $get($1.CNvals, $1.sft3); //#21691
            $k[$j++] = _4u; //#21691
            var _4y = $a(); //#21691
            $k[$j++] = _4y; //#21691
        } //#21691
        $1.Cvals = $d(); //#21692
        $k[$j++] = Infinity; //#21700
        $k[$j++] = $1.sft1; //#21699
        $k[$j++] = 0; //#21699
        $k[$j++] = $1.sft2; //#21699
        $k[$j++] = 1; //#21699
        $k[$j++] = $1.sft3; //#21699
        $k[$j++] = 2; //#21699
        $k[$j++] = 32; //#21699
        $k[$j++] = 3; //#21699
        for (var _53 = 48; _53 <= 57; _53 += 1) { //#21699
            $k[$j++] = _53; //#21699
            $k[$j++] = _53 - 44; //#21699
        } //#21699
        for (var _54 = 97; _54 <= 122; _54 += 1) { //#21700
            $k[$j++] = _54; //#21700
            $k[$j++] = _54 - 83; //#21700
        } //#21700
        $1.TNvals = $d(); //#21701
        $k[$j++] = Infinity; //#21702
        for (var _56 = 0; _56 <= 31; _56 += 1) { //#21702
            $k[$j++] = _56; //#21702
            $k[$j++] = _56; //#21702
        } //#21702
        $1.T1vals = $d(); //#21702
        $k[$j++] = Infinity; //#21711
        for (var _58 = 33; _58 <= 47; _58 += 1) { //#21704
            $k[$j++] = _58; //#21704
            $k[$j++] = _58 - 33; //#21704
        } //#21704
        for (var _59 = 58; _59 <= 64; _59 += 1) { //#21705
            $k[$j++] = _59; //#21705
            $k[$j++] = _59 - 43; //#21705
        } //#21705
        for (var _5A = 91; _5A <= 95; _5A += 1) { //#21706
            $k[$j++] = _5A; //#21706
            $k[$j++] = _5A - 69; //#21706
        } //#21706
        $k[$j++] = $1.fnc1; //#21711
        $k[$j++] = 27; //#21711
        $k[$j++] = $1.fnc2; //#21711
        $k[$j++] = 28; //#21711
        $k[$j++] = $1.fnc3; //#21711
        $k[$j++] = 29; //#21711
        $k[$j++] = $1.fnc4; //#21711
        $k[$j++] = 30; //#21711
        $k[$j++] = $1.pad; //#21711
        $k[$j++] = 31; //#21711
        $1.T2vals = $d(); //#21712
        $k[$j++] = Infinity; //#21716
        $k[$j++] = 96; //#21715
        $k[$j++] = 0; //#21715
        for (var _5H = 65; _5H <= 90; _5H += 1) { //#21715
            $k[$j++] = _5H; //#21715
            $k[$j++] = _5H - 64; //#21715
        } //#21715
        for (var _5I = 123; _5I <= 127; _5I += 1) { //#21716
            $k[$j++] = _5I; //#21716
            $k[$j++] = _5I - 96; //#21716
        } //#21716
        $1.T3vals = $d(); //#21717
        $k[$j++] = Infinity; //#21722
        var _5K = $1.TNvals; //#21719
        for (var _5P = _5K.size, _5O = _5K.keys(), _5N = 0; _5N < _5P; _5N++) { //#21719
            var _5L = _5O.next().value; //#21719
            $k[$j++] = _5L; //#21719
            $k[$j++] = _5K.get(_5L); //#21719
            $k[$j++] = Infinity; //#21719
            var _5Q = $k[--$j]; //#21719
            var _5R = $k[--$j]; //#21719
            $k[$j++] = _5Q; //#21719
            $k[$j++] = _5R; //#21719
            var _5S = $a(); //#21719
            $k[$j++] = _5S; //#21719
        } //#21719
        var _5T = $1.T1vals; //#21720
        for (var _5Y = _5T.size, _5X = _5T.keys(), _5W = 0; _5W < _5Y; _5W++) { //#21720
            var _5U = _5X.next().value; //#21720
            $k[$j++] = _5U; //#21720
            $k[$j++] = _5T.get(_5U); //#21720
            $k[$j++] = Infinity; //#21720
            var _5Z = $k[--$j]; //#21720
            var _5a = $k[--$j]; //#21720
            $k[$j++] = _5Z; //#21720
            $k[$j++] = $get($1.TNvals, $1.sft1); //#21720
            $k[$j++] = _5a; //#21720
            var _5e = $a(); //#21720
            $k[$j++] = _5e; //#21720
        } //#21720
        var _5f = $1.T2vals; //#21721
        for (var _5k = _5f.size, _5j = _5f.keys(), _5i = 0; _5i < _5k; _5i++) { //#21721
            var _5g = _5j.next().value; //#21721
            $k[$j++] = _5g; //#21721
            $k[$j++] = _5f.get(_5g); //#21721
            $k[$j++] = Infinity; //#21721
            var _5l = $k[--$j]; //#21721
            var _5m = $k[--$j]; //#21721
            $k[$j++] = _5l; //#21721
            $k[$j++] = $get($1.TNvals, $1.sft2); //#21721
            $k[$j++] = _5m; //#21721
            var _5q = $a(); //#21721
            $k[$j++] = _5q; //#21721
        } //#21721
        var _5r = $1.T3vals; //#21722
        for (var _5w = _5r.size, _5v = _5r.keys(), _5u = 0; _5u < _5w; _5u++) { //#21722
            var _5s = _5v.next().value; //#21722
            $k[$j++] = _5s; //#21722
            $k[$j++] = _5r.get(_5s); //#21722
            $k[$j++] = Infinity; //#21722
            var _5x = $k[--$j]; //#21722
            var _5y = $k[--$j]; //#21722
            $k[$j++] = _5x; //#21722
            $k[$j++] = $get($1.TNvals, $1.sft3); //#21722
            $k[$j++] = _5y; //#21722
            var _62 = $a(); //#21722
            $k[$j++] = _62; //#21722
        } //#21722
        $1.Tvals = $d(); //#21723
        for (var _64 = 128; _64 <= 255; _64 += 1) { //#21731
            $1.i = _64; //#21727
            $k[$j++] = $1.Avals; //#21728
            $k[$j++] = $1.i; //#21728
            $k[$j++] = Infinity; //#21728
            $aload($get($1.Avals, $1.fnc4)); //#21728
            $aload($get($1.Avals, $1.i - 128)); //#21728
            var _6D = $a(); //#21728
            var _6E = $k[--$j]; //#21728
            $put($k[--$j], _6E, _6D); //#21728
            $k[$j++] = $1.Cvals; //#21729
            $k[$j++] = $1.i; //#21729
            $k[$j++] = Infinity; //#21729
            $aload($get($1.Cvals, $1.fnc4)); //#21729
            $aload($get($1.Cvals, $1.i - 128)); //#21729
            var _6O = $a(); //#21729
            var _6P = $k[--$j]; //#21729
            $put($k[--$j], _6P, _6O); //#21729
            $k[$j++] = $1.Tvals; //#21730
            $k[$j++] = $1.i; //#21730
            $k[$j++] = Infinity; //#21730
            $aload($get($1.Tvals, $1.fnc4)); //#21730
            $aload($get($1.Tvals, $1.i - 128)); //#21730
            var _6Z = $a(); //#21730
            var _6a = $k[--$j]; //#21730
            $put($k[--$j], _6a, _6Z); //#21730
        } //#21730
        $k[$j++] = Infinity; //#21739
        $k[$j++] = 13; //#21738
        $k[$j++] = 0; //#21738
        $k[$j++] = 42; //#21738
        $k[$j++] = 1; //#21738
        $k[$j++] = 62; //#21738
        $k[$j++] = 2; //#21738
        $k[$j++] = 32; //#21738
        $k[$j++] = 3; //#21738
        for (var _6c = 48; _6c <= 57; _6c += 1) { //#21738
            $k[$j++] = _6c; //#21738
            $k[$j++] = _6c - 44; //#21738
        } //#21738
        for (var _6d = 65; _6d <= 90; _6d += 1) { //#21739
            $k[$j++] = _6d; //#21739
            $k[$j++] = _6d - 51; //#21739
        } //#21739
        $1.Xvals = $d(); //#21740
        $k[$j++] = Infinity; //#21742
        var _6f = $1.Xvals; //#21742
        for (var _6k = _6f.size, _6j = _6f.keys(), _6i = 0; _6i < _6k; _6i++) { //#21742
            var _6g = _6j.next().value; //#21742
            $k[$j++] = _6g; //#21742
            $k[$j++] = _6f.get(_6g); //#21742
            $k[$j++] = Infinity; //#21742
            var _6l = $k[--$j]; //#21742
            var _6m = $k[--$j]; //#21742
            $k[$j++] = _6l; //#21742
            $k[$j++] = _6m; //#21742
            var _6n = $a(); //#21742
            $k[$j++] = _6n; //#21742
        } //#21742
        $1.Xvals = $d(); //#21743
        $k[$j++] = Infinity; //#21746
        for (var _6p = 0; _6p <= 255; _6p += 1) { //#21746
            $k[$j++] = _6p; //#21746
            $k[$j++] = _6p; //#21746
        } //#21746
        $1.Bvals = $d(); //#21747
        $k[$j++] = Infinity; //#21749
        var _6r = $1.Bvals; //#21749
        for (var _6w = _6r.size, _6v = _6r.keys(), _6u = 0; _6u < _6w; _6u++) { //#21749
            var _6s = _6v.next().value; //#21749
            $k[$j++] = _6s; //#21749
            $k[$j++] = _6r.get(_6s); //#21749
            $k[$j++] = Infinity; //#21749
            var _6x = $k[--$j]; //#21749
            var _6y = $k[--$j]; //#21749
            $k[$j++] = _6x; //#21749
            $k[$j++] = _6y; //#21749
            var _6z = $a(); //#21749
            $k[$j++] = _6z; //#21749
        } //#21749
        $1.Bvals = $d(); //#21750
        $1.encvals = $a([$1.Avals, $1.Cvals, $1.Tvals, $1.Xvals, -1, $1.Bvals]); //#21752
        $k[$j++] = Infinity; //#21754
        for (var _78 = 0, _79 = $1.msglen; _78 < _79; _78++) { //#21754
            $k[$j++] = 0; //#21754
        } //#21754
        $k[$j++] = 0; //#21754
        $1.numD = $a(); //#21754
        $k[$j++] = Infinity; //#21755
        for (var _7C = 0, _7D = $1.msglen; _7C < _7D; _7C++) { //#21755
            $k[$j++] = 0; //#21755
        } //#21755
        $k[$j++] = 9999; //#21755
        $1.nextXterm = $a(); //#21755
        $k[$j++] = Infinity; //#21756
        for (var _7G = 0, _7H = $1.msglen; _7G < _7H; _7G++) { //#21756
            $k[$j++] = 0; //#21756
        } //#21756
        $k[$j++] = 9999; //#21756
        $1.nextNonX = $a(); //#21756
        for (var _7K = $1.msglen - 1; _7K >= 0; _7K -= 1) { //#21773
            $1.i = _7K; //#21758
            $1.barchar = $get($1.msg, $1.i); //#21759
            if (($1.barchar >= 48) && ($1.barchar <= 57)) { //#21762
                $put($1.numD, $1.i, $f($get($1.numD, $1.i + 1) + 1)); //#21761
            } //#21761
            if ((($1.barchar == 13) || ($1.barchar == 42)) || ($1.barchar == 62)) { //#21766
                $put($1.nextXterm, $1.i, 0); //#21764
            } else { //#21766
                $put($1.nextXterm, $1.i, $f($get($1.nextXterm, $1.i + 1) + 1)); //#21766
            } //#21766
            var _7h = $get($1.Xvals, $1.barchar) !== undefined; //#21768
            if (!_7h) { //#21771
                $put($1.nextNonX, $1.i, 0); //#21769
            } else { //#21771
                $put($1.nextNonX, $1.i, $f($get($1.nextNonX, $1.i + 1) + 1)); //#21771
            } //#21771
        } //#21771
        $k[$j++] = Infinity; //#21774
        var _7p = $1.nextXterm; //#21774
        for (var _7q = 0, _7r = _7p.length; _7q < _7r; _7q++) { //#21774
            var _7s = $get(_7p, _7q); //#21774
            $k[$j++] = _7s; //#21774
            if (_7s > 10000) { //#21774
                $j--; //#21774
                $k[$j++] = 10000; //#21774
            } //#21774
        } //#21774
        $1.nextXterm = $a(); //#21774
        $k[$j++] = Infinity; //#21775
        var _7u = $1.nextNonX; //#21775
        for (var _7v = 0, _7w = _7u.length; _7v < _7w; _7v++) { //#21775
            var _7x = $get(_7u, _7v); //#21775
            $k[$j++] = _7x; //#21775
            if (_7x > 10000) { //#21775
                $j--; //#21775
                $k[$j++] = 10000; //#21775
            } //#21775
        } //#21775
        $1.nextNonX = $a(); //#21775
        $1.isD = function() {
            $k[$j++] = ($1.char >= 48) && ($1.char <= 57); //#21777
        }; //#21777
        $1.isC = function() {
            var _83 = $get($1.CNvals, $1.char) !== undefined; //#21778
            $k[$j++] = _83; //#21778
        }; //#21778
        $1.isT = function() {
            var _86 = $get($1.TNvals, $1.char) !== undefined; //#21779
            $k[$j++] = _86; //#21779
        }; //#21779
        $1.isX = function() {
            var _89 = $get($1.Xvals, $1.char) !== undefined; //#21780
            $k[$j++] = _89; //#21780
        }; //#21780
        $1.isEA = function() {
            $k[$j++] = $1.char > 127; //#21781
        }; //#21781
        $1.isFN = function() {
            $k[$j++] = $1.char < 0; //#21782
        }; //#21782
        $1.XtermFirst = function() {
            var _8C = $k[--$j]; //#21783
            $k[$j++] = $lt($get($1.nextXterm, _8C), $get($1.nextNonX, _8C)); //#21783
        }; //#21783
        $1.A = 0; //#21785
        $1.C = 1; //#21785
        $1.T = 2; //#21785
        $1.X = 3; //#21785
        $1.D = 4; //#21785
        $1.B = 5; //#21785
        $1.lookup = function() {
            $1.ac = 1; //#21788
            $1.cc = 2; //#21788
            $1.tc = 2; //#21788
            $1.xc = 2; //#21788
            $1.bc = 3; //#21788
            if ($1.mode == $1.A) { //#21789
                $1.ac = 0; //#21789
                $1.cc = 1; //#21789
                $1.tc = 1; //#21789
                $1.xc = 1; //#21789
                $1.bc = 2; //#21789
            } //#21789
            if ($1.mode == $1.C) { //#21790
                $1.cc = 0; //#21790
            } //#21790
            if ($1.mode == $1.T) { //#21791
                $1.tc = 0; //#21791
            } //#21791
            if ($1.mode == $1.X) { //#21792
                $1.xc = 0; //#21792
            } //#21792
            if ($1.mode == $1.B) { //#21793
                $1.bc = 0; //#21793
            } //#21793
            for (var _8R = 0, _8S = 1; _8R < _8S; _8R++) { //#21821
                $1.k = 0; //#21795
                for (;;) { //#21820
                    if (($1.i + $1.k) == $1.msglen) { //#21802
                        var _8a = $a([$1.ac, $1.cc, $1.tc, $1.xc]); //#21797
                        $k[$j++] = true; //#21797
                        for (var _8b = 0, _8c = _8a.length; _8b < _8c; _8b++) { //#21797
                            var _8f = $k[--$j]; //#21797
                            $k[$j++] = _8f && ($1.bc <= Math.ceil($get(_8a, _8b))); //#21797
                        } //#21797
                        if ($k[--$j]) { //#21797
                            $k[$j++] = $1.B; //#21797
                            break; //#21797
                        } //#21797
                        var _8m = $a([$1.cc, $1.tc, $1.xc, $1.bc]); //#21798
                        $k[$j++] = true; //#21798
                        for (var _8n = 0, _8o = _8m.length; _8n < _8o; _8n++) { //#21798
                            var _8r = $k[--$j]; //#21798
                            $k[$j++] = _8r && ($1.ac <= Math.ceil($get(_8m, _8n))); //#21798
                        } //#21798
                        if ($k[--$j]) { //#21798
                            $k[$j++] = $1.A; //#21798
                            break; //#21798
                        } //#21798
                        var _8w = $a([$1.tc, $1.xc]); //#21799
                        $k[$j++] = true; //#21799
                        for (var _8x = 0, _8y = _8w.length; _8x < _8y; _8x++) { //#21799
                            var _91 = $k[--$j]; //#21799
                            $k[$j++] = _91 && (Math.ceil($1.cc) <= Math.ceil($get(_8w, _8x))); //#21799
                        } //#21799
                        if ($k[--$j]) { //#21799
                            $k[$j++] = $1.C; //#21799
                            break; //#21799
                        } //#21799
                        var _95 = $a([$1.xc]); //#21800
                        $k[$j++] = true; //#21800
                        for (var _96 = 0, _97 = _95.length; _96 < _97; _96++) { //#21800
                            var _9A = $k[--$j]; //#21800
                            $k[$j++] = _9A && (Math.ceil($1.tc) <= Math.ceil($get(_95, _96))); //#21800
                        } //#21800
                        if ($k[--$j]) { //#21800
                            $k[$j++] = $1.T; //#21800
                            break; //#21800
                        } //#21800
                        $k[$j++] = $1.X; //#21801
                        break; //#21801
                    } //#21801
                    $1.char = $get($1.msg, $1.i + $1.k); //#21803
                    $k[$j++] = 'ac'; //#21804
                    $k[$j++] = $1.ac; //#21804
                    $1.isD(); //#21804
                    if ($k[--$j]) { //#21804
                        var _9K = $k[--$j]; //#21804
                        $k[$j++] = $f(_9K + (1 / 2)); //#21804
                    } else { //#21804
                        $1.isEA(); //#21804
                        if ($k[--$j]) { //#21804
                            var _9M = $k[--$j]; //#21804
                            $k[$j++] = Math.ceil(_9M) + 2; //#21804
                        } else { //#21804
                            var _9N = $k[--$j]; //#21804
                            $k[$j++] = Math.ceil(_9N) + 1; //#21804
                        } //#21804
                    } //#21804
                    var _9O = $k[--$j]; //#21804
                    $1[$k[--$j]] = _9O; //#21804
                    $k[$j++] = 'cc'; //#21805
                    $k[$j++] = $1.cc; //#21805
                    $1.isC(); //#21805
                    if ($k[--$j]) { //#21805
                        var _9S = $k[--$j]; //#21805
                        $k[$j++] = $f(_9S + 0.6666667); //#21805
                    } else { //#21805
                        $1.isEA(); //#21805
                        if ($k[--$j]) { //#21805
                            var _9U = $k[--$j]; //#21805
                            $k[$j++] = $f(_9U + 2.6666667); //#21805
                        } else { //#21805
                            var _9V = $k[--$j]; //#21805
                            $k[$j++] = $f(_9V + 1.3333334); //#21805
                        } //#21805
                    } //#21805
                    var _9W = $k[--$j]; //#21805
                    $1[$k[--$j]] = _9W; //#21805
                    $k[$j++] = 'tc'; //#21806
                    $k[$j++] = $1.tc; //#21806
                    $1.isT(); //#21806
                    if ($k[--$j]) { //#21806
                        var _9a = $k[--$j]; //#21806
                        $k[$j++] = $f(_9a + 0.6666667); //#21806
                    } else { //#21806
                        $1.isEA(); //#21806
                        if ($k[--$j]) { //#21806
                            var _9c = $k[--$j]; //#21806
                            $k[$j++] = $f(_9c + 2.6666667); //#21806
                        } else { //#21806
                            var _9d = $k[--$j]; //#21806
                            $k[$j++] = $f(_9d + 1.3333334); //#21806
                        } //#21806
                    } //#21806
                    var _9e = $k[--$j]; //#21806
                    $1[$k[--$j]] = _9e; //#21806
                    $k[$j++] = 'xc'; //#21807
                    $k[$j++] = $1.xc; //#21807
                    $1.isX(); //#21807
                    if ($k[--$j]) { //#21807
                        var _9i = $k[--$j]; //#21807
                        $k[$j++] = $f(_9i + 0.6666667); //#21807
                    } else { //#21807
                        $1.isEA(); //#21807
                        if ($k[--$j]) { //#21807
                            var _9k = $k[--$j]; //#21807
                            $k[$j++] = $f(_9k + 4.3333334); //#21807
                        } else { //#21807
                            var _9l = $k[--$j]; //#21807
                            $k[$j++] = $f(_9l + 3.3333334); //#21807
                        } //#21807
                    } //#21807
                    var _9m = $k[--$j]; //#21807
                    $1[$k[--$j]] = _9m; //#21807
                    $k[$j++] = 'bc'; //#21808
                    $k[$j++] = $1.bc; //#21808
                    $1.isFN(); //#21808
                    if ($k[--$j]) { //#21808
                        var _9q = $k[--$j]; //#21808
                        $k[$j++] = $f(_9q + 3); //#21808
                    } else { //#21808
                        var _9r = $k[--$j]; //#21808
                        $k[$j++] = $f(_9r + 1); //#21808
                    } //#21808
                    var _9s = $k[--$j]; //#21808
                    $1[$k[--$j]] = _9s; //#21808
                    if ($1.k >= 3) { //#21818
                        var _9z = $a([$1.ac, $1.cc, $1.tc, $1.xc]); //#21810
                        $k[$j++] = true; //#21810
                        for (var _A0 = 0, _A1 = _9z.length; _A0 < _A1; _A0++) { //#21810
                            var _A4 = $k[--$j]; //#21810
                            $k[$j++] = _A4 && (($1.bc + 1) <= Math.ceil($get(_9z, _A0))); //#21810
                        } //#21810
                        if ($k[--$j]) { //#21810
                            $k[$j++] = $1.B; //#21810
                            break; //#21810
                        } //#21810
                        var _AB = $a([$1.cc, $1.tc, $1.xc, $1.bc]); //#21811
                        $k[$j++] = true; //#21811
                        for (var _AC = 0, _AD = _AB.length; _AC < _AD; _AC++) { //#21811
                            var _AG = $k[--$j]; //#21811
                            $k[$j++] = _AG && (($1.ac + 1) <= Math.ceil($get(_AB, _AC))); //#21811
                        } //#21811
                        if ($k[--$j]) { //#21811
                            $k[$j++] = $1.A; //#21811
                            break; //#21811
                        } //#21811
                        var _AN = $a([$1.ac, $1.cc, $1.xc, $1.bc]); //#21812
                        $k[$j++] = true; //#21812
                        for (var _AO = 0, _AP = _AN.length; _AO < _AP; _AO++) { //#21812
                            var _AS = $k[--$j]; //#21812
                            $k[$j++] = _AS && ((Math.ceil($1.tc) + 1) <= Math.ceil($get(_AN, _AO))); //#21812
                        } //#21812
                        if ($k[--$j]) { //#21812
                            $k[$j++] = $1.T; //#21812
                            break; //#21812
                        } //#21812
                        var _AX = $a([$1.ac, $1.tc]); //#21813
                        $k[$j++] = true; //#21813
                        for (var _AY = 0, _AZ = _AX.length; _AY < _AZ; _AY++) { //#21813
                            var _Ac = $k[--$j]; //#21813
                            $k[$j++] = _Ac && ((Math.ceil($1.cc) + 1) <= Math.ceil($get(_AX, _AY))); //#21813
                        } //#21813
                        if ($k[--$j]) { //#21816
                            if (Math.ceil($1.cc) < Math.ceil($1.xc)) { //#21814
                                $k[$j++] = $1.C; //#21814
                                break; //#21814
                            } //#21814
                            if ($1.cc == $1.xc) { //#21815
                                $k[$j++] = ($1.i + $1.k) + 1; //#21815
                                $1.XtermFirst(); //#21815
                                if ($k[--$j]) { //#21815
                                    $k[$j++] = $1.X; //#21815
                                    break; //#21815
                                } else { //#21815
                                    $k[$j++] = $1.C; //#21815
                                    break; //#21815
                                } //#21815
                            } //#21815
                        } //#21815
                        var _As = $a([$1.ac, $1.cc, $1.tc, $1.bc]); //#21817
                        $k[$j++] = true; //#21817
                        for (var _At = 0, _Au = _As.length; _At < _Au; _At++) { //#21817
                            var _Ax = $k[--$j]; //#21817
                            $k[$j++] = _Ax && ((Math.ceil($1.xc) + 1) <= Math.ceil($get(_As, _At))); //#21817
                        } //#21817
                        if ($k[--$j]) { //#21817
                            $k[$j++] = $1.X; //#21817
                            break; //#21817
                        } //#21817
                    } //#21817
                    $1.k = $1.k + 1; //#21819
                } //#21819
            } //#21819
        }; //#21822
        $1.addtocws = function() {
            var _B1 = $k[--$j]; //#21825
            $puti($1.cws, $1.j, _B1); //#21825
            $1.j = _B1.length + $1.j; //#21826
        }; //#21827
        $1.tobin = function() {
            var _B6 = $s($k[--$j]); //#21830
            $k[$j++] = _B6; //#21830
            for (var _B8 = 0, _B7 = _B6.length - 1; _B8 <= _B7; _B8 += 1) { //#21830
                var _B9 = $k[--$j]; //#21830
                $put(_B9, _B8, 48); //#21830
                $k[$j++] = _B9; //#21830
            } //#21830
            var _BA = $k[--$j]; //#21831
            var _BD = $cvrs($s(_BA.length), $k[--$j], 2); //#21831
            $puti(_BA, _BA.length - _BD.length, _BD); //#21831
            $k[$j++] = _BA; //#21832
            $k[$j++] = Infinity; //#21832
            var _BE = $k[--$j]; //#21832
            var _BF = $k[--$j]; //#21832
            $k[$j++] = _BE; //#21832
            $forall(_BF, function() { //#21832
                var _BG = $k[--$j]; //#21832
                $k[$j++] = $f(_BG - 48); //#21832
            }); //#21832
            var _BH = $a(); //#21832
            $k[$j++] = _BH; //#21832
        }; //#21833
        $1.encA = function() {
            for (var _BI = 0, _BJ = 1; _BI < _BJ; _BI++) { //#21877
                if ($get($1.numD, $1.i) >= 21) { //#21841
                    $1.Dbits = $a([1, 1, 1, 1]); //#21838
                    $1.mode = $1.D; //#21839
                    break; //#21840
                } //#21840
                var _BR = $get($1.numD, $1.i); //#21842
                if ((_BR >= 13) && ($f(_BR + $1.i) == $1.msglen)) { //#21846
                    $1.Dbits = $a([1, 1, 1, 1]); //#21843
                    $1.mode = $1.D; //#21844
                    break; //#21845
                } //#21845
                if ($get($1.numD, $1.i) >= 2) { //#21851
                    var _BZ = $s(2); //#21848
                    $put(_BZ, 0, $get($1.msg, $1.i)); //#21848
                    $put(_BZ, 1, $get($1.msg, $1.i + 1)); //#21848
                    $k[$j++] = $get($1.Avals, _BZ); //#21848
                    $1.addtocws(); //#21848
                    $1.i = $1.i + 2; //#21849
                    break; //#21850
                } //#21850
                if ($get($1.msg, $1.i) == $1.fnc1) { //#21867
                    if ($get($1.numD, $1.i + 1) >= 15) { //#21859
                        $k[$j++] = $get($1.Avals, $1.fnc1lD); //#21854
                        $1.addtocws(); //#21854
                        $1.i = $1.i + 1; //#21855
                        $1.Dbits = $a([]); //#21856
                        $1.mode = $1.D; //#21857
                        break; //#21858
                    } //#21858
                    var _By = $get($1.numD, $1.i + 1); //#21860
                    if ((_By >= 7) && (($f($f(_By + $1.i) + 1)) == $1.msglen)) { //#21866
                        $k[$j++] = $get($1.Avals, $1.fnc1lD); //#21861
                        $1.addtocws(); //#21861
                        $1.i = $1.i + 1; //#21862
                        $1.Dbits = $a([]); //#21863
                        $1.mode = $1.D; //#21864
                        break; //#21865
                    } //#21865
                } //#21865
                $k[$j++] = 'newmode'; //#21868
                $1.lookup(); //#21868
                var _C7 = $k[--$j]; //#21868
                $1[$k[--$j]] = _C7; //#21868
                if ($1.newmode != $1.mode) { //#21873
                    $k[$j++] = $get($1.Avals, $get($a([-1, $1.lC, $1.lT, $1.lX, $1.lD, $1.lB]), $1.newmode)); //#21870
                    $1.addtocws(); //#21870
                    $1.mode = $1.newmode; //#21871
                    break; //#21872
                } //#21872
                $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#21874
                $1.addtocws(); //#21874
                $1.i = $1.i + 1; //#21875
                break; //#21876
            } //#21876
        }; //#21878
        $1.CTXvalstocws = function() {
            $1.in = $k[--$j]; //#21881
            $k[$j++] = Infinity; //#21882
            for (var _CV = 0, _CU = $1.in.length - 1; _CV <= _CU; _CV += 3) { //#21886
                var _CX = $geti($1.in, _CV, 3); //#21884
                $k[$j++] = 0; //#21884
                for (var _CY = 0, _CZ = _CX.length; _CY < _CZ; _CY++) { //#21884
                    var _Cb = $k[--$j]; //#21884
                    $k[$j++] = $f(_Cb + $get(_CX, _CY)) * 40; //#21884
                } //#21884
                var _Cd = (~~($k[--$j] / 40)) + 1; //#21885
                $k[$j++] = ~~(_Cd / 256); //#21885
                $k[$j++] = _Cd % 256; //#21885
            } //#21885
            $astore($a($counttomark())); //#21887
            var _Cg = $k[--$j]; //#21887
            var _Ch = $k[--$j]; //#21887
            $k[$j++] = _Cg; //#21887
            $k[$j++] = _Ch; //#21887
            $j--; //#21887
        }; //#21888
        $1.encCTX = function() {
            $1.p = 0; //#21891
            $1.ctxvals = $a(2220); //#21892
            for (;;) { //#21989
                if ($1.i == $1.msglen) { //#21896
                    break; //#21896
                } //#21896
                if (($1.p % 3) == 0) { //#21984
                    if ($get($1.numD, $1.i) >= 12) { //#21903
                        $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#21899
                        $1.CTXvalstocws(); //#21899
                        $1.addtocws(); //#21899
                        $k[$j++] = $a([$1.unlcw]); //#21900
                        $1.addtocws(); //#21900
                        $1.mode = $1.A; //#21901
                        break; //#21902
                    } //#21902
                    var _Cx = $get($1.numD, $1.i); //#21904
                    if ((_Cx >= 8) && ($f(_Cx + $1.i) == $1.msglen)) { //#21909
                        $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#21905
                        $1.CTXvalstocws(); //#21905
                        $1.addtocws(); //#21905
                        $k[$j++] = $a([$1.unlcw]); //#21906
                        $1.addtocws(); //#21906
                        $1.mode = $1.A; //#21907
                        break; //#21908
                    } //#21908
                    if ($1.mode == $1.X) { //#21931
                        var _DC = $get($1.Xvals, $get($1.msg, $1.i)) !== undefined; //#21911
                        if (!_DC) { //#21919
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#21912
                            $1.CTXvalstocws(); //#21912
                            $1.addtocws(); //#21912
                            if (($get($1.numremcws, $1.j) != 1) || ($get($1.msg, $1.i) > 127)) { //#21916
                                $k[$j++] = $a([$1.unlcw]); //#21915
                                $1.addtocws(); //#21915
                            } //#21915
                            $1.mode = $1.A; //#21917
                            break; //#21918
                        } //#21918
                        if (($1.i + 1) < $1.msglen) { //#21925
                            var _DV = $get($1.Xvals, $get($1.msg, $1.i + 1)) !== undefined; //#21921
                            if (!_DV) { //#21921
                                break; //#21921
                            } //#21921
                            if (($1.i + 2) < $1.msglen) { //#21924
                                var _Dc = $get($1.Xvals, $get($1.msg, $1.i + 2)) !== undefined; //#21923
                                if (!_Dc) { //#21923
                                    break; //#21923
                                } //#21923
                            } //#21923
                        } //#21923
                    } else { //#21931
                        $1.lookup(); //#21927
                        if ($k[--$j] != $1.mode) { //#21932
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#21928
                            $1.CTXvalstocws(); //#21928
                            $1.addtocws(); //#21928
                            $k[$j++] = $a([$1.unlcw]); //#21929
                            $1.addtocws(); //#21929
                            $1.mode = $1.A; //#21930
                            break; //#21931
                        } //#21931
                    } //#21931
                    if (($1.msglen - $1.i) <= 3) { //#21983
                        $1.remcws = $get($1.numremcws, $1.j + ((~~($1.p / 3)) * 2)); //#21935
                        $k[$j++] = Infinity; //#21941
                        var _Dv = $geti($1.msg, $1.i, $1.msglen - $1.i); //#21937
                        for (var _Dw = 0, _Dx = _Dv.length; _Dw < _Dx; _Dw++) { //#21943
                            var _Dy = $get(_Dv, _Dw); //#21943
                            var _E2 = $get($get($1.encvals, $1.mode), _Dy) !== undefined; //#21938
                            $k[$j++] = _Dy; //#21942
                            if (_E2) { //#21941
                                $aload($get($get($1.encvals, $1.mode), $k[--$j])); //#21939
                            } else { //#21941
                                $j--; //#21941
                                $k[$j++] = -1; //#21941
                                $k[$j++] = -1; //#21941
                                $k[$j++] = -1; //#21941
                                $k[$j++] = -1; //#21941
                            } //#21941
                        } //#21941
                        $1.remvals = $a(); //#21941
                        if (($1.remcws == 2) && ($1.remvals.length == 3)) { //#21954
                            $k[$j++] = Infinity; //#21949
                            $aload($geti($1.ctxvals, 0, $1.p)); //#21948
                            $aload($1.remvals); //#21949
                            var _EF = $a(); //#21949
                            $k[$j++] = _EF; //#21950
                            $1.CTXvalstocws(); //#21950
                            $1.addtocws(); //#21950
                            $1.mode = $1.A; //#21951
                            $1.i = $1.msglen; //#21952
                            break; //#21953
                        } //#21953
                        if ((($1.remcws == 2) && ($1.remvals.length == 2)) && ($1.mode != $1.X)) { //#21965
                            $k[$j++] = Infinity; //#21960
                            $aload($geti($1.ctxvals, 0, $1.p)); //#21958
                            $aload($1.remvals); //#21959
                            $aload($get($get($1.encvals, $1.mode), $1.sft1)); //#21960
                            var _EV = $a(); //#21960
                            $k[$j++] = _EV; //#21961
                            $1.CTXvalstocws(); //#21961
                            $1.addtocws(); //#21961
                            $1.mode = $1.A; //#21962
                            $1.i = $1.msglen; //#21963
                            break; //#21964
                        } //#21964
                        if (($1.remcws == 2) && ($1.remvals.length == 1)) { //#21974
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#21968
                            $1.CTXvalstocws(); //#21968
                            $1.addtocws(); //#21968
                            $k[$j++] = $a([$1.unlcw]); //#21969
                            $1.addtocws(); //#21969
                            $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#21970
                            $1.addtocws(); //#21970
                            $1.mode = $1.A; //#21971
                            $1.i = $1.msglen; //#21972
                            break; //#21973
                        } //#21973
                        if (($1.remcws == 1) && ($1.remvals.length == 1)) { //#21982
                            $k[$j++] = $geti($1.ctxvals, 0, $1.p); //#21977
                            $1.CTXvalstocws(); //#21977
                            $1.addtocws(); //#21977
                            $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#21978
                            $1.addtocws(); //#21978
                            $1.mode = $1.A; //#21979
                            $1.i = $1.msglen; //#21980
                            break; //#21981
                        } //#21981
                    } //#21981
                } //#21981
                var _F4 = $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)); //#21985
                $puti($1.ctxvals, $1.p, _F4); //#21986
                $1.p = _F4.length + $1.p; //#21987
                $1.i = $1.i + 1; //#21988
            } //#21988
            if ($1.mode != $1.A) { //#22013
                for (;;) { //#21997
                    if (($1.p % 3) == 0) { //#21994
                        break; //#21994
                    } //#21994
                    $1.i = $1.i - 1; //#21995
                    $1.p = $1.p - $get($get($1.encvals, $1.mode), $get($1.msg, $1.i)).length; //#21996
                } //#21996
                $k[$j++] = Infinity; //#21999
                $aload($geti($1.ctxvals, 0, $1.p)); //#21999
                var _FO = $a(); //#21999
                $k[$j++] = _FO; //#22000
                $1.CTXvalstocws(); //#22000
                $1.addtocws(); //#22000
                $k[$j++] = $a([$1.unlcw]); //#22001
                $1.addtocws(); //#22001
                $1.mode = $1.A; //#22002
                if ($1.i != $1.msglen) { //#22012
                    if ($get($1.numD, $1.i) >= 2) { //#22010
                        var _FX = $s(2); //#22006
                        $put(_FX, 0, $get($1.msg, $1.i)); //#22006
                        $put(_FX, 1, $get($1.msg, $1.i + 1)); //#22006
                        $k[$j++] = $get($1.Avals, _FX); //#22006
                        $1.addtocws(); //#22006
                        $1.i = $1.i + 2; //#22007
                    } else { //#22010
                        $k[$j++] = $get($1.Avals, $get($1.msg, $1.i)); //#22009
                        $1.addtocws(); //#22009
                        $1.i = $1.i + 1; //#22010
                    } //#22010
                } //#22010
            } //#22010
        }; //#22015
        $1.encD = function() {
            for (;;) { //#22074
                if ($get($1.numD, $1.i) < 3) { //#22064
                    $1.Drem = (8 - ($1.Dbits.length % 8)) % 8; //#22023
                    $1.remcws = $get($1.numremcws, $1.j + (~~($1.Dbits.length / 8))); //#22024
                    if (((($f($get($1.numremcws, ($1.j + (~~($1.Dbits.length / 8))) - 1) - 1) == 0) && ($1.Drem == 0)) || (($1.remcws == 1) && ($1.Drem != 0))) && ($1.i == $1.msglen)) { //#22033
                        if (($1.Drem == 4) || ($1.Drem == 6)) { //#22030
                            $k[$j++] = Infinity; //#22030
                            $aload($1.Dbits); //#22030
                            $k[$j++] = 1; //#22030
                            $k[$j++] = 1; //#22030
                            $k[$j++] = 1; //#22030
                            $k[$j++] = 1; //#22030
                            $1.Dbits = $a(); //#22030
                        } //#22030
                        if (($1.Drem == 2) || ($1.Drem == 6)) { //#22031
                            $k[$j++] = Infinity; //#22031
                            $aload($1.Dbits); //#22031
                            $k[$j++] = 0; //#22031
                            $k[$j++] = 1; //#22031
                            $1.Dbits = $a(); //#22031
                        } //#22031
                        break; //#22032
                    } //#22032
                    if ((((($1.i == ($1.msglen - 1)) && ($get($1.numD, $1.i) == 1)) || (($1.i == ($1.msglen - 2)) && ($get($1.numD, $1.i) == 2))) && ($1.remcws == 1)) && ($1.Drem == 0)) { //#22038
                        break; //#22038
                    } //#22038
                    if (!(((($1.i == ($1.msglen - 1)) && ($get($1.numD, $1.i) == 1)) && ($1.remcws == 1)) && (($1.Drem == 4) || ($1.Drem == 6)))) { //#22045
                        $k[$j++] = Infinity; //#22043
                        $aload($1.Dbits); //#22043
                        $k[$j++] = 1; //#22043
                        $k[$j++] = 1; //#22043
                        $k[$j++] = 1; //#22043
                        $k[$j++] = 1; //#22043
                        $k[$j++] = 1; //#22043
                        $k[$j++] = 1; //#22043
                        $1.Dbits = $a(); //#22043
                        $1.Drem = (8 - ($1.Dbits.length % 8)) % 8; //#22044
                    } //#22044
                    if (($1.Drem == 4) || ($1.Drem == 6)) { //#22056
                        if ($get($1.numD, $1.i) >= 1) { //#22053
                            $k[$j++] = Infinity; //#22050
                            $aload($1.Dbits); //#22050
                            $k[$j++] = $f($f($get($1.msg, $1.i) - 48) + 1); //#22050
                            $k[$j++] = 4; //#22050
                            $1.tobin(); //#22050
                            $aload($k[--$j]); //#22050
                            $1.Dbits = $a(); //#22050
                            $1.i = $1.i + 1; //#22051
                        } else { //#22053
                            $k[$j++] = Infinity; //#22053
                            $aload($1.Dbits); //#22053
                            $k[$j++] = 1; //#22053
                            $k[$j++] = 1; //#22053
                            $k[$j++] = 1; //#22053
                            $k[$j++] = 1; //#22053
                            $1.Dbits = $a(); //#22053
                        } //#22053
                        $1.Drem = $1.Drem - 4; //#22055
                    } //#22055
                    if ($1.Drem == 2) { //#22060
                        $k[$j++] = Infinity; //#22058
                        $aload($1.Dbits); //#22058
                        $k[$j++] = 0; //#22058
                        $k[$j++] = 1; //#22058
                        $1.Dbits = $a(); //#22058
                        $1.Drem = 0; //#22059
                    } //#22059
                    break; //#22062
                } //#22062
                $k[$j++] = Infinity; //#22070
                $aload($1.Dbits); //#22068
                var _Gu = $geti($1.msg, $1.i, 3); //#22069
                $k[$j++] = 0; //#22069
                for (var _Gv = 0, _Gw = _Gu.length; _Gv < _Gw; _Gv++) { //#22069
                    var _Gy = $k[--$j]; //#22069
                    $k[$j++] = ($f(_Gy + $f($get(_Gu, _Gv) - 48))) * 10; //#22069
                } //#22069
                var _Gz = $k[--$j]; //#22069
                $k[$j++] = (~~(_Gz / 10)) + 1; //#22070
                $k[$j++] = 10; //#22070
                $1.tobin(); //#22070
                $aload($k[--$j]); //#22070
                $1.Dbits = $a(); //#22070
                $1.i = $1.i + 3; //#22072
            } //#22072
            $k[$j++] = Infinity; //#22076
            for (var _H5 = 0, _H4 = $1.Dbits.length - 1; _H5 <= _H4; _H5 += 8) { //#22079
                var _H7 = $geti($1.Dbits, _H5, 8); //#22078
                $k[$j++] = 0; //#22078
                for (var _H8 = 0, _H9 = _H7.length; _H8 < _H9; _H8++) { //#22078
                    var _HB = $k[--$j]; //#22078
                    $k[$j++] = $f(_HB + $get(_H7, _H8)) * 2; //#22078
                } //#22078
                var _HC = $k[--$j]; //#22078
                $k[$j++] = ~~(_HC / 2); //#22078
            } //#22078
            $astore($a($counttomark())); //#22080
            var _HF = $k[--$j]; //#22080
            var _HG = $k[--$j]; //#22080
            $k[$j++] = _HF; //#22080
            $k[$j++] = _HG; //#22080
            $j--; //#22080
            $1.addtocws(); //#22080
            $1.mode = $1.A; //#22081
        }; //#22083
        $1.encB = function() {
            $1.p = 0; //#22086
            $1.bvals = $a(1480); //#22086
            for (;;) { //#22093
                if ($1.i == $1.msglen) { //#22087
                    break; //#22087
                } //#22087
                if ($get($1.msg, $1.i) < 0) { //#22088
                    break; //#22088
                } //#22088
                $1.lookup(); //#22089
                if ($k[--$j] != $1.mode) { //#22089
                    break; //#22089
                } //#22089
                $put($1.bvals, $1.p, $get($1.msg, $1.i)); //#22090
                $1.p = $1.p + 1; //#22091
                $1.i = $1.i + 1; //#22092
            } //#22092
            $1.remcws = $f($get($1.numremcws, $1.j + $1.p) - 1); //#22094
            $k[$j++] = Infinity; //#22101
            if (($1.remcws == 0) && ($1.i == $1.msglen)) { //#22099
                $k[$j++] = 0; //#22097
            } else { //#22099
                if ($1.p < 250) { //#22099
                    $k[$j++] = $1.p; //#22099
                } else { //#22099
                    $k[$j++] = (~~($1.p / 250)) + 249; //#22099
                    $k[$j++] = $1.p % 250; //#22099
                } //#22099
            } //#22099
            $aload($geti($1.bvals, 0, $1.p)); //#22101
            $1.bvals = $a(); //#22101
            $k[$j++] = $1.bvals; //#22103
            $1.addtocws(); //#22103
            $1.mode = $1.A; //#22104
        }; //#22105
        $1.cws = $a(1480); //#22108
        $1.mode = $1.A; //#22109
        $1.i = 0; //#22109
        $1.j = 0; //#22109
        for (;;) { //#22112
            if ($1.i >= $1.msglen) { //#22110
                break; //#22110
            } //#22110
            if ($1[$get($a(['encA', 'encCTX', 'encCTX', 'encCTX', 'encD', 'encB']), $1.mode)]() === true) {
                break;
            } //#22111
        } //#22111
        $1.cws = $geti($1.cws, 0, $1.j); //#22113
    } //#22113
    $1.i = 0; //#22118
    for (;;) { //#22138
        $1.m = $get($1.metrics, $1.i); //#22120
        $1.vers = $get($1.m, 0); //#22121
        $1.rows = $get($1.m, 1); //#22122
        $1.cols = $get($1.m, 2); //#22123
        $1.dcol = $get($1.m, 3); //#22124
        $1.dcws = $get($1.m, 4); //#22125
        $1.rscw = $get($1.m, 5); //#22126
        $1.rsbl = $get($1.m, 6); //#22127
        $1.riso = $get($1.m, 7); //#22128
        $1.risi = $get($1.m, 8); //#22129
        $1.risl = $get($1.m, 9); //#22130
        $1.dcpb = ~~($1.dcws / $1.rsbl); //#22131
        $1.ecpb = ~~($1.rscw / $1.rsbl); //#22132
        $1.okay = true; //#22133
        if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //#22134
            $1.okay = false; //#22134
        } //#22134
        if ($1.cws.length > $1.dcws) { //#22135
            $1.okay = false; //#22135
        } //#22135
        if ($1.okay) { //#22136
            break; //#22136
        } //#22136
        $1.i = $1.i + 1; //#22137
    } //#22137
    if (!$1.stype) { //#22144
        $k[$j++] = Infinity; //#22142
        $aload($1.cws); //#22142
        for (var _Ib = 0, _Ic = $f($1.dcws - $1.cws.length); _Ib < _Ic; _Ib++) { //#22142
            $k[$j++] = 129; //#22142
        } //#22142
        $1.cws = $a(); //#22142
    } else { //#22144
        $k[$j++] = Infinity; //#22144
        for (var _Ig = 0, _Ih = $f($1.dcws - $1.cws.length); _Ig < _Ih; _Ig++) { //#22144
            $k[$j++] = 0; //#22144
        } //#22144
        $aload($1.cws); //#22144
        $1.cws = $a(); //#22144
    } //#22144
    var _Il = $get($1.options, 'debugcws') !== undefined; //#22147
    if (_Il) { //#22147
        $k[$j++] = 'bwipp.debugcws'; //#22147
        $k[$j++] = $1.cws; //#22147
        bwipp_raiseerror(); //#22147
    } //#22147
    $1.cwbs = $a($1.rsbl); //#22150
    $1.ecbs = $a($1.rsbl); //#22151
    for (var _It = 0, _Is = $f($1.rsbl - 1); _It <= _Is; _It += 1) { //#22160
        $1.i = _It; //#22153
        $1.cwb = $a($1.dcpb); //#22154
        for (var _Iy = 0, _Ix = $1.dcpb - 1; _Iy <= _Ix; _Iy += 1) { //#22158
            $1.j = _Iy; //#22156
            $put($1.cwb, $1.j, $get($1.cws, $f(($1.j * $1.rsbl) + $1.i))); //#22157
        } //#22157
        $put($1.cwbs, $1.i, $1.cwb); //#22159
    } //#22159
    var _JA = $1.stype ? 32 : 256; //#22163
    $1.gf = _JA; //#22163
    $1['gf-1'] = $1.gf - 1; //#22164
    var _JD = $1.stype ? 37 : 301; //#22165
    $1.pm = _JD; //#22165
    $k[$j++] = Infinity; //#22166
    $k[$j++] = 1; //#22166
    for (var _JF = 0, _JG = $1["gf-1"]; _JF < _JG; _JF++) { //#22166
        var _JH = $k[--$j]; //#22166
        var _JI = _JH * 2; //#22166
        $k[$j++] = _JH; //#22166
        $k[$j++] = _JI; //#22166
        if (_JI >= $1.gf) { //#22166
            var _JL = $k[--$j]; //#22166
            $k[$j++] = _JL ^ $1.pm; //#22166
        } //#22166
    } //#22166
    $1.rsalog = $a(); //#22166
    $1.rslog = $a($1.gf); //#22167
    for (var _JR = 1, _JQ = $1["gf-1"]; _JR <= _JQ; _JR += 1) { //#22168
        $put($1.rslog, $get($1.rsalog, _JR), _JR); //#22168
    } //#22168
    $1.rsprod = function() {
        var _JV = $k[--$j]; //#22170
        var _JW = $k[--$j]; //#22170
        $k[$j++] = _JW; //#22174
        $k[$j++] = _JV; //#22174
        if ((_JV != 0) && (_JW != 0)) { //#22173
            var _JZ = $get($1.rslog, $k[--$j]); //#22171
            var _Jf = $get($1.rsalog, $f(_JZ + $get($1.rslog, $k[--$j])) % $1["gf-1"]); //#22171
            $k[$j++] = _Jf; //#22171
        } else { //#22173
            $j -= 2; //#22173
            $k[$j++] = 0; //#22173
        } //#22173
    }; //#22175
    $k[$j++] = Infinity; //#22178
    $k[$j++] = 1; //#22178
    for (var _Jh = 0, _Ji = $1.ecpb; _Jh < _Ji; _Jh++) { //#22178
        $k[$j++] = 0; //#22178
    } //#22178
    $1.coeffs = $a(); //#22178
    for (var _Jm = 0, _Jl = $1.ecpb - 1; _Jm <= _Jl; _Jm += 1) { //#22187
        $1.i = _Jm; //#22180
        $put($1.coeffs, $1.i + 1, $get($1.coeffs, $1.i)); //#22181
        for (var _Jt = $1.i; _Jt >= 1; _Jt -= 1) { //#22185
            $1.j = _Jt; //#22183
            $k[$j++] = $1.coeffs; //#22184
            $k[$j++] = $1.j; //#22184
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#22184
            $k[$j++] = $get($1.coeffs, $1.j); //#22184
            $k[$j++] = $get($1.rsalog, $1.i); //#22184
            $1.rsprod(); //#22184
            var _K5 = $k[--$j]; //#22184
            var _K6 = $k[--$j]; //#22184
            var _K7 = $k[--$j]; //#22184
            $put($k[--$j], _K7, $xo(_K6, _K5)); //#22184
        } //#22184
        $k[$j++] = $1.coeffs; //#22186
        $k[$j++] = 0; //#22186
        $k[$j++] = $get($1.coeffs, 0); //#22186
        $k[$j++] = $get($1.rsalog, $1.i); //#22186
        $1.rsprod(); //#22186
        var _KF = $k[--$j]; //#22186
        var _KG = $k[--$j]; //#22186
        $put($k[--$j], _KG, _KF); //#22186
    } //#22186
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#22188
    for (var _KN = 0, _KM = $1.cwbs.length - 1; _KN <= _KM; _KN += 1) { //#22203
        $1.i = _KN; //#22192
        $k[$j++] = Infinity; //#22193
        $aload($get($1.cwbs, $1.i)); //#22193
        for (var _KS = 0, _KT = $1.ecpb; _KS < _KT; _KS++) { //#22193
            $k[$j++] = 0; //#22193
        } //#22193
        $1.rscws = $a(); //#22193
        for (var _KX = 0, _KW = $1.dcpb - 1; _KX <= _KW; _KX += 1) { //#22201
            $1.m = _KX; //#22195
            $1.k = $get($1.rscws, $1.m); //#22196
            for (var _Kd = 0, _Kc = $1.ecpb - 1; _Kd <= _Kc; _Kd += 1) { //#22200
                $1.j = _Kd; //#22198
                $k[$j++] = $1.rscws; //#22199
                $k[$j++] = ($1.m + $1.j) + 1; //#22199
                $k[$j++] = $get($1.coeffs, ($1.ecpb - $1.j) - 1); //#22199
                $k[$j++] = $1.k; //#22199
                $1.rsprod(); //#22199
                var _Kq = $k[--$j]; //#22199
                var _Kr = $k[--$j]; //#22199
                $put($k[--$j], _Kr, $xo(_Kq, $get($1.rscws, ($1.m + $1.j) + 1))); //#22199
            } //#22199
        } //#22199
        $put($1.ecbs, $1.i, $geti($1.rscws, $1.dcpb, $1.ecpb)); //#22202
    } //#22202
    $k[$j++] = Infinity; //#22206
    $aload($1.cws); //#22206
    for (var _L1 = 0, _L2 = $1.rscw; _L1 < _L2; _L1++) { //#22206
        $k[$j++] = 0; //#22206
    } //#22206
    $1.cws = $a(); //#22206
    for (var _L6 = 0, _L5 = $f($1.rscw - 1); _L6 <= _L5; _L6 += 1) { //#22210
        $1.i = _L6; //#22208
        $put($1.cws, $f($1.dcws + $1.i), $get($get($1.ecbs, $1.i % $1.rsbl), ~~($1.i / $1.rsbl))); //#22209
    } //#22209
    var _LK = $1.stype ? 5 : 8; //#22213
    $1.mmat = $a($f($1.dcws + $1.rscw) * _LK); //#22213
    $1.r = 0; //#22214
    $1.c = 0; //#22214
    var _LN = $1.stype ? 2 : 1; //#22215
    for (var _LQ = 0, _LR = _LN, _LP = $1.cws.length - 1; _LR < 0 ? _LQ >= _LP : _LQ <= _LP; _LQ += _LR) { //#22236
        $1.i = _LQ; //#22216
        if (!$1.stype) { //#22230
            var _LU = $strcpy($s(8), "00000000"); //#22218
            var _LZ = $cvrs($s(8), $get($1.cws, $1.i), 2); //#22218
            $puti(_LU, 8 - _LZ.length, _LZ); //#22219
            $k[$j++] = _LU; //#22219
            $k[$j++] = Infinity; //#22219
            var _La = $k[--$j]; //#22219
            var _Lb = $k[--$j]; //#22219
            $k[$j++] = _La; //#22219
            $forall(_Lb, function() { //#22219
                var _Lc = $k[--$j]; //#22219
                $k[$j++] = $f(_Lc - 48); //#22219
            }); //#22219
            var _Ld = $a(); //#22219
            $1.top = $geti(_Ld, 0, 4); //#22220
            $1.bot = $geti(_Ld, 4, 4); //#22221
        } else { //#22230
            var _Lh = $strcpy($s(5), "00000"); //#22223
            var _Lm = $cvrs($s(5), $get($1.cws, $1.i), 2); //#22223
            $puti(_Lh, 5 - _Lm.length, _Lm); //#22224
            $k[$j++] = _Lh; //#22224
            $k[$j++] = Infinity; //#22224
            var _Ln = $k[--$j]; //#22224
            var _Lo = $k[--$j]; //#22224
            $k[$j++] = _Ln; //#22224
            $forall(_Lo, function() { //#22224
                var _Lp = $k[--$j]; //#22224
                $k[$j++] = $f(_Lp - 48); //#22224
            }); //#22224
            $1.c1 = $a(); //#22225
            var _Ls = $strcpy($s(5), "00000"); //#22226
            var _Lx = $cvrs($s(5), $get($1.cws, $1.i + 1), 2); //#22226
            $puti(_Ls, 5 - _Lx.length, _Lx); //#22227
            $k[$j++] = _Ls; //#22227
            $k[$j++] = Infinity; //#22227
            var _Ly = $k[--$j]; //#22227
            var _Lz = $k[--$j]; //#22227
            $k[$j++] = _Ly; //#22227
            $forall(_Lz, function() { //#22227
                var _M0 = $k[--$j]; //#22227
                $k[$j++] = $f(_M0 - 48); //#22227
            }); //#22227
            $1.c2 = $a(); //#22228
            $k[$j++] = Infinity; //#22229
            $aload($geti($1.c1, 0, 3)); //#22229
            $aload($geti($1.c2, 0, 2)); //#22229
            $1.top = $a(); //#22229
            $k[$j++] = Infinity; //#22230
            $aload($geti($1.c1, 3, 2)); //#22230
            $aload($geti($1.c2, 2, 3)); //#22230
            $1.bot = $a(); //#22230
        } //#22230
        $puti($1.mmat, $f(($1.r * $1.dcol) + $1.c), $1.top); //#22232
        $puti($1.mmat, $f((($1.r + 1) * $1.dcol) + $1.c), $1.bot); //#22233
        $1.c = $1.c + $1.top.length; //#22234
        if ($1.c == $1.dcol) { //#22235
            $1.c = 0; //#22235
            $1.r = $1.r + 2; //#22235
        } //#22235
    } //#22235
    $1.mmv = function() {
        var _MS = $k[--$j]; //#22239
        var _MT = $k[--$j]; //#22239
        $k[$j++] = $f(_MT + (_MS * $1.cols)); //#22239
    }; //#22239
    $k[$j++] = Infinity; //#22240
    for (var _MW = 0, _MX = $1.rows * $1.cols; _MW < _MX; _MW++) { //#22240
        $k[$j++] = -1; //#22240
    } //#22240
    $1.pixs = $a(); //#22240
    var _N3 = $a([function() {
        for (var _Ma = 0, _Mb = $1.cols; _Ma < _Mb; _Ma++) { //#22244
            $k[$j++] = 0; //#22244
        } //#22244
    }, function() {
        for (var _Md = 0, _Me = $1.cols; _Md < _Me; _Md++) { //#22245
            $k[$j++] = 1; //#22245
        } //#22245
    }, function() {
        $k[$j++] = 0; //#22246
        for (var _Mg = 0, _Mh = $f($1.cols - 2); _Mg < _Mh; _Mg++) { //#22246
            $k[$j++] = 1; //#22246
        } //#22246
        $k[$j++] = 0; //#22246
    }, function() {
        $k[$j++] = 0; //#22247
        $k[$j++] = 1; //#22247
        for (var _Mj = 0, _Mk = $f($1.cols - 4); _Mj < _Mk; _Mj++) { //#22247
            $k[$j++] = 0; //#22247
        } //#22247
        $k[$j++] = 1; //#22247
        $k[$j++] = 0; //#22247
    }, function() {
        for (var _Mm = 0, _Mn = ~~($f($1.cols - 1) / 2); _Mm < _Mn; _Mm++) { //#22248
            $k[$j++] = -1; //#22248
        } //#22248
        $k[$j++] = 1; //#22248
        for (var _Mp = 0, _Mq = ~~($f($1.cols - 1) / 2); _Mp < _Mq; _Mp++) { //#22248
            $k[$j++] = -1; //#22248
        } //#22248
    }, function() {
        for (var _Ms = 0, _Mt = ~~($f($1.cols - 1) / 2); _Ms < _Mt; _Ms++) { //#22249
            $k[$j++] = -1; //#22249
        } //#22249
        $k[$j++] = 0; //#22249
        for (var _Mv = 0, _Mw = ~~($f($1.cols - 1) / 2); _Mv < _Mw; _Mv++) { //#22249
            $k[$j++] = -1; //#22249
        } //#22249
    }, function() {
        $k[$j++] = 1; //#22250
        for (var _My = 0, _Mz = $f($1.cols - 2); _My < _Mz; _My++) { //#22250
            $k[$j++] = 0; //#22250
        } //#22250
        $k[$j++] = 1; //#22250
    }, function() {
        $k[$j++] = 1; //#22251
        $k[$j++] = 0; //#22251
        for (var _N1 = 0, _N2 = $f($1.cols - 4); _N1 < _N2; _N1++) { //#22251
            $k[$j++] = 1; //#22251
        } //#22251
        $k[$j++] = 0; //#22251
        $k[$j++] = 1; //#22251
    }]); //#22251
    $1.artifact = _N3; //#22252
    var _N4 = new Map([
        ["A", "121343"],
        ["B", "12134343"],
        ["C", "12121343"],
        ["D", "1213434343"],
        ["E", "1212134343"],
        ["F", "1212121343"],
        ["G", "121213434343"],
        ["H", "121212134343"],
        ["S", "56661278"],
        ["T", "5666666666127878"]
    ]); //#22263
    $1.cpat = $get(_N4, $geti($1.vers, 0, 1)); //#22264
    $k[$j++] = $1.pixs; //#22265
    $k[$j++] = 0; //#22265
    $k[$j++] = ~~($f($1.rows - $1.cpat.length) / 2); //#22265
    $1.mmv(); //#22265
    $k[$j++] = Infinity; //#22266
    $forall($1.cpat, function() { //#22266
        if ($get($1.artifact, $f($k[--$j] - 49))() === true) {
            return true;
        } //#22266
    }); //#22266
    var _NF = $a(); //#22266
    var _NG = $k[--$j]; //#22266
    $puti($k[--$j], _NG, _NF); //#22266
    for (var _NK = 0, _NJ = $f($1.risl - 1); _NK <= _NJ; _NK += 1) { //#22281
        $1.i = _NK; //#22270
        for (var _NP = $1.riso, _NQ = $1.risi, _NO = $f($1.cols - 1); _NQ < 0 ? _NP >= _NO : _NP <= _NO; _NP += _NQ) { //#22280
            $1.j = _NP; //#22272
            var _NS = (($1.i % 12) == 0) ? 1 : 0; //#22273
            var _NT = $a([1, _NS]); //#22273
            $k[$j++] = _NT; //#22274
            $k[$j++] = _NT; //#22274
            $k[$j++] = $1.pixs; //#22274
            $k[$j++] = $1.j; //#22274
            $k[$j++] = $1.i; //#22274
            $1.mmv(); //#22274
            var _NX = $k[--$j]; //#22275
            var _NY = $k[--$j]; //#22275
            $puti(_NY, _NX, $k[--$j]); //#22275
            if ($1.i != $f($1.risl - 1)) { //#22279
                $k[$j++] = $1.pixs; //#22277
                $k[$j++] = $f($f($1.cols - $1.j) - 2); //#22277
                $k[$j++] = $f($f($1.rows - $1.i) - 1); //#22277
                $1.mmv(); //#22277
                var _Nh = $k[--$j]; //#22278
                var _Ni = $k[--$j]; //#22278
                $puti(_Ni, _Nh, $k[--$j]); //#22278
            } else { //#22279
                $j--; //#22279
            } //#22279
        } //#22279
    } //#22279
    var _ON = new Map([
        ["A", $a([$a([12, 5])])],
        ["B", $a([$a([16, 7])])],
        ["C", $a([$a([26, 12])])],
        ["D", $a([])],
        ["E", $a([$a([26, 23])])],
        ["F", $a([$a([26, 32]), $a([70, 32]), $a([26, 34]), $a([70, 34])])],
        ["G", $a([$a([27, 48]), $a([69, 48])])],
        ["H", $a([$a([26, 70]), $a([66, 70]), $a([106, 70]), $a([26, 72]), $a([66, 72]), $a([106, 72])])],
        ["S-10", $a([])],
        ["S-20", $a([$a([10, 4])])],
        ["S-30", $a([$a([15, 4]), $a([15, 6])])],
        ["T-16", $a([$a([8, 10])])],
        ["T-32", $a([$a([16, 10]), $a([16, 12])])],
        ["T-48", $a([$a([24, 10]), $a([24, 12]), $a([24, 14])])]
    ]); //#22298
    $forall($get(_ON, $1.vers), function() { //#22299
        var _OR = $k[--$j]; //#22299
        $k[$j++] = $1.pixs; //#22299
        $aload(_OR); //#22299
        $1.mmv(); //#22299
        var _OS = $k[--$j]; //#22299
        $put($k[--$j], _OS, 1); //#22299
    }); //#22299
    $1.j = 0; //#22302
    for (var _OW = 0, _OV = $1.pixs.length - 1; _OW <= _OV; _OW += 1) { //#22309
        $1.i = _OW; //#22304
        if ($get($1.pixs, $1.i) == -1) { //#22308
            $put($1.pixs, $1.i, $get($1.mmat, $1.j)); //#22306
            $1.j = $1.j + 1; //#22307
        } //#22307
    } //#22307
    var _Om = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.cols],
        ["pixy", $1.rows],
        ["height", ($1.rows / 72) * 2],
        ["width", ($1.cols / 72) * 2],
        ["opt", $1.options]
    ]); //#22319
    $k[$j++] = _Om; //#22322
    if (!$1.dontdraw) { //#22322
        bwipp_renmatrix(); //#22322
    } //#22322
}

function bwipp_hanxin() {
    var $1 = {}; //#22352
    $1.options = $k[--$j]; //#22354
    $1.barcode = $k[--$j]; //#22355
    $1.dontdraw = false; //#22357
    $1.version = "unset"; //#22358
    $1.eclevel = "unset"; //#22359
    $1.parse = false; //#22360
    $1.parsefnc = false; //#22361
    $1.mask = -1; //#22362
    $forall($1.options, function() { //#22373
        var _3 = $k[--$j]; //#22373
        $1[$k[--$j]] = _3; //#22373
    }); //#22373
    $1.mask = ~~$1.mask; //#22375
    var _8 = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc]
    ]); //#22380
    $1.fncvals = _8; //#22382
    $k[$j++] = 'msg'; //#22383
    $k[$j++] = $1.barcode; //#22383
    $k[$j++] = $1.fncvals; //#22383
    bwipp_parseinput(); //#22383
    var _B = $k[--$j]; //#22383
    $1[$k[--$j]] = _B; //#22383
    $1.msglen = $1.msg.length; //#22384
    if ($eq($1.eclevel, "unset")) { //#22387
        $1.eclevel = "L2"; //#22387
    } //#22387
    $1.tobin = function() {
        var _G = $s($k[--$j]); //#22390
        $k[$j++] = _G; //#22390
        for (var _I = 0, _H = _G.length - 1; _I <= _H; _I += 1) { //#22390
            var _J = $k[--$j]; //#22390
            $put(_J, _I, 48); //#22390
            $k[$j++] = _J; //#22390
        } //#22390
        var _K = $k[--$j]; //#22391
        var _N = $cvrs($s(_K.length), $k[--$j], 2); //#22391
        $puti(_K, _K.length - _N.length, _N); //#22392
        $k[$j++] = _K; //#22392
    }; //#22393
    $1.bits = $s((4 + 13) + ($1.msglen * 8)); //#22396
    $puti($1.bits, 0, "0011"); //#22397
    $k[$j++] = $1.bits; //#22398
    $k[$j++] = 4; //#22398
    $k[$j++] = $1.msglen; //#22398
    $k[$j++] = 13; //#22398
    $1.tobin(); //#22398
    var _T = $k[--$j]; //#22398
    var _U = $k[--$j]; //#22398
    $puti($k[--$j], _U, _T); //#22398
    for (var _Y = 0, _X = $1.msglen - 1; _Y <= _X; _Y += 1) { //#22402
        $1.i = _Y; //#22400
        $k[$j++] = $1.bits; //#22401
        $k[$j++] = 17 + ($1.i * 8); //#22401
        $k[$j++] = $get($1.msg, $1.i); //#22401
        $k[$j++] = 8; //#22401
        $1.tobin(); //#22401
        var _e = $k[--$j]; //#22401
        var _f = $k[--$j]; //#22401
        $puti($k[--$j], _f, _e); //#22401
    } //#22401
    $1.metrics = $a([$a(["1", 23, -1, 0, 205, $a([1, 21, 4]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 17, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 13, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 9, 16]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["2", 25, -1, 0, 301, $a([1, 31, 6]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 25, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 19, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 15, 22]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["3", 27, -1, 0, 405, $a([1, 42, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 34, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["4", 29, 14, 1, 439, $a([1, 46, 8]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 38, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 30, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 22, 32]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["5", 31, 16, 1, 555, $a([1, 57, 12]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 49, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 37, 32]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 14, 20]), $a([1, 13, 22]), $a([0, -1, -1])]), $a(["6", 33, 16, 1, 675, $a([1, 70, 14]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 58, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 24, 20]), $a([1, 22, 18]), $a([0, -1, -1]), $a([1, 16, 24]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["7", 35, 17, 1, 805, $a([1, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 26, 22]), $a([1, 28, 24]), $a([0, -1, -1]), $a([2, 14, 20]), $a([1, 12, 20]), $a([0, -1, -1])]), $a(["8", 37, 18, 1, 943, $a([1, 99, 18]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 40, 18]), $a([1, 41, 18]), $a([0, -1, -1]), $a([1, 31, 26]), $a([1, 32, 28]), $a([0, -1, -1]), $a([2, 16, 24]), $a([1, 15, 22]), $a([0, -1, -1])]), $a(["9", 39, 19, 1, 1089, $a([1, 114, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 48, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([2, 24, 20]), $a([1, 26, 22]), $a([0, -1, -1]), $a([2, 18, 28]), $a([1, 18, 26]), $a([0, -1, -1])]), $a(["10", 41, 20, 1, 1243, $a([1, 131, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 52, 22]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 27, 24]), $a([1, 29, 24]), $a([0, -1, -1]), $a([2, 21, 32]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["11", 43, 14, 2, 1289, $a([1, 135, 26]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 56, 24]), $a([1, 57, 24]), $a([0, -1, -1]), $a([2, 28, 24]), $a([1, 31, 26]), $a([0, -1, -1]), $a([2, 22, 32]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["12", 45, 15, 2, 1455, $a([1, 153, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([1, 62, 26]), $a([1, 65, 28]), $a([0, -1, -1]), $a([2, 32, 28]), $a([1, 33, 28]), $a([0, -1, -1]), $a([3, 17, 26]), $a([1, 22, 30]), $a([0, -1, -1])]), $a(["13", 47, 16, 2, 1629, $a([1, 86, 16]), $a([1, 85, 16]), $a([0, -1, -1]), $a([1, 71, 30]), $a([1, 72, 30]), $a([0, -1, -1]), $a([2, 37, 32]), $a([1, 35, 30]), $a([0, -1, -1]), $a([3, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["14", 49, 16, 2, 1805, $a([1, 94, 18]), $a([1, 95, 18]), $a([0, -1, -1]), $a([2, 51, 22]), $a([1, 55, 24]), $a([0, -1, -1]), $a([3, 30, 26]), $a([1, 31, 26]), $a([0, -1, -1]), $a([4, 18, 28]), $a([1, 17, 24]), $a([0, -1, -1])]), $a(["15", 51, 17, 2, 1995, $a([1, 104, 20]), $a([1, 105, 20]), $a([0, -1, -1]), $a([2, 57, 24]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 33, 28]), $a([1, 36, 30]), $a([0, -1, -1]), $a([4, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["16", 53, 17, 2, 2187, $a([1, 115, 22]), $a([1, 114, 22]), $a([0, -1, -1]), $a([2, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([3, 38, 32]), $a([1, 33, 30]), $a([0, -1, -1]), $a([5, 19, 28]), $a([1, 14, 24]), $a([0, -1, -1])]), $a(["17", 55, 18, 2, 2393, $a([1, 126, 24]), $a([1, 125, 24]), $a([0, -1, -1]), $a([2, 70, 30]), $a([1, 69, 30]), $a([0, -1, -1]), $a([4, 33, 28]), $a([1, 29, 26]), $a([0, -1, -1]), $a([5, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["18", 57, 19, 2, 2607, $a([1, 136, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([3, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([5, 35, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 18, 28]), $a([1, 21, 28]), $a([0, -1, -1])]), $a(["19", 59, 20, 2, 2829, $a([1, 148, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([3, 61, 26]), $a([1, 64, 28]), $a([0, -1, -1]), $a([7, 24, 20]), $a([1, 23, 22]), $a([0, -1, -1]), $a([6, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["20", 61, 20, 2, 3053, $a([3, 107, 20]), $a([0, -1, -1]), $a([0, -1, -1]), $a([3, 65, 28]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 26, 22]), $a([1, 23, 22]), $a([0, -1, -1]), $a([7, 19, 28]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["21", 63, 21, 2, 3291, $a([3, 115, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 63, 28]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 25, 22]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 21, 22]), $a([0, -1, -1])]), $a(["22", 65, 16, 3, 3383, $a([2, 116, 22]), $a([1, 122, 24]), $a([0, -1, -1]), $a([4, 56, 24]), $a([1, 72, 30]), $a([0, -1, -1]), $a([7, 28, 24]), $a([1, 32, 26]), $a([0, -1, -1]), $a([8, 18, 28]), $a([1, 24, 30]), $a([0, -1, -1])]), $a(["23", 67, 17, 3, 3631, $a([3, 127, 24]), $a([0, -1, -1]), $a([0, -1, -1]), $a([5, 51, 22]), $a([1, 62, 26]), $a([0, -1, -1]), $a([7, 30, 26]), $a([1, 35, 26]), $a([0, -1, -1]), $a([8, 20, 30]), $a([1, 21, 32]), $a([0, -1, -1])]), $a(["24", 69, 17, 3, 3887, $a([2, 135, 26]), $a([1, 137, 26]), $a([0, -1, -1]), $a([5, 56, 24]), $a([1, 59, 26]), $a([0, -1, -1]), $a([7, 33, 28]), $a([1, 30, 28]), $a([0, -1, -1]), $a([11, 16, 24]), $a([1, 19, 26]), $a([0, -1, -1])]), $a(["25", 71, 18, 3, 4151, $a([3, 105, 20]), $a([1, 121, 22]), $a([0, -1, -1]), $a([5, 61, 26]), $a([1, 57, 26]), $a([0, -1, -1]), $a([9, 28, 24]), $a([1, 28, 22]), $a([0, -1, -1]), $a([10, 19, 28]), $a([1, 18, 30]), $a([0, -1, -1])]), $a(["26", 73, 18, 3, 4423, $a([2, 157, 30]), $a([1, 150, 28]), $a([0, -1, -1]), $a([5, 65, 28]), $a([1, 61, 26]), $a([0, -1, -1]), $a([8, 33, 28]), $a([1, 34, 30]), $a([0, -1, -1]), $a([10, 19, 28]), $a([2, 15, 26]), $a([0, -1, -1])]), $a(["27", 75, 19, 3, 4703, $a([3, 126, 24]), $a([1, 115, 22]), $a([0, -1, -1]), $a([7, 51, 22]), $a([1, 54, 22]), $a([0, -1, -1]), $a([8, 35, 30]), $a([1, 37, 30]), $a([0, -1, -1]), $a([15, 15, 22]), $a([1, 10, 22]), $a([0, -1, -1])]), $a(["28", 77, 19, 3, 4991, $a([4, 105, 20]), $a([1, 103, 20]), $a([0, -1, -1]), $a([7, 56, 24]), $a([1, 45, 18]), $a([0, -1, -1]), $a([10, 31, 26]), $a([1, 27, 26]), $a([0, -1, -1]), $a([10, 17, 26]), $a([3, 20, 28]), $a([1, 21, 28])]), $a(["29", 79, 20, 3, 5287, $a([3, 139, 26]), $a([1, 137, 28]), $a([0, -1, -1]), $a([6, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([9, 36, 30]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["30", 81, 20, 3, 5591, $a([6, 84, 16]), $a([1, 82, 16]), $a([0, -1, -1]), $a([6, 70, 30]), $a([1, 68, 30]), $a([0, -1, -1]), $a([7, 35, 30]), $a([3, 33, 28]), $a([1, 32, 28]), $a([13, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["31", 83, 21, 3, 5903, $a([5, 105, 20]), $a([1, 94, 18]), $a([0, -1, -1]), $a([6, 74, 32]), $a([1, 71, 30]), $a([0, -1, -1]), $a([11, 33, 28]), $a([1, 34, 32]), $a([0, -1, -1]), $a([13, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["32", 85, 17, 4, 6033, $a([4, 127, 24]), $a([1, 126, 24]), $a([0, -1, -1]), $a([7, 66, 28]), $a([1, 66, 30]), $a([0, -1, -1]), $a([12, 30, 24]), $a([1, 24, 28]), $a([1, 24, 30]), $a([15, 19, 28]), $a([1, 17, 32]), $a([0, -1, -1])]), $a(["33", 87, 17, 4, 6353, $a([7, 84, 16]), $a([1, 78, 16]), $a([0, -1, -1]), $a([7, 70, 30]), $a([1, 66, 28]), $a([0, -1, -1]), $a([12, 33, 28]), $a([1, 32, 30]), $a([0, -1, -1]), $a([14, 21, 32]), $a([1, 24, 28]), $a([0, -1, -1])]), $a(["34", 89, 18, 4, 6689, $a([5, 117, 22]), $a([1, 117, 24]), $a([0, -1, -1]), $a([8, 66, 28]), $a([1, 58, 26]), $a([0, -1, -1]), $a([11, 38, 32]), $a([1, 34, 32]), $a([0, -1, -1]), $a([15, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["35", 91, 18, 4, 7025, $a([4, 148, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([8, 68, 30]), $a([1, 70, 24]), $a([0, -1, -1]), $a([10, 36, 32]), $a([3, 38, 28]), $a([0, -1, -1]), $a([16, 19, 28]), $a([3, 16, 26]), $a([0, -1, -1])]), $a(["36", 93, 19, 4, 7377, $a([4, 126, 24]), $a([2, 135, 26]), $a([0, -1, -1]), $a([8, 70, 28]), $a([2, 43, 26]), $a([0, -1, -1]), $a([13, 32, 28]), $a([2, 41, 30]), $a([0, -1, -1]), $a([17, 19, 28]), $a([3, 15, 26]), $a([0, -1, -1])]), $a(["37", 95, 19, 4, 7729, $a([5, 136, 26]), $a([1, 132, 24]), $a([0, -1, -1]), $a([5, 67, 30]), $a([4, 68, 28]), $a([1, 69, 28]), $a([14, 35, 30]), $a([1, 32, 24]), $a([0, -1, -1]), $a([18, 18, 26]), $a([3, 16, 28]), $a([1, 14, 28])]), $a(["38", 97, 19, 4, 8089, $a([3, 142, 26]), $a([3, 141, 28]), $a([0, -1, -1]), $a([8, 70, 30]), $a([1, 73, 32]), $a([1, 74, 32]), $a([12, 34, 30]), $a([3, 34, 26]), $a([1, 35, 28]), $a([18, 21, 32]), $a([1, 27, 30]), $a([0, -1, -1])]), $a(["39", 99, 20, 4, 8465, $a([5, 116, 22]), $a([2, 103, 20]), $a([1, 102, 20]), $a([9, 74, 32]), $a([1, 74, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([2, 32, 32]), $a([1, 32, 30]), $a([19, 21, 32]), $a([1, 25, 26]), $a([0, -1, -1])]), $a(["40", 101, 20, 4, 8841, $a([7, 116, 22]), $a([1, 117, 22]), $a([0, -1, -1]), $a([11, 65, 28]), $a([1, 58, 24]), $a([0, -1, -1]), $a([15, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([20, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["41", 103, 17, 5, 9009, $a([6, 136, 26]), $a([1, 130, 24]), $a([0, -1, -1]), $a([11, 66, 28]), $a([1, 62, 30]), $a([0, -1, -1]), $a([14, 34, 28]), $a([3, 34, 32]), $a([1, 30, 30]), $a([18, 20, 30]), $a([3, 20, 28]), $a([2, 15, 26])]), $a(["42", 105, 17, 5, 9401, $a([5, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([10, 75, 32]), $a([1, 73, 32]), $a([0, -1, -1]), $a([16, 38, 32]), $a([1, 27, 28]), $a([0, -1, -1]), $a([22, 19, 28]), $a([2, 16, 30]), $a([1, 19, 30])]), $a(["43", 107, 18, 5, 9799, $a([6, 147, 28]), $a([1, 146, 28]), $a([0, -1, -1]), $a([11, 66, 28]), $a([2, 65, 30]), $a([0, -1, -1]), $a([18, 33, 28]), $a([2, 33, 30]), $a([0, -1, -1]), $a([22, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["44", 109, 18, 5, 10207, $a([6, 116, 22]), $a([3, 125, 24]), $a([0, -1, -1]), $a([11, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([13, 35, 28]), $a([6, 34, 32]), $a([1, 30, 30]), $a([23, 21, 32]), $a([1, 26, 30]), $a([0, -1, -1])]), $a(["45", 111, 18, 5, 10623, $a([7, 105, 20]), $a([4, 95, 18]), $a([0, -1, -1]), $a([12, 67, 28]), $a([1, 63, 30]), $a([1, 62, 32]), $a([21, 31, 26]), $a([2, 33, 32]), $a([0, -1, -1]), $a([23, 21, 32]), $a([2, 24, 30]), $a([0, -1, -1])]), $a(["46", 113, 19, 5, 11045, $a([10, 116, 22]), $a([0, -1, -1]), $a([0, -1, -1]), $a([12, 74, 32]), $a([1, 78, 30]), $a([0, -1, -1]), $a([18, 37, 32]), $a([1, 39, 30]), $a([1, 41, 28]), $a([25, 21, 32]), $a([1, 27, 28]), $a([0, -1, -1])]), $a(["47", 115, 19, 5, 11477, $a([5, 126, 24]), $a([4, 115, 22]), $a([1, 114, 22]), $a([12, 67, 28]), $a([2, 66, 32]), $a([1, 68, 30]), $a([21, 35, 30]), $a([1, 39, 30]), $a([0, -1, -1]), $a([26, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["48", 117, 19, 5, 11917, $a([9, 126, 24]), $a([1, 117, 22]), $a([0, -1, -1]), $a([13, 75, 32]), $a([1, 68, 30]), $a([0, -1, -1]), $a([20, 35, 30]), $a([3, 35, 28]), $a([0, -1, -1]), $a([27, 21, 32]), $a([1, 28, 30]), $a([0, -1, -1])]), $a(["49", 119, 17, 6, 12111, $a([9, 126, 24]), $a([1, 137, 26]), $a([0, -1, -1]), $a([13, 71, 30]), $a([2, 68, 32]), $a([0, -1, -1]), $a([20, 37, 32]), $a([1, 39, 28]), $a([1, 38, 28]), $a([24, 20, 32]), $a([5, 25, 28]), $a([0, -1, -1])]), $a(["50", 121, 17, 6, 12559, $a([8, 147, 28]), $a([1, 141, 28]), $a([0, -1, -1]), $a([10, 73, 32]), $a([4, 74, 30]), $a([1, 73, 30]), $a([16, 36, 32]), $a([6, 39, 30]), $a([1, 37, 30]), $a([27, 21, 32]), $a([3, 20, 26]), $a([0, -1, -1])]), $a(["51", 123, 18, 6, 13025, $a([9, 137, 26]), $a([1, 135, 26]), $a([0, -1, -1]), $a([12, 70, 30]), $a([4, 75, 32]), $a([0, -1, -1]), $a([24, 35, 30]), $a([1, 40, 28]), $a([0, -1, -1]), $a([23, 20, 32]), $a([8, 24, 30]), $a([0, -1, -1])]), $a(["52", 125, 18, 6, 13489, $a([14, 95, 18]), $a([1, 86, 18]), $a([0, -1, -1]), $a([13, 73, 32]), $a([3, 77, 30]), $a([0, -1, -1]), $a([24, 35, 30]), $a([2, 35, 28]), $a([0, -1, -1]), $a([26, 21, 32]), $a([5, 21, 30]), $a([1, 23, 30])]), $a(["53", 127, 18, 6, 13961, $a([9, 147, 28]), $a([1, 142, 28]), $a([0, -1, -1]), $a([10, 73, 30]), $a([6, 70, 32]), $a([1, 71, 32]), $a([25, 35, 30]), $a([2, 34, 26]), $a([0, -1, -1]), $a([29, 21, 32]), $a([4, 22, 30]), $a([0, -1, -1])]), $a(["54", 129, 18, 6, 14441, $a([11, 126, 24]), $a([1, 131, 24]), $a([0, -1, -1]), $a([16, 74, 32]), $a([1, 79, 30]), $a([0, -1, -1]), $a([25, 38, 32]), $a([1, 25, 30]), $a([0, -1, -1]), $a([33, 21, 32]), $a([1, 28, 28]), $a([0, -1, -1])]), $a(["55", 131, 19, 6, 14939, $a([14, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([24, 37, 32]), $a([2, 40, 30]), $a([1, 41, 30]), $a([31, 21, 32]), $a([4, 24, 32]), $a([0, -1, -1])]), $a(["56", 133, 19, 6, 15435, $a([10, 147, 28]), $a([1, 151, 28]), $a([0, -1, -1]), $a([15, 71, 30]), $a([3, 71, 32]), $a([1, 73, 32]), $a([24, 37, 32]), $a([3, 38, 30]), $a([1, 39, 30]), $a([36, 19, 30]), $a([3, 29, 26]), $a([0, -1, -1])]), $a(["57", 135, 19, 6, 15939, $a([15, 105, 20]), $a([1, 99, 18]), $a([0, -1, -1]), $a([19, 70, 30]), $a([1, 64, 28]), $a([0, -1, -1]), $a([27, 38, 32]), $a([2, 25, 26]), $a([0, -1, -1]), $a([38, 20, 30]), $a([2, 18, 28]), $a([0, -1, -1])]), $a(["58", 137, 17, 7, 16171, $a([14, 105, 20]), $a([1, 113, 22]), $a([1, 114, 22]), $a([17, 67, 30]), $a([3, 92, 32]), $a([0, -1, -1]), $a([30, 35, 30]), $a([1, 41, 30]), $a([0, -1, -1]), $a([36, 21, 32]), $a([1, 26, 30]), $a([1, 27, 30])]), $a(["59", 139, 17, 7, 16691, $a([11, 146, 28]), $a([1, 146, 26]), $a([0, -1, -1]), $a([20, 70, 30]), $a([1, 60, 26]), $a([0, -1, -1]), $a([29, 38, 32]), $a([1, 24, 32]), $a([0, -1, -1]), $a([40, 20, 30]), $a([2, 17, 26]), $a([0, -1, -1])]), $a(["60", 141, 18, 7, 17215, $a([3, 137, 26]), $a([1, 136, 26]), $a([10, 126, 24]), $a([22, 65, 28]), $a([1, 75, 30]), $a([0, -1, -1]), $a([30, 37, 32]), $a([1, 51, 30]), $a([0, -1, -1]), $a([42, 20, 30]), $a([1, 21, 30]), $a([0, -1, -1])]), $a(["61", 143, 18, 7, 17751, $a([12, 126, 24]), $a([2, 118, 22]), $a([1, 116, 22]), $a([19, 74, 32]), $a([1, 74, 30]), $a([1, 72, 28]), $a([30, 38, 32]), $a([2, 29, 30]), $a([0, -1, -1]), $a([39, 20, 32]), $a([2, 37, 26]), $a([1, 38, 26])]), $a(["62", 145, 18, 7, 18295, $a([12, 126, 24]), $a([3, 136, 26]), $a([0, -1, -1]), $a([21, 70, 30]), $a([2, 65, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 44, 32]), $a([0, -1, -1]), $a([42, 20, 30]), $a([2, 19, 28]), $a([2, 18, 28])]), $a(["63", 147, 18, 7, 18847, $a([12, 126, 24]), $a([3, 117, 22]), $a([1, 116, 22]), $a([25, 61, 26]), $a([2, 62, 28]), $a([0, -1, -1]), $a([34, 35, 30]), $a([1, 40, 32]), $a([1, 41, 32]), $a([45, 20, 30]), $a([1, 20, 32]), $a([1, 21, 32])]), $a(["64", 149, 19, 7, 19403, $a([15, 105, 20]), $a([2, 115, 22]), $a([2, 116, 22]), $a([25, 65, 28]), $a([1, 72, 28]), $a([0, -1, -1]), $a([18, 35, 30]), $a([17, 37, 32]), $a([1, 50, 32]), $a([42, 20, 30]), $a([6, 19, 28]), $a([1, 15, 28])]), $a(["65", 151, 19, 7, 19971, $a([19, 105, 20]), $a([1, 101, 20]), $a([0, -1, -1]), $a([33, 51, 22]), $a([1, 65, 22]), $a([0, -1, -1]), $a([40, 33, 28]), $a([1, 28, 28]), $a([0, -1, -1]), $a([49, 20, 30]), $a([1, 18, 28]), $a([0, -1, -1])]), $a(["66", 153, 17, 8, 20229, $a([18, 105, 20]), $a([2, 117, 22]), $a([0, -1, -1]), $a([26, 65, 28]), $a([1, 80, 30]), $a([0, -1, -1]), $a([35, 35, 30]), $a([3, 35, 28]), $a([1, 36, 28]), $a([52, 18, 28]), $a([2, 38, 30]), $a([0, -1, -1])]), $a(["67", 155, 17, 8, 20805, $a([26, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([26, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([45, 31, 26]), $a([1, 9, 26]), $a([0, -1, -1]), $a([52, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["68", 157, 17, 8, 21389, $a([16, 126, 24]), $a([1, 114, 22]), $a([1, 115, 22]), $a([23, 70, 30]), $a([3, 65, 28]), $a([1, 66, 28]), $a([40, 35, 30]), $a([1, 43, 30]), $a([0, -1, -1]), $a([46, 20, 30]), $a([7, 19, 28]), $a([1, 16, 28])]), $a(["69", 159, 18, 8, 21993, $a([19, 116, 22]), $a([1, 105, 22]), $a([0, -1, -1]), $a([20, 70, 30]), $a([7, 66, 28]), $a([1, 63, 28]), $a([40, 35, 30]), $a([1, 42, 32]), $a([1, 43, 32]), $a([54, 20, 30]), $a([1, 19, 30]), $a([0, -1, -1])]), $a(["70", 161, 18, 8, 22593, $a([17, 126, 24]), $a([2, 115, 22]), $a([0, -1, -1]), $a([24, 70, 30]), $a([4, 74, 32]), $a([0, -1, -1]), $a([48, 31, 26]), $a([2, 18, 26]), $a([0, -1, -1]), $a([54, 19, 28]), $a([6, 15, 26]), $a([1, 14, 26])]), $a(["71", 163, 18, 8, 23201, $a([29, 84, 16]), $a([0, -1, -1]), $a([0, -1, -1]), $a([29, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([6, 34, 30]), $a([3, 36, 30]), $a([38, 33, 28]), $a([58, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["72", 165, 18, 8, 23817, $a([16, 147, 28]), $a([1, 149, 28]), $a([0, -1, -1]), $a([31, 66, 28]), $a([1, 37, 26]), $a([0, -1, -1]), $a([48, 33, 28]), $a([1, 23, 26]), $a([0, -1, -1]), $a([53, 20, 30]), $a([6, 19, 28]), $a([1, 17, 28])]), $a(["73", 167, 19, 8, 24453, $a([20, 115, 22]), $a([2, 134, 24]), $a([0, -1, -1]), $a([29, 66, 28]), $a([2, 56, 26]), $a([2, 57, 26]), $a([45, 36, 30]), $a([2, 15, 28]), $a([0, -1, -1]), $a([59, 20, 30]), $a([2, 21, 32]), $a([0, -1, -1])]), $a(["74", 169, 19, 8, 25085, $a([17, 147, 28]), $a([1, 134, 26]), $a([0, -1, -1]), $a([26, 70, 30]), $a([5, 75, 32]), $a([0, -1, -1]), $a([47, 35, 30]), $a([1, 48, 32]), $a([0, -1, -1]), $a([64, 18, 28]), $a([2, 33, 30]), $a([1, 35, 30])]), $a(["75", 171, 17, 9, 25373, $a([22, 115, 22]), $a([1, 133, 24]), $a([0, -1, -1]), $a([33, 65, 28]), $a([1, 74, 28]), $a([0, -1, -1]), $a([43, 36, 30]), $a([5, 27, 28]), $a([1, 30, 28]), $a([57, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["76", 173, 17, 9, 26021, $a([18, 136, 26]), $a([2, 142, 26]), $a([0, -1, -1]), $a([33, 66, 28]), $a([2, 49, 26]), $a([0, -1, -1]), $a([48, 35, 30]), $a([2, 38, 28]), $a([0, -1, -1]), $a([64, 20, 30]), $a([1, 20, 32]), $a([0, -1, -1])]), $a(["77", 175, 17, 9, 26677, $a([19, 126, 24]), $a([2, 135, 26]), $a([1, 136, 26]), $a([32, 66, 28]), $a([2, 55, 26]), $a([2, 56, 26]), $a([49, 36, 30]), $a([2, 18, 32]), $a([0, -1, -1]), $a([65, 18, 28]), $a([5, 27, 30]), $a([1, 29, 30])]), $a(["78", 177, 18, 9, 27335, $a([20, 137, 26]), $a([1, 130, 26]), $a([0, -1, -1]), $a([30, 75, 32]), $a([2, 71, 32]), $a([0, -1, -1]), $a([46, 35, 30]), $a([6, 39, 32]), $a([0, -1, -1]), $a([3, 12, 30]), $a([70, 19, 28]), $a([0, -1, -1])]), $a(["79", 179, 18, 9, 28007, $a([20, 147, 28]), $a([0, -1, -1]), $a([0, -1, -1]), $a([35, 70, 30]), $a([0, -1, -1]), $a([0, -1, -1]), $a([49, 35, 30]), $a([5, 35, 28]), $a([0, -1, -1]), $a([70, 20, 30]), $a([0, -1, -1]), $a([0, -1, -1])]), $a(["80", 181, 18, 9, 28687, $a([21, 136, 26]), $a([1, 155, 28]), $a([0, -1, -1]), $a([34, 70, 30]), $a([1, 64, 28]), $a([1, 65, 28]), $a([54, 35, 30]), $a([1, 45, 30]), $a([0, -1, -1]), $a([68, 20, 30]), $a([3, 18, 28]), $a([1, 19, 28])]), $a(["81", 183, 18, 9, 29375, $a([19, 126, 24]), $a([5, 115, 22]), $a([1, 114, 22]), $a([33, 70, 30]), $a([3, 65, 28]), $a([1, 64, 28]), $a([52, 35, 30]), $a([3, 41, 32]), $a([1, 40, 32]), $a([67, 20, 30]), $a([5, 21, 32]), $a([1, 24, 32])]), $a(["82", 185, 18, 9, 30071, $a([2, 150, 28]), $a([21, 136, 26]), $a([0, -1, -1]), $a([32, 70, 30]), $a([6, 65, 28]), $a([0, -1, -1]), $a([52, 38, 32]), $a([2, 27, 32]), $a([0, -1, -1]), $a([73, 20, 30]), $a([2, 22, 32]), $a([0, -1, -1])]), $a(["83", 187, 17, 10, 30387, $a([21, 126, 24]), $a([4, 136, 26]), $a([0, -1, -1]), $a([30, 74, 32]), $a([6, 73, 30]), $a([0, -1, -1]), $a([54, 35, 30]), $a([4, 40, 32]), $a([0, -1, -1]), $a([75, 20, 30]), $a([1, 20, 28]), $a([0, -1, -1])]), $a(["84", 189, 17, 10, 31091, $a([30, 105, 20]), $a([1, 114, 22]), $a([0, -1, -1]), $a([3, 45, 22]), $a([55, 47, 20]), $a([0, -1, -1]), $a([2, 26, 26]), $a([62, 33, 28]), $a([0, -1, -1]), $a([79, 18, 28]), $a([4, 33, 30]), $a([0, -1, -1])])]); //#22743
    $1.eclval = $get($1.eclevel, 1) - 49; //#22745
    for (var _IM = 0; _IM <= 83; _IM += 1) { //#22765
        $1.i = _IM; //#22747
        $1.m = $get($1.metrics, $1.i); //#22748
        $1.vers = $get($1.m, 0); //#22749
        $1.size = $get($1.m, 1); //#22750
        $1.alnk = $get($1.m, 2); //#22751
        $1.alnn = $get($1.m, 3); //#22752
        $1.alnr = $f($1.size - ($1.alnk * $1.alnn)); //#22753
        $1.nmod = $get($1.m, 4); //#22754
        $1.ncws = ~~($1.nmod / 8); //#22755
        $1.rbit = $1.nmod % 8; //#22756
        $1.ecbs = $geti($1.m, 5 + ($1.eclval * 3), 3); //#22757
        var _Ii = $1.ecbs; //#22758
        $k[$j++] = 'ecws'; //#22758
        $k[$j++] = 0; //#22758
        for (var _Ij = 0, _Ik = _Ii.length; _Ij < _Ik; _Ij++) { //#22758
            var _Il = $get(_Ii, _Ij); //#22758
            var _Io = $k[--$j]; //#22758
            $k[$j++] = $f(_Io + ($get(_Il, 0) * $get(_Il, 2))); //#22758
        } //#22758
        var _Ip = $k[--$j]; //#22758
        $1[$k[--$j]] = _Ip; //#22758
        $1.dcws = $f($1.ncws - $1.ecws); //#22759
        $1.dmod = $1.dcws * 8; //#22760
        $1.okay = true; //#22761
        if ($ne($1.version, "unset") && $ne($1.version, $1.vers)) { //#22762
            $1.okay = false; //#22762
        } //#22762
        if ($1.bits.length > $1.dmod) { //#22763
            $1.okay = false; //#22763
        } //#22763
        if ($1.okay) { //#22764
            break; //#22764
        } //#22764
    } //#22764
    if (!$1.okay) { //#22769
        $k[$j++] = 'bwipp.hanxinNoValidSymbol'; //#22768
        $k[$j++] = "Maximum length exceeded or invalid content"; //#22768
        bwipp_raiseerror(); //#22768
    } //#22768
    $1.version = $1.vers; //#22771
    $1.msgbits = $1.bits; //#22772
    $1.e1nb = $get($get($1.ecbs, 0), 0); //#22773
    $1.e2nb = $get($get($1.ecbs, 1), 0); //#22773
    $1.e3nb = $get($get($1.ecbs, 2), 0); //#22773
    $1.e1dcws = $get($get($1.ecbs, 0), 1); //#22774
    $1.e2dcws = $get($get($1.ecbs, 1), 1); //#22774
    $1.e3dcws = $get($get($1.ecbs, 2), 1); //#22774
    $1.e1ecws = $get($get($1.ecbs, 0), 2); //#22775
    $1.e2ecws = $get($get($1.ecbs, 1), 2); //#22775
    $1.e3ecws = $get($get($1.ecbs, 2), 2); //#22775
    $1.pad = $s($1.dmod); //#22778
    for (var _JY = 0, _JX = $1.pad.length - 1; _JY <= _JX; _JY += 1) { //#22779
        $put($1.pad, _JY, 48); //#22779
    } //#22779
    $puti($1.pad, 0, $1.msgbits); //#22780
    $1.cws = $a($1.dcws); //#22783
    for (var _Jg = 0, _Jf = $1.cws.length - 1; _Jg <= _Jf; _Jg += 1) { //#22793
        $1.c = _Jg; //#22785
        $1.cwb = $geti($1.pad, $1.c * 8, 8); //#22786
        $1.cw = 0; //#22787
        for (var _Jk = 0; _Jk <= 7; _Jk += 1) { //#22791
            $1.i = _Jk; //#22789
            $1.cw = $f($1.cw + ((~~(Math.pow(2, (8 - $1.i) - 1))) * $f($get($1.cwb, $1.i) - 48))); //#22790
        } //#22790
        $put($1.cws, $1.c, $1.cw); //#22792
    } //#22792
    $1.rscodes = function() {
        $1.rspm = $k[--$j]; //#22797
        $1.rsgf = $k[--$j]; //#22798
        $1.rsnc = $k[--$j]; //#22799
        $1.rscws = $k[--$j]; //#22800
        $k[$j++] = Infinity; //#22803
        $k[$j++] = 1; //#22803
        for (var _Jy = 0, _Jz = $f($1.rsgf - 1); _Jy < _Jz; _Jy++) { //#22803
            var _K0 = $k[--$j]; //#22803
            var _K1 = _K0 * 2; //#22803
            $k[$j++] = _K0; //#22803
            $k[$j++] = _K1; //#22803
            if (_K1 >= $1.rsgf) { //#22803
                var _K4 = $k[--$j]; //#22803
                $k[$j++] = $xo(_K4, $1.rspm); //#22803
            } //#22803
        } //#22803
        $1.rsalog = $a(); //#22803
        $1.rslog = $a($1.rsgf); //#22804
        for (var _KA = 1, _K9 = $f($1.rsgf - 1); _KA <= _K9; _KA += 1) { //#22805
            $put($1.rslog, $get($1.rsalog, _KA), _KA); //#22805
        } //#22805
        $1.rsprod = function() {
            var _KE = $k[--$j]; //#22809
            var _KF = $k[--$j]; //#22809
            $k[$j++] = _KF; //#22813
            $k[$j++] = _KE; //#22813
            if ((_KE != 0) && (_KF != 0)) { //#22812
                var _KI = $get($1.rslog, $k[--$j]); //#22810
                var _KO = $get($1.rsalog, $f(_KI + $get($1.rslog, $k[--$j])) % $f($1.rsgf - 1)); //#22810
                $k[$j++] = _KO; //#22810
            } else { //#22812
                $j -= 2; //#22812
                $k[$j++] = 0; //#22812
            } //#22812
        }; //#22814
        $k[$j++] = Infinity; //#22817
        $k[$j++] = 1; //#22817
        for (var _KQ = 0, _KR = $1.rsnc; _KQ < _KR; _KQ++) { //#22817
            $k[$j++] = 0; //#22817
        } //#22817
        $1.coeffs = $a(); //#22817
        for (var _KV = 1, _KU = $1.rsnc; _KV <= _KU; _KV += 1) { //#22826
            $1.i = _KV; //#22819
            $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#22820
            for (var _Kc = $1.i - 1; _Kc >= 1; _Kc -= 1) { //#22824
                $1.j = _Kc; //#22822
                $k[$j++] = $1.coeffs; //#22823
                $k[$j++] = $1.j; //#22823
                $k[$j++] = $get($1.coeffs, $1.j - 1); //#22823
                $k[$j++] = $get($1.coeffs, $1.j); //#22823
                $k[$j++] = $get($1.rsalog, $1.i); //#22823
                $1.rsprod(); //#22823
                var _Ko = $k[--$j]; //#22823
                var _Kp = $k[--$j]; //#22823
                var _Kq = $k[--$j]; //#22823
                $put($k[--$j], _Kq, $xo(_Kp, _Ko)); //#22823
            } //#22823
            $k[$j++] = $1.coeffs; //#22825
            $k[$j++] = 0; //#22825
            $k[$j++] = $get($1.coeffs, 0); //#22825
            $k[$j++] = $get($1.rsalog, $1.i); //#22825
            $1.rsprod(); //#22825
            var _Ky = $k[--$j]; //#22825
            var _Kz = $k[--$j]; //#22825
            $put($k[--$j], _Kz, _Ky); //#22825
        } //#22825
        $1.nd = $1.rscws.length; //#22829
        $k[$j++] = Infinity; //#22830
        $forall($1.rscws); //#22830
        for (var _L4 = 0, _L5 = $1.rsnc; _L4 < _L5; _L4++) { //#22830
            $k[$j++] = 0; //#22830
        } //#22830
        $k[$j++] = 0; //#22830
        $1.rscws = $a(); //#22830
        for (var _L9 = 0, _L8 = $1.nd - 1; _L9 <= _L8; _L9 += 1) { //#22837
            $1.k = $xo($get($1.rscws, _L9), $get($1.rscws, $1.nd)); //#22832
            for (var _LH = 0, _LG = $f($1.rsnc - 1); _LH <= _LG; _LH += 1) { //#22836
                $1.j = _LH; //#22834
                $k[$j++] = $1.rscws; //#22835
                $k[$j++] = $1.nd + $1.j; //#22835
                $k[$j++] = $get($1.rscws, ($1.nd + $1.j) + 1); //#22835
                $k[$j++] = $1.k; //#22835
                $k[$j++] = $get($1.coeffs, $f($f($1.rsnc - $1.j) - 1)); //#22835
                $1.rsprod(); //#22835
                var _LU = $k[--$j]; //#22835
                var _LV = $k[--$j]; //#22835
                var _LW = $k[--$j]; //#22835
                $put($k[--$j], _LW, $xo(_LV, _LU)); //#22835
            } //#22835
        } //#22835
        $k[$j++] = $geti($1.rscws, 0, $1.rscws.length - 1); //#22840
    }; //#22842
    $1.dcwsb = $a($f($f($1.e1nb + $1.e2nb) + $1.e3nb)); //#22845
    $1.ecwsb = $a($1.dcwsb.length); //#22846
    $1.in = 0; //#22847
    $1.out = 0; //#22847
    for (var _Li = 0, _Lj = $1.e1nb; _Li < _Lj; _Li++) { //#22853
        $k[$j++] = $geti($1.cws, $1.in, $1.e1dcws); //#22849
        $k[$j++] = $1.e1ecws; //#22849
        $k[$j++] = 256; //#22849
        $k[$j++] = 355; //#22849
        $1.rscodes(); //#22849
        var _Lp = $k[--$j]; //#22850
        $put($1.dcwsb, $1.out, $geti(_Lp, 0, $1.e1dcws)); //#22850
        $put($1.ecwsb, $1.out, $geti(_Lp, $1.e1dcws, $1.e1ecws)); //#22851
        $1.in = $f($1.in + $1.e1dcws); //#22852
        $1.out = $1.out + 1; //#22852
    } //#22852
    for (var _M3 = 0, _M4 = $1.e2nb; _M3 < _M4; _M3++) { //#22859
        $k[$j++] = $geti($1.cws, $1.in, $1.e2dcws); //#22855
        $k[$j++] = $1.e2ecws; //#22855
        $k[$j++] = 256; //#22855
        $k[$j++] = 355; //#22855
        $1.rscodes(); //#22855
        var _MA = $k[--$j]; //#22856
        $put($1.dcwsb, $1.out, $geti(_MA, 0, $1.e2dcws)); //#22856
        $put($1.ecwsb, $1.out, $geti(_MA, $1.e2dcws, $1.e2ecws)); //#22857
        $1.in = $f($1.in + $1.e2dcws); //#22858
        $1.out = $1.out + 1; //#22858
    } //#22858
    for (var _MO = 0, _MP = $1.e3nb; _MO < _MP; _MO++) { //#22865
        $k[$j++] = $geti($1.cws, $1.in, $1.e3dcws); //#22861
        $k[$j++] = $1.e3ecws; //#22861
        $k[$j++] = 256; //#22861
        $k[$j++] = 355; //#22861
        $1.rscodes(); //#22861
        var _MV = $k[--$j]; //#22862
        $put($1.dcwsb, $1.out, $geti(_MV, 0, $1.e3dcws)); //#22862
        $put($1.ecwsb, $1.out, $geti(_MV, $1.e3dcws, $1.e3ecws)); //#22863
        $1.in = $f($1.in + $1.e3dcws); //#22864
        $1.out = $1.out + 1; //#22864
    } //#22864
    $1.cws = $a($1.ncws); //#22868
    $1.cw = 0; //#22869
    for (var _Mm = 0, _Ml = $1.dcwsb.length - 1; _Mm <= _Ml; _Mm += 1) { //#22874
        $1.i = _Mm; //#22871
        var _Mp = $get($1.dcwsb, $1.i); //#22872
        $puti($1.cws, $1.cw, _Mp); //#22872
        $1.cw = _Mp.length + $1.cw; //#22872
        var _Mv = $get($1.ecwsb, $1.i); //#22873
        $puti($1.cws, $1.cw, _Mv); //#22873
        $1.cw = _Mv.length + $1.cw; //#22873
    } //#22873
    $k[$j++] = Infinity; //#22879
    var _Mz = $1.ncws; //#22878
    var _N0 = 12; //#22878
    var _N1 = _Mz - 1; //#22878
    if ((_Mz - 1) > 12) { //#22878
        var _ = _N0; //#22878
        _N0 = _N1; //#22878
        _N1 = _; //#22878
    } //#22878
    for (var _N3 = 0, _N2 = _N1; _N3 <= _N2; _N3 += 1) { //#22880
        for (var _N6 = _N3, _N5 = $1.ncws - 1; _N6 <= _N5; _N6 += 13) { //#22879
            $k[$j++] = _N6; //#22879
            if (_N6 < $1.ncws) { //#22879
                var _NA = $get($1.cws, $k[--$j]); //#22879
                $k[$j++] = _NA; //#22879
            } else { //#22879
                $j--; //#22879
            } //#22879
        } //#22879
    } //#22879
    $1.cws = $a(); //#22879
    if ($1.rbit > 0) { //#22889
        $1.pad = $a($1.cws.length + 1); //#22885
        $puti($1.pad, 0, $1.cws); //#22886
        $put($1.pad, $1.pad.length - 1, 0); //#22887
        $1.cws = $1.pad; //#22888
    } //#22888
    $k[$j++] = Infinity; //#22892
    for (var _NM = 0, _NN = $1.size * $1.size; _NM < _NN; _NM++) { //#22892
        $k[$j++] = -1; //#22892
    } //#22892
    $1.pixs = $a(); //#22892
    $1.qmv = function() {
        var _NQ = $k[--$j]; //#22893
        var _NR = $k[--$j]; //#22893
        $k[$j++] = $f(_NR + (_NQ * $1.size)); //#22893
    }; //#22893
    if ($1.alnn != 0) { //#22952
        $1.trmv = function() {
            var _NU = $k[--$j]; //#22897
            var _NW = $k[--$j]; //#22897
            $k[$j++] = $f(($f(($f((_NU * $1.size) + $1.size)) - 1)) - _NW); //#22897
        }; //#22897
        $1.aplot = function() {
            var _NX = $k[--$j]; //#22899
            var _NY = $k[--$j]; //#22899
            var _NZ = $k[--$j]; //#22899
            $k[$j++] = _NX; //#22899
            $k[$j++] = _NZ; //#22899
            $k[$j++] = _NY; //#22899
            $k[$j++] = _NX; //#22899
            $k[$j++] = _NY; //#22899
            $k[$j++] = _NZ; //#22899
            $1.trmv(); //#22899
            var _Nb = $k[--$j]; //#22899
            $put($1.pixs, _Nb, $k[--$j]); //#22899
            $1.trmv(); //#22900
            var _Ne = $k[--$j]; //#22900
            $put($1.pixs, _Ne, $k[--$j]); //#22900
        }; //#22901
        $1.i = 0; //#22902
        $1.stag = 0; //#22902
        for (;;) { //#22924
            if ($1.i >= $1.size) { //#22903
                break; //#22903
            } //#22903
            for (var _Nk = 0, _Nj = $f($1.size - 1); _Nk <= _Nj; _Nk += 1) { //#22917
                $1.j = _Nk; //#22905
                if ($f($1.j + $1.alnr) < $1.size) { //#22911
                    $k[$j++] = (((((~~($1.j / $1.alnk)) + $1.stag) % 2) == 0) && (!(($1.i == 0) && ($1.j < $1.alnk)))) || (($1.j % $1.alnk) == 0); //#22909
                } else { //#22911
                    $k[$j++] = ($f($1.alnn + $1.stag) % 2) == 0; //#22911
                } //#22911
                if ($k[--$j]) { //#22916
                    $k[$j++] = $1.j; //#22914
                    $k[$j++] = $1.i; //#22914
                    $k[$j++] = 1; //#22914
                    $1.aplot(); //#22914
                    var _O1 = $1.j; //#22915
                    var _O2 = $1.i; //#22915
                    $k[$j++] = _O1 + 1; //#22915
                    $k[$j++] = _O2 + 1; //#22915
                    if (((_O2 + 1) < $1.size) && ((_O1 + 1) < $1.size)) { //#22915
                        $k[$j++] = 0; //#22915
                        $1.aplot(); //#22915
                    } else { //#22915
                        $j -= 2; //#22915
                    } //#22915
                } //#22915
            } //#22915
            if ($f($1.i + $1.alnr) == $1.size) { //#22921
                $1.i = $f($f($1.i + $1.alnr) - 1); //#22919
            } else { //#22921
                $1.i = $f($1.i + $1.alnk); //#22921
            } //#22921
            $1.stag = 1 - $1.stag; //#22923
        } //#22923
        for (var _OH = $1.alnk, _OI = $1.alnk, _OG = $f($1.size - 2); _OI < 0 ? _OH >= _OG : _OH <= _OG; _OH += _OI) { //#22951
            $1.i = _OH; //#22926
            if (((~~($1.i / $1.alnk)) % 2) != 0) { //#22938
                $k[$j++] = $1.pixs; //#22928
                $k[$j++] = 0; //#22928
                $k[$j++] = $1.i - 1; //#22928
                $1.trmv(); //#22928
                var _ON = $k[--$j]; //#22928
                $put($k[--$j], _ON, 0); //#22928
                $k[$j++] = $1.pixs; //#22929
                $k[$j++] = 0; //#22929
                $k[$j++] = $1.i + 1; //#22929
                $1.trmv(); //#22929
                var _OR = $k[--$j]; //#22929
                $put($k[--$j], _OR, 0); //#22929
                $k[$j++] = $1.pixs; //#22930
                $k[$j++] = 1; //#22930
                $k[$j++] = $1.i - 1; //#22930
                $1.trmv(); //#22930
                var _OV = $k[--$j]; //#22930
                $put($k[--$j], _OV, 0); //#22930
                $k[$j++] = $1.pixs; //#22931
                $k[$j++] = 1; //#22931
                $k[$j++] = $1.i; //#22931
                $1.trmv(); //#22931
                var _OZ = $k[--$j]; //#22931
                $put($k[--$j], _OZ, 0); //#22931
                $k[$j++] = $1.pixs; //#22932
                $k[$j++] = 1; //#22932
                $k[$j++] = $1.i + 1; //#22932
                $1.trmv(); //#22932
                var _Od = $k[--$j]; //#22932
                $put($k[--$j], _Od, 0); //#22932
                $k[$j++] = $1.pixs; //#22933
                $k[$j++] = $1.i - 1; //#22933
                $k[$j++] = 0; //#22933
                $1.trmv(); //#22933
                var _Oh = $k[--$j]; //#22933
                $put($k[--$j], _Oh, 0); //#22933
                $k[$j++] = $1.pixs; //#22934
                $k[$j++] = $1.i + 1; //#22934
                $k[$j++] = 0; //#22934
                $1.trmv(); //#22934
                var _Ol = $k[--$j]; //#22934
                $put($k[--$j], _Ol, 0); //#22934
                $k[$j++] = $1.pixs; //#22935
                $k[$j++] = $1.i - 1; //#22935
                $k[$j++] = 1; //#22935
                $1.trmv(); //#22935
                var _Op = $k[--$j]; //#22935
                $put($k[--$j], _Op, 0); //#22935
                $k[$j++] = $1.pixs; //#22936
                $k[$j++] = $1.i; //#22936
                $k[$j++] = 1; //#22936
                $1.trmv(); //#22936
                var _Ot = $k[--$j]; //#22936
                $put($k[--$j], _Ot, 0); //#22936
                $k[$j++] = $1.pixs; //#22937
                $k[$j++] = $1.i + 1; //#22937
                $k[$j++] = 1; //#22937
                $1.trmv(); //#22937
                var _Ox = $k[--$j]; //#22937
                $put($k[--$j], _Ox, 0); //#22937
            } //#22937
            $k[$j++] = $1.pixs; //#22939
            $k[$j++] = $f($1.size - 1); //#22939
            $k[$j++] = $1.i - 1; //#22939
            $1.trmv(); //#22939
            var _P2 = $k[--$j]; //#22939
            if ($get($k[--$j], _P2) != 1) { //#22950
                $k[$j++] = $1.pixs; //#22940
                $k[$j++] = $f($1.size - 1); //#22940
                $k[$j++] = $1.i - 1; //#22940
                $1.trmv(); //#22940
                var _P8 = $k[--$j]; //#22940
                $put($k[--$j], _P8, 0); //#22940
                $k[$j++] = $1.pixs; //#22941
                $k[$j++] = $f($1.size - 2); //#22941
                $k[$j++] = $1.i - 1; //#22941
                $1.trmv(); //#22941
                var _PD = $k[--$j]; //#22941
                $put($k[--$j], _PD, 0); //#22941
                $k[$j++] = $1.pixs; //#22942
                $k[$j++] = $f($1.size - 2); //#22942
                $k[$j++] = $1.i; //#22942
                $1.trmv(); //#22942
                var _PI = $k[--$j]; //#22942
                $put($k[--$j], _PI, 0); //#22942
                $k[$j++] = $1.pixs; //#22943
                $k[$j++] = $f($1.size - 2); //#22943
                $k[$j++] = $1.i + 1; //#22943
                $1.trmv(); //#22943
                var _PN = $k[--$j]; //#22943
                $put($k[--$j], _PN, 0); //#22943
                $k[$j++] = $1.pixs; //#22944
                $k[$j++] = $f($1.size - 1); //#22944
                $k[$j++] = $1.i + 1; //#22944
                $1.trmv(); //#22944
                var _PS = $k[--$j]; //#22944
                $put($k[--$j], _PS, 0); //#22944
                $k[$j++] = $1.pixs; //#22945
                $k[$j++] = $1.i - 1; //#22945
                $k[$j++] = $f($1.size - 1); //#22945
                $1.trmv(); //#22945
                var _PX = $k[--$j]; //#22945
                $put($k[--$j], _PX, 0); //#22945
                $k[$j++] = $1.pixs; //#22946
                $k[$j++] = $1.i - 1; //#22946
                $k[$j++] = $f($1.size - 2); //#22946
                $1.trmv(); //#22946
                var _Pc = $k[--$j]; //#22946
                $put($k[--$j], _Pc, 0); //#22946
                $k[$j++] = $1.pixs; //#22947
                $k[$j++] = $1.i; //#22947
                $k[$j++] = $f($1.size - 2); //#22947
                $1.trmv(); //#22947
                var _Ph = $k[--$j]; //#22947
                $put($k[--$j], _Ph, 0); //#22947
                $k[$j++] = $1.pixs; //#22948
                $k[$j++] = $1.i + 1; //#22948
                $k[$j++] = $f($1.size - 2); //#22948
                $1.trmv(); //#22948
                var _Pm = $k[--$j]; //#22948
                $put($k[--$j], _Pm, 0); //#22948
                $k[$j++] = $1.pixs; //#22949
                $k[$j++] = $1.i + 1; //#22949
                $k[$j++] = $f($1.size - 1); //#22949
                $1.trmv(); //#22949
                var _Pr = $k[--$j]; //#22949
                $put($k[--$j], _Pr, 0); //#22949
            } //#22949
        } //#22949
    } //#22949
    $1.fpat = $a([$a([1, 1, 1, 1, 1, 1, 1, 0]), $a([1, 0, 0, 0, 0, 0, 0, 0]), $a([1, 0, 1, 1, 1, 1, 1, 0]), $a([1, 0, 1, 0, 0, 0, 0, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([1, 0, 1, 0, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#22964
    $1.fpat2 = $a([$a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([1, 1, 1, 0, 1, 0, 1, 0]), $a([0, 0, 0, 0, 1, 0, 1, 0]), $a([1, 1, 1, 1, 1, 0, 1, 0]), $a([0, 0, 0, 0, 0, 0, 1, 0]), $a([1, 1, 1, 1, 1, 1, 1, 0]), $a([0, 0, 0, 0, 0, 0, 0, 0])]); //#22974
    for (var _QD = 0, _QC = $1.fpat.length - 1; _QD <= _QC; _QD += 1) { //#22986
        $1.y = _QD; //#22976
        for (var _QH = 0, _QG = $get($1.fpat, 0).length - 1; _QH <= _QG; _QH += 1) { //#22985
            $1.x = _QH; //#22978
            $1.fpb = $get($get($1.fpat, $1.y), $1.x); //#22979
            $1.fpb2 = $get($get($1.fpat2, $1.y), $1.x); //#22980
            $k[$j++] = $1.pixs; //#22981
            $k[$j++] = $1.x; //#22981
            $k[$j++] = $1.y; //#22981
            $1.qmv(); //#22981
            var _QW = $k[--$j]; //#22981
            $put($k[--$j], _QW, $1.fpb); //#22981
            $k[$j++] = $1.pixs; //#22982
            $k[$j++] = $f($f($1.size - $1.x) - 1); //#22982
            $k[$j++] = $1.y; //#22982
            $1.qmv(); //#22982
            var _Qd = $k[--$j]; //#22982
            $put($k[--$j], _Qd, $1.fpb); //#22982
            $k[$j++] = $1.pixs; //#22983
            $k[$j++] = $f($f($1.size - $1.x) - 1); //#22983
            $k[$j++] = $f($f($1.size - $1.y) - 1); //#22983
            $1.qmv(); //#22983
            var _Ql = $k[--$j]; //#22983
            $put($k[--$j], _Ql, $1.fpb); //#22983
            $k[$j++] = $1.pixs; //#22984
            $k[$j++] = $1.x; //#22984
            $k[$j++] = $f($f($1.size - $1.y) - 1); //#22984
            $1.qmv(); //#22984
            var _Qs = $k[--$j]; //#22984
            $put($k[--$j], _Qs, $1.fpb2); //#22984
        } //#22984
    } //#22984
    $1.functionmap = $a([$a([$a([0, 8]), $a([$f($1.size - 1), $f($1.size - 9)])]), $a([$a([1, 8]), $a([$f($1.size - 2), $f($1.size - 9)])]), $a([$a([2, 8]), $a([$f($1.size - 3), $f($1.size - 9)])]), $a([$a([3, 8]), $a([$f($1.size - 4), $f($1.size - 9)])]), $a([$a([4, 8]), $a([$f($1.size - 5), $f($1.size - 9)])]), $a([$a([5, 8]), $a([$f($1.size - 6), $f($1.size - 9)])]), $a([$a([6, 8]), $a([$f($1.size - 7), $f($1.size - 9)])]), $a([$a([7, 8]), $a([$f($1.size - 8), $f($1.size - 9)])]), $a([$a([8, 8]), $a([$f($1.size - 9), $f($1.size - 9)])]), $a([$a([8, 7]), $a([$f($1.size - 9), $f($1.size - 8)])]), $a([$a([8, 6]), $a([$f($1.size - 9), $f($1.size - 7)])]), $a([$a([8, 5]), $a([$f($1.size - 9), $f($1.size - 6)])]), $a([$a([8, 4]), $a([$f($1.size - 9), $f($1.size - 5)])]), $a([$a([8, 3]), $a([$f($1.size - 9), $f($1.size - 4)])]), $a([$a([8, 2]), $a([$f($1.size - 9), $f($1.size - 3)])]), $a([$a([8, 1]), $a([$f($1.size - 9), $f($1.size - 2)])]), $a([$a([8, 0]), $a([$f($1.size - 9), $f($1.size - 1)])]), $a([$a([$f($1.size - 9), 0]), $a([8, $f($1.size - 1)])]), $a([$a([$f($1.size - 9), 1]), $a([8, $f($1.size - 2)])]), $a([$a([$f($1.size - 9), 2]), $a([8, $f($1.size - 3)])]), $a([$a([$f($1.size - 9), 3]), $a([8, $f($1.size - 4)])]), $a([$a([$f($1.size - 9), 4]), $a([8, $f($1.size - 5)])]), $a([$a([$f($1.size - 9), 5]), $a([8, $f($1.size - 6)])]), $a([$a([$f($1.size - 9), 6]), $a([8, $f($1.size - 7)])]), $a([$a([$f($1.size - 9), 7]), $a([8, $f($1.size - 8)])]), $a([$a([$f($1.size - 9), 8]), $a([8, $f($1.size - 9)])]), $a([$a([$f($1.size - 8), 8]), $a([7, $f($1.size - 9)])]), $a([$a([$f($1.size - 7), 8]), $a([6, $f($1.size - 9)])]), $a([$a([$f($1.size - 6), 8]), $a([5, $f($1.size - 9)])]), $a([$a([$f($1.size - 5), 8]), $a([4, $f($1.size - 9)])]), $a([$a([$f($1.size - 4), 8]), $a([3, $f($1.size - 9)])]), $a([$a([$f($1.size - 3), 8]), $a([2, $f($1.size - 9)])]), $a([$a([$f($1.size - 2), 8]), $a([1, $f($1.size - 9)])]), $a([$a([$f($1.size - 1), 8]), $a([0, $f($1.size - 9)])])]); //#23008
    var _Tf = $1.functionmap; //#23009
    for (var _Tg = 0, _Th = _Tf.length; _Tg < _Th; _Tg++) { //#23011
        $forall($get(_Tf, _Tg), function() { //#23010
            $forall($k[--$j]); //#23010
            $1.qmv(); //#23010
            $put($1.pixs, $k[--$j], 0); //#23010
        }); //#23010
    } //#23010
    var _Ts = $a([function() {
        $j -= 2; //#23014
        $k[$j++] = 1; //#23014
    }, function() {
        var _Tm = $k[--$j]; //#23015
        var _Tn = $k[--$j]; //#23015
        $k[$j++] = $f(_Tn + _Tm) % 2; //#23015
    }, function() {
        var _To = $k[--$j]; //#23016
        var _Tp = $k[--$j]; //#23016
        $k[$j++] = ($f(($f(_To + _Tp) % 3) + (_Tp % 3))) % 2; //#23016
    }, function() {
        var _Tq = $k[--$j]; //#23017
        var _Tr = $k[--$j]; //#23017
        $k[$j++] = ($f((_Tr % _Tq) + ($f((_Tq % _Tr) + ($f((_Tq % 3) + (_Tr % 3))))))) % 2; //#23018
    }]); //#23018
    $1.maskfuncs = _Ts; //#23019
    if ($1.mask != -1) { //#23023
        $1.maskfuncs = $a([$get($1.maskfuncs, $1.mask - 1)]); //#23021
        $1.bestmaskval = $1.mask - 1; //#23022
    } //#23022
    $1.masks = $a($1.maskfuncs.length); //#23024
    for (var _U3 = 0, _U2 = $1.masks.length - 1; _U3 <= _U2; _U3 += 1) { //#23038
        $1.m = _U3; //#23026
        $1.mask = $a($1.size * $1.size); //#23027
        for (var _U9 = 0, _U8 = $f($1.size - 1); _U9 <= _U8; _U9 += 1) { //#23036
            $1.j = _U9; //#23029
            for (var _UC = 0, _UB = $f($1.size - 1); _UC <= _UB; _UC += 1) { //#23035
                $1.i = _UC; //#23031
                $k[$j++] = $1.i + 1; //#23032
                $k[$j++] = $1.j + 1; //#23032
                if ($get($1.maskfuncs, $1.m)() === true) {
                    break;
                } //#23032
                var _UI = $k[--$j]; //#23032
                $k[$j++] = _UI == 0; //#23033
                $k[$j++] = $1.pixs; //#23033
                $k[$j++] = $1.i; //#23033
                $k[$j++] = $1.j; //#23033
                $1.qmv(); //#23033
                var _UM = $k[--$j]; //#23033
                var _UO = $get($k[--$j], _UM); //#23033
                var _UP = $k[--$j]; //#23033
                var _UQ = (_UP && (_UO == -1)) ? 1 : 0; //#23033
                $k[$j++] = _UQ; //#23034
                $k[$j++] = $1.mask; //#23034
                $k[$j++] = $1.i; //#23034
                $k[$j++] = $1.j; //#23034
                $1.qmv(); //#23034
                var _UU = $k[--$j]; //#23034
                var _UV = $k[--$j]; //#23034
                $put(_UV, _UU, $k[--$j]); //#23034
            } //#23034
        } //#23034
        $put($1.masks, $1.m, $1.mask); //#23037
    } //#23037
    $1.posx = 0; //#23041
    $1.posy = 0; //#23042
    $1.num = 0; //#23043
    for (;;) { //#23053
        if ($1.posy == $1.size) { //#23045
            break; //#23045
        } //#23045
        $k[$j++] = $1.pixs; //#23046
        $k[$j++] = $1.posx; //#23046
        $k[$j++] = $1.posy; //#23046
        $1.qmv(); //#23046
        var _Uf = $k[--$j]; //#23046
        if ($get($k[--$j], _Uf) == -1) { //#23050
            var _Uk = $get($1.cws, ~~($1.num / 8)); //#23047
            var _Um = -(7 - ($1.num % 8)); //#23047
            $k[$j++] = ((_Um < 0 ? _Uk >>> -_Um : _Uk << _Um)) & 1; //#23048
            $k[$j++] = $1.pixs; //#23048
            $k[$j++] = $1.posx; //#23048
            $k[$j++] = $1.posy; //#23048
            $1.qmv(); //#23048
            var _Uq = $k[--$j]; //#23048
            var _Ur = $k[--$j]; //#23048
            $put(_Ur, _Uq, $k[--$j]); //#23048
            $1.num = $1.num + 1; //#23049
        } //#23049
        $1.posx = $1.posx + 1; //#23051
        if ($1.posx == $1.size) { //#23052
            $1.posx = 0; //#23052
            $1.posy = $1.posy + 1; //#23052
        } //#23052
    } //#23052
    $1.evalfulln1n3 = function() {
        $1.scrle = $k[--$j]; //#23057
        $k[$j++] = 'scr1'; //#23059
        $k[$j++] = 0; //#23059
        $forall($1.scrle, function() { //#23059
            var _V0 = $k[--$j]; //#23059
            $k[$j++] = _V0; //#23059
            if (_V0 >= 3) { //#23059
                var _V1 = $k[--$j]; //#23059
                var _V3 = $f($k[--$j] + (_V1 * 4)); //#23059
                $k[$j++] = _V3; //#23059
                $k[$j++] = _V3; //#23059
            } //#23059
            $j--; //#23059
        }); //#23059
        var _V4 = $k[--$j]; //#23059
        $1[$k[--$j]] = _V4; //#23059
        $1.scr3 = 0; //#23060
        for (var _V8 = 5, _V7 = $1.scrle.length - 1; _V8 <= _V7; _V8 += 2) { //#23076
            $1.j = _V8; //#23063
            if (($get($1.scrle, $1.j) % 3) == 0) { //#23075
                $1.fact = ~~($get($1.scrle, $1.j) / 3); //#23065
                var _VH = $geti($1.scrle, $1.j - 4, 4); //#23066
                for (var _VI = 0, _VJ = _VH.length; _VI < _VJ; _VI++) { //#23066
                    $k[$j++] = $get(_VH, _VI) == $1.fact; //#23066
                } //#23066
                var _VM = $k[--$j]; //#23066
                var _VN = $k[--$j]; //#23066
                var _VO = $k[--$j]; //#23066
                var _VP = $k[--$j]; //#23066
                if (_VP && (_VO && (_VN && _VM))) { //#23074
                    if (($1.j == 5) || (($1.j + 2) >= $1.scrle.length)) { //#23071
                        $1.scr3 = $1.scr3 + 50; //#23068
                    } else { //#23071
                        if (($get($1.scrle, $1.j - 5) >= 3) || ($get($1.scrle, $1.j + 1) >= 3)) { //#23072
                            $1.scr3 = $1.scr3 + 50; //#23071
                        } //#23071
                    } //#23071
                } //#23071
            } //#23071
        } //#23071
        for (var _Vd = 1, _Vc = $1.scrle.length - 5; _Vd <= _Vc; _Vd += 2) { //#23092
            $1.j = _Vd; //#23079
            if (($get($1.scrle, $1.j) % 3) == 0) { //#23091
                $1.fact = ~~($get($1.scrle, $1.j) / 3); //#23081
                var _Vm = $geti($1.scrle, $1.j + 1, 4); //#23082
                for (var _Vn = 0, _Vo = _Vm.length; _Vn < _Vo; _Vn++) { //#23082
                    $k[$j++] = $get(_Vm, _Vn) == $1.fact; //#23082
                } //#23082
                var _Vr = $k[--$j]; //#23082
                var _Vs = $k[--$j]; //#23082
                var _Vt = $k[--$j]; //#23082
                var _Vu = $k[--$j]; //#23082
                if (_Vu && (_Vt && (_Vs && _Vr))) { //#23090
                    if (($1.j == 1) || (($1.j + 6) >= $1.scrle.length)) { //#23087
                        $1.scr3 = $1.scr3 + 50; //#23084
                    } else { //#23087
                        if (($get($1.scrle, $1.j - 1) >= 3) || ($get($1.scrle, $1.j + 5) >= 3)) { //#23088
                            $1.scr3 = $1.scr3 + 50; //#23087
                        } //#23087
                    } //#23087
                } //#23087
            } //#23087
        } //#23087
        $k[$j++] = $1.scr1; //#23093
        $k[$j++] = $1.scr3; //#23093
    }; //#23094
    $1.evalfull = function() {
        $1.sym = $k[--$j]; //#23098
        $1.n1 = 0; //#23100
        $1.n3 = 0; //#23100
        $1.rle = $a($f($1.size + 1)); //#23101
        $1.lastpairs = $a($1.size); //#23102
        $1.thispairs = $a($1.size); //#23103
        $1.sizeadd1 = $f($1.size + 1); //#23104
        for (var _WI = 0, _WH = $f($1.size - 1); _WI <= _WH; _WI += 1) { //#23129
            $1.i = _WI; //#23106
            $k[$j++] = Infinity; //#23109
            var _WK = $1.size; //#23110
            $k[$j++] = 0; //#23112
            $k[$j++] = 0; //#23112
            for (var _WM = $1.i, _WN = _WK, _WL = $f((_WK * _WK) - 1); _WN < 0 ? _WM >= _WL : _WM <= _WL; _WM += _WN) { //#23112
                var _WP = $get($1.sym, _WM); //#23111
                var _WQ = $k[--$j]; //#23111
                $k[$j++] = _WP; //#23111
                if ($eq(_WQ, _WP)) { //#23111
                    var _WR = $k[--$j]; //#23111
                    var _WS = $k[--$j]; //#23111
                    $k[$j++] = $f(_WS + 1); //#23111
                    $k[$j++] = _WR; //#23111
                } else { //#23111
                    var _WT = $k[--$j]; //#23111
                    $k[$j++] = 1; //#23111
                    $k[$j++] = _WT; //#23111
                } //#23111
            } //#23111
            $j--; //#23113
            var _WV = $counttomark() + 2; //#23114
            $astore($geti($1.rle, 0, _WV - 2)); //#23114
            $1.evalfulln1n3(); //#23115
            $1.n3 = $f($k[--$j] + $1.n3); //#23115
            $1.n1 = $f($k[--$j] + $1.n1); //#23115
            $j--; //#23116
            $1.symrow = $geti($1.sym, $1.i * $1.size, $1.size); //#23119
            $k[$j++] = Infinity; //#23120
            var _Wg = $1.symrow; //#23121
            $k[$j++] = 0; //#23123
            $k[$j++] = 0; //#23123
            for (var _Wh = 0, _Wi = _Wg.length; _Wh < _Wi; _Wh++) { //#23123
                var _Wj = $get(_Wg, _Wh); //#23123
                var _Wk = $k[--$j]; //#23122
                $k[$j++] = _Wj; //#23122
                if ($eq(_Wk, _Wj)) { //#23122
                    var _Wl = $k[--$j]; //#23122
                    var _Wm = $k[--$j]; //#23122
                    $k[$j++] = $f(_Wm + 1); //#23122
                    $k[$j++] = _Wl; //#23122
                } else { //#23122
                    var _Wn = $k[--$j]; //#23122
                    $k[$j++] = 1; //#23122
                    $k[$j++] = _Wn; //#23122
                } //#23122
            } //#23122
            $j--; //#23124
            var _Wp = $counttomark() + 2; //#23125
            $astore($geti($1.rle, 0, _Wp - 2)); //#23125
            $1.evalfulln1n3(); //#23126
            $1.n3 = $f($k[--$j] + $1.n3); //#23126
            $1.n1 = $f($k[--$j] + $1.n1); //#23126
            $j--; //#23127
        } //#23127
        $k[$j++] = $f($1.n1 + $1.n3); //#23131
    }; //#23132
    $1.bestscore = 999999999; //#23135
    for (var _Wz = 0, _Wy = $1.masks.length - 1; _Wz <= _Wy; _Wz += 1) { //#23153
        $1.m = _Wz; //#23137
        $1.masksym = $a($1.size * $1.size); //#23138
        for (var _X6 = 0, _X5 = $f(($1.size * $1.size) - 1); _X6 <= _X5; _X6 += 1) { //#23142
            $1.i = _X6; //#23140
            $put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); //#23141
        } //#23141
        if ($1.masks.length != 1) { //#23151
            $k[$j++] = $1.masksym; //#23144
            $1.evalfull(); //#23144
            $1.score = $k[--$j]; //#23144
            if ($1.score < $1.bestscore) { //#23149
                $1.bestsym = $1.masksym; //#23146
                $1.bestmaskval = $1.m; //#23147
                $1.bestscore = $1.score; //#23148
            } //#23148
        } else { //#23151
            $1.bestsym = $1.masksym; //#23151
        } //#23151
    } //#23151
    $1.pixs = $1.bestsym; //#23154
    $1.funval = (((((~~($f($1.size - 21) / 2)) + 20) * 4) + $1.eclval) * 4) + $1.bestmaskval; //#23157
    $k[$j++] = $a([($1.funval & 3840) >>> 8, ($1.funval & 240) >>> 4, $1.funval & 15]); //#23161
    $k[$j++] = 4; //#23161
    $k[$j++] = 16; //#23161
    $k[$j++] = 19; //#23161
    $1.rscodes(); //#23161
    $1.funvals = $k[--$j]; //#23161
    $k[$j++] = Infinity; //#23166
    $forall($1.funvals, function() { //#23165
        $k[$j++] = 4; //#23164
        $1.tobin(); //#23164
        $forall($k[--$j], function() { //#23164
            var _Xb = $k[--$j]; //#23164
            $k[$j++] = $f(_Xb - 48); //#23164
        }); //#23164
    }); //#23164
    $k[$j++] = 0; //#23166
    $k[$j++] = 1; //#23166
    $k[$j++] = 0; //#23166
    $k[$j++] = 1; //#23166
    $k[$j++] = 0; //#23166
    $k[$j++] = 1; //#23166
    $1.funbits = $a(); //#23166
    for (var _Xf = 0, _Xe = $1.functionmap.length - 1; _Xf <= _Xe; _Xf += 1) { //#23173
        $1.i = _Xf; //#23169
        $forall($get($1.functionmap, $1.i), function() { //#23172
            var _Xk = $k[--$j]; //#23171
            $k[$j++] = $1.pixs; //#23171
            $aload(_Xk); //#23171
            $1.qmv(); //#23171
            var _Xo = $k[--$j]; //#23171
            $put($k[--$j], _Xo, $get($1.funbits, $1.i)); //#23171
        }); //#23171
    } //#23171
    var _Xw = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.size],
        ["pixy", $1.size],
        ["height", ($1.size * 2) / 72],
        ["width", ($1.size * 2) / 72],
        ["opt", $1.options]
    ]); //#23183
    $k[$j++] = _Xw; //#23186
    if (!$1.dontdraw) { //#23186
        bwipp_renmatrix(); //#23186
    } //#23186
}

function bwipp_dotcode() {
    var $1 = {}; //#23216
    $1.options = $k[--$j]; //#23218
    $1.barcode = $k[--$j]; //#23219
    $1.dontdraw = false; //#23221
    $1.rows = -1; //#23222
    $1.columns = -1; //#23223
    $1.ratio = -1; //#23224
    $1.parse = false; //#23225
    $1.parsefnc = false; //#23226
    $1.raw = false; //#23227
    $1.fast = false; //#23228
    $1.mask = -1; //#23229
    $forall($1.options, function() { //#23240
        var _3 = $k[--$j]; //#23240
        $1[$k[--$j]] = _3; //#23240
    }); //#23240
    $1.rows = ~~$1.rows; //#23242
    $1.columns = ~~$1.columns; //#23243
    $1.ratio = +$1.ratio; //#23244
    $1.mask = ~~$1.mask; //#23245
    if ((($1.ratio == -1) && ($1.rows == -1)) && ($1.columns == -1)) { //#23250
        $1.ratio = 3 / 2; //#23249
    } //#23249
    $1.laa = -1; //#23253
    $1.lab = -2; //#23253
    $1.lac = -3; //#23253
    $1.bin = -4; //#23253
    $1.sfa = -5; //#23254
    $1.sfb = -6; //#23254
    $1.sb2 = -7; //#23254
    $1.sb3 = -8; //#23254
    $1.sb4 = -9; //#23255
    $1.sb5 = -10; //#23255
    $1.sb6 = -11; //#23255
    $1.sfc = -12; //#23255
    $1.sc2 = -13; //#23256
    $1.sc3 = -14; //#23256
    $1.sc4 = -15; //#23256
    $1.sc5 = -16; //#23256
    $1.sc6 = -17; //#23257
    $1.sc7 = -18; //#23257
    $1.bsa = -19; //#23257
    $1.bsb = -20; //#23257
    $1.tma = -21; //#23258
    $1.tmb = -22; //#23258
    $1.tmc = -23; //#23258
    $1.tms = -24; //#23258
    $1.fn1 = -25; //#23259
    $1.fn2 = -26; //#23259
    $1.fn3 = -27; //#23259
    $1.crl = -28; //#23259
    $1.aim = -29; //#23260
    $1.m05 = -30; //#23260
    $1.m06 = -31; //#23260
    $1.m12 = -32; //#23260
    $1.mac = -33; //#23261
    var _G = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["eci", true],
        ["FNC1", $1.fn1],
        ["FNC3", $1.fn3]
    ]); //#23270
    $1.fncvals = _G; //#23271
    $k[$j++] = 'msg'; //#23272
    $k[$j++] = $1.barcode; //#23272
    $k[$j++] = $1.fncvals; //#23272
    bwipp_parseinput(); //#23272
    var _J = $k[--$j]; //#23272
    $1[$k[--$j]] = _J; //#23272
    $1.msglen = $1.msg.length; //#23273
    var _M = $1.msg; //#23276
    $k[$j++] = 'numecis'; //#23276
    $k[$j++] = 0; //#23276
    for (var _N = 0, _O = _M.length; _N < _O; _N++) { //#23276
        if ($get(_M, _N) <= -1000000) { //#23276
            var _Q = $k[--$j]; //#23276
            $k[$j++] = $f(_Q + 1); //#23276
        } //#23276
    } //#23276
    var _R = $k[--$j]; //#23276
    $1[$k[--$j]] = _R; //#23276
    $1.msgtmp = $a($f($1.msg.length + ($1.numecis * 6))); //#23277
    $1.j = 0; //#23278
    for (var _Y = 0, _X = $1.msg.length - 1; _Y <= _X; _Y += 1) { //#23289
        var _a = $get($1.msg, _Y); //#23280
        $k[$j++] = _a; //#23288
        if (_a <= -1000000) { //#23287
            var _e = $geti($cvrs($s(7), -$k[--$j], 10), 1, 6); //#23281
            for (var _f = 0, _g = _e.length; _f < _g; _f++) { //#23281
                $k[$j++] = $get(_e, _f); //#23281
            } //#23281
            $astore($a(6)); //#23281
            $puti($1.msgtmp, $1.j + 1, $k[--$j]); //#23282
            $put($1.msgtmp, $1.j, $1.fn2); //#23283
            $1.j = $1.j + 7; //#23284
        } else { //#23287
            $put($1.msgtmp, $1.j, $k[--$j]); //#23286
            $1.j = $1.j + 1; //#23287
        } //#23287
    } //#23287
    $1.msg = $1.msgtmp; //#23290
    $1.msglen = $1.msg.length; //#23291
    $1.charmaps = $a([$a([32, 32, "00"]), $a(["!", "!", "01"]), $a(["\"", "\"", "02"]), $a(["#", "#", "03"]), $a(["$", "$", "04"]), $a(["%", "%", "05"]), $a(["&", "&", "06"]), $a(["'", "'", "07"]), $a([40, 40, "08"]), $a([41, 41, "09"]), $a(["*", "*", "10"]), $a(["+", "+", "11"]), $a([",", ",", "12"]), $a(["-", "-", "13"]), $a([".", ".", "14"]), $a(["/", "/", "15"]), $a(["0", "0", "16"]), $a(["1", "1", "17"]), $a(["2", "2", "18"]), $a(["3", "3", "19"]), $a(["4", "4", "20"]), $a(["5", "5", "21"]), $a(["6", "6", "22"]), $a(["7", "7", "23"]), $a(["8", "8", "24"]), $a(["9", "9", "25"]), $a([":", ":", "26"]), $a([";", ";", "27"]), $a(["<", "<", "28"]), $a(["=", "=", "29"]), $a([">", ">", "30"]), $a(["?", "?", "31"]), $a(["@", "@", "32"]), $a(["A", "A", "33"]), $a(["B", "B", "34"]), $a(["C", "C", "35"]), $a(["D", "D", "36"]), $a(["E", "E", "37"]), $a(["F", "F", "38"]), $a(["G", "G", "39"]), $a(["H", "H", "40"]), $a(["I", "I", "41"]), $a(["J", "J", "42"]), $a(["K", "K", "43"]), $a(["L", "L", "44"]), $a(["M", "M", "45"]), $a(["N", "N", "46"]), $a(["O", "O", "47"]), $a(["P", "P", "48"]), $a(["Q", "Q", "49"]), $a(["R", "R", "50"]), $a(["S", "S", "51"]), $a(["T", "T", "52"]), $a(["U", "U", "53"]), $a(["V", "V", "54"]), $a(["W", "W", "55"]), $a(["X", "X", "56"]), $a(["Y", "Y", "57"]), $a(["Z", "Z", "58"]), $a(["[", "[", "59"]), $a([92, 92, "60"]), $a(["]", "]", "61"]), $a(["^", "^", "62"]), $a(["_", "_", "63"]), $a([0, "`", "64"]), $a([1, "a", "65"]), $a([2, "b", "66"]), $a([3, "c", "67"]), $a([4, "d", "68"]), $a([5, "e", "69"]), $a([6, "f", "70"]), $a([7, "g", "71"]), $a([8, "h", "72"]), $a([9, "i", "73"]), $a([10, "j", "74"]), $a([11, "k", "75"]), $a([12, "l", "76"]), $a([13, "m", "77"]), $a([14, "n", "78"]), $a([15, "o", "79"]), $a([16, "p", "80"]), $a([17, "q", "81"]), $a([18, "r", "82"]), $a([19, "s", "83"]), $a([20, "t", "84"]), $a([21, "u", "85"]), $a([22, "v", "86"]), $a([23, "w", "87"]), $a([24, "x", "88"]), $a([25, "y", "89"]), $a([26, "z", "90"]), $a([27, "{", "91"]), $a([28, "|", "92"]), $a([29, "}", "93"]), $a([30, "~", "94"]), $a([31, 127, "95"]), $a([$1.sfb, $1.crl, "96"]), $a([$1.sb2, 9, "97"]), $a([$1.sb3, 28, "98"]), $a([$1.sb4, 29, "99"]), $a([$1.sb5, 30, $1.aim]), $a([$1.sb6, $1.sfa, $1.laa]), $a([$1.lab, $1.laa, $1.sfb]), $a([$1.sc2, $1.sc2, $1.sb2]), $a([$1.sc3, $1.sc3, $1.sb3]), $a([$1.sc4, $1.sc4, $1.sb4]), $a([$1.lac, $1.lac, $1.lab]), $a([$1.fn1, $1.fn1, $1.fn1]), $a([$1.fn2, $1.fn2, $1.fn2]), $a([$1.fn3, $1.fn3, $1.fn3]), $a([$1.bsa, $1.bsa, $1.bsa]), $a([$1.bsb, $1.bsb, $1.bsb]), $a([$1.bin, $1.bin, $1.bin])]); //#23334
    $1.charvals = $a([new Map, new Map, new Map]); //#23337
    for (var _3W = 0, _3V = $1.charmaps.length - 1; _3W <= _3V; _3W += 1) { //#23346
        $1.i = _3W; //#23339
        $1.encs = $get($1.charmaps, $1.i); //#23340
        for (var _3a = 0; _3a <= 2; _3a += 1) { //#23345
            $1.j = _3a; //#23342
            var _3d = $get($1.encs, $1.j); //#23343
            $k[$j++] = _3d; //#23343
            if ($eq($type(_3d), 'stringtype')) { //#23343
                var _3g = $get($k[--$j], 0); //#23343
                $k[$j++] = _3g; //#23343
            } //#23343
            $put($get($1.charvals, $1.j), $k[--$j], $1.i); //#23344
        } //#23344
    } //#23344
    $1.Avals = $get($1.charvals, 0); //#23347
    $1.Bvals = $get($1.charvals, 1); //#23348
    $put($1.Bvals, $1.m05, 97); //#23349
    $put($1.Bvals, $1.m06, 98); //#23350
    $put($1.Bvals, $1.m12, 99); //#23351
    $put($1.Bvals, $1.mac, 100); //#23352
    $1.Cvals = $get($1.charvals, 2); //#23353
    $k[$j++] = Infinity; //#23355
    var _4A = $a([$1.sc2, $1.sc3, $1.sc4, $1.sc5, $1.sc6, $1.sc7, $1.tma, $1.tmb, $1.tmc, $1.tms]); //#23355
    $k[$j++] = 102; //#23355
    for (var _4B = 0, _4C = _4A.length; _4B < _4C; _4B++) { //#23355
        var _4F = $f($k[--$j] + 1); //#23355
        $k[$j++] = $get(_4A, _4B); //#23355
        $k[$j++] = _4F; //#23355
        $k[$j++] = _4F; //#23355
    } //#23355
    $j--; //#23355
    $1.BINvals = $d(); //#23356
    $k[$j++] = Infinity; //#23359
    for (var _4I = 0, _4J = $1.msglen + 1; _4I < _4J; _4I++) { //#23359
        $k[$j++] = 0; //#23359
    } //#23359
    $1.nDigits = $a(); //#23359
    $k[$j++] = Infinity; //#23360
    for (var _4M = 0, _4N = $1.msglen + 1; _4M < _4N; _4M++) { //#23360
        $k[$j++] = false; //#23360
    } //#23360
    $1.SeventeenTen = $a(); //#23360
    $k[$j++] = Infinity; //#23361
    for (var _4Q = 0, _4R = $1.msglen + 1; _4Q < _4R; _4Q++) { //#23361
        $k[$j++] = false; //#23361
    } //#23361
    $1.ECI = $a(); //#23361
    $k[$j++] = Infinity; //#23362
    for (var _4U = 0, _4V = $1.msglen + 1; _4U < _4V; _4U++) { //#23362
        $k[$j++] = false; //#23362
    } //#23362
    $1.DatumA = $a(); //#23362
    $k[$j++] = Infinity; //#23363
    for (var _4Y = 0, _4Z = $1.msglen + 1; _4Y < _4Z; _4Y++) { //#23363
        $k[$j++] = false; //#23363
    } //#23363
    $1.DatumB = $a(); //#23363
    $k[$j++] = Infinity; //#23364
    for (var _4c = 0, _4d = $1.msglen + 1; _4c < _4d; _4c++) { //#23364
        $k[$j++] = false; //#23364
    } //#23364
    $1.DatumC = $a(); //#23364
    $k[$j++] = Infinity; //#23365
    for (var _4g = 0, _4h = $1.msglen + 8; _4g < _4h; _4g++) { //#23365
        $k[$j++] = false; //#23365
    } //#23365
    $1.Binary = $a(); //#23365
    $k[$j++] = Infinity; //#23366
    for (var _4k = 0, _4l = $1.msglen + 1; _4k < _4l; _4k++) { //#23366
        $k[$j++] = 0; //#23366
    } //#23366
    $1.AheadC = $a(); //#23366
    $k[$j++] = Infinity; //#23367
    for (var _4o = 0, _4p = $1.msglen + 1; _4o < _4p; _4o++) { //#23367
        $k[$j++] = 0; //#23367
    } //#23367
    $1.TryC = $a(); //#23367
    $k[$j++] = Infinity; //#23368
    for (var _4s = 0, _4t = $1.msglen + 1; _4s < _4t; _4s++) { //#23368
        $k[$j++] = 0; //#23368
    } //#23368
    $1.AheadA = $a(); //#23368
    $k[$j++] = Infinity; //#23369
    for (var _4w = 0, _4x = $1.msglen + 1; _4w < _4x; _4w++) { //#23369
        $k[$j++] = 0; //#23369
    } //#23369
    $1.AheadB = $a(); //#23369
    $k[$j++] = Infinity; //#23370
    for (var _50 = 0, _51 = $1.msglen + 1; _50 < _51; _50++) { //#23370
        $k[$j++] = 0; //#23370
    } //#23370
    $1.UntilEndSeg = $a(); //#23370
    for (var _54 = $1.msglen - 1; _54 >= 0; _54 -= 1) { //#23425
        $1.i = _54; //#23372
        $1.barchar = $get($1.msg, $1.i); //#23373
        if (($1.barchar >= 48) && ($1.barchar <= 57)) { //#23376
            $put($1.nDigits, $1.i, $f($get($1.nDigits, $1.i + 1) + 1)); //#23375
        } //#23375
        var _5H = $get($1.Avals, $1.barchar) !== undefined; //#23377
        if (_5H) { //#23377
            $put($1.DatumA, $1.i, true); //#23377
        } //#23377
        var _5M = $get($1.Bvals, $1.barchar) !== undefined; //#23378
        if (_5M) { //#23378
            $put($1.DatumB, $1.i, true); //#23378
        } //#23378
        $1.CRLF = false; //#23379
        if (($1.barchar == 13) && ($1.i < ($1.msglen - 1))) { //#23382
            if ($get($1.msg, $1.i + 1) == 10) { //#23381
                $1.CRLF = true; //#23381
            } //#23381
        } //#23381
        if ($1.CRLF) { //#23383
            $put($1.DatumB, $1.i, true); //#23383
        } //#23383
        if ($get($1.nDigits, $1.i) >= 2) { //#23384
            $put($1.DatumC, $1.i, true); //#23384
        } //#23384
        if ($1.barchar < 0) { //#23385
            $put($1.DatumC, $1.i, true); //#23385
        } //#23385
        if ($1.barchar >= 128) { //#23386
            $put($1.Binary, $1.i, true); //#23386
        } //#23386
        if ($get($1.nDigits, $1.i) >= 10) { //#23400
            $k[$j++] = Infinity; //#23388
            $aload($geti($1.msg, $1.i, 10)); //#23389
            for (var _5p = 0, _5q = 1; _5p < _5q; _5p++) { //#23397
                if ($k[--$j] != 48) { //#23391
                    $k[$j++] = false; //#23391
                    break; //#23391
                } //#23391
                if ($k[--$j] != 49) { //#23392
                    $k[$j++] = false; //#23392
                    break; //#23392
                } //#23392
                $j -= 6; //#23393
                if ($k[--$j] != 55) { //#23394
                    $k[$j++] = false; //#23394
                    break; //#23394
                } //#23394
                if ($k[--$j] != 49) { //#23395
                    $k[$j++] = false; //#23395
                    break; //#23395
                } //#23395
                $k[$j++] = true; //#23396
            } //#23396
            $put($1.SeventeenTen, $1.i, $k[--$j]); //#23398
            $cleartomark(); //#23399
        } //#23399
        if (($get($1.nDigits, $1.i + 1) >= 6) && ($get($1.msg, $1.i) == $1.fn2)) { //#23403
            $put($1.ECI, $1.i, true); //#23402
        } //#23402
        if (($1.barchar < 0) && ($1.barchar != $1.fn3)) { //#23410
            $put($1.AheadC, $1.i, $f($get($1.AheadC, $1.i + 1) + 1)); //#23405
        } else { //#23410
            if ($get($1.nDigits, $1.i) <= 1) { //#23410
                $put($1.AheadC, $1.i, 0); //#23408
            } else { //#23410
                $put($1.AheadC, $1.i, $f($get($1.AheadC, $1.i + 2) + 1)); //#23410
            } //#23410
        } //#23410
        if (($get($1.nDigits, $1.i) > 0) && $gt($get($1.AheadC, $1.i), $get($1.AheadC, $1.i + 1))) { //#23415
            $put($1.TryC, $1.i, $get($1.AheadC, $1.i)); //#23414
        } //#23414
        if (($get($1.DatumA, $1.i) && ($get($1.TryC, $1.i) < 2)) && ($1.barchar != $1.fn3)) { //#23418
            $put($1.AheadA, $1.i, $f($get($1.AheadA, $1.i + 1) + 1)); //#23417
        } //#23417
        if (($get($1.DatumB, $1.i) && ($get($1.TryC, $1.i) < 2)) && ($1.barchar != $1.fn3)) { //#23421
            $k[$j++] = $1.AheadB; //#23420
            $k[$j++] = $1.i; //#23420
            $k[$j++] = $1.AheadB; //#23420
            $k[$j++] = $1.i + 1; //#23420
            if ($1.CRLF) { //#23420
                var _73 = $k[--$j]; //#23420
                $k[$j++] = $f(_73 + 1); //#23420
            } //#23420
            var _74 = $k[--$j]; //#23420
            var _76 = $get($k[--$j], _74); //#23420
            var _77 = $k[--$j]; //#23420
            $put($k[--$j], _77, $f(_76 + 1)); //#23420
        } //#23420
        if ($1.barchar != $1.fn3) { //#23424
            $put($1.UntilEndSeg, $1.i, $f($get($1.UntilEndSeg, $1.i + 1) + 1)); //#23423
        } //#23423
    } //#23423
    $1.A = 0; //#23427
    $1.B = 1; //#23427
    $1.C = 2; //#23427
    $1.BIN = 3; //#23427
    $1.addtocws = function() {
        var _7G = $k[--$j]; //#23430
        $puti($1.cws, $1.j, _7G); //#23430
        $1.j = _7G.length + $1.j; //#23431
    }; //#23432
    $1.base259to103 = function() {
        $1.in = $k[--$j]; //#23436
        $1.inlen = $1.in.length; //#23437
        $k[$j++] = Infinity; //#23438
        for (var _7N = 0, _7O = 5 - $1.inlen; _7N < _7O; _7N++) { //#23438
            $k[$j++] = 0; //#23438
        } //#23438
        $aload($1.in); //#23438
        $1.in = $a(); //#23438
        $1.out = $a(6); //#23439
        $k[$j++] = Infinity; //#23440
        $aload($geti($1.in, 0, 2)); //#23440
        $1.msbs = $a(); //#23440
        $k[$j++] = Infinity; //#23443
        $aload($1.msbs); //#23442
        var _7W = $k[--$j]; //#23442
        var _7X = $k[--$j]; //#23442
        $k[$j++] = $f(_7W + (_7X * 259)); //#23443
        for (var _7Y = 0, _7Z = 2; _7Y < _7Z; _7Y++) { //#23443
            var _7a = $k[--$j]; //#23443
            $k[$j++] = _7a % 103; //#23443
            $k[$j++] = ~~(_7a / 103); //#23443
        } //#23443
        $1.mscs = $a(); //#23443
        $k[$j++] = Infinity; //#23445
        $aload($geti($1.in, 2, 3)); //#23445
        $1.lsbs = $a(); //#23445
        $k[$j++] = Infinity; //#23448
        $aload($1.lsbs); //#23447
        var _7g = $k[--$j]; //#23447
        var _7h = $k[--$j]; //#23447
        var _7i = $k[--$j]; //#23447
        $k[$j++] = $f(($f(_7g + (_7h * 259))) + (_7i * 67081)); //#23448
        for (var _7j = 0, _7k = 3; _7j < _7k; _7j++) { //#23448
            var _7l = $k[--$j]; //#23448
            $k[$j++] = _7l % 103; //#23448
            $k[$j++] = ~~(_7l / 103); //#23448
        } //#23448
        $1.lscs = $a(); //#23448
        var _7o = $get($1.lscs, 0); //#23450
        var _7q = $get($1.mscs, 0); //#23450
        $put($1.out, 5, ($f(_7o + (_7q * 42))) % 103); //#23451
        var _7t = $get($1.lscs, 1); //#23452
        var _7v = $get($1.mscs, 0); //#23452
        var _7x = $get($1.mscs, 1); //#23452
        $put($1.out, 4, ($f(($f(($f((~~(($f(_7o + (_7q * 42))) / 103)) + _7t)) + (_7v * 68))) + (_7x * 42))) % 103); //#23453
        var _80 = $get($1.lscs, 2); //#23454
        var _82 = $get($1.mscs, 0); //#23454
        var _84 = $get($1.mscs, 1); //#23454
        var _86 = $get($1.mscs, 2); //#23454
        $put($1.out, 3, ($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7o + (_7q * 42))) / 103)) + _7t)) + (_7v * 68))) + (_7x * 42))) / 103)) + _80)) + (_82 * 92))) + (_84 * 68))) + (_86 * 42))) % 103); //#23455
        var _89 = $get($1.lscs, 3); //#23456
        var _8B = $get($1.mscs, 0); //#23456
        var _8D = $get($1.mscs, 1); //#23456
        var _8F = $get($1.mscs, 2); //#23456
        $put($1.out, 2, ($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7o + (_7q * 42))) / 103)) + _7t)) + (_7v * 68))) + (_7x * 42))) / 103)) + _80)) + (_82 * 92))) + (_84 * 68))) + (_86 * 42))) / 103)) + _89)) + (_8B * 15))) + (_8D * 92))) + (_8F * 68))) % 103); //#23457
        var _8I = $get($1.mscs, 1); //#23458
        var _8K = $get($1.mscs, 2); //#23458
        $put($1.out, 1, ($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7o + (_7q * 42))) / 103)) + _7t)) + (_7v * 68))) + (_7x * 42))) / 103)) + _80)) + (_82 * 92))) + (_84 * 68))) + (_86 * 42))) / 103)) + _89)) + (_8B * 15))) + (_8D * 92))) + (_8F * 68))) / 103)) + (_8I * 15))) + (_8K * 92))) % 103); //#23459
        $put($1.out, 0, ($f((~~(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f(($f((~~(($f(($f(($f((~~(($f(_7o + (_7q * 42))) / 103)) + _7t)) + (_7v * 68))) + (_7x * 42))) / 103)) + _80)) + (_82 * 92))) + (_84 * 68))) + (_86 * 42))) / 103)) + _89)) + (_8B * 15))) + (_8D * 92))) + (_8F * 68))) / 103)) + (_8I * 15))) + (_8K * 92))) / 103)) + ($get($1.mscs, 2) * 15))) % 103); //#23461
        $k[$j++] = $geti($1.out, (6 - $1.inlen) - 1, $1.inlen + 1); //#23462
    }; //#23463
    $1.finaliseBIN = function() {
        if ($1.bpos != 0) { //#23469
            $k[$j++] = $geti($1.bvals, 0, $1.bpos); //#23467
            $1.base259to103(); //#23467
            $aload($k[--$j]); //#23467
            $1.bpos = 0; //#23468
        } //#23468
    }; //#23470
    $1.addtobin = function() {
        $put($1.bvals, $1.bpos, $k[--$j]); //#23473
        $1.bpos = $1.bpos + 1; //#23474
        if ($1.bpos == 5) { //#23475
            $1.finaliseBIN(); //#23475
        } //#23475
    }; //#23476
    $1.ECIabc = function() {
        var _8f = $geti($1.msg, $1.i + 1, 6); //#23479
        $k[$j++] = 0; //#23479
        for (var _8g = 0, _8h = _8f.length; _8g < _8h; _8g++) { //#23479
            var _8j = $k[--$j]; //#23479
            $k[$j++] = ($f(_8j + $f($get(_8f, _8g) - 48))) * 10; //#23479
        } //#23479
        var _8l = ~~($k[--$j] / 10); //#23480
        $k[$j++] = _8l; //#23484
        if (_8l >= 40) { //#23484
            var _8n = $f($k[--$j] - 40); //#23482
            var _8o = _8n % 12769; //#23483
            $k[$j++] = (~~(_8n / 12769)) + 40; //#23483
            $k[$j++] = ~~(_8o / 113); //#23483
            $k[$j++] = _8o % 113; //#23483
        } //#23483
    }; //#23485
    $1.ECIbin = function() {
        $k[$j++] = Infinity; //#23496
        var _8r = $geti($1.msg, $1.i + 1, 6); //#23489
        $k[$j++] = 0; //#23489
        for (var _8s = 0, _8t = _8r.length; _8s < _8t; _8s++) { //#23489
            var _8v = $k[--$j]; //#23489
            $k[$j++] = ($f(_8v + $f($get(_8r, _8s) - 48))) * 10; //#23489
        } //#23489
        var _8x = ~~($k[--$j] / 10); //#23490
        $k[$j++] = _8x; //#23498
        if (_8x >= 65536) { //#23496
            var _8y = $k[--$j]; //#23491
            var _8z = _8y % 65536; //#23491
            $k[$j++] = 258; //#23491
            $k[$j++] = ~~(_8y / 65536); //#23491
            $k[$j++] = ~~(_8z / 256); //#23491
            $k[$j++] = _8z % 256; //#23491
        } else { //#23496
            var _90 = $k[--$j]; //#23493
            $k[$j++] = _90; //#23497
            if (_90 >= 256) { //#23496
                var _91 = $k[--$j]; //#23494
                $k[$j++] = 257; //#23494
                $k[$j++] = ~~(_91 / 256); //#23494
                $k[$j++] = _91 % 256; //#23494
            } else { //#23496
                var _92 = $k[--$j]; //#23496
                $k[$j++] = 256; //#23496
                $k[$j++] = _92; //#23496
            } //#23496
        } //#23496
        var _93 = $a(); //#23496
        for (var _94 = 0, _95 = _93.length; _94 < _95; _94++) { //#23501
            $k[$j++] = $get(_93, _94); //#23500
            $1.addtobin(); //#23500
        } //#23500
    }; //#23502
    $1.encC = function() {
        for (var _97 = 0, _98 = 1; _97 < _98; _97++) { //#23625
            if ($1.i == $1.segstart) { //#23538
                for (var _9B = 0, _9C = 1; _9B < _9C; _9B++) { //#23523
                    if ($1.i > $f($1.segend - 7)) { //#23508
                        $k[$j++] = 0; //#23508
                        break; //#23508
                    } //#23508
                    if ($get($1.msg, $1.segstart) != 91) { //#23509
                        $k[$j++] = 0; //#23509
                        break; //#23509
                    } //#23509
                    if ($get($1.msg, $1.segstart + 1) != 41) { //#23510
                        $k[$j++] = 0; //#23510
                        break; //#23510
                    } //#23510
                    if ($get($1.msg, $1.segstart + 2) != 62) { //#23511
                        $k[$j++] = 0; //#23511
                        break; //#23511
                    } //#23511
                    if ($get($1.msg, $1.segstart + 3) != 30) { //#23512
                        $k[$j++] = 0; //#23512
                        break; //#23512
                    } //#23512
                    var _9T = $get($1.msg, $1.segstart + 4); //#23513
                    if ((_9T < 48) || (_9T > 57)) { //#23513
                        $k[$j++] = 0; //#23513
                        break; //#23513
                    } //#23513
                    var _9W = $get($1.msg, $1.segstart + 5); //#23514
                    if ((_9W < 48) || (_9W > 57)) { //#23514
                        $k[$j++] = 0; //#23514
                        break; //#23514
                    } //#23514
                    if ($get($1.msg, $f($1.segend - 1)) != 4) { //#23515
                        $k[$j++] = 0; //#23515
                        break; //#23515
                    } //#23515
                    var _9g = $f(($f($get($1.msg, $1.segstart + 4) - 48) * 10) + $f($get($1.msg, $1.segstart + 5) - 48)); //#23517
                    $k[$j++] = _9g; //#23517
                    if ((_9g != 5) && ((_9g != 6) && (_9g != 12))) { //#23517
                        $j--; //#23517
                        $k[$j++] = $1.mac; //#23517
                        break; //#23517
                    } //#23517
                    if ($get($1.msg, $1.segstart + 6) != 29) { //#23518
                        $j--; //#23518
                        $k[$j++] = 0; //#23518
                        break; //#23518
                    } //#23518
                    if ($get($1.msg, $f($1.segend - 2)) != 30) { //#23519
                        $j--; //#23519
                        $k[$j++] = 0; //#23519
                        break; //#23519
                    } //#23519
                    var _9o = $k[--$j]; //#23520
                    $k[$j++] = _9o; //#23520
                    if (_9o == 5) { //#23520
                        $j--; //#23520
                        $k[$j++] = $1.m05; //#23520
                        break; //#23520
                    } //#23520
                    if ($k[--$j] == 6) { //#23521
                        $k[$j++] = $1.m06; //#23521
                        break; //#23521
                    } //#23521
                    $k[$j++] = $1.m12; //#23522
                    break; //#23522
                } //#23522
                $1.inmac = $k[--$j]; //#23524
                if ($1.inmac != 0) { //#23537
                    $k[$j++] = $a([$get($1.Cvals, $1.lab)]); //#23526
                    $1.addtocws(); //#23526
                    $1.mode = $1.B; //#23527
                    $k[$j++] = $a([$get($1.Bvals, $1.inmac)]); //#23528
                    $1.addtocws(); //#23528
                    if ($1.inmac == $1.mac) { //#23534
                        $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.segstart + 4))]); //#23530
                        $1.addtocws(); //#23530
                        $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.segstart + 5))]); //#23531
                        $1.addtocws(); //#23531
                        $1.i = $1.i + 6; //#23532
                    } else { //#23534
                        $1.i = $1.i + 7; //#23534
                    } //#23534
                    break; //#23536
                } //#23536
            } //#23536
            if ($1.i == $1.segstart) { //#23549
                if ($get($1.nDigits, $1.i) >= 2) { //#23544
                    $k[$j++] = $a([$get($1.Cvals, $1.fn1)]); //#23543
                    $1.addtocws(); //#23543
                } //#23543
                if (($get($1.msg, $1.i) == $1.fn1) && ($get($1.nDigits, $1.i + 1) >= 2)) { //#23548
                    $1.i = $1.i + 1; //#23547
                } //#23547
            } //#23547
            if ($get($1.SeventeenTen, $1.i)) { //#23559
                $k[$j++] = $a([$get($1.Cvals, $1.aim), $f(($f($get($1.msg, $1.i + 2) - 48) * 10) + $f($get($1.msg, $1.i + 3) - 48)), $f(($f($get($1.msg, $1.i + 4) - 48) * 10) + $f($get($1.msg, $1.i + 5) - 48)), $f(($f($get($1.msg, $1.i + 6) - 48) * 10) + $f($get($1.msg, $1.i + 7) - 48))]); //#23556
                $1.addtocws(); //#23556
                $1.i = $1.i + 10; //#23557
                break; //#23558
            } //#23558
            if ($get($1.DatumC, $1.i)) { //#23581
                var _B6 = $get($1.msg, $1.i); //#23561
                if ((_B6 == $1.fn1) || ((_B6 == $1.fn2) || (_B6 == $1.fn3))) { //#23577
                    $k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); //#23562
                    $1.addtocws(); //#23562
                    if ($get($1.ECI, $1.i)) { //#23567
                        $k[$j++] = Infinity; //#23564
                        $1.ECIabc(); //#23564
                        var _BJ = $a(); //#23564
                        $k[$j++] = _BJ; //#23564
                        $1.addtocws(); //#23564
                        $1.i = $1.i + 7; //#23565
                        break; //#23566
                    } //#23566
                    if (($get($1.msg, $1.i) == $1.fn3) && ($1.segstart != $1.i)) { //#23574
                        $1.i = $1.i + 1; //#23569
                        $1.inmac = 0; //#23570
                        $1.segstart = $1.i; //#23571
                        $1.segend = $f($1.i + $get($1.UntilEndSeg, $1.i)); //#23572
                        break; //#23573
                    } //#23573
                    $1.i = $1.i + 1; //#23575
                    break; //#23576
                } //#23576
                $k[$j++] = $a([$f(($f($get($1.msg, $1.i) - 48) * 10) + $f($get($1.msg, $1.i + 1) - 48))]); //#23578
                $1.addtocws(); //#23578
                $1.i = $1.i + 2; //#23579
                break; //#23580
            } //#23580
            if ($get($1.Binary, $1.i)) { //#23595
                if ($get($1.nDigits, $1.i + 1) > 0) { //#23591
                    if ($get($1.msg, $1.i) < 160) { //#23587
                        $k[$j++] = $a([$get($1.Cvals, $1.bsa), $get($1.Avals, $f($get($1.msg, $1.i) - 128))]); //#23585
                        $1.addtocws(); //#23585
                    } else { //#23587
                        $k[$j++] = $a([$get($1.Cvals, $1.bsb), $get($1.Bvals, $f($get($1.msg, $1.i) - 128))]); //#23587
                        $1.addtocws(); //#23587
                    } //#23587
                    $1.i = $1.i + 1; //#23589
                    break; //#23590
                } //#23590
                $k[$j++] = $a([$get($1.Cvals, $1.bin)]); //#23592
                $1.addtocws(); //#23592
                $1.mode = $1.BIN; //#23593
                break; //#23594
            } //#23594
            $1.m = $get($1.AheadA, $1.i); //#23596
            $1.n = $get($1.AheadB, $1.i); //#23596
            if ($gt($1.m, $1.n)) { //#23601
                $k[$j++] = $a([$get($1.Cvals, $1.laa)]); //#23598
                $1.addtocws(); //#23598
                $1.mode = $1.A; //#23599
                break; //#23600
            } //#23600
            if ($1.i == $1.segstart) { //#23608
                var _CU = $get($1.msg, $1.i); //#23603
                if ((_CU == 9) || ((_CU == 28) || ((_CU == 29) || (_CU == 30)))) { //#23607
                    $k[$j++] = $a([$get($1.Cvals, $1.laa)]); //#23604
                    $1.addtocws(); //#23604
                    $1.mode = $1.A; //#23605
                    break; //#23606
                } //#23606
            } //#23606
            if ($1.n > 4) { //#23613
                $k[$j++] = $a([$get($1.Cvals, $1.lab)]); //#23610
                $1.addtocws(); //#23610
                $1.mode = $1.B; //#23611
                break; //#23612
            } //#23612
            $k[$j++] = $a([$get($1.Cvals, $get($a([$1.sfb, $1.sb2, $1.sb3, $1.sb4]), $f($1.n - 1)))]); //#23614
            $1.addtocws(); //#23614
            for (var _Cr = 0, _Cs = $1.n; _Cr < _Cs; _Cr++) { //#23623
                if ($get($1.msg, $1.i) == 13) { //#23621
                    $k[$j++] = $a([$get($1.Bvals, $1.crl)]); //#23617
                    $1.addtocws(); //#23617
                    $1.i = $1.i + 2; //#23618
                } else { //#23621
                    $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); //#23620
                    $1.addtocws(); //#23620
                    $1.i = $1.i + 1; //#23621
                } //#23621
            } //#23621
            break; //#23624
        } //#23624
    }; //#23626
    $1.encB = function() {
        for (var _D8 = 0, _D9 = 1; _D8 < _D9; _D8++) { //#23701
            $1.n = $get($1.TryC, $1.i); //#23630
            if ($1.n >= 2) { //#23648
                if ($1.n > 4) { //#23636
                    $k[$j++] = $a([$get($1.Bvals, $1.lac)]); //#23633
                    $1.addtocws(); //#23633
                    $1.mode = $1.C; //#23634
                    break; //#23635
                } //#23635
                $k[$j++] = $a([$get($1.Bvals, $get($a([$1.sfc, $1.sc2, $1.sc3, $1.sc4]), $f($1.n - 1)))]); //#23637
                $1.addtocws(); //#23637
                for (var _DV = 0, _DW = $1.n; _DV < _DW; _DV++) { //#23646
                    if ($get($1.msg, $1.i) < 0) { //#23644
                        $k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); //#23640
                        $1.addtocws(); //#23640
                        $1.i = $1.i + 1; //#23641
                    } else { //#23644
                        $k[$j++] = $a([$f(($f($get($1.msg, $1.i) - 48) * 10) + $f($get($1.msg, $1.i + 1) - 48))]); //#23643
                        $1.addtocws(); //#23643
                        $1.i = $1.i + 2; //#23644
                    } //#23644
                } //#23644
                break; //#23647
            } //#23647
            if ($get($1.DatumB, $1.i)) { //#23678
                var _Du = $get($1.msg, $1.i); //#23650
                if ((_Du == $1.fn1) || ((_Du == $1.fn2) || (_Du == $1.fn3))) { //#23667
                    $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); //#23651
                    $1.addtocws(); //#23651
                    if ($get($1.ECI, $1.i)) { //#23656
                        $k[$j++] = Infinity; //#23653
                        $1.ECIabc(); //#23653
                        var _E7 = $a(); //#23653
                        $k[$j++] = _E7; //#23653
                        $1.addtocws(); //#23653
                        $1.i = $1.i + 7; //#23654
                        break; //#23655
                    } //#23655
                    if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //#23664
                        $1.i = $1.i + 1; //#23658
                        $1.mode = $1.C; //#23659
                        $1.inmac = 0; //#23660
                        $1.segstart = $1.i; //#23661
                        $1.segend = $f($1.i + $get($1.UntilEndSeg, $1.i)); //#23662
                        break; //#23663
                    } //#23663
                    $1.i = $1.i + 1; //#23665
                    break; //#23666
                } //#23666
                if (($get($1.msg, $1.i) == 13) && ($1.i < ($1.msglen - 1))) { //#23674
                    if ($get($1.msg, $1.i + 1) == 10) { //#23673
                        $k[$j++] = $a([$get($1.Bvals, $1.crl)]); //#23670
                        $1.addtocws(); //#23670
                        $1.i = $1.i + 2; //#23671
                        break; //#23672
                    } //#23672
                } //#23672
                $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); //#23675
                $1.addtocws(); //#23675
                $1.i = $1.i + 1; //#23676
                break; //#23677
            } //#23677
            if ($get($1.Binary, $1.i)) { //#23692
                if ($get($1.DatumB, $1.i + 1)) { //#23688
                    if ($get($1.msg, $1.i) < 160) { //#23684
                        $k[$j++] = $a([$get($1.Bvals, $1.bsa), $get($1.Avals, $f($get($1.msg, $1.i) - 128))]); //#23682
                        $1.addtocws(); //#23682
                    } else { //#23684
                        $k[$j++] = $a([$get($1.Bvals, $1.bsb), $get($1.Bvals, $f($get($1.msg, $1.i) - 128))]); //#23684
                        $1.addtocws(); //#23684
                    } //#23684
                    $1.i = $1.i + 1; //#23686
                    break; //#23687
                } //#23687
                $k[$j++] = $a([$get($1.Bvals, $1.bin)]); //#23689
                $1.addtocws(); //#23689
                $1.mode = $1.BIN; //#23690
                break; //#23691
            } //#23691
            if ($get($1.AheadA, $1.i) == 1) { //#23697
                $k[$j++] = $a([$get($1.Bvals, $1.sfa), $get($1.Avals, $get($1.msg, $1.i))]); //#23694
                $1.addtocws(); //#23694
                $1.i = $1.i + 1; //#23695
                break; //#23696
            } //#23696
            $k[$j++] = $a([$get($1.Bvals, $1.laa)]); //#23698
            $1.addtocws(); //#23698
            $1.mode = $1.A; //#23699
            break; //#23700
        } //#23700
    }; //#23702
    $1.encA = function() {
        for (var _FW = 0, _FX = 1; _FW < _FX; _FW++) { //#23779
            $1.n = $get($1.TryC, $1.i); //#23706
            if ($1.n >= 2) { //#23724
                if ($1.n > 4) { //#23712
                    $k[$j++] = $a([$get($1.Avals, $1.lac)]); //#23709
                    $1.addtocws(); //#23709
                    $1.mode = $1.C; //#23710
                    break; //#23711
                } //#23711
                $k[$j++] = $a([$get($1.Avals, $get($a([$1.sfc, $1.sc2, $1.sc3, $1.sc4]), $f($1.n - 1)))]); //#23713
                $1.addtocws(); //#23713
                for (var _Ft = 0, _Fu = $1.n; _Ft < _Fu; _Ft++) { //#23722
                    if ($get($1.msg, $1.i) < 0) { //#23720
                        $k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); //#23716
                        $1.addtocws(); //#23716
                        $1.i = $1.i + 1; //#23717
                    } else { //#23720
                        $k[$j++] = $a([$f(($f($get($1.msg, $1.i) - 48) * 10) + $f($get($1.msg, $1.i + 1) - 48))]); //#23719
                        $1.addtocws(); //#23719
                        $1.i = $1.i + 2; //#23720
                    } //#23720
                } //#23720
                break; //#23723
            } //#23723
            if ($get($1.DatumA, $1.i)) { //#23747
                var _GI = $get($1.msg, $1.i); //#23726
                if ((_GI == $1.fn1) || ((_GI == $1.fn2) || (_GI == $1.fn3))) { //#23743
                    $k[$j++] = $a([$get($1.Avals, $get($1.msg, $1.i))]); //#23727
                    $1.addtocws(); //#23727
                    if ($get($1.ECI, $1.i)) { //#23732
                        $k[$j++] = Infinity; //#23729
                        $1.ECIabc(); //#23729
                        var _GV = $a(); //#23729
                        $k[$j++] = _GV; //#23729
                        $1.addtocws(); //#23729
                        $1.i = $1.i + 7; //#23730
                        break; //#23731
                    } //#23731
                    if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //#23740
                        $1.i = $1.i + 1; //#23734
                        $1.mode = $1.C; //#23735
                        $1.inmac = 0; //#23736
                        $1.segstart = $1.i; //#23737
                        $1.segend = $f($1.i + $get($1.UntilEndSeg, $1.i)); //#23738
                        break; //#23739
                    } //#23739
                    $1.i = $1.i + 1; //#23741
                    break; //#23742
                } //#23742
                $k[$j++] = $a([$get($1.Avals, $get($1.msg, $1.i))]); //#23744
                $1.addtocws(); //#23744
                $1.i = $1.i + 1; //#23745
                break; //#23746
            } //#23746
            if ($get($1.Binary, $1.i)) { //#23761
                if ($get($1.DatumA, $1.i + 1)) { //#23757
                    if ($get($1.msg, $1.i) < 160) { //#23753
                        $k[$j++] = $a([$get($1.Avals, $1.bsa), $get($1.Avals, $f($get($1.msg, $1.i) - 128))]); //#23751
                        $1.addtocws(); //#23751
                    } else { //#23753
                        $k[$j++] = $a([$get($1.Avals, $1.bsb), $get($1.Bvals, $f($get($1.msg, $1.i) - 128))]); //#23753
                        $1.addtocws(); //#23753
                    } //#23753
                    $1.i = $1.i + 1; //#23755
                    break; //#23756
                } //#23756
                $k[$j++] = $a([$get($1.Avals, $1.bin)]); //#23758
                $1.addtocws(); //#23758
                $1.mode = $1.BIN; //#23759
                break; //#23760
            } //#23760
            $1.n = $get($1.AheadB, $1.i); //#23762
            if ($1.n > 6) { //#23767
                $k[$j++] = $a([$get($1.Avals, $1.lab)]); //#23764
                $1.addtocws(); //#23764
                $1.mode = $1.B; //#23765
                break; //#23766
            } //#23766
            $k[$j++] = $a([$get($1.Avals, $get($a([$1.sfb, $1.sb2, $1.sb3, $1.sb4, $1.sb5, $1.sb6]), $f($1.n - 1)))]); //#23768
            $1.addtocws(); //#23768
            for (var _Hl = 0, _Hm = $1.n; _Hl < _Hm; _Hl++) { //#23777
                if ($get($1.msg, $1.i) == 13) { //#23775
                    $k[$j++] = $a([$get($1.Bvals, $1.crl)]); //#23771
                    $1.addtocws(); //#23771
                    $1.i = $1.i + 2; //#23772
                } else { //#23775
                    $k[$j++] = $a([$get($1.Bvals, $get($1.msg, $1.i))]); //#23774
                    $1.addtocws(); //#23774
                    $1.i = $1.i + 1; //#23775
                } //#23775
            } //#23775
            break; //#23778
        } //#23778
    }; //#23780
    $1.encBIN = function() {
        for (var _I2 = 0, _I3 = 1; _I2 < _I3; _I2++) { //#23841
            $1.n = $get($1.TryC, $1.i); //#23784
            if ($1.n >= 2) { //#23803
                $k[$j++] = Infinity; //#23786
                $1.finaliseBIN(); //#23786
                var _I8 = $a(); //#23786
                $k[$j++] = _I8; //#23786
                $1.addtocws(); //#23786
                if ($1.n > 7) { //#23791
                    $k[$j++] = $a([$get($1.BINvals, $1.tmc)]); //#23788
                    $1.addtocws(); //#23788
                    $1.mode = $1.C; //#23789
                    break; //#23790
                } //#23790
                $k[$j++] = $a([$get($1.BINvals, $get($a([$1.sc2, $1.sc3, $1.sc4, $1.sc5, $1.sc6, $1.sc7]), $f($1.n - 2)))]); //#23792
                $1.addtocws(); //#23792
                for (var _IS = 0, _IT = $1.n; _IS < _IT; _IS++) { //#23801
                    if ($get($1.msg, $1.i) < 0) { //#23799
                        $k[$j++] = $a([$get($1.Cvals, $get($1.msg, $1.i))]); //#23795
                        $1.addtocws(); //#23795
                        $1.i = $1.i + 1; //#23796
                    } else { //#23799
                        $k[$j++] = $a([$f(($f($get($1.msg, $1.i) - 48) * 10) + $f($get($1.msg, $1.i + 1) - 48))]); //#23798
                        $1.addtocws(); //#23798
                        $1.i = $1.i + 2; //#23799
                    } //#23799
                } //#23799
                break; //#23802
            } //#23802
            if (($get($1.ECI, $1.i) && $get($1.Binary, $1.i + 7))) { //#23809
                $k[$j++] = Infinity; //#23805
                $1.ECIbin(); //#23805
                var _Is = $a(); //#23805
                $k[$j++] = _Is; //#23805
                $1.addtocws(); //#23805
                $1.i = $1.i + 7; //#23806
                if ($1.i == $1.msglen) { //#23807
                    $k[$j++] = Infinity; //#23807
                    $1.finaliseBIN(); //#23807
                    var _Iw = $a(); //#23807
                    $k[$j++] = _Iw; //#23807
                    $1.addtocws(); //#23807
                } //#23807
                break; //#23808
            } //#23808
            if ($get($1.msg, $1.i) >= 0) { //#23819
                if (((($get($1.Binary, $1.i) || $get($1.Binary, $1.i + 1)) || $get($1.Binary, $1.i + 2)) || $get($1.Binary, $1.i + 3)) || ($get($1.ECI, $1.i + 1) && $get($1.Binary, $1.i + 8))) { //#23818
                    $k[$j++] = Infinity; //#23814
                    $k[$j++] = $get($1.msg, $1.i); //#23814
                    $1.addtobin(); //#23814
                    var _JL = $a(); //#23814
                    $k[$j++] = _JL; //#23814
                    $1.addtocws(); //#23814
                    $1.i = $1.i + 1; //#23815
                    if ($1.i == $1.msglen) { //#23816
                        $k[$j++] = Infinity; //#23816
                        $1.finaliseBIN(); //#23816
                        var _JP = $a(); //#23816
                        $k[$j++] = _JP; //#23816
                        $1.addtocws(); //#23816
                    } //#23816
                    break; //#23817
                } //#23817
            } //#23817
            $k[$j++] = Infinity; //#23820
            $1.finaliseBIN(); //#23820
            var _JQ = $a(); //#23820
            $k[$j++] = _JQ; //#23820
            $1.addtocws(); //#23820
            if ($1.i != ($1.msglen - 1)) { //#23839
                if (($get($1.msg, $1.i) == $1.fn3) && ($1.i != $1.segstart)) { //#23830
                    $k[$j++] = $a([$get($1.BINvals, $1.tms)]); //#23823
                    $1.addtocws(); //#23823
                    $1.i = $1.i + 1; //#23824
                    $1.mode = $1.C; //#23825
                    $1.inmac = 0; //#23826
                    $1.segstart = $1.i; //#23827
                    $1.segend = $f($1.i + $get($1.UntilEndSeg, $1.i)); //#23828
                    break; //#23829
                } //#23829
                if ($gt($get($1.AheadA, $1.i), $get($1.AheadB, $1.i))) { //#23836
                    $k[$j++] = $a([$get($1.BINvals, $1.tma)]); //#23832
                    $1.addtocws(); //#23832
                    $1.mode = $1.A; //#23833
                } else { //#23836
                    $k[$j++] = $a([$get($1.BINvals, $1.tmb)]); //#23835
                    $1.addtocws(); //#23835
                    $1.mode = $1.B; //#23836
                } //#23836
                break; //#23838
            } //#23838
            break; //#23840
        } //#23840
    }; //#23842
    $1.cws = $a(($1.msglen * 2) + 1); //#23844
    $1.mode = $1.C; //#23845
    $1.bvals = $a(5); //#23846
    $1.bpos = 0; //#23846
    $1.inmac = 0; //#23847
    $1.segstart = 0; //#23847
    $1.segend = $get($1.UntilEndSeg, 0); //#23847
    $1.i = 0; //#23848
    $1.j = 0; //#23848
    for (;;) { //#23861
        if ($1.i >= $1.msglen) { //#23849
            break; //#23849
        } //#23849
        if ($1.inmac != 0) { //#23859
            if (($1.inmac != $1.mac) && ($1.i == $f($1.segend - 2))) { //#23854
                $1.i = $1.i + 2; //#23852
                if ($1.i >= $1.msglen) { //#23853
                    break; //#23853
                } //#23853
            } //#23853
            if (($1.inmac == $1.mac) && ($1.i == $f($1.segend - 1))) { //#23858
                $1.i = $1.i + 1; //#23856
                if ($1.i >= $1.msglen) { //#23857
                    break; //#23857
                } //#23857
            } //#23857
        } //#23857
        if ($1[$get($a(['encA', 'encB', 'encC', 'encBIN']), $1.mode)]() === true) {
            break;
        } //#23860
    } //#23860
    $1.cws = $geti($1.cws, 0, $1.j); //#23862
    $1.nd = $1.cws.length; //#23865
    $1.minarea = (((($1.nd + 3) + (~~($1.nd / 2))) * 9) + 2) * 2; //#23866
    if ($1.ratio != -1) { //#23894
        $1.hgt = Math.sqrt($1.minarea / $1.ratio); //#23868
        $1.wid = Math.sqrt($1.minarea * $1.ratio); //#23869
        $1.h = ~~$1.hgt; //#23870
        $1.w = ~~$1.wid; //#23870
        if ((($1.h + $1.w) % 2) == 1) { //#23884
            if (($1.h * $1.w) < $1.minarea) { //#23872
                $1.h = $1.h + 1; //#23872
                $1.w = $1.w + 1; //#23872
            } //#23872
        } else { //#23884
            if (($1.hgt * $1.w) < ($1.wid * $1.h)) { //#23884
                $1.w = $1.w + 1; //#23875
                if (($1.h * $1.w) < $1.minarea) { //#23879
                    $1.w = $1.w - 1; //#23877
                    $1.h = $1.h + 1; //#23877
                    if (($1.h * $1.w) < $1.minarea) { //#23878
                        $1.w = $1.w + 2; //#23878
                    } //#23878
                } //#23878
            } else { //#23884
                $1.h = $1.h + 1; //#23881
                if (($1.h * $1.w) < $1.minarea) { //#23885
                    $1.h = $1.h - 1; //#23883
                    $1.w = $1.w + 1; //#23883
                    if (($1.h * $1.w) < $1.minarea) { //#23884
                        $1.h = $1.h + 2; //#23884
                    } //#23884
                } //#23884
            } //#23884
        } //#23884
        $1.rows = $1.h; //#23888
        $1.columns = $1.w; //#23888
    } else { //#23894
        if ($1.columns == -1) { //#23892
            var _LF = ~~((($1.minarea + $1.rows) - 1) / $1.rows); //#23891
            $k[$j++] = 'columns'; //#23891
            $k[$j++] = _LF; //#23891
            if (((_LF + $1.rows) % 2) == 0) { //#23891
                var _LH = $k[--$j]; //#23891
                $k[$j++] = $f(_LH + 1); //#23891
            } //#23891
            var _LI = $k[--$j]; //#23891
            $1[$k[--$j]] = _LI; //#23891
        } //#23891
        if ($1.rows == -1) { //#23895
            var _LO = ~~((($1.minarea + $1.columns) - 1) / $1.columns); //#23894
            $k[$j++] = 'rows'; //#23894
            $k[$j++] = _LO; //#23894
            if (((_LO + $1.columns) % 2) == 0) { //#23894
                var _LQ = $k[--$j]; //#23894
                $k[$j++] = $f(_LQ + 1); //#23894
            } //#23894
            var _LR = $k[--$j]; //#23894
            $1[$k[--$j]] = _LR; //#23894
        } //#23894
    } //#23894
    $1.ndots = ~~(($1.rows * $1.columns) / 2); //#23899
    for (;;) { //#23903
        var _LW = $1.nd + 1; //#23901
        if ((((_LW + ((~~(_LW / 2)) + 3)) * 9) + 2) > $1.ndots) { //#23901
            break; //#23901
        } //#23901
        $1.nd = $1.nd + 1; //#23902
    } //#23902
    $1.nc = (~~($1.nd / 2)) + 3; //#23904
    $1.nw = $1.nd + $1.nc; //#23905
    $1.rembits = $1.ndots - (($1.nw * 9) + 2); //#23906
    if ($1.nd > $1.cws.length) { //#23913
        $k[$j++] = Infinity; //#23911
        $aload($1.cws); //#23909
        var _Lj = ($1.mode == $1.BIN) ? 109 : 106; //#23910
        $k[$j++] = _Lj; //#23911
        for (var _Lm = 0, _Ln = ($1.nd - $1.cws.length) - 1; _Lm < _Ln; _Lm++) { //#23911
            $k[$j++] = 106; //#23911
        } //#23911
        $1.cws = $a(); //#23911
    } //#23912
    var _Lq = $get($1.options, 'debugcws') !== undefined; //#23915
    if (_Lq) { //#23915
        $k[$j++] = 'bwipp.debugcws'; //#23915
        $k[$j++] = $1.cws; //#23915
        bwipp_raiseerror(); //#23915
    } //#23915
    $1.encs = $a
    if (($1.rows % 2) == 0) { //#23962
        $1.sixedges = $a([$a([$1.columns - 1, $1.rows - 2]), $a([0, $1.rows - 2]), $a([$1.columns - 2, $1.rows - 1]), $a([1, $1.rows - 1]), $a([$1.columns - 1, 0]), $a([0, 0])]); //#23953
    } else { //#23962
        $1.sixedges = $a([$a([$1.columns - 2, 0]), $a([$1.columns - 2, $1.rows - 1]), $a([$1.columns - 1, 1]), $a([$1.columns - 1, $1.rows - 2]), $a([0, 0]), $a([0, $1.rows - 1])]); //#23962
    } //#23962
    $1.dmv = function() {
        var _MN = $k[--$j]; //#23965
        var _MO = $k[--$j]; //#23965
        $k[$j++] = $f(_MO + (_MN * $1.columns)); //#23965
    }; //#23965
    $1.outline = $a($1.rows * $1.columns); //#23968
    for (var _MU = 0, _MT = $1.rows - 1; _MU <= _MT; _MU += 1) { //#23975
        $1.y = _MU; //#23970
        for (var _MX = 0, _MW = $1.columns - 1; _MX <= _MW; _MX += 1) { //#23974
            $1.x = _MX; //#23972
            $k[$j++] = $1.outline; //#23973
            $k[$j++] = $1.x; //#23973
            $k[$j++] = $1.y; //#23973
            $1.dmv(); //#23973
            var _Md = $k[--$j]; //#23973
            $put($k[--$j], _Md, (($1.x + $1.y) % 2) - 1); //#23973
        } //#23973
    } //#23973
    var _Mf = $1.sixedges; //#23976
    for (var _Mg = 0, _Mh = _Mf.length; _Mg < _Mh; _Mg++) { //#23978
        $k[$j++] = $1.outline; //#23977
        $aload($get(_Mf, _Mg)); //#23977
        $1.dmv(); //#23977
        var _Mk = $k[--$j]; //#23977
        $put($k[--$j], _Mk, 1); //#23977
    } //#23977
    $1.clearcol = function() {
        $1.x = $k[--$j]; //#23981
        $k[$j++] = true; //#23985
        for (var _Mq = $1.x & 1, _Mp = $1.rows - 1; _Mq <= _Mp; _Mq += 2) { //#23985
            $k[$j++] = $1.x; //#23984
            $k[$j++] = _Mq; //#23984
            $1.dmv(); //#23984
            if ($get($1.sym, $k[--$j]) == 1) { //#23984
                $j--; //#23984
                $k[$j++] = false; //#23984
                break; //#23984
            } //#23984
        } //#23984
    }; //#23986
    $1.clearrow = function() {
        $1.y = $k[--$j]; //#23989
        $k[$j++] = true; //#23993
        for (var _Mz = $1.y & 1, _My = $1.columns - 1; _Mz <= _My; _Mz += 2) { //#23993
            $k[$j++] = _Mz; //#23992
            $k[$j++] = $1.y; //#23992
            $1.dmv(); //#23992
            if ($get($1.sym, $k[--$j]) == 1) { //#23992
                $j--; //#23992
                $k[$j++] = false; //#23992
                break; //#23992
            } //#23992
        } //#23992
    }; //#23994
    $1.evalsymbol = function() {
        $1.sym = $k[--$j]; //#23998
        $1.worst = 9999999; //#24001
        var _N9 = $a([$a(['x', 0]), $a(['x', 1]), $a(['y', 0]), $a(['y', 1])]); //#24002
        for (var _NA = 0, _NB = _N9.length; _NA < _NB; _NA++) { //#24020
            $aload($get(_N9, _NA)); //#24003
            $1.fl = $k[--$j]; //#24003
            $1.dir = $k[--$j]; //#24003
            $1.sum = 0; //#24004
            $1.first = -1; //#24004
            $1.last = -1; //#24004
            var _NG = $eq($1.dir, 'x') ? $1.columns : $1.rows; //#24005
            for (var _NI = 0, _NH = _NG - 1; _NI <= _NH; _NI += 1) { //#24016
                $1[$1.dir] = _NI; //#24006
                var _NK = $1.sym; //#24007
                var _NM = $1[$1.dir]; //#24008
                var _NO = $eq($1.dir, 'x') ? $1.rows : $1.columns; //#24009
                var _NR = (_NO - 1) * $1.fl; //#24010
                if ($eq($1.dir, 'y')) { //#24010
                    var _ = _NR; //#24010
                    _NR = _NM; //#24010
                    _NM = _; //#24010
                } //#24010
                $k[$j++] = _NK; //#24011
                $k[$j++] = _NM; //#24011
                $k[$j++] = _NR; //#24011
                $1.dmv(); //#24011
                var _NS = $k[--$j]; //#24011
                if ($get($k[--$j], _NS) == 1) { //#24015
                    if ($1.first == -1) { //#24012
                        $1.first = $1[$1.dir]; //#24012
                    } //#24012
                    $1.last = $1[$1.dir]; //#24013
                    $1.sum = $1.sum + 1; //#24014
                } //#24014
            } //#24014
            var _Nf = $eq($1.dir, 'x') ? $1.rows : $1.columns; //#24018
            var _Ng = ($f($f($1.sum + $1.last) - $1.first)) * _Nf; //#24019
            $k[$j++] = _Ng; //#24019
            if (_Ng < $1.worst) { //#24019
                $1.worst = $k[--$j]; //#24019
            } else { //#24019
                $j--; //#24019
            } //#24019
        } //#24019
        $1.pen = 0; //#24022
        if ((($1.rows % 2) == 1) || ($1.rows <= 12)) { //#24040
            $1.sum = 0; //#24028
            $1.p = 0; //#24028
            for (var _Nn = 1, _Nm = $1.columns - 2; _Nn <= _Nm; _Nn += 1) { //#24038
                $k[$j++] = _Nn; //#24030
                $1.clearcol(); //#24030
                if ($k[--$j]) { //#24036
                    $1.sum = $1.sum + 1; //#24031
                    $k[$j++] = 'p'; //#24032
                    if ($1.sum == 1) { //#24032
                        $k[$j++] = $1.rows; //#24032
                    } else { //#24032
                        $k[$j++] = $1.p * $1.rows; //#24032
                    } //#24032
                    var _Nu = $k[--$j]; //#24032
                    $1[$k[--$j]] = _Nu; //#24032
                } else { //#24036
                    $1.sum = 0; //#24034
                    $1.pen = $1.pen + $1.p; //#24035
                    $1.p = 0; //#24036
                } //#24036
            } //#24036
            $1.pen = $1.pen + $1.p; //#24039
        } //#24039
        if ((($1.rows % 2) == 0) || ($1.columns <= 12)) { //#24058
            $1.sum = 0; //#24046
            $1.p = 0; //#24046
            for (var _O4 = 1, _O3 = $1.rows - 2; _O4 <= _O3; _O4 += 1) { //#24056
                $k[$j++] = _O4; //#24048
                $1.clearrow(); //#24048
                if ($k[--$j]) { //#24054
                    $1.sum = $1.sum + 1; //#24049
                    $k[$j++] = 'p'; //#24050
                    if ($1.sum == 1) { //#24050
                        $k[$j++] = $1.columns; //#24050
                    } else { //#24050
                        $k[$j++] = $1.p * $1.columns; //#24050
                    } //#24050
                    var _OB = $k[--$j]; //#24050
                    $1[$k[--$j]] = _OB; //#24050
                } else { //#24054
                    $1.sum = 0; //#24052
                    $1.pen = $1.pen + $1.p; //#24053
                    $1.p = 0; //#24054
                } //#24054
            } //#24054
            $1.pen = $1.pen + $1.p; //#24057
        } //#24057
        $k[$j++] = Infinity; //#24068
        for (var _OI = 0, _OJ = ($1.columns + 4) * 2; _OI < _OJ; _OI++) { //#24062
            $k[$j++] = 0; //#24062
        } //#24062
        for (var _ON = 0, _OO = $1.columns, _OM = $1.sym.length - 1; _OO < 0 ? _ON >= _OM : _ON <= _OM; _ON += _OO) { //#24067
            $k[$j++] = 0; //#24065
            $k[$j++] = 0; //#24065
            $aload($geti($1.sym, _ON, $1.columns)); //#24065
            $k[$j++] = 0; //#24066
            $k[$j++] = 0; //#24066
        } //#24066
        for (var _OT = 0, _OU = ($1.columns + 4) * 2; _OT < _OU; _OT++) { //#24068
            $k[$j++] = 0; //#24068
        } //#24068
        $1.symp = $a(); //#24068
        $1.columns = $1.columns + 4; //#24072
        $1.rows = $1.rows + 4; //#24073
        $1.sum = 0; //#24074
        for (var _Oa = 2, _OZ = $1.rows - 3; _Oa <= _OZ; _Oa += 1) { //#24092
            $1.y = _Oa; //#24076
            for (var _Oe = ($1.y & 1) + 2, _Od = $1.columns - 3; _Oe <= _Od; _Oe += 2) { //#24091
                $1.x = _Oe; //#24078
                for (var _Of = 0, _Og = 1; _Of < _Og; _Of++) { //#24090
                    $k[$j++] = $1.symp; //#24080
                    $k[$j++] = $1.x - 1; //#24080
                    $k[$j++] = $1.y - 1; //#24080
                    $1.dmv(); //#24080
                    var _Ok = $k[--$j]; //#24080
                    if ($get($k[--$j], _Ok) == 1) { //#24080
                        break; //#24080
                    } //#24080
                    $k[$j++] = $1.symp; //#24081
                    $k[$j++] = $1.x + 1; //#24081
                    $k[$j++] = $1.y - 1; //#24081
                    $1.dmv(); //#24081
                    var _Oq = $k[--$j]; //#24081
                    if ($get($k[--$j], _Oq) == 1) { //#24081
                        break; //#24081
                    } //#24081
                    $k[$j++] = $1.symp; //#24082
                    $k[$j++] = $1.x - 1; //#24082
                    $k[$j++] = $1.y + 1; //#24082
                    $1.dmv(); //#24082
                    var _Ow = $k[--$j]; //#24082
                    if ($get($k[--$j], _Ow) == 1) { //#24082
                        break; //#24082
                    } //#24082
                    $k[$j++] = $1.symp; //#24083
                    $k[$j++] = $1.x + 1; //#24083
                    $k[$j++] = $1.y + 1; //#24083
                    $1.dmv(); //#24083
                    var _P2 = $k[--$j]; //#24083
                    if ($get($k[--$j], _P2) == 1) { //#24083
                        break; //#24083
                    } //#24083
                    $k[$j++] = $1.symp; //#24084
                    $k[$j++] = $1.x; //#24084
                    $k[$j++] = $1.y; //#24084
                    $1.dmv(); //#24084
                    var _P8 = $k[--$j]; //#24084
                    if ($get($k[--$j], _P8) == 0) { //#24084
                        $1.sum = $1.sum + 1; //#24084
                        break; //#24084
                    } //#24084
                    $k[$j++] = $1.symp; //#24085
                    $k[$j++] = $1.x - 2; //#24085
                    $k[$j++] = $1.y; //#24085
                    $1.dmv(); //#24085
                    var _PF = $k[--$j]; //#24085
                    if ($get($k[--$j], _PF) == 1) { //#24085
                        break; //#24085
                    } //#24085
                    $k[$j++] = $1.symp; //#24086
                    $k[$j++] = $1.x; //#24086
                    $k[$j++] = $1.y - 2; //#24086
                    $1.dmv(); //#24086
                    var _PL = $k[--$j]; //#24086
                    if ($get($k[--$j], _PL) == 1) { //#24086
                        break; //#24086
                    } //#24086
                    $k[$j++] = $1.symp; //#24087
                    $k[$j++] = $1.x + 2; //#24087
                    $k[$j++] = $1.y; //#24087
                    $1.dmv(); //#24087
                    var _PR = $k[--$j]; //#24087
                    if ($get($k[--$j], _PR) == 1) { //#24087
                        break; //#24087
                    } //#24087
                    $k[$j++] = $1.symp; //#24088
                    $k[$j++] = $1.x; //#24088
                    $k[$j++] = $1.y + 2; //#24088
                    $1.dmv(); //#24088
                    var _PX = $k[--$j]; //#24088
                    if ($get($k[--$j], _PX) == 1) { //#24088
                        break; //#24088
                    } //#24088
                    $1.sum = $1.sum + 1; //#24089
                } //#24089
            } //#24089
        } //#24089
        $1.columns = $1.columns - 4; //#24093
        $1.rows = $1.rows - 4; //#24094
        if ($1.worst == 0) { //#24099
            $k[$j++] = -99999; //#24097
        } else { //#24099
            $k[$j++] = $f(($f($1.worst - ($1.sum * $1.sum))) - $1.pen); //#24099
        } //#24099
    }; //#24102
    $k[$j++] = Infinity; //#24105
    $k[$j++] = 1; //#24105
    for (var _Pi = 0, _Pj = 112; _Pi < _Pj; _Pi++) { //#24105
        var _Pk = $k[--$j]; //#24105
        $k[$j++] = _Pk; //#24105
        $k[$j++] = (_Pk * 3) % 113; //#24105
    } //#24105
    $1.rsalog = $a(); //#24105
    $1.step = (~~($1.nw / 112)) + 1; //#24106
    $1.offset = function() {
        var _Po = $k[--$j]; //#24107
        $k[$j++] = $f((_Po * $1.step) + $1.start); //#24107
    }; //#24107
    $1.bestscore = -99999999; //#24115
    $k[$j++] = 'masks'; //#24120
    if ($1.mask != -1) { //#24119
        $k[$j++] = $a([$1.mask]); //#24117
    } else { //#24119
        if ($1.fast) { //#24119
            $k[$j++] = $a([3, 2, 1, 0]); //#24119
        } else { //#24119
            $k[$j++] = $a([0, 1, 2, 3]); //#24119
        } //#24119
    } //#24119
    var _Pw = $k[--$j]; //#24120
    $1[$k[--$j]] = _Pw; //#24120
    $1.litmasks = $a(4); //#24121
    $forall($1.masks, function() { //#24223
        $1.mask = $k[--$j]; //#24124
        $k[$j++] = Infinity; //#24130
        var _Q5 = $1.cws; //#24129
        $k[$j++] = $1.mask; //#24129
        $k[$j++] = $get($a([0, 3, 7, 17]), $1.mask); //#24129
        $k[$j++] = 0; //#24129
        for (var _Q6 = 0, _Q7 = _Q5.length; _Q6 < _Q7; _Q6++) { //#24129
            var _Q9 = $k[--$j]; //#24129
            var _QA = $k[--$j]; //#24129
            $k[$j++] = $f($get(_Q5, _Q6) + _Q9) % 113; //#24129
            $k[$j++] = _QA; //#24129
            $k[$j++] = $f(_Q9 + _QA); //#24129
        } //#24129
        $j -= 2; //#24129
        for (var _QC = 0, _QD = $1.nc; _QC < _QD; _QC++) { //#24130
            $k[$j++] = 0; //#24130
        } //#24130
        $1.rscws = $a(); //#24130
        for (var _QH = 0, _QG = $1.step - 1; _QH <= _QG; _QH += 1) { //#24154
            $1.start = _QH; //#24133
            $1.ND = ~~((((($1.nd + 1) - $1.start) + $1.step) - 1) / $1.step); //#24134
            $1.NW = ~~((((($1.nw + 1) - $1.start) + $1.step) - 1) / $1.step); //#24135
            $1.NC = $1.NW - $1.ND; //#24136
            $k[$j++] = Infinity; //#24137
            $k[$j++] = 1; //#24137
            for (var _QT = 0, _QU = $1.NC; _QT < _QU; _QT++) { //#24137
                $k[$j++] = 0; //#24137
            } //#24137
            $1.coeffs = $a(); //#24137
            for (var _QY = 1, _QX = $1.NC; _QY <= _QX; _QY += 1) { //#24144
                $1.i = _QY; //#24139
                for (var _Qa = $1.NC; _Qa >= 1; _Qa -= 1) { //#24143
                    $1.j = _Qa; //#24141
                    $put($1.coeffs, $1.j, ($f($f($get($1.coeffs, $1.j) + 113) - (($get($1.rsalog, $1.i) * $get($1.coeffs, $1.j - 1)) % 113))) % 113); //#24142
                } //#24142
            } //#24142
            for (var _Qo = 0, _Qn = $1.ND - 1; _Qo <= _Qn; _Qo += 1) { //#24152
                $k[$j++] = 't'; //#24146
                $k[$j++] = $1.rscws; //#24146
                $k[$j++] = _Qo; //#24146
                $1.offset(); //#24146
                var _Qq = $k[--$j]; //#24146
                var _Qs = $get($k[--$j], _Qq); //#24146
                $k[$j++] = _Qs; //#24146
                $k[$j++] = $1.rscws; //#24146
                $k[$j++] = $1.ND; //#24146
                $1.offset(); //#24146
                var _Qv = $k[--$j]; //#24146
                var _Qx = $get($k[--$j], _Qv); //#24146
                var _Qy = $k[--$j]; //#24146
                $1[$k[--$j]] = $f(_Qy + _Qx) % 113; //#24146
                for (var _R2 = 0, _R1 = $1.NC - 2; _R2 <= _R1; _R2 += 1) { //#24150
                    $1.j = _R2; //#24148
                    $k[$j++] = $1.rscws; //#24149
                    $k[$j++] = $1.ND + $1.j; //#24149
                    $1.offset(); //#24149
                    $k[$j++] = $1.rscws; //#24149
                    $k[$j++] = ($1.ND + $1.j) + 1; //#24149
                    $1.offset(); //#24149
                    var _R9 = $k[--$j]; //#24149
                    var _RB = $get($k[--$j], _R9); //#24149
                    var _RG = $k[--$j]; //#24149
                    $put($k[--$j], _RG, ($f($f(_RB + 113) - (($1.t * $get($1.coeffs, $1.j + 1)) % 113))) % 113); //#24149
                } //#24149
                $k[$j++] = $1.rscws; //#24151
                $k[$j++] = ($1.ND + $1.NC) - 1; //#24151
                $1.offset(); //#24151
                var _RP = $k[--$j]; //#24151
                $put($k[--$j], _RP, ($f(113 - (($1.t * $get($1.coeffs, $1.NC)) % 113))) % 113); //#24151
            } //#24151
            for (var _RU = $1.ND, _RT = $1.NW - 1; _RU <= _RT; _RU += 1) { //#24153
                $k[$j++] = _RU; //#24153
                $k[$j++] = $1.rscws; //#24153
                $k[$j++] = _RU; //#24153
                $1.offset(); //#24153
                var _RX = $k[--$j]; //#24153
                var _RY = $k[--$j]; //#24153
                var _RZ = $k[--$j]; //#24153
                $k[$j++] = _RY; //#24153
                $k[$j++] = _RX; //#24153
                $k[$j++] = 113; //#24153
                $k[$j++] = $1.rscws; //#24153
                $k[$j++] = _RZ; //#24153
                $1.offset(); //#24153
                var _Ra = $k[--$j]; //#24153
                var _Rc = $get($k[--$j], _Ra); //#24153
                var _Rd = $k[--$j]; //#24153
                var _Re = $k[--$j]; //#24153
                $put($k[--$j], _Re, $f(_Rd - _Rc) % 113); //#24153
            } //#24153
        } //#24153
        $1.bits = $s($1.ndots); //#24157
        $puti($1.bits, 0, $get($a(["00", "01", "10", "11"]), $1.mask)); //#24158
        for (var _Ro = 1, _Rn = $1.nw; _Ro <= _Rn; _Ro += 1) { //#24162
            $1.i = _Ro; //#24160
            $puti($1.bits, (($1.i - 1) * 9) + 2, $get($1.encs, $get($1.rscws, $1.i))); //#24161
        } //#24161
        if ($1.rembits > 0) { //#24165
            $puti($1.bits, ($1.nw * 9) + 2, $geti("11111111111111111", 0, $1.rembits)); //#24164
        } //#24164
        var _S1 = $1.outline; //#24168
        $1.pixs = $arrcpy($a(_S1.length), _S1); //#24168
        $1.posx = 0; //#24169
        $k[$j++] = 'posy'; //#24170
        if (($1.rows % 2) == 0) { //#24170
            $k[$j++] = 0; //#24170
        } else { //#24170
            $k[$j++] = $1.rows - 1; //#24170
        } //#24170
        var _S6 = $k[--$j]; //#24170
        $1[$k[--$j]] = _S6; //#24170
        var _SA = $geti($1.bits, 0, $1.bits.length - 6); //#24171
        for (var _SB = 0, _SC = _SA.length; _SB < _SC; _SB++) { //#24189
            $k[$j++] = $get(_SA, _SB); //#24187
            for (;;) { //#24187
                $k[$j++] = $1.pixs; //#24173
                $k[$j++] = $1.posx; //#24173
                $k[$j++] = $1.posy; //#24173
                $1.dmv(); //#24173
                var _SH = $k[--$j]; //#24173
                if ($get($k[--$j], _SH) == -1) { //#24173
                    break; //#24173
                } //#24173
                if (($1.rows % 2) == 0) { //#24184
                    $1.posy = $1.posy + 1; //#24175
                    if ($1.posy == $1.rows) { //#24179
                        $1.posy = 0; //#24177
                        $1.posx = $1.posx + 1; //#24178
                    } //#24178
                } else { //#24184
                    $1.posx = $1.posx + 1; //#24181
                    if ($1.posx == $1.columns) { //#24185
                        $1.posx = 0; //#24183
                        $1.posy = $1.posy - 1; //#24184
                    } //#24184
                } //#24184
            } //#24184
            $k[$j++] = $1.pixs; //#24188
            $k[$j++] = $1.posx; //#24188
            $k[$j++] = $1.posy; //#24188
            $1.dmv(); //#24188
            var _SW = $k[--$j]; //#24188
            var _SX = $k[--$j]; //#24188
            $put(_SX, _SW, $f($k[--$j] - 48)); //#24188
        } //#24188
        for (var _SZ = 0; _SZ <= 5; _SZ += 1) { //#24194
            $1.i = _SZ; //#24191
            $k[$j++] = $1.pixs; //#24192
            $aload($get($1.sixedges, $1.i)); //#24192
            $1.dmv(); //#24192
            var _Si = $k[--$j]; //#24193
            $put($k[--$j], _Si, $get($1.bits, ($1.bits.length - 6) + $1.i) - 48); //#24193
        } //#24193
        $k[$j++] = 'score'; //#24197
        $k[$j++] = $1.pixs; //#24197
        $1.evalsymbol(); //#24197
        var _Sl = $k[--$j]; //#24197
        $1[$k[--$j]] = _Sl; //#24197
        if ($1.score > $1.bestscore) { //#24202
            $1.bestsym = $1.pixs; //#24199
            $1.bestscore = $1.score; //#24200
            if ($1.fast && ($1.bestscore > (~~(($1.rows * $1.columns) / 2)))) { //#24201
                return true; //#24201
            } //#24201
        } //#24201
        var _Sv = $1.pixs; //#24205
        $1.litmask = $arrcpy($a(_Sv.length), _Sv); //#24205
        for (var _Sy = 0; _Sy <= 5; _Sy += 1) { //#24210
            $1.i = _Sy; //#24207
            $k[$j++] = $1.litmask; //#24208
            $aload($get($1.sixedges, $1.i)); //#24208
            $1.dmv(); //#24208
            var _T3 = $k[--$j]; //#24209
            $put($k[--$j], _T3, 1); //#24209
        } //#24209
        $put($1.litmasks, $1.mask, $1.litmask); //#24211
        if ($1.fast) { //#24221
            $k[$j++] = 'score'; //#24215
            $k[$j++] = $1.litmask; //#24215
            $1.evalsymbol(); //#24215
            var _TA = $k[--$j]; //#24215
            $1[$k[--$j]] = _TA; //#24215
            if ($gt($1.score, $1.bestscore)) { //#24220
                $1.bestsym = $1.litmask; //#24217
                $1.bestscore = $1.score; //#24218
                if ($1.bestscore > (~~(($1.rows * $1.columns) / 2))) { //#24219
                    return true; //#24219
                } //#24219
            } //#24219
        } //#24219
    }); //#24219
    $1.pixs = $1.bestsym; //#24224
    if ((!$1.fast) && ($1.bestscore <= (~~(($1.rows * $1.columns) / 2)))) { //#24238
        $1.bestscore = -99999999; //#24228
        $forall($1.masks, function() { //#24236
            $1.litmask = $get($1.litmasks, $k[--$j]); //#24230
            $k[$j++] = 'score'; //#24231
            $k[$j++] = $1.litmask; //#24231
            $1.evalsymbol(); //#24231
            var _TT = $k[--$j]; //#24231
            $1[$k[--$j]] = _TT; //#24231
            if ($1.score > $1.bestscore) { //#24235
                $1.bestsym = $1.litmask; //#24233
                $1.bestscore = $1.score; //#24234
            } //#24234
        }); //#24234
        $1.pixs = $1.bestsym; //#24237
    } //#24237
    var _Tg = new Map([
        ["ren", bwipp_renmatrix],
        ["dotty", true],
        ["pixs", $1.pixs],
        ["pixx", $1.columns],
        ["pixy", $1.rows],
        ["height", ($1.rows * 2) / 72],
        ["width", ($1.columns * 2) / 72],
        ["opt", $1.options]
    ]); //#24249
    $k[$j++] = _Tg; //#24252
    if (!$1.dontdraw) { //#24252
        bwipp_renmatrix(); //#24252
    } //#24252
}

function bwipp_ultracode() {
    var $1 = {}; //#24282
    $1.options = $k[--$j]; //#24284
    $1.barcode = $k[--$j]; //#24285
    $1.dontdraw = false; //#24287
    $1.eclevel = "EC2"; //#24288
    $1.encoding = "auto"; //#24289
    $1.parse = false; //#24290
    $1.parsefnc = false; //#24291
    $1.start = 257; //#24292
    $1.link1 = 0; //#24293
    $1.raw = false; //#24294
    $1.rev = 1; //#24295
    $forall($1.options, function() { //#24306
        var _3 = $k[--$j]; //#24306
        $1[$k[--$j]] = _3; //#24306
    }); //#24306
    $1.start = ~~$1.start; //#24308
    $1.link1 = ~~$1.link1; //#24309
    $1.rev = ~~$1.rev; //#24310
    var _8 = $1.rev; //#24312
    if ((_8 != 1) && (_8 != 2)) { //#24314
        $k[$j++] = 'bwipp.ultracodeInvalidRevision'; //#24313
        $k[$j++] = "Valid revisions are 1 and 2"; //#24313
        bwipp_raiseerror(); //#24313
    } //#24313
    if ($1.raw) { //#24316
        $1.encoding = "raw"; //#24316
    } //#24316
    if ($eq($1.encoding, "raw")) { //#24329
        $1.dcws = $a($1.barcode.length); //#24319
        $1.i = 0; //#24320
        $1.j = 0; //#24320
        for (;;) { //#24327
            if ($1.i == $1.barcode.length) { //#24322
                break; //#24322
            } //#24322
            $1.cw = $cvi($geti($1.barcode, $1.i + 1, 3)); //#24323
            $put($1.dcws, $1.j, $1.cw); //#24324
            $1.i = $1.i + 4; //#24325
            $1.j = $1.j + 1; //#24326
        } //#24326
        $1.dcws = $geti($1.dcws, 0, $1.j); //#24328
    } //#24328
    if ($eq($1.encoding, "auto")) { //#24356
        $1.fn1 = -1; //#24335
        $1.fn3 = -2; //#24335
        var _V = new Map([
            ["parse", $1.parse],
            ["parsefnc", $1.parsefnc],
            ["FNC1", $1.fn1],
            ["FNC3", $1.fn3]
        ]); //#24340
        $1.fncvals = _V; //#24341
        $k[$j++] = 'msg'; //#24342
        $k[$j++] = $1.barcode; //#24342
        $k[$j++] = $1.fncvals; //#24342
        bwipp_parseinput(); //#24342
        var _Y = $k[--$j]; //#24342
        $1[$k[--$j]] = _Y; //#24342
        $1.msglen = $1.msg.length; //#24343
        $1.scr = $a([]); //#24345
        $1.scp = $a([]); //#24346
        $k[$j++] = Infinity; //#24352
        $aload($1.scr); //#24348
        $aload($1.scp); //#24349
        $forall($1.msg, function() { //#24353
            var _g = $k[--$j]; //#24351
            $k[$j++] = _g; //#24351
            if (_g == $1.fn1) { //#24351
                $j--; //#24351
                $k[$j++] = 268; //#24351
            } //#24351
            var _i = $k[--$j]; //#24352
            $k[$j++] = _i; //#24352
            if (_i == $1.fn3) { //#24352
                $j--; //#24352
                $k[$j++] = 269; //#24352
            } //#24352
        }); //#24352
        $1.dcws = $a(); //#24352
    } //#24354
    var _m = $get($1.options, 'debugcws') !== undefined; //#24358
    if (_m) { //#24358
        $k[$j++] = 'bwipp.debugcws'; //#24358
        $k[$j++] = $1.dcws; //#24358
        bwipp_raiseerror(); //#24358
    } //#24358
    $1.mcc = $1.dcws.length + 3; //#24360
    $1.eclval = $get($1.eclevel, 2) - 48; //#24362
    if ($1.eclval != 0) { //#24366
        $k[$j++] = 'qcc'; //#24364
        $k[$j++] = $get($a([0, 1, 2, 4, 6, 8]), $1.eclval); //#24364
        $k[$j++] = ~~($1.mcc / 25); //#24364
        if (($1.mcc % 25) != 0) { //#24364
            var _x = $k[--$j]; //#24364
            $k[$j++] = $f(_x + 1); //#24364
        } //#24364
        var _y = $k[--$j]; //#24364
        var _z = $k[--$j]; //#24364
        $1[$k[--$j]] = $f((_z * _y) + 5); //#24364
    } else { //#24366
        $1.qcc = 3; //#24366
    } //#24366
    $1.acc = ($1.qcc - 3) + (78 * $1.link1); //#24368
    $1.tcc = $1.mcc + $1.qcc; //#24369
    $1.metrics = $a([$a([2, 7, 37, 5]), $a([3, 36, 84, 13]), $a([4, 85, 161, 22]), $a([5, 142, 282, 29])]); //#24378
    for (var _1A = 0; _1A <= 3; _1A += 1) { //#24389
        $1.i = _1A; //#24380
        $1.m = $get($1.metrics, $1.i); //#24381
        $1.rows = $get($1.m, 0); //#24382
        $1.minc = $get($1.m, 1); //#24383
        $1.maxc = $get($1.m, 2); //#24384
        $1.mcol = $get($1.m, 3); //#24385
        $1.okay = true; //#24386
        if (($1.tcc < $1.minc) || ($1.tcc > $1.maxc)) { //#24387
            $1.okay = false; //#24387
        } //#24387
        if ($1.okay) { //#24388
            break; //#24388
        } //#24388
    } //#24388
    if (!$1.okay) { //#24393
        $k[$j++] = 'bwipp.ultracodeNoValidSymbol'; //#24392
        $k[$j++] = "Maximum length exceeded or invalid content"; //#24392
        bwipp_raiseerror(); //#24392
    } //#24392
    for (var _1T = $1.mcol; _1T <= 61; _1T += 1) { //#24407
        $1.columns = _1T; //#24397
        $k[$j++] = $1.columns; //#24399
        if ($1.columns >= 15) { //#24399
            var _1W = $k[--$j]; //#24399
            $k[$j++] = $f(_1W - 1); //#24399
        } //#24399
        if ($1.columns >= 31) { //#24400
            var _1Y = $k[--$j]; //#24400
            $k[$j++] = $f(_1Y - 1); //#24400
        } //#24400
        if ($1.columns >= 47) { //#24401
            var _1a = $k[--$j]; //#24401
            $k[$j++] = $f(_1a - 1); //#24401
        } //#24401
        var _1e = $f(($f(($k[--$j] * $1.rows) - 3)) - $1.tcc); //#24402
        $k[$j++] = _1e; //#24405
        if (_1e >= 0) { //#24405
            $1.pads = $k[--$j]; //#24403
            break; //#24404
        } //#24404
        $j--; //#24406
    } //#24406
    $1.dcc = $f($1.columns - $1.mcol); //#24408
    $k[$j++] = Infinity; //#24417
    $k[$j++] = $1.start; //#24415
    $k[$j++] = $1.mcc; //#24415
    $k[$j++] = $1.acc; //#24415
    $aload($1.dcws); //#24415
    for (var _1n = 0, _1o = $1.qcc; _1n < _1o; _1n++) { //#24416
        $k[$j++] = 0; //#24416
    } //#24416
    $k[$j++] = 0; //#24417
    $1.rsseq = $a(); //#24417
    $k[$j++] = Infinity; //#24421
    $k[$j++] = 1; //#24421
    for (var _1q = 0, _1r = 282; _1q < _1r; _1q++) { //#24421
        var _1s = $k[--$j]; //#24421
        $k[$j++] = _1s; //#24421
        $k[$j++] = (_1s * 3) % 283; //#24421
    } //#24421
    $1.rsalog = $a(); //#24421
    $1.rslog = $a(283); //#24422
    for (var _1v = 1; _1v <= 282; _1v += 1) { //#24423
        $put($1.rslog, $get($1.rsalog, _1v), _1v); //#24423
    } //#24423
    $1.rsprod = function() {
        var _1z = $k[--$j]; //#24427
        var _20 = $k[--$j]; //#24427
        $k[$j++] = _20; //#24431
        $k[$j++] = _1z; //#24431
        if ((_1z != 0) && (_20 != 0)) { //#24430
            var _23 = $get($1.rslog, $k[--$j]); //#24428
            var _28 = $get($1.rsalog, $f(_23 + $get($1.rslog, $k[--$j])) % 282); //#24428
            $k[$j++] = _28; //#24428
        } else { //#24430
            $j -= 2; //#24430
            $k[$j++] = 0; //#24430
        } //#24430
    }; //#24432
    $1.n = $1.mcc; //#24435
    $1.k = $1.qcc; //#24435
    $k[$j++] = Infinity; //#24436
    $k[$j++] = 1; //#24436
    for (var _2C = 0, _2D = $1.k; _2C < _2D; _2C++) { //#24436
        $k[$j++] = 0; //#24436
    } //#24436
    $1.coeffs = $a(); //#24436
    for (var _2H = 1, _2G = $1.k; _2H <= _2G; _2H += 1) { //#24445
        $1.i = _2H; //#24438
        $put($1.coeffs, $1.i, $get($1.coeffs, $1.i - 1)); //#24439
        for (var _2O = $1.i - 1; _2O >= 1; _2O -= 1) { //#24443
            $1.j = _2O; //#24441
            $k[$j++] = $1.coeffs; //#24442
            $k[$j++] = $1.j; //#24442
            $k[$j++] = $get($1.coeffs, $1.j - 1); //#24442
            $k[$j++] = $get($1.coeffs, $1.j); //#24442
            $k[$j++] = $get($1.rsalog, $1.i); //#24442
            $1.rsprod(); //#24442
            var _2a = $k[--$j]; //#24442
            var _2b = $k[--$j]; //#24442
            var _2c = $k[--$j]; //#24442
            $put($k[--$j], _2c, $f(_2b + _2a) % 283); //#24442
        } //#24442
        $k[$j++] = $1.coeffs; //#24444
        $k[$j++] = 0; //#24444
        $k[$j++] = $get($1.coeffs, 0); //#24444
        $k[$j++] = $get($1.rsalog, $1.i); //#24444
        $1.rsprod(); //#24444
        var _2k = $k[--$j]; //#24444
        var _2l = $k[--$j]; //#24444
        $put($k[--$j], _2l, _2k); //#24444
    } //#24444
    $1.coeffs = $geti($1.coeffs, 0, $1.coeffs.length - 1); //#24446
    for (var _2r = $1.coeffs.length - 1; _2r >= 0; _2r -= 2) { //#24447
        var _2s = $1.coeffs; //#24447
        $put(_2s, _2r, $f(283 - $get(_2s, _2r))); //#24447
    } //#24447
    for (var _2w = 0, _2v = $1.n - 1; _2w <= _2v; _2w += 1) { //#24456
        $1.t = $f($get($1.rsseq, _2w) + $get($1.rsseq, $1.n)) % 283; //#24451
        for (var _34 = 0, _33 = $1.k - 1; _34 <= _33; _34 += 1) { //#24455
            $1.j = _34; //#24453
            $put($1.rsseq, $1.n + $1.j, ($f($get($1.rsseq, ($1.n + $1.j) + 1) + ($f(283 - (($1.t * $get($1.coeffs, ($1.k - $1.j) - 1)) % 283))))) % 283); //#24454
        } //#24454
    } //#24454
    for (var _3L = $1.n, _3K = $1.n + $1.k; _3L <= _3K; _3L += 1) { //#24457
        $put($1.rsseq, _3L, $f(283 - $get($1.rsseq, _3L)) % 283); //#24457
    } //#24457
    $1.ecws = $geti($1.rsseq, $1.n, $1.k); //#24458
    var _3U = $get($1.options, 'debugecc') !== undefined; //#24460
    if (_3U) { //#24460
        $k[$j++] = 'bwipp.debugecc'; //#24460
        $k[$j++] = $1.ecws; //#24460
        bwipp_raiseerror(); //#24460
    } //#24460
    if ($1.rev == 1) { //#24487
        $1.dccu = $a([51363, 51563, 51653, 53153, 53163, 53513, 53563, 53613, 53653, 56153, 56163, 56313, 56353, 56363, 56513, 56563, 51316, 51356, 51536, 51616, 53156, 53516, 53536, 53616, 53636, 53656, 56136, 56156, 56316, 56356, 56516, 56536]); //#24468
        $1.dccl = $a([61351, 61361, 61531, 61561, 61631, 61651, 63131, 63151, 63161, 63531, 63561, 63631, 65131, 65161, 65351, 65631, 31351, 31361, 31531, 31561, 31631, 31651, 35131, 35151, 35161, 35361, 35631, 35651, 36131, 36151, 36351, 36531]); //#24474
    } else { //#24487
        $1.dccu = $a([15316, 16316, 13516, 16516, 13616, 15616, 13136, 15136, 16136, 13536, 16536, 13636, 13156, 16156, 15356, 13656, 15313, 16313, 13513, 16513, 13613, 15613, 13153, 15153, 16153, 16353, 13653, 15653, 13163, 15163, 15363, 13563]); //#24481
        $1.dccl = $a([36315, 36515, 35615, 35135, 36135, 31535, 36535, 31635, 35635, 35165, 36165, 31365, 35365, 36365, 31565, 36565, 61315, 65315, 63515, 61615, 65135, 61535, 63535, 61635, 63635, 65635, 63165, 65165, 61365, 65365, 61565, 63565]); //#24487
    } //#24487
    $1.tiles = $a([13135, 13136, 13153, 13156, 13163, 13165, 13513, 13515, 13516, 13531, 13535, 13536, 13561, 13563, 13565, 13613, 13615, 13616, 13631, 13635, 13636, 13651, 13653, 13656, 15135, 15136, 15153, 15163, 15165, 15313, 15315, 15316, 15351, 15353, 15356, 15361, 15363, 15365, 15613, 15615, 15616, 15631, 15635, 15636, 15651, 15653, 15656, 16135, 16136, 16153, 16156, 16165, 16313, 16315, 16316, 16351, 16353, 16356, 16361, 16363, 16365, 16513, 16515, 16516, 16531, 16535, 16536, 16561, 16563, 16565, 31315, 31316, 31351, 31356, 31361, 31365, 31513, 31515, 31516, 31531, 31535, 31536, 31561, 31563, 31565, 31613, 31615, 31631, 31635, 31636, 31651, 31653, 31656, 35131, 35135, 35136, 35151, 35153, 35156, 35161, 35163, 35165, 35315, 35316, 35351, 35356, 35361, 35365, 35613, 35615, 35616, 35631, 35635, 35636, 35651, 35653, 35656, 36131, 36135, 36136, 36151, 36153, 36156, 36163, 36165, 36315, 36316, 36351, 36356, 36361, 36365, 36513, 36515, 36516, 36531, 36535, 36536, 36561, 36563, 36565, 51313, 51315, 51316, 51351, 51353, 51356, 51361, 51363, 51365, 51513, 51516, 51531, 51536, 51561, 51563, 51613, 51615, 51616, 51631, 51635, 51636, 51651, 51653, 51656, 53131, 53135, 53136, 53151, 53153, 53156, 53161, 53163, 53165, 53513, 53516, 53531, 53536, 53561, 53563, 53613, 53615, 53616, 53631, 53635, 53636, 53651, 53653, 53656, 56131, 56135, 56136, 56151, 56153, 56156, 56161, 56163, 56165, 56313, 56315, 56316, 56351, 56353, 56356, 56361, 56363, 56365, 56513, 56516, 56531, 56536, 56561, 56563, 61313, 61315, 61316, 61351, 61353, 61356, 61361, 61363, 61365, 61513, 61515, 61516, 61531, 61535, 61536, 61561, 61563, 61565, 61615, 61631, 61635, 61651, 61653, 63131, 63135, 63136, 63151, 63153, 63156, 63161, 63163, 63165, 63513, 63515, 63516, 63531, 63535, 63536, 63561, 63563, 63565, 63613, 63615, 63631, 63635, 63651, 63653, 65131, 65135, 65136, 65151, 65153, 65156, 65161, 65163, 65165, 65313, 65315, 65316, 65351, 65353, 65356, 65361, 65363, 65365, 65613, 65615, 65631, 65635, 65651, 65653, 56565, 51515]); //#24520
    $1.rows = $f(($1.rows * 6) + 1); //#24523
    $1.columns = $1.columns + 6; //#24524
    $k[$j++] = Infinity; //#24525
    for (var _3g = 0, _3h = $1.rows * $1.columns; _3g < _3h; _3g++) { //#24525
        $k[$j++] = -1; //#24525
    } //#24525
    $1.pixs = $a(); //#24525
    $1.qmv = function() {
        var _3k = $k[--$j]; //#24526
        var _3l = $k[--$j]; //#24526
        $k[$j++] = $f(_3l + (_3k * $1.columns)); //#24526
    }; //#24526
    for (var _3o = 0, _3n = $1.columns - 1; _3o <= _3n; _3o += 1) { //#24535
        $1.i = _3o; //#24528
        for (var _3r = 0, _3q = $f($1.rows - 1); _3r <= _3q; _3r += 6) { //#24532
            $1.j = _3r; //#24530
            if ($1.i >= 5) { //#24531
                $k[$j++] = $1.pixs; //#24531
                $k[$j++] = $1.i; //#24531
                $k[$j++] = $1.j; //#24531
                $1.qmv(); //#24531
                var _3x = $k[--$j]; //#24531
                $put($k[--$j], _3x, ($1.i % 2) * 9); //#24531
            } //#24531
        } //#24531
        $k[$j++] = $1.pixs; //#24533
        $k[$j++] = $1.i; //#24533
        $k[$j++] = 0; //#24533
        $1.qmv(); //#24533
        var _41 = $k[--$j]; //#24533
        $put($k[--$j], _41, 9); //#24533
        $k[$j++] = $1.pixs; //#24534
        $k[$j++] = $1.i; //#24534
        $k[$j++] = $f($1.rows - 1); //#24534
        $1.qmv(); //#24534
        var _46 = $k[--$j]; //#24534
        $put($k[--$j], _46, 9); //#24534
    } //#24534
    for (var _4A = 1, _49 = $f($1.rows - 2); _4A <= _49; _4A += 1) { //#24548
        $1.i = _4A; //#24537
        for (var _4D = 3, _4C = $1.columns - 1; _4D <= _4C; _4D += 16) { //#24541
            $1.j = _4D; //#24539
            $k[$j++] = $1.pixs; //#24540
            $k[$j++] = $1.j; //#24540
            $k[$j++] = $1.i; //#24540
            $1.qmv(); //#24540
            var _4I = $k[--$j]; //#24540
            $put($k[--$j], _4I, (1 - ($1.i % 2)) * 9); //#24540
        } //#24540
        $k[$j++] = $1.pixs; //#24542
        $k[$j++] = 0; //#24542
        $k[$j++] = $1.i; //#24542
        $1.qmv(); //#24542
        var _4M = $k[--$j]; //#24542
        $put($k[--$j], _4M, 9); //#24542
        $k[$j++] = $1.pixs; //#24543
        $k[$j++] = 1; //#24543
        $k[$j++] = $1.i; //#24543
        $1.qmv(); //#24543
        var _4R = $k[--$j]; //#24543
        $put($k[--$j], _4R, (1 - ($1.i % 2)) * 9); //#24543
        $k[$j++] = $1.pixs; //#24544
        $k[$j++] = 2; //#24544
        $k[$j++] = $1.i; //#24544
        $1.qmv(); //#24544
        var _4V = $k[--$j]; //#24544
        $put($k[--$j], _4V, 0); //#24544
        $k[$j++] = $1.pixs; //#24545
        $k[$j++] = 3; //#24545
        $k[$j++] = $1.i; //#24545
        $1.qmv(); //#24545
        var _4Z = $k[--$j]; //#24545
        $put($k[--$j], _4Z, 9); //#24545
        $k[$j++] = $1.pixs; //#24546
        $k[$j++] = 4; //#24546
        $k[$j++] = $1.i; //#24546
        $1.qmv(); //#24546
        var _4d = $k[--$j]; //#24546
        $put($k[--$j], _4d, 0); //#24546
        $k[$j++] = $1.pixs; //#24547
        $k[$j++] = $1.columns - 1; //#24547
        $k[$j++] = $1.i; //#24547
        $1.qmv(); //#24547
        var _4i = $k[--$j]; //#24547
        $put($k[--$j], _4i, 9); //#24547
    } //#24547
    $1.i = (~~($1.rows / 2)) - 5; //#24551
    $k[$j++] = Infinity; //#24555
    var _4p = $cvrs($s(5), $get($1.dccu, $1.dcc), 10); //#24553
    for (var _4q = 0, _4r = _4p.length; _4q < _4r; _4q++) { //#24553
        $k[$j++] = $get(_4p, _4q) - 48; //#24553
    } //#24553
    var _4x = $cvrs($s(5), $get($1.dccl, $1.dcc), 10); //#24555
    $k[$j++] = 0; //#24555
    for (var _4y = 0, _4z = _4x.length; _4y < _4z; _4y++) { //#24555
        $k[$j++] = $get(_4x, _4y) - 48; //#24555
    } //#24555
    var _51 = $a(); //#24555
    for (var _52 = 0, _53 = _51.length; _52 < _53; _52++) { //#24559
        $k[$j++] = $get(_51, _52); //#24557
        $k[$j++] = $1.pixs; //#24557
        $k[$j++] = 2; //#24557
        $k[$j++] = $1.i; //#24557
        $1.qmv(); //#24557
        var _57 = $k[--$j]; //#24557
        var _58 = $k[--$j]; //#24557
        $put(_58, _57, $k[--$j]); //#24557
        $1.i = $1.i + 1; //#24558
    } //#24558
    $k[$j++] = Infinity; //#24571
    $k[$j++] = $1.start; //#24565
    $k[$j++] = $1.mcc; //#24565
    $aload($1.ecws); //#24565
    $k[$j++] = $1.tcc; //#24569
    $k[$j++] = 283; //#24569
    $k[$j++] = $1.acc; //#24569
    $aload($1.dcws); //#24569
    for (var _5I = 0, _5J = $1.pads; _5I < _5J; _5I++) { //#24570
        $k[$j++] = 284; //#24570
    } //#24570
    $k[$j++] = $1.qcc; //#24571
    $1.tileseq = $a(); //#24571
    $1.x = 5; //#24574
    $1.y = 1; //#24574
    var _5M = $1.tileseq; //#24575
    for (var _5N = 0, _5O = _5M.length; _5N < _5O; _5N++) { //#24588
        var _5T = $cvrs($s(5), $get($1.tiles, $get(_5M, _5N)), 10); //#24576
        for (var _5U = 0, _5V = _5T.length; _5U < _5V; _5U++) { //#24579
            $k[$j++] = $get(_5T, _5U); //#24577
            $k[$j++] = $1.pixs; //#24577
            $k[$j++] = $1.x; //#24577
            $k[$j++] = $1.y; //#24577
            $1.qmv(); //#24577
            var _5a = $k[--$j]; //#24577
            var _5b = $k[--$j]; //#24577
            $put(_5b, _5a, $f($k[--$j] - 48)); //#24577
            $1.y = $1.y + 1; //#24578
        } //#24578
        if ($1.y != $f($1.rows - 1)) { //#24585
            $1.y = $1.y + 1; //#24581
        } else { //#24585
            $1.x = $1.x + 1; //#24583
            $1.y = 1; //#24583
            $k[$j++] = $1.pixs; //#24584
            $k[$j++] = $1.x; //#24584
            $k[$j++] = $1.y; //#24584
            $1.qmv(); //#24584
            var _5l = $k[--$j]; //#24584
            if ($get($k[--$j], _5l) != -1) { //#24586
                $1.x = $1.x + 1; //#24585
            } //#24585
        } //#24585
    } //#24585
    var _5u = new Map([
        [0, "FFFFFF"],
        [9, "000000"],
        [1, "00FFFF"],
        [3, "FF00FF"],
        [5, "FFFF00"],
        [6, "00FF00"]
    ]); //#24604
    var _5w = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.columns],
        ["pixy", $1.rows],
        ["height", ($1.rows / 72) * 2],
        ["width", ($1.columns / 72) * 2],
        ["colormap", _5u],
        ["opt", $1.options]
    ]); //#24606
    $k[$j++] = _5w; //#24609
    if (!$1.dontdraw) { //#24609
        bwipp_renmatrix(); //#24609
    } //#24609
}

function bwipp_jabcode() {
    var $1 = {}; //#24639
    $1.options = $k[--$j]; //#24641
    $1.barcode = $k[--$j]; //#24642
    $1.dontdraw = false; //#24644
    $1.rows = -1; //#24645
    $1.columns = -1; //#24646
    $1.slave = false; //#24647
    $1.colors = 16; //#24648
    $1.eclevel = 6; //#24649
    $1.raw = false; //#24650
    $1.parse = false; //#24651
    $1.parsefnc = false; //#24652
    $1.mask = -1; //#24653
    $forall($1.options, function() { //#24664
        var _3 = $k[--$j]; //#24664
        $1[$k[--$j]] = _3; //#24664
    }); //#24664
    $1.rows = ~~$1.rows; //#24666
    $1.columns = ~~$1.columns; //#24667
    $1.colors = ~~$1.colors; //#24668
    $1.eclevel = ~~$1.eclevel; //#24669
    $1.mask = ~~$1.mask; //#24670
    $1.databpm = ~~(Math.round(Math.log($1.colors) / Math.log(2))); //#24672
    var _B = $1.colors; //#24673
    $k[$j++] = 'metabpm'; //#24673
    $k[$j++] = _B; //#24673
    if (_B > 8) { //#24673
        $j--; //#24673
        $k[$j++] = 8; //#24673
    } //#24673
    var _C = $k[--$j]; //#24673
    $1[$k[--$j]] = ~~(Math.round(Math.log(_C) / Math.log(2))); //#24673
    $1.fn1 = -1; //#24676
    var _H = new Map([
        ["parse", $1.parse],
        ["parsefnc", $1.parsefnc],
        ["FNC1", $1.fn1]
    ]); //#24680
    $1.fncvals = _H; //#24681
    $k[$j++] = 'msg'; //#24682
    $k[$j++] = $1.barcode; //#24682
    $k[$j++] = $1.fncvals; //#24682
    bwipp_parseinput(); //#24682
    var _K = $k[--$j]; //#24682
    $1[$k[--$j]] = _K; //#24682
    $1.msglen = $1.msg.length; //#24683
    $1.addtobits = function() {
        var _N = $k[--$j]; //#24704
        $puti($1.bits, $1.j, _N); //#24704
        $1.j = _N.length + $1.j; //#24705
    }; //#24706
    $1.tofixedbits = function() {
        var _S = $strcpy($s(13), "0000000000000"); //#24709
        var _T = $k[--$j]; //#24709
        var _W = $cvrs($s(13), $k[--$j], 2); //#24709
        $puti(_S, $f(_T - _W.length), _W); //#24710
        $k[$j++] = $geti(_S, 0, _T); //#24711
    }; //#24712
    var _Z = ($1.msglen <= 15) ? 4 : 17; //#24715
    $1.bits = $s(((7 + _Z) + ($1.msglen * 8)) + 12); //#24715
    $1.j = 0; //#24716
    $k[$j++] = 31; //#24717
    $k[$j++] = 5; //#24717
    $1.tofixedbits(); //#24717
    $1.addtobits(); //#24717
    $k[$j++] = "00"; //#24718
    $1.addtobits(); //#24718
    if ($1.msglen <= 15) { //#24723
        $k[$j++] = $1.msglen; //#24720
        $k[$j++] = 4; //#24720
        $1.tofixedbits(); //#24720
        $1.addtobits(); //#24720
    } else { //#24723
        $k[$j++] = "0000"; //#24722
        $1.addtobits(); //#24722
        $k[$j++] = $1.msglen - 16; //#24723
        $k[$j++] = 13; //#24723
        $1.tofixedbits(); //#24723
        $1.addtobits(); //#24723
    } //#24723
    for (var _h = 0, _g = $1.msglen - 1; _h <= _g; _h += 1) { //#24727
        $k[$j++] = $get($1.msg, _h); //#24726
        $k[$j++] = 8; //#24726
        $1.tofixedbits(); //#24726
        $1.addtobits(); //#24726
    } //#24726
    $k[$j++] = 28; //#24728
    $k[$j++] = 5; //#24728
    $1.tofixedbits(); //#24728
    $1.addtobits(); //#24728
    $k[$j++] = 31; //#24729
    $k[$j++] = 5; //#24729
    $1.tofixedbits(); //#24729
    $1.addtobits(); //#24729
    $k[$j++] = "11"; //#24730
    $1.addtobits(); //#24730
    $1.diffside = 21; //#24733
    $1.sameshape = false; //#24734
    $1.sameecc = false; //#24735
    $1.hasslaves = false; //#24736
    $1.metrics = function() {
        $1.mc = $k[--$j]; //#24740
        $1.mr = $k[--$j]; //#24740
        var _m = $1.mc; //#24741
        var _n = $1.mr; //#24741
        var _o = $1.mc; //#24742
        var _p = $1.mr; //#24742
        var _q = $1.colors; //#24744
        var _r = 64; //#24744
        if (64 > _q) { //#24744
            var _ = _q; //#24744
            _q = _r; //#24744
            _r = _; //#24744
        } //#24744
        var _t = $1.slave ? 7 : 17; //#24745
        $k[$j++] = _m * _n; //#24773
        $k[$j++] = ((((~~($f(_o - 25) / 16)) + 2) * ((~~($f(_p - 25) / 16)) + 2)) - 4) * 7; //#24773
        $k[$j++] = _r * 2; //#24773
        $k[$j++] = _t * 4; //#24773
        if (!$1.slave) { //#24772
            var _x = $eq($1.mr, $1.mc) ? 0 : 1; //#24749
            $1.metass = _x; //#24749
            var _y = $1.mr; //#24750
            var _z = $1.mc; //#24750
            if ($lt(_y, _z)) { //#24750
                var _ = _z; //#24750
                _z = _y; //#24750
                _y = _; //#24750
            } //#24750
            $1.metavf = $get($a([0, 1, 2, 2, 3, 3, 3, 3]), ~~($f(_y - 21) / 16)); //#24751
            $k[$j++] = 'metavlen'; //#24752
            if ($1.metass == 0) { //#24752
                $k[$j++] = $a([2, 2, 3, 4]); //#24752
            } else { //#24752
                $k[$j++] = $a([4, 6, 8, 10]); //#24752
            } //#24752
            var _17 = $get($k[--$j], $1.metavf); //#24752
            $1[$k[--$j]] = _17; //#24752
            $1.metaelen = $f(($1.metavf * 2) + 10); //#24753
            $k[$j++] = $f($f(7 + $1.metavlen) + $1.metaelen); //#24756
            if ($1.hasslaves) { //#24756
                var _1D = $k[--$j]; //#24756
                $k[$j++] = $f(_1D + 4); //#24756
            } //#24756
            var _1G = ~~(Math.ceil(($k[--$j] * 2) / $1.metabpm)); //#24759
            $1.nummetabits = $f((_1G * $1.metabpm) + 6); //#24759
            $k[$j++] = _1G + 6; //#24760
        } else { //#24772
            $k[$j++] = 3; //#24763
            if (!$1.sameshape) { //#24763
                var _1J = $k[--$j]; //#24763
                $k[$j++] = $f(_1J + 5); //#24763
            } //#24763
            if ($1.hasslaves) { //#24764
                var _1L = $k[--$j]; //#24764
                $k[$j++] = $f(_1L + 3); //#24764
            } //#24764
            if (!$1.sameecc) { //#24769
                var _1N = $1.mr; //#24766
                var _1O = $1.mc; //#24766
                if ($lt(_1N, _1O)) { //#24766
                    var _ = _1O; //#24766
                    _1O = _1N; //#24766
                    _1N = _; //#24766
                } //#24766
                var _1R = $k[--$j]; //#24768
                $k[$j++] = $f(_1R + $get($a([10, 12, 14, 14, 16, 16, 16, 16]), ~~($f(_1N - 21) / 16))); //#24768
            } //#24768
            var _1U = ~~(Math.ceil(($k[--$j] * 2) / $1.metabpm)); //#24772
            $1.nummetabits = _1U * $1.metabpm; //#24772
            $k[$j++] = _1U; //#24772
        } //#24772
        var _1W = $k[--$j]; //#24775
        $1.nummetamodules = _1W; //#24775
        var _1X = $k[--$j]; //#24776
        var _1Y = $k[--$j]; //#24776
        var _1Z = $k[--$j]; //#24776
        $1.numdatamodules = $f($k[--$j] - ($f(_1Z + ($f(_1Y + $f(_1X + _1W)))))); //#24776
        $1.numdatabits = $1.numdatamodules * $1.databpm; //#24777
    }; //#24778
    $1.coderate = $get($a([0.67, 0.63, 0.57, 0.55, 0.5, 0.43, 0.34, 0.25, 0.2, 0.17, 0.14]), $1.eclevel); //#24781
    $1.grosslen = ~~Math.ceil($1.bits.length / $1.coderate); //#24782
    $1.snapsize = function() {
        var _1j = (~~Math.ceil($k[--$j])) - 18; //#24783
        $k[$j++] = _1j; //#24783
        if (_1j < 0) { //#24783
            $j--; //#24783
            $k[$j++] = 0; //#24783
        } //#24783
        var _1k = $k[--$j]; //#24783
        $k[$j++] = ((~~(_1k / 4)) * 4) + 21; //#24783
    }; //#24783
    if (($1.rows == -1) && ($1.columns == -1)) { //#24812
        $k[$j++] = 'size'; //#24786
        $k[$j++] = Math.sqrt($1.grosslen); //#24786
        $1.snapsize(); //#24786
        var _1o = $k[--$j]; //#24786
        $1[$k[--$j]] = _1o; //#24786
        for (;;) { //#24791
            $k[$j++] = $1.size; //#24788
            $k[$j++] = $1.size; //#24788
            $1.metrics(); //#24788
            if ($1.grosslen <= $1.numdatabits) { //#24789
                break; //#24789
            } //#24789
            $1.size = $f($1.size + 4); //#24790
        } //#24790
        $1.rows = $1.size; //#24792
        $1.columns = $1.size; //#24793
    } else { //#24812
        if (($1.columns == -1) && ($1.rows != -1)) { //#24802
            $k[$j++] = 'columns'; //#24796
            $k[$j++] = $1.grosslen / $1.rows; //#24796
            $1.snapsize(); //#24796
            var _21 = $k[--$j]; //#24796
            $1[$k[--$j]] = _21; //#24796
            for (;;) { //#24801
                $k[$j++] = $1.rows; //#24798
                $k[$j++] = $1.columns; //#24798
                $1.metrics(); //#24798
                if ($1.grosslen <= $1.numdatabits) { //#24799
                    break; //#24799
                } //#24799
                $1.columns = $f($1.columns + 4); //#24800
            } //#24800
        } //#24800
        if (($1.rows == -1) && ($1.columns != -1)) { //#24810
            $k[$j++] = 'rows'; //#24804
            $k[$j++] = $1.grosslen / $1.columns; //#24804
            $1.snapsize(); //#24804
            var _2C = $k[--$j]; //#24804
            $1[$k[--$j]] = _2C; //#24804
            for (;;) { //#24809
                $k[$j++] = $1.rows; //#24806
                $k[$j++] = $1.columns; //#24806
                $1.metrics(); //#24806
                if ($1.grosslen <= $1.numdatabits) { //#24807
                    break; //#24807
                } //#24807
                $1.rows = $f($1.rows + 4); //#24808
            } //#24808
        } //#24808
        if (($1.rows != -1) && ($1.columns != -1)) { //#24813
            $k[$j++] = $1.rows; //#24812
            $k[$j++] = $1.columns; //#24812
            $1.metrics(); //#24812
        } //#24812
    } //#24812
    $1.C = $1.numdatabits; //#24815
    $1.cols = $1.columns; //#24816
    if (($1.rows > 145) || ($1.cols > 145)) { //#24821
        $k[$j++] = 'bwipp.jabcodeNoValidSymbol'; //#24820
        $k[$j++] = "Maximum length exceeded or invalid content"; //#24820
        bwipp_raiseerror(); //#24820
    } //#24820
    $1.min = $1.C; //#24824
    for (var _2S = 3; _2S <= 8; _2S += 1) { //#24836
        $1.i = _2S; //#24826
        for (var _2U = $1.i + 1; _2U <= 9; _2U += 1) { //#24835
            $1.j = _2U; //#24828
            $1.dist = (((~~($1.C / $1.j)) * $1.j) - ((~~($1.C / $1.j)) * $1.i)) - $1.bits.length; //#24829
            if (($1.dist < $1.min) && ($1.dist >= 0)) { //#24834
                $1.datawc = $1.i; //#24831
                $1.datawr = $1.j; //#24832
                $1.min = $1.dist; //#24833
            } //#24833
        } //#24833
    } //#24833
    $1.tmpbits = $s(((~~($1.C / $1.datawr)) * $1.datawr) - ((~~($1.C / $1.datawr)) * $1.datawc)); //#24839
    $puti($1.tmpbits, 0, $1.bits); //#24840
    for (var _2u = $1.bits.length, _2t = $1.tmpbits.length - 1; _2u <= _2t; _2u += 1) { //#24844
        var _2w = $get($1.tmpbits, _2u - 1); //#24842
        $k[$j++] = _2u; //#24842
        $k[$j++] = _2w; //#24842
        if ((_2w % 2) == 0) { //#24842
            var _2x = $k[--$j]; //#24842
            $k[$j++] = $f(_2x + 1); //#24842
        } else { //#24842
            var _2y = $k[--$j]; //#24842
            $k[$j++] = $f(_2y - 1); //#24842
        } //#24842
        var _30 = $k[--$j]; //#24843
        $put($1.tmpbits, $k[--$j], _30); //#24843
    } //#24843
    $1.bits = $1.tmpbits; //#24845
    $1.m0 = 22609 + 1; //#24849
    $1.m1 = 62509 - 65536; //#24849
    $1.m2 = 19605; //#24849
    $1.m3 = 32557; //#24849
    $1.lcg64_temper = function() {
        $1.p00 = $1.m0 * $1.s0; //#24855
        $1.p01 = $1.m0 * $1.s1; //#24855
        $1.p02 = $1.m0 * $1.s2; //#24855
        $1.p03 = $1.m0 * $1.s3; //#24855
        $1.p10 = $1.m1 * $1.s0; //#24856
        $1.p11 = $1.m1 * $1.s1; //#24856
        $1.p12 = $1.m1 * $1.s2; //#24856
        $1.p13 = $1.m1 * $1.s3; //#24856
        $1.p20 = $1.m2 * $1.s0; //#24857
        $1.p21 = $1.m2 * $1.s1; //#24857
        $1.p22 = $1.m2 * $1.s2; //#24857
        $1.p23 = $1.m2 * $1.s3; //#24857
        $1.p30 = $1.m3 * $1.s0; //#24858
        $1.p31 = $1.m3 * $1.s1; //#24858
        $1.p32 = $1.m3 * $1.s2; //#24858
        $1.p33 = $1.m3 * $1.s3; //#24858
        $1.s3 = ($1.p33 % 65536) + 1; //#24860
        $1.s2 = (($1.p32 % 65536) + (~~($1.p33 / 65536))) + ($1.p23 % 65536); //#24862
        $1.s1 = ((($1.p31 % 65536) + (~~($1.p32 / 65536))) + (($1.p22 % 65536) + (~~($1.p23 / 65536)))) + ($1.p13 % 65536); //#24865
        $1.s0 = (((($1.p30 % 65536) + (~~($1.p31 / 65536))) + (($1.p21 % 65536) + (~~($1.p22 / 65536)))) + (($1.p12 % 65536) + (~~($1.p13 / 65536)))) + ($1.p03 % 65536); //#24869
        $1.s3 = $1.s3 + 65536; //#24872
        $1.s2 = $1.s2 + 65535; //#24873
        $1.s1 = $1.s1 + 65535; //#24874
        $1.s0 = $1.s0 + 65535; //#24875
        $1.s2 = (~~($1.s3 / 65536)) + $1.s2; //#24878
        $1.s3 = $1.s3 % 65536; //#24878
        $1.s1 = (~~($1.s2 / 65536)) + $1.s1; //#24879
        $1.s2 = $1.s2 % 65536; //#24879
        $1.s0 = (~~($1.s1 / 65536)) + $1.s0; //#24880
        $1.s1 = $1.s1 % 65536; //#24880
        $1.s0 = $1.s0 % 65536; //#24881
        var _45 = (((($1.s0 - 32768) * 65536) + $1.s1) ^ 2147483648) & 4294967295; //#24886
        var _46 = _45 ^ (_45 >>> 11); //#24887
        var _47 = _46 ^ ((_46 << 7) & -1658038656); //#24888
        var _48 = (_47 ^ ((_47 << 15) & -272236544)) & 4294967295; //#24890
        $k[$j++] = _48 ^ (_48 >>> 18); //#24890
    }; //#24892
    $1.createMatrixA = function() {
        $k[$j++] = 'nb_pcb'; //#24896
        if ($1.wr < 4) { //#24896
            $k[$j++] = ~~($1.Pg_sub_block / 2); //#24896
        } else { //#24896
            $k[$j++] = (~~($1.Pg_sub_block / $1.wr)) * $1.wc; //#24896
        } //#24896
        var _4E = $k[--$j]; //#24896
        $1[$k[--$j]] = _4E; //#24896
        $1.offset = ~~Math.ceil($1.Pg_sub_block / 32); //#24897
        $1.effwidth = $1.offset * 32; //#24898
        $1.matrixA = $a($1.offset * $1.nb_pcb); //#24899
        for (var _4O = 0, _4N = ($1.offset * $1.nb_pcb) - 1; _4O <= _4N; _4O += 1) { //#24900
            $put($1.matrixA, _4O, 0); //#24900
        } //#24900
        $1.permutation = $a($1.Pg_sub_block); //#24901
        for (var _4U = 0, _4T = $1.Pg_sub_block - 1; _4U <= _4T; _4U += 1) { //#24902
            $put($1.permutation, _4U, _4U); //#24902
        } //#24902
        for (var _4Z = 0, _4Y = (~~($1.Pg_sub_block / $1.wr)) - 1; _4Z <= _4Y; _4Z += 1) { //#24911
            $1.i = _4Z; //#24905
            for (var _4c = 0, _4b = $f($1.wr - 1); _4c <= _4b; _4c += 1) { //#24910
                $1.j = _4c; //#24907
                var _4d = $1.matrixA; //#24908
                var _4e = $1.i; //#24908
                var _4f = $1.effwidth; //#24908
                var _4g = $1.wr; //#24908
                var _4h = $1.j; //#24908
                var _4n = $f(31 - (($f(($1.i * $f($1.effwidth + $1.wr)) + $1.j)) % 32)); //#24909
                $put(_4d, ~~(($f((_4e * $f(_4f + _4g)) + _4h)) / 32), $get(_4d, ~~(($f((_4e * $f(_4f + _4g)) + _4h)) / 32)) | ((_4n < 0 ? 1 >>> -_4n : 1 << _4n))); //#24909
            } //#24909
        } //#24909
        $1.s0 = 0; //#24914
        $1.s1 = 0; //#24914
        $1.s2 = 11; //#24914
        $1.s3 = 64569; //#24914
        for (var _4q = 1, _4p = $f($1.wc - 1); _4q <= _4p; _4q += 1) { //#24937
            $1.i = _4q; //#24916
            $1.off_index = (~~($1.Pg_sub_block / $1.wr)) * $1.i; //#24917
            for (var _4w = 0, _4v = $1.Pg_sub_block - 1; _4w <= _4v; _4w += 1) { //#24936
                $1.j = _4w; //#24919
                $1.lcg64_temper(); //#24920
                var _4x = $k[--$j]; //#24921
                $k[$j++] = _4x; //#24921
                if (_4x < 0) { //#24921
                    var _4y = $k[--$j]; //#24921
                    $k[$j++] = $f((_4y ^ 2147483648) + 2147483648); //#24921
                } //#24921
                $1.pos = ~~(($k[--$j] / 4294967296) * ($1.Pg_sub_block - $1.j)); //#24923
                for (var _55 = 0, _54 = (~~($1.Pg_sub_block / $1.wr)) - 1; _55 <= _54; _55 += 1) { //#24932
                    $1.k = _55; //#24925
                    var _56 = $1.matrixA; //#24926
                    var _57 = $1.off_index; //#24926
                    var _58 = $1.k; //#24926
                    var _59 = $1.offset; //#24926
                    var _5A = $1.j; //#24926
                    var _5I = $get($1.matrixA, (~~($get($1.permutation, $1.pos) / 32)) + ($1.k * $1.offset)); //#24928
                    var _5M = -($f(31 - ($get($1.permutation, $1.pos) % 32))); //#24929
                    var _5O = 31 - ($1.j % 32); //#24930
                    $put(_56, ((_57 + _58) * _59) + (~~(_5A / 32)), $get(_56, ((_57 + _58) * _59) + (~~(_5A / 32))) | ((_5O < 0 ? (((_5M < 0 ? _5I >>> -_5M : _5I << _5M)) & 1) >>> -_5O : (((_5M < 0 ? _5I >>> -_5M : _5I << _5M)) & 1) << _5O))); //#24931
                } //#24931
                var _5R = $1.permutation; //#24933
                var _5S = $1.Pg_sub_block; //#24933
                var _5T = $1.j; //#24933
                $put(_5R, (_5S - 1) - _5T, $get($1.permutation, $1.pos)); //#24935
                $put($1.permutation, $1.pos, $get(_5R, (_5S - 1) - _5T)); //#24935
            } //#24935
        } //#24935
    }; //#24939
    $1.createMetadataMatrixA = function() {
        $1.nb_pcb = ~~($1.Pg_sub_block / 2); //#24943
        $1.offset = ~~Math.ceil($1.Pg_sub_block / 32); //#24944
        $1.matrixA = $a($1.offset * $1.nb_pcb); //#24945
        for (var _5g = 0, _5f = ($1.offset * $1.nb_pcb) - 1; _5g <= _5f; _5g += 1) { //#24946
            $put($1.matrixA, _5g, 0); //#24946
        } //#24946
        $1.permutation = $a($1.Pg_sub_block); //#24947
        for (var _5m = 0, _5l = $1.Pg_sub_block - 1; _5m <= _5l; _5m += 1) { //#24948
            $put($1.permutation, _5m, _5m); //#24948
        } //#24948
        $1.s0 = 0; //#24951
        $1.s1 = 0; //#24951
        $1.s2 = 0; //#24951
        $1.s3 = 38545; //#24951
        $1.nb_once = ~~((~~($f((($1.nb_pcb / $1.wc) * $1.Pg_sub_block) + 3))) / $1.nb_pcb); //#24952
        for (var _5u = 0, _5t = $1.nb_pcb - 1; _5u <= _5t; _5u += 1) { //#24967
            $1.i = _5u; //#24954
            for (var _5x = 0, _5w = $1.nb_once - 1; _5x <= _5w; _5x += 1) { //#24966
                $1.j = _5x; //#24956
                $1.lcg64_temper(); //#24957
                var _5y = $k[--$j]; //#24958
                $k[$j++] = _5y; //#24958
                if (_5y < 0) { //#24958
                    var _5z = $k[--$j]; //#24958
                    $k[$j++] = $f((_5z ^ 2147483648) + 2147483648); //#24958
                } //#24958
                $1.pos = ~~(($k[--$j] / 4294967296) * ($1.Pg_sub_block - $1.j)); //#24960
                var _63 = $1.matrixA; //#24961
                var _64 = $1.i; //#24961
                var _65 = $1.offset; //#24961
                var _68 = $get($1.permutation, $1.pos); //#24961
                var _6D = $f(31 - ($get($1.permutation, $1.pos) % 32)); //#24962
                $put(_63, (_64 * _65) + (~~(_68 / 32)), $get(_63, (_64 * _65) + (~~(_68 / 32))) | ((_6D < 0 ? 1 >>> -_6D : 1 << _6D))); //#24962
                var _6G = $1.permutation; //#24963
                var _6H = $1.Pg_sub_block; //#24963
                var _6I = $1.j; //#24963
                $put(_6G, (_6H - 1) - _6I, $get($1.permutation, $1.pos)); //#24965
                $put($1.permutation, $1.pos, $get(_6G, (_6H - 1) - _6I)); //#24965
            } //#24965
        } //#24965
    }; //#24969
    $1.GaussJordan = function() {
        $k[$j++] = 'nb_pcb'; //#24973
        if ($1.wr < 4) { //#24973
            $k[$j++] = ~~($1.Pg_sub_block / 2); //#24973
        } else { //#24973
            $k[$j++] = (~~($1.Pg_sub_block / $1.wr)) * $1.wc; //#24973
        } //#24973
        var _6S = $k[--$j]; //#24973
        $1[$k[--$j]] = _6S; //#24973
        $1.offset = ~~Math.ceil($1.Pg_sub_block / 32); //#24974
        var _6V = $1.matrixA; //#24975
        $1.matrixH = $arrcpy($a(_6V.length), _6V); //#24975
        $k[$j++] = Infinity; //#24976
        for (var _6Z = 0, _6a = $1.Pg_sub_block; _6Z < _6a; _6Z++) { //#24976
            $k[$j++] = 0; //#24976
        } //#24976
        $1.column_arrangement = $a(); //#24976
        $k[$j++] = Infinity; //#24977
        for (var _6d = 0, _6e = $1.Pg_sub_block; _6d < _6e; _6d++) { //#24977
            $k[$j++] = false; //#24977
        } //#24977
        $1.processed_column = $a(); //#24977
        $k[$j++] = Infinity; //#24978
        for (var _6h = 0, _6i = $1.nb_pcb; _6h < _6i; _6h++) { //#24978
            $k[$j++] = 0; //#24978
        } //#24978
        $1.zero_lines_nb = $a(); //#24978
        $k[$j++] = Infinity; //#24979
        for (var _6l = 0, _6m = $1.Pg_sub_block * 2; _6l < _6m; _6l++) { //#24979
            $k[$j++] = 0; //#24979
        } //#24979
        $1.swap_col = $a(); //#24979
        $1.zero_lines = 0; //#24980
        $1.loop0 = 0; //#24982
        for (var _6q = 0, _6p = $1.nb_pcb - 1; _6q <= _6p; _6q += 1) { //#25020
            $1.i = _6q; //#24984
            $1.pivot_column = $1.Pg_sub_block + 1; //#24985
            for (var _6u = 0, _6t = $1.Pg_sub_block - 1; _6u <= _6t; _6u += 1) { //#24993
                $1.j = _6u; //#24987
                var _6z = $get($1.matrixH, ~~(((($1.offset * 32) * $1.i) + $1.j) / 32)); //#24988
                var _73 = -(31 - (((($1.offset * 32) * $1.i) + $1.j) % 32)); //#24989
                if ((((_73 < 0 ? _6z >>> -_73 : _6z << _73)) & 1) == 1) { //#24992
                    $1.pivot_column = $1.j; //#24990
                    break; //#24991
                } //#24991
            } //#24991
            if ($1.pivot_column < $1.Pg_sub_block) { //#25018
                $put($1.processed_column, $1.pivot_column, true); //#24995
                $put($1.column_arrangement, $1.pivot_column, $1.i); //#24996
                if ($1.pivot_column >= $1.nb_pcb) { //#25000
                    $put($1.swap_col, $1.loop0 * 2, $1.pivot_column); //#24998
                    $1.loop0 = $1.loop0 + 1; //#24999
                } //#24999
                $1.off_index = ~~($1.pivot_column / 32); //#25001
                $1.off_index1 = $1.pivot_column % 32; //#25002
                for (var _7M = 0, _7L = $1.nb_pcb - 1; _7M <= _7L; _7M += 1) { //#25015
                    $1.j = _7M; //#25004
                    if ($1.i != $1.j) { //#25014
                        var _7T = $get($1.matrixH, $1.off_index + ($1.j * $1.offset)); //#25006
                        var _7V = -(31 - $1.off_index1); //#25007
                        if ((((_7V < 0 ? _7T >>> -_7V : _7T << _7V)) & 1) == 1) { //#25013
                            for (var _7Y = 0, _7X = $1.offset - 1; _7Y <= _7X; _7Y += 1) { //#25012
                                $1.k = _7Y; //#25009
                                var _7Z = $1.matrixH; //#25010
                                var _7a = $1.offset; //#25010
                                var _7b = $1.j; //#25010
                                var _7c = $1.k; //#25010
                                $put(_7Z, (_7a * _7b) + _7c, $xo($get(_7Z, (_7a * _7b) + _7c), $get($1.matrixH, ($1.offset * $1.i) + $1.k))); //#25011
                            } //#25011
                        } //#25011
                    } //#25011
                } //#25011
            } else { //#25018
                $put($1.zero_lines_nb, $1.zero_lines, $1.i); //#25017
                $1.zero_lines = $1.zero_lines + 1; //#25018
            } //#25018
        } //#25018
        $1.matrix_rank = $1.nb_pcb - $1.zero_lines; //#25022
        $1.loop2 = 0; //#25023
        for (var _7s = $1.matrix_rank, _7r = $1.nb_pcb - 1; _7s <= _7r; _7s += 1) { //#25043
            $1.i = _7s; //#25025
            if ($get($1.column_arrangement, $1.i) > 0) { //#25042
                for (var _7y = 0, _7x = $1.nb_pcb - 1; _7y <= _7x; _7y += 1) { //#25041
                    $1.j = _7y; //#25028
                    if ($nt($get($1.processed_column, $1.j))) { //#25040
                        $put($1.column_arrangement, $1.j, $get($1.column_arrangement, $1.i)); //#25030
                        $put($1.column_arrangement, $1.i, 0); //#25031
                        $put($1.processed_column, $1.j, true); //#25032
                        $put($1.processed_column, $1.i, false); //#25033
                        $put($1.swap_col, $1.loop0 * 2, $1.i); //#25034
                        $put($1.swap_col, ($1.loop0 * 2) + 1, $1.j); //#25035
                        $put($1.column_arrangement, $1.i, $1.j); //#25036
                        $1.loop0 = $1.loop0 + 1; //#25037
                        $1.loop2 = $1.loop2 + 1; //#25038
                        break; //#25039
                    } //#25039
                } //#25039
            } //#25039
        } //#25039
        $1.loop1 = 0; //#25045
        for (var _8Q = 0, _8P = $1.nb_pcb - 1; _8Q <= _8P; _8Q += 1) { //#25054
            $1.kl = _8Q; //#25047
            if ($nt($get($1.processed_column, $1.kl)) && ($1.loop1 < ($1.loop0 - $1.loop2))) { //#25053
                $put($1.column_arrangement, $1.kl, $get($1.column_arrangement, $get($1.swap_col, $1.loop1 * 2))); //#25049
                $put($1.processed_column, $1.kl, true); //#25050
                $put($1.swap_col, ($1.loop1 * 2) + 1, $1.kl); //#25051
                $1.loop1 = $1.loop1 + 1; //#25052
            } //#25052
        } //#25052
        $1.loop1 = 0; //#25056
        for (var _8m = 0, _8l = $1.nb_pcb - 1; _8m <= _8l; _8m += 1) { //#25063
            $1.kl = _8m; //#25058
            if ($nt($get($1.processed_column, $1.kl))) { //#25062
                $put($1.column_arrangement, $1.kl, $get($1.zero_lines_nb, $1.loop1)); //#25060
                $1.loop1 = $1.loop1 + 1; //#25061
            } //#25061
        } //#25061
        for (var _8y = 0, _8x = $1.nb_pcb - 1; _8y <= _8x; _8y += 1) { //#25072
            $1.i = _8y; //#25066
            for (var _91 = 0, _90 = $1.offset - 1; _91 <= _90; _91 += 1) { //#25071
                $1.j = _91; //#25068
                $put($1.matrixA, ($1.i * $1.offset) + $1.j, $get($1.matrixH, $f(($get($1.column_arrangement, $1.i) * $1.offset) + $1.j))); //#25070
            } //#25070
        } //#25070
        $1.tmp = 0; //#25074
        for (var _9F = 0, _9E = $1.loop0 - 1; _9F <= _9E; _9F += 1) { //#25096
            $1.i = _9F; //#25076
            for (var _9I = 0, _9H = $1.nb_pcb - 1; _9I <= _9H; _9I += 1) { //#25095
                $1.j = _9I; //#25078
                var _9P = $get($1.matrixA, (~~($get($1.swap_col, $1.i * 2) / 32)) + ($1.j * $1.offset)); //#25079
                var _9T = -($f(31 - ($get($1.swap_col, $1.i * 2) % 32))); //#25080
                $1.tmp = (((-(((_9T < 0 ? _9P >>> -_9T : _9P << _9T)) & 1)) ^ $1.tmp) & 1) ^ $1.tmp; //#25081
                var _9W = $1.matrixA; //#25082
                var _9Z = $get($1.swap_col, $1.i * 2); //#25082
                var _9a = $1.j; //#25082
                var _9b = $1.offset; //#25082
                var _9j = $get($1.matrixA, (~~($get($1.swap_col, ($1.i * 2) + 1) / 32)) + ($1.j * $1.offset)); //#25084
                var _9n = -($f(31 - ($get($1.swap_col, ($1.i * 2) + 1) % 32))); //#25085
                var _9y = $f(31 - ($get($1.swap_col, $1.i * 2) % 32)); //#25087
                $put(_9W, (~~(_9Z / 32)) + (_9a * _9b), $get(_9W, (~~(_9Z / 32)) + (_9a * _9b)) ^ (((-(((_9n < 0 ? _9j >>> -_9n : _9j << _9n)) & 1)) ^ $get($1.matrixA, (~~($get($1.swap_col, $1.i * 2) / 32)) + ($1.j * $1.offset))) & ((_9y < 0 ? 1 >>> -_9y : 1 << _9y)))); //#25088
                var _9z = $1.matrixA; //#25089
                var _A2 = $get($1.swap_col, ($1.i * 2) + 1); //#25089
                var _A3 = $1.j; //#25089
                var _A4 = $1.offset; //#25089
                var _AH = $f(31 - ($get($1.swap_col, ($1.i * 2) + 1) % 32)); //#25093
                $put(_9z, (~~(_A2 / 32)) + (_A3 * _A4), $get(_9z, (~~(_A2 / 32)) + (_A3 * _A4)) ^ (((-($1.tmp & 1)) ^ $get($1.matrixA, (~~($get($1.swap_col, ($1.i * 2) + 1) / 32)) + ($1.j * $1.offset))) & ((_AH < 0 ? 1 >>> -_AH : 1 << _AH)))); //#25094
            } //#25094
        } //#25094
    }; //#25098
    $1.createGeneratorMatrix = function() {
        $1.pn = $1.Pg_sub_block - $1.matrix_rank; //#25102
        $1.offset = ~~Math.ceil($1.pn / 32); //#25103
        $1.effwidth = $1.offset * 32; //#25104
        $1.offset_cap = ~~Math.ceil($1.Pg_sub_block / 32); //#25105
        $1.G = $a($1.offset * $1.Pg_sub_block); //#25106
        for (var _AT = 0, _AS = ($1.offset * $1.Pg_sub_block) - 1; _AT <= _AS; _AT += 1) { //#25109
            $put($1.G, _AT, 0); //#25108
        } //#25108
        for (var _AX = 0, _AW = $1.pn - 1; _AX <= _AW; _AX += 1) { //#25114
            $1.i = _AX; //#25111
            var _AY = $1.G; //#25112
            var _AZ = $1.Pg_sub_block; //#25112
            var _Aa = $1.pn; //#25112
            var _Ab = $1.i; //#25112
            var _Ac = $1.offset; //#25112
            var _Ad = $1.i; //#25112
            var _Ag = 31 - ($1.i % 32); //#25113
            $put(_AY, (((_AZ - _Aa) + _Ab) * _Ac) + (~~(_Ad / 32)), $get(_AY, (((_AZ - _Aa) + _Ab) * _Ac) + (~~(_Ad / 32))) | ((_Ag < 0 ? 1 >>> -_Ag : 1 << _Ag))); //#25113
        } //#25113
        $1.matrix_index = $1.Pg_sub_block - $1.pn; //#25115
        $1.loop0 = 0; //#25116
        for (var _An = 0, _Am = (($1.Pg_sub_block - $1.pn) * $1.effwidth) - 1; _An <= _Am; _An += 1) { //#25133
            $1.i = _An; //#25118
            if ($1.matrix_index >= $1.Pg_sub_block) { //#25122
                $1.loop0 = $1.loop0 + 1; //#25120
                $1.matrix_index = $1.Pg_sub_block - $1.pn; //#25121
            } //#25121
            if (($1.i % $1.effwidth) < $1.pn) { //#25132
                var _Aw = $1.G; //#25124
                var _Ax = $1.i; //#25124
                var _B3 = $get($1.matrixA, (~~($1.matrix_index / 32)) + ($1.offset_cap * $1.loop0)); //#25126
                var _B5 = -(31 - ($1.matrix_index % 32)); //#25127
                var _BA = 31 - ($1.i % 32); //#25129
                $put(_Aw, ~~(_Ax / 32), $get(_Aw, ~~(_Ax / 32)) ^ (((-(((_B5 < 0 ? _B3 >>> -_B5 : _B3 << _B5)) & 1)) ^ $get($1.G, ~~($1.i / 32))) & ((_BA < 0 ? 1 >>> -_BA : 1 << _BA)))); //#25130
                $1.matrix_index = $1.matrix_index + 1; //#25131
            } //#25131
        } //#25131
    }; //#25135
    $1.ldpc = function() {
        $1.wr = $k[--$j]; //#25139
        $1.wc = $k[--$j]; //#25140
        $k[$j++] = Infinity; //#25141
        var _BE = $k[--$j]; //#25141
        var _BF = $k[--$j]; //#25141
        $k[$j++] = _BE; //#25141
        $forall(_BF, function() { //#25141
            var _BG = $k[--$j]; //#25141
            $k[$j++] = $f(_BG - 48); //#25141
        }); //#25141
        $1.data = $a(); //#25141
        $1.Pn = $1.data.length; //#25143
        if ($1.wr != -1) { //#25158
            $1.Pg = ~~((Math.ceil((Math.ceil(($1.Pn * $1.wr) / $f($1.wr - $1.wc))) / $1.wr)) * $1.wr); //#25145
            $1.nb_sub_blocks = (~~($1.Pg / 2700)) + 1; //#25146
            $1.Pg_sub_block = (~~((~~($1.Pg / $1.nb_sub_blocks)) / $1.wr)) * $1.wr; //#25147
            $1.Pn_sub_block = ~~(($1.Pg_sub_block * $f($1.wr - $1.wc)) / $1.wr); //#25148
            $1.nb_sub_blocks = ~~($1.Pg / $1.Pg_sub_block); //#25149
            $k[$j++] = 'encoding_iterations'; //#25150
            $k[$j++] = ~~($1.Pg / $1.Pg_sub_block); //#25150
            if (($1.Pn_sub_block * $1.nb_sub_blocks) < $1.Pn) { //#25150
                var _Bg = $k[--$j]; //#25150
                $k[$j++] = $f(_Bg - 1); //#25150
            } //#25150
            var _Bh = $k[--$j]; //#25150
            $1[$k[--$j]] = _Bh; //#25150
            $1.createMatrixA(); //#25151
        } else { //#25158
            $1.Pg = $1.Pn * 2; //#25153
            $1.nb_sub_blocks = 1; //#25154
            $1.Pg_sub_block = $1.Pg; //#25155
            $1.Pn_sub_block = $1.Pn; //#25156
            $1.encoding_iterations = 1; //#25157
            $1.createMetadataMatrixA(); //#25158
        } //#25158
        $1.GaussJordan(); //#25160
        $1.createGeneratorMatrix(); //#25161
        $1.ecc_encoded_data = $a($1.Pg); //#25163
        $1.offset = ~~(Math.ceil(($1.Pg_sub_block - $1.matrix_rank) / 32)); //#25165
        for (var _Bs = 0, _Br = $1.encoding_iterations - 1; _Bs <= _Br; _Bs += 1) { //#25181
            $1.iter = _Bs; //#25167
            for (var _Bv = 0, _Bu = $1.Pg_sub_block - 1; _Bv <= _Bu; _Bv += 1) { //#25180
                $1.i = _Bv; //#25169
                $1.temp = 0; //#25170
                $1.loop0 = 0; //#25171
                $1.offset_index = $1.offset * $1.i; //#25172
                for (var _C3 = $1.iter * $1.Pn_sub_block, _C2 = (($1.iter + 1) * $1.Pn_sub_block) - 1; _C3 <= _C2; _C3 += 1) { //#25178
                    var _C9 = $get($1.G, $1.offset_index + (~~($1.loop0 / 32))); //#25175
                    var _CB = -(31 - ($1.loop0 % 32)); //#25175
                    $1.temp = ($get($1.data, _C3) & (((_CB < 0 ? _C9 >>> -_CB : _C9 << _CB)) & 1)) ^ $1.temp; //#25176
                    $1.loop0 = $1.loop0 + 1; //#25177
                } //#25177
                $put($1.ecc_encoded_data, $1.i + ($1.iter * $1.Pg_sub_block), $1.temp); //#25179
            } //#25179
        } //#25179
        if ($1.encoding_iterations != $1.nb_sub_blocks) { //#25205
            $1.start = $1.encoding_iterations * $1.Pn_sub_block; //#25184
            $1.last_index = $1.encoding_iterations * $1.Pg_sub_block; //#25185
            $1.Pg_sub_block = $1.Pg - ($1.encoding_iterations * $1.Pg_sub_block); //#25186
            $1.Pn_sub_block = ~~(($1.Pg_sub_block * $f($1.wr - $1.wc)) / $1.wr); //#25187
            $1.createMatrixA(); //#25188
            $1.GaussJordan(); //#25189
            $1.createGeneratorMatrix(); //#25190
            $1.offset = ~~(Math.ceil(($1.Pg_sub_block - $1.matrix_rank) / 32)); //#25191
            for (var _Ca = 0, _CZ = $1.Pg_sub_block - 1; _Ca <= _CZ; _Ca += 1) { //#25204
                $1.i = _Ca; //#25193
                $1.temp = 0; //#25194
                $1.loop0 = 0; //#25195
                $1.offset_index = $1.offset * $1.i; //#25196
                for (var _Cg = $1.start, _Cf = $1.Pn - 1; _Cg <= _Cf; _Cg += 1) { //#25202
                    var _Cm = $get($1.G, $1.offset_index + (~~($1.loop0 / 32))); //#25199
                    var _Co = -(31 - ($1.loop0 % 32)); //#25199
                    $1.temp = ($get($1.data, _Cg) & (((_Co < 0 ? _Cm >>> -_Co : _Cm << _Co)) & 1)) ^ $1.temp; //#25200
                    $1.loop0 = $1.loop0 + 1; //#25201
                } //#25201
                $put($1.ecc_encoded_data, $1.i + $1.last_index, $1.temp); //#25203
            } //#25203
        } //#25203
        $1.out = $s($1.Pg); //#25207
        for (var _Cz = 0, _Cy = $1.Pg - 1; _Cz <= _Cy; _Cz += 1) { //#25211
            $put($1.out, _Cz, $f($get($1.ecc_encoded_data, _Cz) + 48)); //#25210
        } //#25210
        $k[$j++] = $1.out; //#25212
    }; //#25214
    $k[$j++] = 'bits'; //#25217
    $k[$j++] = $1.bits; //#25217
    $k[$j++] = $1.datawc; //#25217
    $k[$j++] = $1.datawr; //#25217
    $1.ldpc(); //#25217
    var _D7 = $k[--$j]; //#25217
    $1[$k[--$j]] = _D7; //#25217
    $1.s0 = 0; //#25220
    $1.s1 = 0; //#25220
    $1.s2 = 3; //#25220
    $1.s3 = 30151; //#25220
    for (var _DA = $1.bits.length - 1; _DA >= 1; _DA -= 1) { //#25230
        $1.l = _DA; //#25222
        $1.lcg64_temper(); //#25223
        var _DB = $k[--$j]; //#25224
        $k[$j++] = _DB; //#25224
        if (_DB < 0) { //#25224
            var _DC = $k[--$j]; //#25224
            $k[$j++] = $f((_DC ^ 2147483648) + 2147483648); //#25224
        } //#25224
        $1.r = ~~(($k[--$j] / 4294967296) * ($1.l + 1)); //#25226
        $put($1.bits, $1.l, $get($1.bits, $1.r)); //#25228
        $put($1.bits, $1.r, $get($1.bits, $1.l)); //#25229
    } //#25229
    $1.tmpbits = $s($1.C); //#25233
    $puti($1.tmpbits, 0, $1.bits); //#25234
    $1.j = $1.bits.length; //#25235
    for (var _DW = 0, _DX = ~~(($f($f($1.C - $1.j) + 1)) / 2); _DW < _DX; _DW++) { //#25240
        $put($1.tmpbits, $1.j, 48); //#25237
        if (($1.j + 1) < $1.C) { //#25238
            $put($1.tmpbits, $1.j + 1, 49); //#25238
        } //#25238
        $1.j = $1.j + 2; //#25239
    } //#25239
    $1.bits = $1.tmpbits; //#25241
    if ($1.colors == 4) { //#25306
        $1.bi = 0; //#25245
        $1.gi = 1; //#25245
        $1.mi = 2; //#25245
        $1.yi = 3; //#25245
        $1.ki = 4; //#25246
        $1.wi = 5; //#25246
        $k[$j++] = Infinity; //#25249
        $k[$j++] = $1.bi; //#25249
        $k[$j++] = "0000FF"; //#25249
        $k[$j++] = $1.gi; //#25249
        $k[$j++] = "00FF00"; //#25249
        $k[$j++] = $1.mi; //#25249
        $k[$j++] = "FF00FF"; //#25249
        $k[$j++] = $1.yi; //#25249
        $k[$j++] = "FFFF00"; //#25249
        $k[$j++] = $1.ki; //#25249
        $k[$j++] = "000000"; //#25249
        $k[$j++] = $1.wi; //#25249
        $k[$j++] = "FFFFFF"; //#25249
        $1.palette = $d(); //#25250
        $1.metacolorindex = $a([$1.bi, $1.gi, $1.mi, $1.yi]); //#25251
        $1.palettelayout = $a([$1.bi, $1.gi, $1.mi, $1.yi]); //#25252
    } else { //#25306
        var _E4 = new Map([
            [8, $a([2, 2, 2])],
            [16, $a([4, 2, 2])],
            [32, $a([4, 4, 2])],
            [64, $a([4, 4, 4])],
            [128, $a([8, 4, 4])],
            [256, $a([8, 8, 4])]
        ]); //#25261
        $1.rgbres = $get(_E4, $1.colors); //#25262
        $k[$j++] = 'rvals'; //#25264
        $k[$j++] = $get($1.rgbres, 0); //#25264
        $k[$j++] = Infinity; //#25264
        var _E9 = $k[--$j]; //#25264
        var _EB = $f($k[--$j] - 1); //#25264
        $k[$j++] = _E9; //#25264
        $k[$j++] = _EB; //#25264
        for (var _ED = 0, _EC = _EB; _ED <= _EC; _ED += 1) { //#25264
            var _EE = $k[--$j]; //#25264
            $k[$j++] = ~~(Math.round(_ED * (255 / _EE))); //#25264
            $k[$j++] = _EE; //#25264
        } //#25264
        $j--; //#25264
        var _EF = $a(); //#25264
        $1[$k[--$j]] = _EF; //#25264
        $k[$j++] = 'gvals'; //#25265
        $k[$j++] = $get($1.rgbres, 1); //#25265
        $k[$j++] = Infinity; //#25265
        var _EJ = $k[--$j]; //#25265
        var _EL = $f($k[--$j] - 1); //#25265
        $k[$j++] = _EJ; //#25265
        $k[$j++] = _EL; //#25265
        for (var _EN = 0, _EM = _EL; _EN <= _EM; _EN += 1) { //#25265
            var _EO = $k[--$j]; //#25265
            $k[$j++] = ~~(Math.round(_EN * (255 / _EO))); //#25265
            $k[$j++] = _EO; //#25265
        } //#25265
        $j--; //#25265
        var _EP = $a(); //#25265
        $1[$k[--$j]] = _EP; //#25265
        $k[$j++] = 'bvals'; //#25266
        $k[$j++] = $get($1.rgbres, 2); //#25266
        $k[$j++] = Infinity; //#25266
        var _ET = $k[--$j]; //#25266
        var _EV = $f($k[--$j] - 1); //#25266
        $k[$j++] = _ET; //#25266
        $k[$j++] = _EV; //#25266
        for (var _EX = 0, _EW = _EV; _EX <= _EW; _EX += 1) { //#25266
            var _EY = $k[--$j]; //#25266
            $k[$j++] = ~~(Math.round(_EX * (255 / _EY))); //#25266
            $k[$j++] = _EY; //#25266
        } //#25266
        $j--; //#25266
        var _EZ = $a(); //#25266
        $1[$k[--$j]] = _EZ; //#25266
        var _Eb = $1.colors; //#25268
        $1.palette = new Map; //#25268
        var _Ec = $1.colors; //#25269
        var _Ed = 64; //#25269
        if (64 > _Ec) { //#25269
            var _ = _Ec; //#25269
            _Ec = _Ed; //#25269
            _Ed = _; //#25269
        } //#25269
        $1.palettelayout = $a(_Ed); //#25269
        $1.i = 0; //#25270
        $1.j = 8; //#25270
        $forall($1.rvals, function() { //#25304
            $1.r = $k[--$j]; //#25272
            $forall($1.gvals, function() { //#25303
                $1.g = $k[--$j]; //#25274
                $forall($1.bvals, function() { //#25302
                    $1.b = $k[--$j]; //#25276
                    var _Ep = $strcpy($s(6), "000000"); //#25278
                    var _Er = $cvrs($s(6), (($1.r << 16) | ($1.g << 8)) | $1.b, 16); //#25278
                    $puti(_Ep, 6 - _Er.length, _Er); //#25278
                    $k[$j++] = _Ep; //#25280
                    $k[$j++] = false; //#25280
                    if ($eq(_Ep, "000000")) { //#25280
                        $1.ki = $1.i; //#25280
                        $j--; //#25280
                        $k[$j++] = true; //#25280
                    } //#25280
                    var _Et = $k[--$j]; //#25281
                    var _Eu = $k[--$j]; //#25281
                    $k[$j++] = _Eu; //#25281
                    $k[$j++] = _Et; //#25281
                    if ($eq(_Eu, "0000FF")) { //#25281
                        $1.bi = $1.i; //#25281
                        $j--; //#25281
                        $k[$j++] = true; //#25281
                    } //#25281
                    var _Ew = $k[--$j]; //#25282
                    var _Ex = $k[--$j]; //#25282
                    $k[$j++] = _Ex; //#25282
                    $k[$j++] = _Ew; //#25282
                    if ($eq(_Ex, "00FF00")) { //#25282
                        $1.gi = $1.i; //#25282
                        $j--; //#25282
                        $k[$j++] = true; //#25282
                    } //#25282
                    var _Ez = $k[--$j]; //#25283
                    var _F0 = $k[--$j]; //#25283
                    $k[$j++] = _F0; //#25283
                    $k[$j++] = _Ez; //#25283
                    if ($eq(_F0, "00FFFF")) { //#25283
                        $1.ci = $1.i; //#25283
                        $j--; //#25283
                        $k[$j++] = true; //#25283
                    } //#25283
                    var _F2 = $k[--$j]; //#25284
                    var _F3 = $k[--$j]; //#25284
                    $k[$j++] = _F3; //#25284
                    $k[$j++] = _F2; //#25284
                    if ($eq(_F3, "FF0000")) { //#25284
                        $1.ri = $1.i; //#25284
                        $j--; //#25284
                        $k[$j++] = true; //#25284
                    } //#25284
                    var _F5 = $k[--$j]; //#25285
                    var _F6 = $k[--$j]; //#25285
                    $k[$j++] = _F6; //#25285
                    $k[$j++] = _F5; //#25285
                    if ($eq(_F6, "FF00FF")) { //#25285
                        $1.mi = $1.i; //#25285
                        $j--; //#25285
                        $k[$j++] = true; //#25285
                    } //#25285
                    var _F8 = $k[--$j]; //#25286
                    var _F9 = $k[--$j]; //#25286
                    $k[$j++] = _F9; //#25286
                    $k[$j++] = _F8; //#25286
                    if ($eq(_F9, "FFFF00")) { //#25286
                        $1.yi = $1.i; //#25286
                        $j--; //#25286
                        $k[$j++] = true; //#25286
                    } //#25286
                    var _FB = $k[--$j]; //#25287
                    var _FC = $k[--$j]; //#25287
                    $k[$j++] = _FC; //#25287
                    $k[$j++] = _FB; //#25287
                    if ($eq(_FC, "FFFFFF")) { //#25287
                        $1.wi = $1.i; //#25287
                        $j--; //#25287
                        $k[$j++] = true; //#25287
                    } //#25287
                    if ($nt($k[--$j])) { //#25299
                        if (($1.colors <= 64) || ((($1.colors == 128) && (((($1.r == 0) || ($1.r == 73)) || ($1.r == 182)) || ($1.r == 255))) || ((($1.colors == 256) && (((($1.r == 0) || ($1.r == 73)) || ($1.r == 182)) || ($1.r == 255))) && (((($1.g == 0) || ($1.g == 73)) || ($1.g == 182)) || ($1.g == 255))))) { //#25298
                            $put($1.palettelayout, $1.j, $1.i); //#25296
                            $1.j = $1.j + 1; //#25297
                        } //#25297
                    } //#25297
                    $put($1.palette, $1.i, $k[--$j]); //#25300
                    $1.i = $1.i + 1; //#25301
                }); //#25301
            }); //#25301
        }); //#25301
        $puti($1.palettelayout, 0, $a([$1.ki, $1.bi, $1.gi, $1.ci, $1.ri, $1.mi, $1.yi, $1.wi])); //#25305
        $1.metacolorindex = $a([$1.ki, $1.bi, $1.gi, $1.ci, $1.ri, $1.mi, $1.yi, $1.wi]); //#25306
    } //#25306
    $k[$j++] = Infinity; //#25310
    for (var _Fx = 0, _Fy = $1.rows * $1.cols; _Fx < _Fy; _Fx++) { //#25310
        $k[$j++] = -1; //#25310
    } //#25310
    $1.pixs = $a(); //#25310
    $1.jmv = function() {
        var _G1 = $k[--$j]; //#25311
        var _G2 = $k[--$j]; //#25311
        $k[$j++] = $f(_G2 + (_G1 * $1.cols)); //#25311
    }; //#25311
    if (!$1.slave) { //#25341
        $1.fpat = $a([$a([1, 1, 1, 0, 0]), $a([1, 2, 2, 0, 0]), $a([1, 2, 1, 2, 1]), $a([0, 0, 2, 2, 1]), $a([0, 0, 1, 1, 1])]); //#25321
        $1.fmap = $a([$a([-1, $1.bi, $1.yi]), $a([-1, $1.yi, $1.bi]), $a([-1, $1.gi, $1.mi]), $a([-1, $1.mi, $1.gi])]); //#25327
    } else { //#25341
        $1.fpat = $a([$a([0, 0, 0, 0, 0]), $a([0, 2, 2, 0, 0]), $a([0, 2, 1, 2, 0]), $a([0, 0, 2, 2, 0]), $a([0, 0, 0, 0, 0])]); //#25335
        $1.fmap = $a([$a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi]), $a([-1, $1.ki, $1.wi])]); //#25341
    } //#25341
    for (var _Gg = 0; _Gg <= 4; _Gg += 1) { //#25353
        $1.y = _Gg; //#25344
        for (var _Gh = 0; _Gh <= 4; _Gh += 1) { //#25352
            $1.x = _Gh; //#25346
            $1.fpb = $get($get($1.fpat, $1.y), $1.x); //#25347
            $k[$j++] = $1.pixs; //#25348
            $k[$j++] = $1.x + 1; //#25348
            $k[$j++] = $1.y + 1; //#25348
            $1.jmv(); //#25348
            var _Gu = $k[--$j]; //#25348
            $put($k[--$j], _Gu, $get($get($1.fmap, 0), $1.fpb)); //#25348
            $k[$j++] = $1.pixs; //#25349
            $k[$j++] = $1.x + 1; //#25349
            $k[$j++] = $f($f($1.rows - $1.y) - 2); //#25349
            $1.jmv(); //#25349
            var _H4 = $k[--$j]; //#25349
            $put($k[--$j], _H4, $get($get($1.fmap, 1), $1.fpb)); //#25349
            $k[$j++] = $1.pixs; //#25350
            $k[$j++] = $f($f($1.x + $1.cols) - 6); //#25350
            $k[$j++] = $1.y + 1; //#25350
            $1.jmv(); //#25350
            var _HE = $k[--$j]; //#25350
            $put($k[--$j], _HE, $get($get($1.fmap, 2), $1.fpb)); //#25350
            $k[$j++] = $1.pixs; //#25351
            $k[$j++] = $f($f($1.x + $1.cols) - 6); //#25351
            $k[$j++] = $f($f($1.rows - $1.y) - 2); //#25351
            $1.jmv(); //#25351
            var _HP = $k[--$j]; //#25351
            $put($k[--$j], _HP, $get($get($1.fmap, 3), $1.fpb)); //#25351
        } //#25351
    } //#25351
    $1.algnpat0 = $a([$a([$1.ki, $1.ki, -1]), $a([$1.ki, $1.wi, $1.ki]), $a([-1, $1.ki, $1.ki])]); //#25360
    $1.algnpat1 = $a([$a([-1, $1.ki, $1.ki]), $a([$1.ki, $1.wi, $1.ki]), $a([$1.ki, $1.ki, -1])]); //#25365
    $1.num = (~~Math.round($1.cols / 16)) - 1; //#25366
    $1.algnrpos = $a([3, 17]); //#25367
    if ($1.num > 0) { //#25370
        $k[$j++] = Infinity; //#25369
        for (var _Hs = 0, _Hr = $1.num; _Hs <= _Hr; _Hs += 1) { //#25369
            $k[$j++] = (~~(_Hs * ($f($1.cols - 7) / $1.num))) + 3; //#25369
        } //#25369
        $1.algnrpos = $a(); //#25369
    } //#25369
    $1.num = (~~Math.round($1.rows / 16)) - 1; //#25371
    $1.algncpos = $a([3, 17]); //#25372
    if ($1.num > 0) { //#25375
        $k[$j++] = Infinity; //#25374
        for (var _I1 = 0, _I0 = $1.num; _I1 <= _I0; _I1 += 1) { //#25374
            $k[$j++] = (~~(_I1 * ($f($1.rows - 7) / $1.num))) + 3; //#25374
        } //#25374
        $1.algncpos = $a(); //#25374
    } //#25374
    $1.putalgnpat = function() {
        $1.pp = $k[--$j]; //#25377
        $1.py = $k[--$j]; //#25378
        $1.px = $k[--$j]; //#25379
        for (var _I8 = 0; _I8 <= 2; _I8 += 1) { //#25386
            $1.pb = _I8; //#25381
            for (var _I9 = 0; _I9 <= 2; _I9 += 1) { //#25385
                $1.pa = _I9; //#25383
                $k[$j++] = $1.pixs; //#25384
                $k[$j++] = $f($1.px + $1.pa); //#25384
                $k[$j++] = $f($1.py + $1.pb); //#25384
                $1.jmv(); //#25384
                var _IK = $k[--$j]; //#25384
                $put($k[--$j], _IK, $get($get($1.pp, $1.pb), $1.pa)); //#25384
            } //#25384
        } //#25384
    }; //#25387
    for (var _IO = 0, _IN = $1.algncpos.length - 1; _IO <= _IN; _IO += 1) { //#25398
        $1.j = _IO; //#25389
        $1.y = $get($1.algncpos, $1.j); //#25390
        for (var _IU = 0, _IT = $1.algnrpos.length - 1; _IU <= _IT; _IU += 1) { //#25397
            $1.i = _IU; //#25392
            $1.x = $get($1.algnrpos, $1.i); //#25393
            $k[$j++] = $1.pixs; //#25394
            $k[$j++] = $1.x; //#25394
            $k[$j++] = $1.y; //#25394
            $1.jmv(); //#25394
            var _Ib = $k[--$j]; //#25394
            if ($get($k[--$j], _Ib) == -1) { //#25396
                $k[$j++] = $f($1.x - 1); //#25395
                $k[$j++] = $f($1.y - 1); //#25395
                if ((($1.i + $1.j) % 2) == 0) { //#25395
                    $k[$j++] = $1.algnpat0; //#25395
                } else { //#25395
                    $k[$j++] = $1.algnpat1; //#25395
                } //#25395
                $1.putalgnpat(); //#25395
            } //#25395
        } //#25395
    } //#25395
    if (!$1.slave) { //#25450
        var _JT = $a([$a([6, 1]), $a([6, 2]), $a([6, 3]), $a([6, 4]), $a([6, 5]), $a([6, 6]), $a([5, 6]), $a([4, 6]), $a([3, 6]), $a([2, 6]), $a([1, 6]), $a([7, 1]), $a([7, 2]), $a([7, 3]), $a([7, 4]), $a([7, 5]), $a([7, 6]), $a([7, 7]), $a([6, 7]), $a([5, 7]), $a([4, 7]), $a([3, 7]), $a([2, 7]), $a([1, 7]), $a([8, 1]), $a([8, 2]), $a([8, 3]), $a([8, 4]), $a([8, 5]), $a([8, 6]), $a([8, 7]), $a([8, 8]), $a([7, 8]), $a([6, 8]), $a([5, 8]), $a([4, 8]), $a([3, 8]), $a([2, 8]), $a([1, 8]), $a([9, 1]), $a([9, 2]), $a([9, 3]), $a([9, 4]), $a([9, 5])]); //#25409
        for (var _JU = 0, _JV = _JT.length; _JU < _JV; _JU++) { //#25413
            $aload($get(_JT, _JU)); //#25411
            $1.y = $k[--$j]; //#25411
            $1.x = $k[--$j]; //#25411
            $k[$j++] = $a([$1.x, $1.y]); //#25412
            $k[$j++] = $a([-$1.x, $1.y]); //#25412
            $k[$j++] = $a([-$1.x, -$1.y]); //#25412
            $k[$j++] = $a([$1.x, -$1.y]); //#25412
        } //#25412
        $astore($a(176)); //#25414
        $1.metadatamap = $k[--$j]; //#25414
        $1.palettemap1 = $a([$a([4, 1]), $a([4, 2]), $a([5, 1]), $a([5, 2]), $a([2, 4]), $a([2, 5]), $a([1, 4]), $a([1, 5]), $a([-2, 1]), $a([-2, 2]), $a([-1, 1]), $a([-1, 2]), $a([-4, 4]), $a([-4, 5]), $a([-5, 4]), $a([-5, 5])]); //#25419
        $1.palettemap2 = $a([$a([-4, -5]), $a([-4, -4]), $a([-5, -5]), $a([-5, -4]), $a([-2, -2]), $a([-2, -1]), $a([-1, -2]), $a([-1, -1]), $a([2, -5]), $a([2, -4]), $a([1, -5]), $a([1, -4]), $a([4, -2]), $a([4, -1]), $a([5, -2]), $a([5, -1])]); //#25424
    } else { //#25450
        $k[$j++] = Infinity; //#25437
        for (var _KL = 1; _KL <= 19; _KL += 1) { //#25434
            $1.i = _KL; //#25432
            $k[$j++] = $a([0, $1.i]); //#25433
            $k[$j++] = $a([1, $1.i]); //#25433
        } //#25433
        for (var _KQ = 5; _KQ <= 12; _KQ += 1) { //#25438
            $1.i = _KQ; //#25436
            $k[$j++] = $a([2, $1.i]); //#25437
            $k[$j++] = $a([3, $1.i]); //#25437
        } //#25437
        $1.metadatamap = $a(); //#25437
        $k[$j++] = Infinity; //#25445
        for (var _KW = 5; _KW <= 12; _KW += 1) { //#25442
            $k[$j++] = _KW; //#25442
            $k[$j++] = Infinity; //#25442
            var _KX = $k[--$j]; //#25442
            var _KY = $k[--$j]; //#25442
            $k[$j++] = _KX; //#25442
            $k[$j++] = 4; //#25442
            $k[$j++] = _KY; //#25442
            var _KZ = $a(); //#25442
            $k[$j++] = _KZ; //#25442
        } //#25442
        for (var _Ka = 12; _Ka >= 5; _Ka -= 1) { //#25443
            $k[$j++] = _Ka; //#25443
            $k[$j++] = Infinity; //#25443
            var _Kb = $k[--$j]; //#25443
            var _Kc = $k[--$j]; //#25443
            $k[$j++] = _Kb; //#25443
            $k[$j++] = 5; //#25443
            $k[$j++] = _Kc; //#25443
            var _Kd = $a(); //#25443
            $k[$j++] = _Kd; //#25443
        } //#25443
        for (var _Ke = 5; _Ke <= 12; _Ke += 1) { //#25444
            $k[$j++] = _Ke; //#25444
            $k[$j++] = Infinity; //#25444
            var _Kf = $k[--$j]; //#25444
            var _Kg = $k[--$j]; //#25444
            $k[$j++] = _Kf; //#25444
            $k[$j++] = 6; //#25444
            $k[$j++] = _Kg; //#25444
            var _Kh = $a(); //#25444
            $k[$j++] = _Kh; //#25444
        } //#25444
        for (var _Ki = 12; _Ki >= 5; _Ki -= 1) { //#25445
            $k[$j++] = _Ki; //#25445
            $k[$j++] = Infinity; //#25445
            var _Kj = $k[--$j]; //#25445
            var _Kk = $k[--$j]; //#25445
            $k[$j++] = _Kj; //#25445
            $k[$j++] = 7; //#25445
            $k[$j++] = _Kk; //#25445
            var _Kl = $a(); //#25445
            $k[$j++] = _Kl; //#25445
        } //#25445
        $1.palettemap1 = $a(); //#25445
        $k[$j++] = Infinity; //#25449
        var _Kn = $1.palettemap1; //#25449
        for (var _Ko = 0, _Kp = _Kn.length; _Ko < _Kp; _Ko++) { //#25449
            $k[$j++] = $get(_Kn, _Ko); //#25449
            $k[$j++] = Infinity; //#25449
            var _Kr = $k[--$j]; //#25449
            var _Ks = $k[--$j]; //#25449
            $k[$j++] = _Kr; //#25449
            $aload(_Ks); //#25449
            var _Kt = $k[--$j]; //#25449
            var _Ku = $k[--$j]; //#25449
            $k[$j++] = -_Ku; //#25449
            $k[$j++] = -_Kt; //#25449
            var _Kv = $a(); //#25449
            $k[$j++] = _Kv; //#25449
        } //#25449
        $1.palettemap2 = $a(); //#25449
    } //#25450
    var _Kx = $1.metadatamap; //#25455
    for (var _Ky = 0, _Kz = _Kx.length; _Ky < _Kz; _Ky++) { //#25459
        var _L0 = $get(_Kx, _Ky); //#25459
        var _L1 = $get(_L0, 0); //#25456
        $k[$j++] = _L0; //#25456
        $k[$j++] = _L1; //#25456
        if (_L1 < 0) { //#25456
            var _L3 = $k[--$j]; //#25456
            var _L4 = $k[--$j]; //#25456
            $put(_L4, 0, $f($f(_L3 + $1.cols) - 1)); //#25456
            $k[$j++] = _L4; //#25456
        } else { //#25456
            $j--; //#25456
        } //#25456
        var _L5 = $k[--$j]; //#25457
        var _L6 = $get(_L5, 1); //#25457
        $k[$j++] = _L5; //#25457
        $k[$j++] = _L6; //#25457
        if (_L6 < 0) { //#25457
            var _L8 = $k[--$j]; //#25457
            var _L9 = $k[--$j]; //#25457
            $put(_L9, 1, $f($f(_L8 + $1.rows) - 1)); //#25457
            $k[$j++] = _L9; //#25457
        } else { //#25457
            $j--; //#25457
        } //#25457
        $j--; //#25458
    } //#25458
    var _LA = $1.palettemap1; //#25460
    for (var _LB = 0, _LC = _LA.length; _LB < _LC; _LB++) { //#25464
        var _LD = $get(_LA, _LB); //#25464
        var _LE = $get(_LD, 0); //#25461
        $k[$j++] = _LD; //#25461
        $k[$j++] = _LE; //#25461
        if (_LE < 0) { //#25461
            var _LG = $k[--$j]; //#25461
            var _LH = $k[--$j]; //#25461
            $put(_LH, 0, $f($f(_LG + $1.cols) - 1)); //#25461
            $k[$j++] = _LH; //#25461
        } else { //#25461
            $j--; //#25461
        } //#25461
        var _LI = $k[--$j]; //#25462
        var _LJ = $get(_LI, 1); //#25462
        $k[$j++] = _LI; //#25462
        $k[$j++] = _LJ; //#25462
        if (_LJ < 0) { //#25462
            var _LL = $k[--$j]; //#25462
            var _LM = $k[--$j]; //#25462
            $put(_LM, 1, $f($f(_LL + $1.rows) - 1)); //#25462
            $k[$j++] = _LM; //#25462
        } else { //#25462
            $j--; //#25462
        } //#25462
        $j--; //#25463
    } //#25463
    var _LN = $1.palettemap2; //#25465
    for (var _LO = 0, _LP = _LN.length; _LO < _LP; _LO++) { //#25469
        var _LQ = $get(_LN, _LO); //#25469
        var _LR = $get(_LQ, 0); //#25466
        $k[$j++] = _LQ; //#25466
        $k[$j++] = _LR; //#25466
        if (_LR < 0) { //#25466
            var _LT = $k[--$j]; //#25466
            var _LU = $k[--$j]; //#25466
            $put(_LU, 0, $f($f(_LT + $1.cols) - 1)); //#25466
            $k[$j++] = _LU; //#25466
        } else { //#25466
            $j--; //#25466
        } //#25466
        var _LV = $k[--$j]; //#25467
        var _LW = $get(_LV, 1); //#25467
        $k[$j++] = _LV; //#25467
        $k[$j++] = _LW; //#25467
        if (_LW < 0) { //#25467
            var _LY = $k[--$j]; //#25467
            var _LZ = $k[--$j]; //#25467
            $put(_LZ, 1, $f($f(_LY + $1.rows) - 1)); //#25467
            $k[$j++] = _LZ; //#25467
        } else { //#25467
            $j--; //#25467
        } //#25467
        $j--; //#25468
    } //#25468
    for (var _Lc = 0, _Lb = $f($1.nummetamodules - 1); _Lc <= _Lb; _Lc += 1) { //#25474
        $k[$j++] = $1.pixs; //#25473
        $aload($get($1.metadatamap, _Lc)); //#25473
        $1.jmv(); //#25473
        var _Lg = $k[--$j]; //#25473
        $put($k[--$j], _Lg, 0); //#25473
    } //#25473
    if (!$1.slave) { //#25487
        var _Lj = $1.colors; //#25479
        var _Lk = 16; //#25479
        if (16 > _Lj) { //#25479
            var _ = _Lj; //#25479
            _Lj = _Lk; //#25479
            _Lk = _; //#25479
        } //#25479
        for (var _Lm = 0, _Ll = _Lk - 1; _Lm <= _Ll; _Lm += 1) { //#25484
            $1.i = _Lm; //#25480
            var _Lp = $get($1.palettelayout, $1.i); //#25481
            $k[$j++] = _Lp; //#25482
            $k[$j++] = $1.pixs; //#25482
            $k[$j++] = _Lp; //#25482
            $aload($get($1.palettemap1, $1.i)); //#25482
            $1.jmv(); //#25482
            var _Lu = $k[--$j]; //#25482
            var _Lv = $k[--$j]; //#25482
            $put($k[--$j], _Lu, _Lv); //#25482
            var _Ly = $k[--$j]; //#25483
            $k[$j++] = $1.pixs; //#25483
            $k[$j++] = _Ly; //#25483
            $aload($get($1.palettemap2, $1.i)); //#25483
            $1.jmv(); //#25483
            var _M2 = $k[--$j]; //#25483
            var _M3 = $k[--$j]; //#25483
            $put($k[--$j], _M2, _M3); //#25483
        } //#25483
        $1.i = 16; //#25485
    } else { //#25487
        $1.i = 0; //#25487
    } //#25487
    $1.j = $1.nummetamodules; //#25491
    for (var _M9 = $1.i, _M8 = $1.palettelayout.length - 1; _M9 <= _M8; _M9 += 2) { //#25501
        $1.i = _M9; //#25493
        var _MC = $get($1.palettelayout, $1.i); //#25494
        $k[$j++] = _MC; //#25495
        $k[$j++] = $1.pixs; //#25495
        $k[$j++] = _MC; //#25495
        $aload($get($1.metadatamap, $1.j)); //#25495
        $1.jmv(); //#25495
        var _MH = $k[--$j]; //#25495
        var _MI = $k[--$j]; //#25495
        $put($k[--$j], _MH, _MI); //#25495
        var _ML = $k[--$j]; //#25496
        $k[$j++] = $1.pixs; //#25496
        $k[$j++] = _ML; //#25496
        $aload($get($1.metadatamap, $f($1.j + 2))); //#25496
        $1.jmv(); //#25496
        var _MP = $k[--$j]; //#25496
        var _MQ = $k[--$j]; //#25496
        $put($k[--$j], _MP, _MQ); //#25496
        var _MU = $get($1.palettelayout, $1.i + 1); //#25497
        $k[$j++] = _MU; //#25498
        $k[$j++] = $1.pixs; //#25498
        $k[$j++] = _MU; //#25498
        $aload($get($1.metadatamap, $f($1.j + 1))); //#25498
        $1.jmv(); //#25498
        var _MZ = $k[--$j]; //#25498
        var _Ma = $k[--$j]; //#25498
        $put($k[--$j], _MZ, _Ma); //#25498
        var _Md = $k[--$j]; //#25499
        $k[$j++] = $1.pixs; //#25499
        $k[$j++] = _Md; //#25499
        $aload($get($1.metadatamap, $f($1.j + 3))); //#25499
        $1.jmv(); //#25499
        var _Mh = $k[--$j]; //#25499
        var _Mi = $k[--$j]; //#25499
        $put($k[--$j], _Mh, _Mi); //#25499
        $1.j = $f($1.j + 4); //#25500
    } //#25500
    var _NA = $a([function() {
        var _Ml = $k[--$j]; //#25505
        var _Mm = $k[--$j]; //#25505
        $k[$j++] = $f(_Mm + _Ml) % $1.colors; //#25505
    }, function() {
        $j--; //#25506
        var _Mp = $k[--$j]; //#25506
        $k[$j++] = _Mp % $1.colors; //#25506
    }, function() {
        var _Mq = $k[--$j]; //#25507
        var _Mr = $k[--$j]; //#25507
        $k[$j++] = _Mq; //#25507
        $k[$j++] = _Mr; //#25507
        $j--; //#25507
        var _Mt = $k[--$j]; //#25507
        $k[$j++] = _Mt % $1.colors; //#25507
    }, function() {
        var _Mu = $k[--$j]; //#25508
        var _Mv = $k[--$j]; //#25508
        $k[$j++] = ((~~(_Mu / 3)) + (~~(_Mv / 2))) % $1.colors; //#25508
    }, function() {
        var _Mx = $k[--$j]; //#25509
        var _My = $k[--$j]; //#25509
        $k[$j++] = ((~~(_Mx / 2)) + (~~(_My / 3))) % $1.colors; //#25509
    }, function() {
        var _N0 = $k[--$j]; //#25510
        var _N2 = $f($k[--$j] + _N0); //#25510
        $k[$j++] = ((~~(_N2 / 2)) + (~~(_N2 / 3))) % $1.colors; //#25510
    }, function() {
        var _N4 = $k[--$j]; //#25511
        var _N5 = $k[--$j]; //#25511
        $k[$j++] = ($f(((_N4 * (_N5 * _N5)) % 7) + ((($f(_N4 + (_N5 * _N5))) * 2) % 19))) % $1.colors; //#25511
    }, function() {
        var _N7 = $k[--$j]; //#25512
        var _N8 = $k[--$j]; //#25512
        $k[$j++] = ($f(((_N8 * (_N7 * _N7)) % 5) + (($f((_N7 * _N7) + (_N8 * 2))) % 13))) % $1.colors; //#25512
    }]); //#25512
    $1.maskfuncs = _NA; //#25513
    if ($1.mask != -1) { //#25517
        $1.maskfuncs = $a([$get($1.maskfuncs, $1.mask)]); //#25515
        $1.bestmaskval = $1.mask; //#25516
    } //#25516
    $1.masks = $a($1.maskfuncs.length); //#25518
    for (var _NL = 0, _NK = $1.masks.length - 1; _NL <= _NK; _NL += 1) { //#25531
        $1.m = _NL; //#25520
        $1.mask = $a($1.rows * $1.cols); //#25521
        for (var _NR = 0, _NQ = $f($1.rows - 1); _NR <= _NQ; _NR += 1) { //#25529
            $1.j = _NR; //#25523
            for (var _NU = 0, _NT = $f($1.cols - 1); _NU <= _NT; _NU += 1) { //#25528
                $1.i = _NU; //#25525
                $k[$j++] = $1.pixs; //#25526
                $k[$j++] = $1.i; //#25526
                $k[$j++] = $1.j; //#25526
                $1.jmv(); //#25526
                var _NY = $k[--$j]; //#25526
                if ($get($k[--$j], _NY) == -1) { //#25526
                    $k[$j++] = $1.i; //#25526
                    $k[$j++] = $1.j; //#25526
                    if ($get($1.maskfuncs, $1.m)() === true) {
                        break;
                    } //#25526
                } else { //#25526
                    $k[$j++] = 0; //#25526
                } //#25526
                $k[$j++] = $1.mask; //#25527
                $k[$j++] = $1.i; //#25527
                $k[$j++] = $1.j; //#25527
                $1.jmv(); //#25527
                var _Nj = $k[--$j]; //#25527
                var _Nk = $k[--$j]; //#25527
                $put(_Nk, _Nj, $k[--$j]); //#25527
            } //#25527
        } //#25527
        $put($1.masks, $1.m, $1.mask); //#25530
    } //#25530
    $1.posx = 0; //#25534
    $1.posy = 0; //#25534
    $1.i = 0; //#25535
    for (;;) { //#25545
        if ($1.posx == $1.cols) { //#25537
            break; //#25537
        } //#25537
        $k[$j++] = $1.pixs; //#25538
        $k[$j++] = $1.posx; //#25538
        $k[$j++] = $1.posy; //#25538
        $1.jmv(); //#25538
        var _Nu = $k[--$j]; //#25538
        if ($get($k[--$j], _Nu) == -1) { //#25542
            var _O0 = $geti($1.bits, $1.i, $1.databpm); //#25539
            $k[$j++] = 0; //#25539
            for (var _O1 = 0, _O2 = _O0.length; _O1 < _O2; _O1++) { //#25539
                var _O4 = $k[--$j]; //#25539
                $k[$j++] = ($f(_O4 + $f($get(_O0, _O1) - 48))) * 2; //#25539
            } //#25539
            var _O5 = $k[--$j]; //#25539
            $k[$j++] = ~~(_O5 / 2); //#25540
            $k[$j++] = $1.pixs; //#25540
            $k[$j++] = $1.posx; //#25540
            $k[$j++] = $1.posy; //#25540
            $1.jmv(); //#25540
            var _O9 = $k[--$j]; //#25540
            var _OA = $k[--$j]; //#25540
            $put(_OA, _O9, $k[--$j]); //#25540
            $1.i = $1.i + $1.databpm; //#25541
        } //#25541
        $1.posy = $1.posy + 1; //#25543
        if ($1.posy == $1.rows) { //#25544
            $1.posy = 0; //#25544
            $1.posx = $1.posx + 1; //#25544
        } //#25544
    } //#25544
    $1.evalrle = function() {
        $1.scrle = $k[--$j]; //#25549
        $1.scr1 = 0; //#25550
        $1.scr3 = 0; //#25550
        for (var _OL = 0, _OK = $1.scrle.length - 2; _OL <= _OK; _OL += 2) { //#25572
            $1.j = _OL; //#25552
            if ($get($1.scrle, $1.j + 1) != -1) { //#25571
                var _OR = $get($1.scrle, $1.j); //#25555
                $k[$j++] = _OR; //#25555
                if (_OR >= 5) { //#25555
                    $1.scr1 = $f($f($k[--$j] - 2) + $1.scr1); //#25555
                } else { //#25555
                    $j--; //#25555
                } //#25555
                if (($1.j >= 4) && ($1.j <= ($1.scrle.length - 5))) { //#25570
                    var _OZ = $geti($1.scrle, $1.j - 4, 10); //#25558
                    $k[$j++] = _OZ; //#25559
                    for (var _Oa = 0, _Ob = _OZ.length; _Oa < _Ob; _Oa++) { //#25559
                        $k[$j++] = $get(_OZ, _Oa) == 1; //#25559
                    } //#25559
                    $j--; //#25559
                    for (var _Od = 0, _Oe = 4; _Od < _Oe; _Od++) { //#25559
                        var _Of = $k[--$j]; //#25559
                        var _Og = $k[--$j]; //#25559
                        $k[$j++] = _Of; //#25559
                        $k[$j++] = _Og; //#25559
                        $j--; //#25559
                        var _Oh = $k[--$j]; //#25559
                        var _Oi = $k[--$j]; //#25559
                        $k[$j++] = $an(_Oi, _Oh); //#25559
                    } //#25559
                    if ($k[--$j]) { //#25569
                        $k[$j++] = Infinity; //#25560
                        var _Ok = $k[--$j]; //#25560
                        var _Ol = $k[--$j]; //#25560
                        $k[$j++] = _Ok; //#25560
                        $aload(_Ol); //#25560
                        var _Om = $k[--$j]; //#25561
                        var _On = $k[--$j]; //#25561
                        var _Oo = $k[--$j]; //#25561
                        var _Op = $k[--$j]; //#25561
                        var _Oq = $k[--$j]; //#25561
                        var _Or = $k[--$j]; //#25561
                        var _Os = $k[--$j]; //#25561
                        var _Ot = $k[--$j]; //#25561
                        var _Ou = $k[--$j]; //#25561
                        $k[$j++] = _Ou; //#25567
                        $k[$j++] = _Ot; //#25567
                        $k[$j++] = _Os; //#25567
                        $k[$j++] = _Or; //#25567
                        $k[$j++] = _Oq; //#25567
                        $k[$j++] = _Op; //#25567
                        $k[$j++] = _Oo; //#25567
                        $k[$j++] = _On; //#25567
                        $k[$j++] = _Om; //#25567
                        if (($eq(_Ou, _Oq) && $eq(_Ou, _Om)) && $eq(_Os, _Oo)) { //#25567
                            var _Ov = $k[--$j]; //#25563
                            var _Ow = $k[--$j]; //#25563
                            var _Ox = $k[--$j]; //#25563
                            $1.c4 = _Ox; //#25563
                            $1.c5 = _Ov; //#25563
                            $k[$j++] = _Ox; //#25566
                            $k[$j++] = _Ow; //#25566
                            if ((($1.c4 == $1.bi) && ($1.c5 == $1.yi)) || ((($1.c4 == $1.yi) && ($1.c5 == $1.bi)) || ((($1.c4 == $1.gi) && ($1.c5 == $1.mi)) || (($1.c4 == $1.mi) && ($1.c5 == $1.gi))))) { //#25566
                                $1.scr3 = $1.scr3 + 100; //#25566
                            } //#25566
                        } //#25566
                        $cleartomark(); //#25568
                    } else { //#25569
                        $j--; //#25569
                    } //#25569
                } //#25569
            } //#25569
        } //#25569
        $k[$j++] = $1.scr1; //#25573
        $k[$j++] = $1.scr3; //#25573
    }; //#25574
    $1.evalmask = function() {
        $1.sym = $k[--$j]; //#25577
        $1.n1 = 0; //#25579
        $1.n2 = 0; //#25579
        $1.n3 = 0; //#25579
        var _PI = $1.rows; //#25580
        var _PJ = $1.cols; //#25580
        if (_PI < _PJ) { //#25580
            var _ = _PJ; //#25580
            _PJ = _PI; //#25580
            _PI = _; //#25580
        } //#25580
        $1.rle = $a($f((_PI * 2) + 2)); //#25580
        $1.lastpairs = $a($1.cols); //#25581
        $1.thispairs = $a($1.cols); //#25582
        for (var _PR = 0, _PQ = $f($1.cols - 1); _PR <= _PQ; _PR += 1) { //#25594
            $1.i = _PR; //#25586
            $k[$j++] = Infinity; //#25587
            $k[$j++] = 0; //#25590
            $k[$j++] = -1; //#25590
            for (var _PX = $1.i, _PY = $1.cols, _PW = $f(($1.rows * $1.cols) - 1); _PY < 0 ? _PX >= _PW : _PX <= _PW; _PX += _PY) { //#25590
                var _Pa = $get($1.sym, _PX); //#25589
                var _Pb = $k[--$j]; //#25589
                $k[$j++] = _Pb; //#25589
                $k[$j++] = _Pa; //#25589
                if ($eq(_Pb, _Pa)) { //#25589
                    $j--; //#25589
                    var _Pc = $k[--$j]; //#25589
                    var _Pd = $k[--$j]; //#25589
                    $k[$j++] = $f(_Pd + 1); //#25589
                    $k[$j++] = _Pc; //#25589
                } else { //#25589
                    var _Pe = $k[--$j]; //#25589
                    $k[$j++] = 1; //#25589
                    $k[$j++] = _Pe; //#25589
                } //#25589
            } //#25589
            var _Pg = $counttomark() + 2; //#25591
            $astore($geti($1.rle, 0, _Pg - 2)); //#25591
            $1.evalrle(); //#25592
            $1.n3 = $f($k[--$j] + $1.n3); //#25592
            $1.n1 = $f($k[--$j] + $1.n1); //#25592
            $j--; //#25593
        } //#25593
        for (var _Po = 0, _Pn = $f($1.rows - 1); _Po <= _Pn; _Po += 1) { //#25621
            $1.i = _Po; //#25597
            $1.symrow = $geti($1.sym, $1.i * $1.cols, $1.cols); //#25600
            $k[$j++] = Infinity; //#25601
            var _Pu = $1.symrow; //#25602
            $k[$j++] = 0; //#25604
            $k[$j++] = -1; //#25604
            for (var _Pv = 0, _Pw = _Pu.length; _Pv < _Pw; _Pv++) { //#25604
                var _Px = $get(_Pu, _Pv); //#25604
                var _Py = $k[--$j]; //#25603
                $k[$j++] = _Py; //#25603
                $k[$j++] = _Px; //#25603
                if ($eq(_Py, _Px)) { //#25603
                    $j--; //#25603
                    var _Pz = $k[--$j]; //#25603
                    var _Q0 = $k[--$j]; //#25603
                    $k[$j++] = $f(_Q0 + 1); //#25603
                    $k[$j++] = _Pz; //#25603
                } else { //#25603
                    var _Q1 = $k[--$j]; //#25603
                    $k[$j++] = 1; //#25603
                    $k[$j++] = _Q1; //#25603
                } //#25603
            } //#25603
            var _Q3 = $counttomark() + 2; //#25605
            $astore($geti($1.rle, 0, _Q3 - 2)); //#25605
            $1.evalrle(); //#25606
            $1.n3 = $f($k[--$j] + $1.n3); //#25606
            $1.n1 = $f($k[--$j] + $1.n1); //#25606
            $j--; //#25607
            var _Q9 = $1.thispairs; //#25610
            $1.thispairs = $1.lastpairs; //#25610
            $1.lastpairs = _Q9; //#25610
            var _QB = $1.symrow; //#25611
            $k[$j++] = -1; //#25611
            for (var _QC = 0, _QD = _QB.length; _QC < _QD; _QC++) { //#25611
                var _QE = $get(_QB, _QC); //#25611
                var _QF = $k[--$j]; //#25611
                $k[$j++] = _QE; //#25611
                $k[$j++] = _QF; //#25611
                if ($ne(_QE, _QF)) { //#25611
                    $j--; //#25611
                    var _QG = $k[--$j]; //#25611
                    $k[$j++] = -1; //#25611
                    $k[$j++] = _QG; //#25611
                } //#25611
            } //#25611
            $j--; //#25612
            $astore($1.thispairs); //#25613
            $j--; //#25613
            if ($1.i > 0) { //#25620
                $k[$j++] = Infinity; //#25615
                $aload($1.lastpairs); //#25616
                $aload($1.thispairs); //#25616
                $k[$j++] = $1.n2; //#25617
                for (var _QN = 0, _QO = $1.cols; _QN < _QO; _QN++) { //#25617
                    var _QP = $k[--$j]; //#25617
                    var _QQ = $k[--$j]; //#25617
                    $k[$j++] = _QP; //#25617
                    $k[$j++] = _QQ; //#25617
                    if (_QQ != -1) { //#25617
                        var _QS = $k[$j - 1 - $f($1.cols + 1)]; //#25617
                        if ($eq($k[--$j], _QS)) { //#25617
                            var _QU = $k[--$j]; //#25617
                            $k[$j++] = $f(_QU + 3); //#25617
                        } //#25617
                    } else { //#25617
                        $j--; //#25617
                    } //#25617
                } //#25617
                $1.n2 = $k[--$j]; //#25618
                $cleartomark(); //#25619
            } //#25619
        } //#25619
        $k[$j++] = $f($f($1.n1 + $1.n2) + $1.n3); //#25623
    }; //#25624
    $1.bestscore = 999999999; //#25627
    for (var _Qb = 0, _Qa = $1.masks.length - 1; _Qb <= _Qa; _Qb += 1) { //#25645
        $1.m = _Qb; //#25629
        $1.masksym = $a($1.rows * $1.cols); //#25630
        for (var _Qi = 0, _Qh = $f(($1.rows * $1.cols) - 1); _Qi <= _Qh; _Qi += 1) { //#25634
            $1.i = _Qi; //#25632
            $put($1.masksym, $1.i, $xo($get($1.pixs, $1.i), $get($get($1.masks, $1.m), $1.i))); //#25633
        } //#25633
        if ($1.masks.length != 1) { //#25643
            $k[$j++] = $1.masksym; //#25636
            $1.evalmask(); //#25636
            $1.score = $k[--$j]; //#25636
            if ($1.score < $1.bestscore) { //#25641
                $1.bestsym = $1.masksym; //#25638
                $1.bestmaskval = $1.m; //#25639
                $1.bestscore = $1.score; //#25640
            } //#25640
        } else { //#25643
            $1.bestsym = $1.masksym; //#25643
        } //#25643
    } //#25643
    $1.pixs = $1.bestsym; //#25646
    $1.metamask = $1.bestmaskval; //#25647
    $1.addtometapart = function() {
        var _R4 = $k[--$j]; //#25651
        $puti($1.metapart, $1.p, _R4); //#25651
        $1.p = _R4.length + $1.p; //#25652
    }; //#25653
    $1.addtometabits = function() {
        var _R8 = $k[--$j]; //#25656
        $puti($1.metabits, $1.q, _R8); //#25656
        $1.q = _R8.length + $1.q; //#25657
    }; //#25658
    $1.metapart = $s(40); //#25660
    $1.metabits = $s($1.nummetabits); //#25661
    $1.p = 0; //#25662
    $1.q = 0; //#25662
    if (!$1.slave) { //#25717
        $k[$j++] = (~~(Math.round(Math.log($1.colors) / Math.log(2)))) - 1; //#25667
        $k[$j++] = 3; //#25667
        $1.tofixedbits(); //#25667
        $1.addtometapart(); //#25667
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#25668
        $k[$j++] = 2; //#25668
        $k[$j++] = -1; //#25668
        $1.ldpc(); //#25668
        $1.addtometabits(); //#25668
        $1.p = 0; //#25668
        $k[$j++] = $1.metass; //#25671
        $k[$j++] = 1; //#25671
        $1.tofixedbits(); //#25671
        $1.addtometapart(); //#25671
        $k[$j++] = $1.metavf; //#25672
        $k[$j++] = 2; //#25672
        $1.tofixedbits(); //#25672
        $1.addtometapart(); //#25672
        $k[$j++] = $1.metamask; //#25673
        $k[$j++] = 3; //#25673
        $1.tofixedbits(); //#25673
        $1.addtometapart(); //#25673
        if ($1.hasslaves) { //#25674
            $k[$j++] = "1"; //#25674
        } else { //#25674
            $k[$j++] = "0"; //#25674
        } //#25674
        $1.addtometapart(); //#25674
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#25675
        $k[$j++] = 2; //#25675
        $k[$j++] = -1; //#25675
        $1.ldpc(); //#25675
        $1.addtometabits(); //#25675
        $1.p = 0; //#25675
        if ($1.metass == 0) { //#25685
            $k[$j++] = $f(($f((~~($f($1.cols - 17) / 4)) - $get($a([0, 4, 8, 16]), $1.metavf))) - 1); //#25680
            $k[$j++] = $1.metavlen; //#25680
            $1.tofixedbits(); //#25680
            $1.addtometapart(); //#25680
        } else { //#25685
            $k[$j++] = (~~($f($1.cols - 17) / 4)) - 1; //#25683
            $k[$j++] = ~~($1.metavlen / 2); //#25683
            $1.tofixedbits(); //#25683
            $1.addtometapart(); //#25683
            $k[$j++] = (~~($f($1.rows - 17) / 4)) - 1; //#25685
            $k[$j++] = ~~($1.metavlen / 2); //#25685
            $1.tofixedbits(); //#25685
            $1.addtometapart(); //#25685
        } //#25685
        $k[$j++] = $1.datawc - 3; //#25687
        $k[$j++] = ~~($1.metaelen / 2); //#25687
        $1.tofixedbits(); //#25687
        $1.addtometapart(); //#25687
        $k[$j++] = $1.datawr - 4; //#25688
        $k[$j++] = ~~($1.metaelen / 2); //#25688
        $1.tofixedbits(); //#25688
        $1.addtometapart(); //#25688
        if ($1.hasslaves) { //#25691
            $k[$j++] = 0; //#25690
            $k[$j++] = 4; //#25690
            $1.tofixedbits(); //#25690
            $1.addtometapart(); //#25690
        } //#25690
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#25692
        $k[$j++] = 2; //#25692
        $k[$j++] = -1; //#25692
        $1.ldpc(); //#25692
        $1.addtometabits(); //#25692
        $1.p = 0; //#25692
    } else { //#25717
        var _Rk = $1.sameshape ? 0 : 1; //#25697
        $k[$j++] = _Rk; //#25697
        $k[$j++] = 1; //#25697
        $1.tofixedbits(); //#25697
        $1.addtometapart(); //#25697
        var _Rm = $1.sameecc ? 0 : 1; //#25698
        $k[$j++] = _Rm; //#25698
        $k[$j++] = 1; //#25698
        $1.tofixedbits(); //#25698
        $1.addtometapart(); //#25698
        var _Ro = $1.hasslaves ? 1 : 0; //#25699
        $k[$j++] = _Ro; //#25699
        $k[$j++] = 1; //#25699
        $1.tofixedbits(); //#25699
        $1.addtometapart(); //#25699
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#25700
        $k[$j++] = 2; //#25700
        $k[$j++] = -1; //#25700
        $1.ldpc(); //#25700
        $1.addtometabits(); //#25700
        $1.p = 0; //#25700
        if (!$1.sameshape) { //#25706
            $k[$j++] = (~~(($1.diffside - 17) / 4)) - 1; //#25705
            $k[$j++] = 5; //#25705
            $1.tofixedbits(); //#25705
            $1.addtometapart(); //#25705
        } //#25705
        if ($1.hasslaves) { //#25709
            $k[$j++] = 0; //#25708
            $k[$j++] = 3; //#25708
            $1.tofixedbits(); //#25708
            $1.addtometapart(); //#25708
        } //#25708
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#25710
        $k[$j++] = 2; //#25710
        $k[$j++] = -1; //#25710
        $1.ldpc(); //#25710
        $1.addtometabits(); //#25710
        $1.p = 0; //#25710
        if (!$1.sameecc) { //#25716
            $k[$j++] = $1.datawc - 3; //#25714
            $k[$j++] = ~~($1.metaelen / 2); //#25714
            $1.tofixedbits(); //#25714
            $1.addtometapart(); //#25714
            $k[$j++] = $1.datawr - 4; //#25715
            $k[$j++] = ~~($1.metaelen / 2); //#25715
            $1.tofixedbits(); //#25715
            $1.addtometapart(); //#25715
        } //#25715
        $k[$j++] = $geti($1.metapart, 0, $1.p); //#25717
        $k[$j++] = 2; //#25717
        $k[$j++] = -1; //#25717
        $1.ldpc(); //#25717
        $1.addtometabits(); //#25717
        $1.p = 0; //#25717
    } //#25717
    for (var _S9 = $1.q, _S8 = $f($1.nummetabits - 1); _S9 <= _S8; _S9 += 1) { //#25722
        $put($1.metabits, _S9, 48); //#25721
    } //#25721
    $1.i = 0; //#25725
    $1.j = 0; //#25725
    if (!$1.slave) { //#25733
        var _SE = $geti($1.metabits, $1.i, 6); //#25727
        for (var _SF = 0, _SG = _SE.length; _SF < _SG; _SF++) { //#25731
            $k[$j++] = $get(_SE, _SF); //#25728
            if ($1.colors == 4) { //#25728
                $k[$j++] = $a([$1.bi, $1.yi]); //#25728
            } else { //#25728
                $k[$j++] = $a([$1.ki, $1.wi]); //#25728
            } //#25728
            var _SP = $k[--$j]; //#25728
            var _SR = $get(_SP, $f($k[--$j] - 48)); //#25728
            $k[$j++] = _SR; //#25729
            $k[$j++] = $1.pixs; //#25729
            $aload($get($1.metadatamap, $1.j)); //#25729
            $1.jmv(); //#25729
            var _SW = $k[--$j]; //#25729
            var _SX = $k[--$j]; //#25729
            $put(_SX, _SW, $k[--$j]); //#25729
            $1.j = $1.j + 1; //#25730
        } //#25730
        $1.i = $1.i + 6; //#25732
    } //#25732
    for (var _Se = 0, _Sf = ~~($f($1.nummetabits - $1.i) / $1.metabpm); _Se < _Sf; _Se++) { //#25740
        var _Sj = $geti($1.metabits, $1.i, $1.metabpm); //#25735
        $k[$j++] = 0; //#25735
        for (var _Sk = 0, _Sl = _Sj.length; _Sk < _Sl; _Sk++) { //#25735
            var _Sn = $k[--$j]; //#25735
            $k[$j++] = ($f(_Sn + $f($get(_Sj, _Sk) - 48))) * 2; //#25735
        } //#25735
        var _Sq = $get($1.metacolorindex, ~~($k[--$j] / 2)); //#25736
        $k[$j++] = _Sq; //#25737
        $k[$j++] = $1.pixs; //#25737
        $aload($get($1.metadatamap, $1.j)); //#25737
        $1.jmv(); //#25737
        var _Sv = $k[--$j]; //#25737
        var _Sw = $k[--$j]; //#25737
        $put(_Sw, _Sv, $k[--$j]); //#25737
        $1.i = $f($1.i + $1.metabpm); //#25738
        $1.j = $1.j + 1; //#25739
    } //#25739
    var _T8 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.pixs],
        ["pixx", $1.cols],
        ["pixy", $1.rows],
        ["colormap", $1.palette],
        ["height", ($1.rows * 2) / 72],
        ["width", ($1.cols * 2) / 72],
        ["opt", $1.options]
    ]); //#25750
    $k[$j++] = _T8; //#25753
    if (!$1.dontdraw) { //#25753
        bwipp_renmatrix(); //#25753
    } //#25753
}

function bwipp_gs1_cc() {
    var $1 = {}; //#25786
    $1.options = $k[--$j]; //#25788
    $1.barcode = $k[--$j]; //#25789
    $1.parse = false; //#25791
    $1.dontlint = false; //#25792
    $1.dontdraw = false; //#25793
    $1.ccversion = "a"; //#25794
    $1.cccolumns = -1; //#25795
    $1.lintype = ""; //#25796
    $1.linwidth = -1; //#25797
    $forall($1.options, function() { //#25808
        var _3 = $k[--$j]; //#25808
        $1[$k[--$j]] = _3; //#25808
    }); //#25808
    $1.cccolumns = ~~$1.cccolumns; //#25810
    $1.linwidth = ~~$1.linwidth; //#25811
    if ($1.cccolumns == -1) { //#25830
        $k[$j++] = Infinity; //#25828
        $k[$j++] = 'ean13'; //#25821
        $k[$j++] = 4; //#25821
        $k[$j++] = 'upca'; //#25821
        $k[$j++] = 4; //#25821
        $k[$j++] = 'ean8'; //#25821
        $k[$j++] = 3; //#25821
        $k[$j++] = 'upce'; //#25821
        $k[$j++] = 2; //#25821
        $k[$j++] = 'gs1-128'; //#25821
        if ($ne($1.ccversion, "c")) { //#25821
            $k[$j++] = 4; //#25821
        } else { //#25821
            $k[$j++] = ~~(($1.linwidth - 52) / 17); //#25821
        } //#25821
        $k[$j++] = 'databaromni'; //#25828
        $k[$j++] = 4; //#25828
        $k[$j++] = 'databarstacked'; //#25828
        $k[$j++] = 2; //#25828
        $k[$j++] = 'databarstackedomni'; //#25828
        $k[$j++] = 2; //#25828
        $k[$j++] = 'databartruncated'; //#25828
        $k[$j++] = 4; //#25828
        $k[$j++] = 'databarlimited'; //#25828
        $k[$j++] = 3; //#25828
        $k[$j++] = 'databarexpanded'; //#25828
        $k[$j++] = 4; //#25828
        $k[$j++] = 'databarexpandedstacked'; //#25828
        $k[$j++] = 4; //#25828
        $1.cccolumns = $get($d(), $1.lintype); //#25829
    } //#25829
    $1.expand = function() {
        var _E = new Map([
            ["parse", $1.parse],
            ["parseonly", true],
            ["parsefnc", false]
        ]); //#25837
        $1.fncvals = _E; //#25838
        $k[$j++] = $1.fncvals; //#25839
        bwipp_parseinput(); //#25839
    }; //#25840
    $1.ais = $a([]); //#25843
    $1.vals = $a([]); //#25844
    var _I = $1.barcode; //#25845
    $k[$j++] = $geti(_I, 1, _I.length - 1); //#25858
    for (;;) { //#25858
        var _K = $k[--$j]; //#25847
        $k[$j++] = _K; //#25847
        if ($eq(_K, "")) { //#25847
            break; //#25847
        } //#25847
        $search($k[--$j], ")"); //#25848
        $j--; //#25848
        var _M = $k[--$j]; //#25849
        var _N = $k[--$j]; //#25849
        $k[$j++] = _M; //#25849
        $k[$j++] = _N; //#25849
        $j--; //#25849
        var _O = $k[--$j]; //#25850
        var _P = $k[--$j]; //#25850
        $k[$j++] = _O; //#25850
        $search(_P, "("); //#25850
        if ($k[--$j]) { //#25853
            var _R = $k[--$j]; //#25851
            var _S = $k[--$j]; //#25851
            $k[$j++] = _R; //#25851
            $k[$j++] = _S; //#25851
            $j--; //#25851
            var _T = $k[--$j]; //#25851
            var _U = $k[--$j]; //#25851
            var _V = $k[--$j]; //#25851
            $k[$j++] = _U; //#25851
            $k[$j++] = _V; //#25851
            $k[$j++] = _T; //#25851
        } else { //#25853
            var _W = $k[--$j]; //#25853
            var _X = $k[--$j]; //#25853
            $k[$j++] = ""; //#25853
            $k[$j++] = _X; //#25853
            $k[$j++] = _W; //#25853
        } //#25853
        $k[$j++] = Infinity; //#25855
        $aload($1.ais); //#25855
        var _a = $k[$j - 1 - ($counttomark() + 2)]; //#25855
        $k[$j++] = _a; //#25855
        $1.ais = $a(); //#25855
        $k[$j++] = Infinity; //#25856
        $aload($1.vals); //#25856
        var _e = $k[$j - 1 - ($counttomark() + 1)]; //#25856
        $k[$j++] = _e; //#25856
        $1.expand(); //#25856
        $1.vals = $a(); //#25856
        $j -= 2; //#25857
    } //#25857
    $j--; //#25859
    var _g = $1.dontlint; //#25861
    if (!_g) { //#25861
        $k[$j++] = $1.ais; //#25861
        $k[$j++] = $1.vals; //#25861
        bwipp_gs1lint(); //#25861
        $j--; //#25861
    } //#25861
    $1.isupper = function() {
        var _j = $k[--$j]; //#25864
        $k[$j++] = (_j >= 65) && (_j <= 90); //#25864
    }; //#25864
    $1.isnum0 = function() {
        var _k = $k[--$j]; //#25865
        $k[$j++] = (_k >= 48) && (_k <= 57); //#25865
    }; //#25865
    $1.isnum1 = function() {
        var _l = $k[--$j]; //#25866
        $k[$j++] = (_l >= 49) && (_l <= 57); //#25866
    }; //#25866
    for (;;) { //#25912
        if ($1.ais.length >= 1) { //#25874
            if (($eq($get($1.ais, 0), "10") || $eq($get($1.ais, 0), "11")) || $eq($get($1.ais, 0), "17")) { //#25873
                $k[$j++] = -1; //#25872
                $k[$j++] = "10"; //#25872
                break; //#25872
            } //#25872
        } //#25872
        if ($1.ais.length >= 1) { //#25907
            if ($eq($get($1.ais, 0), "90")) { //#25906
                $1.v = $get($1.vals, 0); //#25879
                if ($1.v.length >= 1) { //#25884
                    $k[$j++] = $get($1.v, 0); //#25881
                    $1.isupper(); //#25881
                    if ($k[--$j]) { //#25883
                        $k[$j++] = 0; //#25882
                        $k[$j++] = "11"; //#25882
                        break; //#25882
                    } //#25882
                } //#25882
                if ($1.v.length >= 2) { //#25890
                    $k[$j++] = $get($1.v, 0); //#25886
                    $1.isnum1(); //#25886
                    $k[$j++] = $get($1.v, 1); //#25887
                    $1.isupper(); //#25887
                    var _17 = $k[--$j]; //#25887
                    var _18 = $k[--$j]; //#25887
                    if ((_18 && _17)) { //#25889
                        $k[$j++] = 1; //#25888
                        $k[$j++] = "11"; //#25888
                        break; //#25888
                    } //#25888
                } //#25888
                if ($1.v.length >= 3) { //#25897
                    $k[$j++] = $get($1.v, 0); //#25892
                    $1.isnum1(); //#25892
                    $k[$j++] = $get($1.v, 1); //#25893
                    $1.isnum0(); //#25893
                    var _1E = $k[--$j]; //#25893
                    var _1F = $k[--$j]; //#25893
                    $k[$j++] = $an(_1F, _1E); //#25894
                    $k[$j++] = $get($1.v, 2); //#25894
                    $1.isupper(); //#25894
                    var _1I = $k[--$j]; //#25894
                    var _1J = $k[--$j]; //#25894
                    if ((_1J && _1I)) { //#25896
                        $k[$j++] = 2; //#25895
                        $k[$j++] = "11"; //#25895
                        break; //#25895
                    } //#25895
                } //#25895
                if ($1.v.length >= 4) { //#25905
                    $k[$j++] = $get($1.v, 0); //#25899
                    $1.isnum1(); //#25899
                    $k[$j++] = $get($1.v, 1); //#25900
                    $1.isnum0(); //#25900
                    var _1P = $k[--$j]; //#25900
                    var _1Q = $k[--$j]; //#25900
                    $k[$j++] = $an(_1Q, _1P); //#25901
                    $k[$j++] = $get($1.v, 2); //#25901
                    $1.isnum0(); //#25901
                    var _1T = $k[--$j]; //#25901
                    var _1U = $k[--$j]; //#25901
                    $k[$j++] = $an(_1U, _1T); //#25902
                    $k[$j++] = $get($1.v, 3); //#25902
                    $1.isupper(); //#25902
                    var _1X = $k[--$j]; //#25902
                    var _1Y = $k[--$j]; //#25902
                    if ((_1Y && _1X)) { //#25904
                        $k[$j++] = 3; //#25903
                        $k[$j++] = "11"; //#25903
                        break; //#25903
                    } //#25903
                } //#25903
            } //#25903
        } //#25903
        $k[$j++] = -1; //#25910
        $k[$j++] = "0"; //#25910
        break; //#25910
    } //#25910
    $1.method = $k[--$j]; //#25913
    $1.npre = $k[--$j]; //#25914
    $1.fnc1 = -1; //#25916
    $1.lnumeric = -2; //#25916
    $1.lalphanumeric = -3; //#25916
    $1.liso646 = -4; //#25916
    $1.tobin = function() {
        var _1c = $s($k[--$j]); //#25919
        $k[$j++] = _1c; //#25919
        for (var _1e = 0, _1d = _1c.length - 1; _1e <= _1d; _1e += 1) { //#25919
            var _1f = $k[--$j]; //#25919
            $put(_1f, _1e, 48); //#25919
            $k[$j++] = _1f; //#25919
        } //#25919
        var _1g = $k[--$j]; //#25920
        var _1j = $cvrs($s(_1g.length), $k[--$j], 2); //#25920
        $puti(_1g, _1g.length - _1j.length, _1j); //#25920
        $k[$j++] = _1g; //#25920
    }; //#25921
    $k[$j++] = Infinity; //#25926
    for (var _1k = 65; _1k <= 90; _1k += 1) { //#25924
        $k[$j++] = _1k; //#25924
        $k[$j++] = _1k - 65; //#25924
        $k[$j++] = 5; //#25924
        $1.tobin(); //#25924
    } //#25924
    for (var _1l = 48; _1l <= 57; _1l += 1) { //#25925
        $k[$j++] = _1l; //#25925
        $k[$j++] = _1l + 4; //#25925
        $k[$j++] = 6; //#25925
        $1.tobin(); //#25925
    } //#25925
    $k[$j++] = $1.fnc1; //#25926
    $k[$j++] = "11111"; //#25926
    $1.alpha = $d(); //#25927
    $k[$j++] = Infinity; //#25939
    for (var _1o = 0; _1o <= 119; _1o += 1) { //#25938
        var _1q = $strcpy($s(2), "00"); //#25931
        var _1s = $cvrs($s(2), _1o, 11); //#25931
        $puti(_1q, 2 - _1s.length, _1s); //#25932
        $k[$j++] = _1o; //#25933
        $k[$j++] = _1q; //#25933
        if ($get(_1q, 0) == 65) { //#25933
            var _1u = $k[--$j]; //#25933
            $put(_1u, 0, 94); //#25933
            $k[$j++] = _1u; //#25933
        } //#25933
        var _1v = $k[--$j]; //#25934
        $k[$j++] = _1v; //#25934
        if ($get(_1v, 1) == 65) { //#25934
            var _1x = $k[--$j]; //#25934
            $put(_1x, 1, 94); //#25934
            $k[$j++] = _1x; //#25934
        } //#25934
        var _1y = $k[--$j]; //#25935
        var _21 = $strcpy($s(7), "0000000"); //#25936
        var _23 = $cvrs($s(7), $f($k[--$j] + 8), 2); //#25936
        $puti(_21, 7 - _23.length, _23); //#25937
        $k[$j++] = _1y; //#25937
        $k[$j++] = _21; //#25937
    } //#25937
    $k[$j++] = $1.lalphanumeric; //#25939
    $k[$j++] = "0000"; //#25939
    $1.numeric = $d(); //#25940
    $k[$j++] = Infinity; //#25949
    for (var _26 = 48; _26 <= 57; _26 += 1) { //#25943
        $k[$j++] = _26; //#25943
        $k[$j++] = _26 - 43; //#25943
        $k[$j++] = 5; //#25943
        $1.tobin(); //#25943
    } //#25943
    $k[$j++] = $1.fnc1; //#25945
    $k[$j++] = "01111"; //#25945
    for (var _28 = 65; _28 <= 90; _28 += 1) { //#25945
        $k[$j++] = _28; //#25945
        $k[$j++] = _28 - 33; //#25945
        $k[$j++] = 6; //#25945
        $1.tobin(); //#25945
    } //#25945
    $k[$j++] = 42; //#25947
    $k[$j++] = "111010"; //#25947
    for (var _29 = 44; _29 <= 47; _29 += 1) { //#25947
        $k[$j++] = _29; //#25947
        $k[$j++] = _29 + 15; //#25947
        $k[$j++] = 6; //#25947
        $1.tobin(); //#25947
    } //#25947
    $k[$j++] = $1.lnumeric; //#25949
    $k[$j++] = "000"; //#25949
    $k[$j++] = $1.liso646; //#25949
    $k[$j++] = "00100"; //#25949
    $1.alphanumeric = $d(); //#25950
    $k[$j++] = Infinity; //#25964
    for (var _2D = 48; _2D <= 57; _2D += 1) { //#25953
        $k[$j++] = _2D; //#25953
        $k[$j++] = _2D - 43; //#25953
        $k[$j++] = 5; //#25953
        $1.tobin(); //#25953
    } //#25953
    $k[$j++] = $1.fnc1; //#25955
    $k[$j++] = "01111"; //#25955
    for (var _2F = 65; _2F <= 90; _2F += 1) { //#25955
        $k[$j++] = _2F; //#25955
        $k[$j++] = _2F - 1; //#25955
        $k[$j++] = 7; //#25955
        $1.tobin(); //#25955
    } //#25955
    for (var _2G = 97; _2G <= 122; _2G += 1) { //#25956
        $k[$j++] = _2G; //#25956
        $k[$j++] = _2G - 7; //#25956
        $k[$j++] = 7; //#25956
        $1.tobin(); //#25956
    } //#25956
    $k[$j++] = 33; //#25959
    $k[$j++] = "11101000"; //#25959
    $k[$j++] = 34; //#25959
    $k[$j++] = "11101001"; //#25959
    for (var _2H = 37; _2H <= 47; _2H += 1) { //#25959
        $k[$j++] = _2H; //#25959
        $k[$j++] = _2H + 197; //#25959
        $k[$j++] = 8; //#25959
        $1.tobin(); //#25959
    } //#25959
    for (var _2I = 58; _2I <= 63; _2I += 1) { //#25960
        $k[$j++] = _2I; //#25960
        $k[$j++] = _2I + 187; //#25960
        $k[$j++] = 8; //#25960
        $1.tobin(); //#25960
    } //#25960
    $k[$j++] = 95; //#25964
    $k[$j++] = "11111011"; //#25964
    $k[$j++] = 32; //#25964
    $k[$j++] = "11111100"; //#25964
    $k[$j++] = $1.lnumeric; //#25964
    $k[$j++] = "000"; //#25964
    $k[$j++] = $1.lalphanumeric; //#25964
    $k[$j++] = "00100"; //#25964
    $1.iso646 = $d(); //#25965
    if ($eq($1.method, "10")) { //#25998
        if ($eq($get($1.ais, 0), "11") || $eq($get($1.ais, 0), "17")) { //#25982
            var _2S = $get($1.vals, 0); //#25969
            var _2X = $strcpy($s(16), "0000000000000000"); //#25973
            var _2Z = $cvrs($s(16), ($cvi($geti(_2S, 0, 2)) * 384) + ((($cvi($geti(_2S, 2, 2)) - 1) * 32) + $cvi($geti(_2S, 4, 2))), 2); //#25973
            $puti(_2X, 16 - _2Z.length, _2Z); //#25974
            $k[$j++] = _2X; //#25977
            $k[$j++] = Infinity; //#25977
            var _2a = $k[--$j]; //#25976
            var _2b = $k[--$j]; //#25976
            $k[$j++] = _2a; //#25976
            $k[$j++] = 1; //#25976
            $k[$j++] = 0; //#25976
            $forall(_2b, function() { //#25976
                var _2c = $k[--$j]; //#25976
                $k[$j++] = $f(_2c - 48); //#25976
            }); //#25976
            var _2f = $eq($get($1.ais, 0), "11") ? 0 : 1; //#25977
            $k[$j++] = _2f; //#25977
            $1.cdf = $a(); //#25978
            $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#25979
            $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#25980
        } else { //#25982
            $1.cdf = $a([1, 0, 1, 1]); //#25982
        } //#25982
        if ($1.ais.length != 0) { //#25995
            if ($eq($get($1.ais, 0), "10")) { //#25991
                $k[$j++] = Infinity; //#25986
                $forall($get($1.vals, 0)); //#25986
                $1.gpf = $a(); //#25986
                if ($1.ais.length > 1) { //#25987
                    $k[$j++] = Infinity; //#25987
                    $aload($1.gpf); //#25987
                    $k[$j++] = $1.fnc1; //#25987
                    $1.gpf = $a(); //#25987
                } //#25987
                $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#25988
                $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#25989
            } else { //#25991
                $1.gpf = $a([$1.fnc1]); //#25991
            } //#25991
        } else { //#25995
            $k[$j++] = Infinity; //#25994
            $aload($1.cdf); //#25994
            $k[$j++] = 0; //#25994
            $k[$j++] = 0; //#25994
            $k[$j++] = 0; //#25994
            $k[$j++] = 0; //#25994
            $k[$j++] = 0; //#25994
            $k[$j++] = 1; //#25994
            $k[$j++] = 1; //#25994
            $k[$j++] = 1; //#25994
            $k[$j++] = 1; //#25994
            $1.cdf = $a(); //#25994
            $1.gpf = $a([]); //#25995
        } //#25995
        $1.mode = "numeric"; //#25997
    } //#25997
    if ($eq($1.method, "11")) { //#26090
        $1.cdf = $a([1, 1]); //#26001
        $1.ai90 = $get($1.vals, 0); //#26002
        if ($f($1.npre + 1) != $1.ai90.length) { //#26006
            $k[$j++] = $geti($1.ai90, $f($1.npre + 1), $f($f($1.ai90.length - $1.npre) - 1)); //#26004
        } else { //#26006
            $k[$j++] = ""; //#26006
        } //#26006
        $1.ai90rem = $k[--$j]; //#26008
        $k[$j++] = 'nalpha'; //#26009
        $k[$j++] = 0; //#26009
        $forall($1.ai90rem, function() { //#26009
            var _3M = $k[--$j]; //#26009
            if ((_3M >= 65) && (_3M <= 90)) { //#26009
                var _3N = $k[--$j]; //#26009
                $k[$j++] = $f(_3N + 1); //#26009
            } //#26009
        }); //#26009
        var _3O = $k[--$j]; //#26009
        $1[$k[--$j]] = _3O; //#26009
        $k[$j++] = 'nnums'; //#26010
        $k[$j++] = 0; //#26010
        $forall($1.ai90rem, function() { //#26010
            var _3R = $k[--$j]; //#26010
            if ((_3R >= 48) && (_3R <= 57)) { //#26010
                var _3S = $k[--$j]; //#26010
                $k[$j++] = $f(_3S + 1); //#26010
            } //#26010
        }); //#26010
        var _3T = $k[--$j]; //#26010
        $1[$k[--$j]] = _3T; //#26010
        $k[$j++] = 'mode'; //#26011
        if ($gt($1.nalpha, $1.nnums)) { //#26011
            $k[$j++] = "alpha"; //#26011
        } else { //#26011
            if ($1.nalpha == 0) { //#26011
                $k[$j++] = "numeric"; //#26011
            } else { //#26011
                $k[$j++] = "alphanumeric"; //#26011
            } //#26011
        } //#26011
        var _3Y = $k[--$j]; //#26011
        $1[$k[--$j]] = _3Y; //#26011
        if ($f($1.nalpha + $1.nnums) != $1.ai90rem.length) { //#26012
            $1.mode = "alphanumeric"; //#26012
        } //#26012
        $k[$j++] = Infinity; //#26017
        $aload($1.cdf); //#26014
        if ($eq($1.mode, "alphanumeric")) { //#26015
            $k[$j++] = 0; //#26015
        } //#26015
        if ($eq($1.mode, "numeric")) { //#26016
            $k[$j++] = 1; //#26016
            $k[$j++] = 0; //#26016
        } //#26016
        if ($eq($1.mode, "alpha")) { //#26017
            $k[$j++] = 1; //#26017
            $k[$j++] = 1; //#26017
        } //#26017
        $1.cdf = $a(); //#26017
        $k[$j++] = 'ais1'; //#26019
        if ($1.ais.length > 1) { //#26019
            $k[$j++] = $get($1.ais, 1); //#26019
        } else { //#26019
            $k[$j++] = -1; //#26019
        } //#26019
        var _3l = $k[--$j]; //#26019
        $1[$k[--$j]] = _3l; //#26019
        $k[$j++] = 'vals1'; //#26020
        if ($1.vals.length > 1) { //#26020
            $k[$j++] = $get($1.vals, 1); //#26020
        } else { //#26020
            $k[$j++] = -1; //#26020
        } //#26020
        var _3q = $k[--$j]; //#26020
        $1[$k[--$j]] = _3q; //#26020
        if ($eq($1.ais1, "21") || $eq($1.ais1, "8004")) { //#26024
            $k[$j++] = Infinity; //#26022
            $aload($1.cdf); //#26022
            if ($eq($1.ais1, "21")) { //#26022
                $k[$j++] = 1; //#26022
                $k[$j++] = 0; //#26022
            } else { //#26022
                $k[$j++] = 1; //#26022
                $k[$j++] = 1; //#26022
            } //#26022
            $1.cdf = $a(); //#26022
        } else { //#26024
            $k[$j++] = Infinity; //#26024
            $aload($1.cdf); //#26024
            $k[$j++] = 0; //#26024
            $1.cdf = $a(); //#26024
        } //#26024
        $k[$j++] = 'nval'; //#26026
        if ($1.npre != 0) { //#26026
            $k[$j++] = $cvi($geti($1.ai90, 0, $1.npre)); //#26026
        } else { //#26026
            $k[$j++] = 0; //#26026
        } //#26026
        var _43 = $k[--$j]; //#26026
        $1[$k[--$j]] = _43; //#26026
        $search("BDHIJKLNPQRSTVXZ", $geti($1.ai90, $1.npre, 1)); //#26027
        if ($k[--$j]) { //#26031
            var _49 = $k[--$j]; //#26028
            var _4A = $k[--$j]; //#26028
            $k[$j++] = _49.length; //#26028
            $k[$j++] = _4A; //#26028
            $j--; //#26028
            var _4B = $k[--$j]; //#26028
            var _4C = $k[--$j]; //#26028
            $k[$j++] = _4B; //#26028
            $k[$j++] = _4C; //#26028
            $j--; //#26028
            $1.aval = $k[--$j]; //#26029
        } else { //#26031
            $j--; //#26031
            $1.aval = -1; //#26031
        } //#26031
        if (($1.nval < 31) && ($1.aval != -1)) { //#26057
            var _4H = $strcpy($s(5), "00000"); //#26034
            var _4K = $cvrs($s(5), $1.nval, 2); //#26034
            $puti(_4H, 5 - _4K.length, _4K); //#26035
            $k[$j++] = _4H; //#26036
            $k[$j++] = Infinity; //#26036
            var _4L = $k[--$j]; //#26036
            var _4M = $k[--$j]; //#26036
            $k[$j++] = _4L; //#26036
            $forall(_4M, function() { //#26036
                var _4N = $k[--$j]; //#26036
                $k[$j++] = $f(_4N - 48); //#26036
            }); //#26036
            $1.nbits = $a(); //#26036
            var _4Q = $strcpy($s(4), "0000"); //#26037
            var _4T = $cvrs($s(4), $1.aval, 2); //#26037
            $puti(_4Q, 4 - _4T.length, _4T); //#26038
            $k[$j++] = _4Q; //#26039
            $k[$j++] = Infinity; //#26039
            var _4U = $k[--$j]; //#26039
            var _4V = $k[--$j]; //#26039
            $k[$j++] = _4U; //#26039
            $forall(_4V, function() { //#26039
                var _4W = $k[--$j]; //#26039
                $k[$j++] = $f(_4W - 48); //#26039
            }); //#26039
            $1.abits = $a(); //#26039
            $k[$j++] = Infinity; //#26043
            $aload($1.cdf); //#26041
            $aload($1.nbits); //#26042
            $aload($1.abits); //#26043
            $1.cdf = $a(); //#26043
        } else { //#26057
            var _4d = $strcpy($s(10), "0000000000"); //#26046
            var _4g = $cvrs($s(10), $1.nval, 2); //#26046
            $puti(_4d, 10 - _4g.length, _4g); //#26047
            $k[$j++] = _4d; //#26048
            $k[$j++] = Infinity; //#26048
            var _4h = $k[--$j]; //#26048
            var _4i = $k[--$j]; //#26048
            $k[$j++] = _4h; //#26048
            $forall(_4i, function() { //#26048
                var _4j = $k[--$j]; //#26048
                $k[$j++] = $f(_4j - 48); //#26048
            }); //#26048
            $1.nbits = $a(); //#26048
            var _4m = $strcpy($s(5), "00000"); //#26049
            var _4r = $cvrs($s(5), $f($get($1.ai90, $1.npre) - 65), 2); //#26049
            $puti(_4m, 5 - _4r.length, _4r); //#26050
            $k[$j++] = _4m; //#26051
            $k[$j++] = Infinity; //#26051
            var _4s = $k[--$j]; //#26051
            var _4t = $k[--$j]; //#26051
            $k[$j++] = _4s; //#26051
            $forall(_4t, function() { //#26051
                var _4u = $k[--$j]; //#26051
                $k[$j++] = $f(_4u - 48); //#26051
            }); //#26051
            $1.abits = $a(); //#26051
            $k[$j++] = Infinity; //#26056
            $aload($1.cdf); //#26053
            $k[$j++] = 1; //#26055
            $k[$j++] = 1; //#26055
            $k[$j++] = 1; //#26055
            $k[$j++] = 1; //#26055
            $k[$j++] = 1; //#26055
            $aload($1.nbits); //#26055
            $aload($1.abits); //#26056
            $1.cdf = $a(); //#26056
        } //#26057
        if ($ne($1.mode, "alpha")) { //#26075
            $k[$j++] = Infinity; //#26060
            $forall($1.ai90rem); //#26060
            if ($1.ais.length > 1) { //#26060
                $k[$j++] = $1.fnc1; //#26060
            } //#26060
            $1.gpf = $a(); //#26060
        } else { //#26075
            $k[$j++] = Infinity; //#26062
            $forall($1.ai90rem); //#26062
            if ($1.ais.length > 1) { //#26062
                $k[$j++] = $1.fnc1; //#26062
            } //#26062
            $1.in = $a(); //#26062
            $1.out = $a($1.in.length * 6); //#26063
            $1.j = 0; //#26064
            for (var _5D = 0, _5C = $1.in.length - 1; _5D <= _5C; _5D += 1) { //#26069
                var _5H = $get($1.alpha, $get($1.in, _5D)); //#26066
                $k[$j++] = _5H; //#26067
                $k[$j++] = _5H; //#26067
                $k[$j++] = Infinity; //#26067
                var _5I = $k[--$j]; //#26067
                var _5J = $k[--$j]; //#26067
                $k[$j++] = _5I; //#26067
                $forall(_5J, function() { //#26067
                    var _5K = $k[--$j]; //#26067
                    $k[$j++] = $f(_5K - 48); //#26067
                }); //#26067
                $puti($1.out, $1.j, $a()); //#26067
                $1.j = $k[--$j].length + $1.j; //#26068
            } //#26068
            $k[$j++] = Infinity; //#26072
            $aload($1.cdf); //#26071
            $aload($geti($1.out, 0, $1.j)); //#26072
            $1.cdf = $a(); //#26072
            $1.gpf = $a([]); //#26074
            if ($1.ais.length > 1) { //#26075
                $1.mode = "numeric"; //#26075
            } //#26075
        } //#26075
        $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#26077
        $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#26078
        if ($1.ais.length != 0) { //#26089
            if ($eq($1.ais1, "21") || $eq($1.ais1, "8004")) { //#26088
                $k[$j++] = Infinity; //#26083
                $aload($1.gpf); //#26082
                $forall($1.vals1); //#26083
                $1.gpf = $a(); //#26083
                $1.ais = $geti($1.ais, 1, $1.ais.length - 1); //#26085
                $1.vals = $geti($1.vals, 1, $1.vals.length - 1); //#26086
                if ($1.ais.length != 0) { //#26087
                    $k[$j++] = Infinity; //#26087
                    $aload($1.gpf); //#26087
                    $k[$j++] = $1.fnc1; //#26087
                    $1.gpf = $a(); //#26087
                } //#26087
            } //#26087
        } //#26087
    } //#26087
    if ($eq($1.method, "0")) { //#26096
        $1.cdf = $a([0]); //#26093
        $1.gpf = $a([]); //#26094
        $1.mode = "numeric"; //#26095
    } //#26095
    $1.aifixed = new Map; //#26101
    $k[$j++] = Infinity; //#26103
    for (var _5w = 0; _5w <= 4; _5w += 1) { //#26103
        $k[$j++] = _5w; //#26103
    } //#26103
    var _5x = $a(); //#26103
    for (var _5y = 0, _5z = _5x.length; _5y < _5z; _5y++) { //#26106
        var _62 = $strcpy($s(2), "00"); //#26105
        $put(_62, 1, $f($get(_5x, _5y) + 48)); //#26105
        $put($1.aifixed, _62, _62); //#26105
    } //#26105
    $k[$j++] = Infinity; //#26111
    for (var _64 = 11; _64 <= 20; _64 += 1) { //#26108
        $k[$j++] = _64; //#26108
    } //#26108
    $k[$j++] = 23; //#26110
    for (var _65 = 31; _65 <= 36; _65 += 1) { //#26110
        $k[$j++] = _65; //#26110
    } //#26110
    $k[$j++] = 41; //#26111
    var _66 = $a(); //#26111
    for (var _67 = 0, _68 = _66.length; _67 < _68; _67++) { //#26114
        var _6B = $cvrs($s(2), $get(_66, _67), 10); //#26113
        $put($1.aifixed, _6B, _6B); //#26113
    } //#26113
    for (var _6F = 0, _6E = $1.ais.length - 1; _6F <= _6E; _6F += 1) { //#26132
        $1.i = _6F; //#26118
        $1.ai = $get($1.ais, $1.i); //#26119
        $1.val = $get($1.vals, $1.i); //#26120
        var _6P = $a(($1.gpf.length + $1.ai.length) + $1.val.length); //#26121
        $puti(_6P, 0, $1.gpf); //#26122
        $k[$j++] = _6P; //#26123
        $k[$j++] = _6P; //#26123
        $k[$j++] = $1.gpf.length; //#26123
        $k[$j++] = $1.ai; //#26123
        $k[$j++] = Infinity; //#26123
        var _6T = $k[--$j]; //#26123
        var _6U = $k[--$j]; //#26123
        $k[$j++] = _6T; //#26123
        $forall(_6U); //#26123
        var _6V = $a(); //#26123
        var _6W = $k[--$j]; //#26123
        $puti($k[--$j], _6W, _6V); //#26123
        var _6Y = $k[--$j]; //#26124
        $k[$j++] = _6Y; //#26124
        $k[$j++] = _6Y; //#26124
        $k[$j++] = $1.gpf.length + $1.ai.length; //#26124
        $k[$j++] = $1.val; //#26124
        $k[$j++] = Infinity; //#26124
        var _6c = $k[--$j]; //#26124
        var _6d = $k[--$j]; //#26124
        $k[$j++] = _6c; //#26124
        $forall(_6d); //#26124
        var _6e = $a(); //#26124
        var _6f = $k[--$j]; //#26124
        $puti($k[--$j], _6f, _6e); //#26124
        $1.gpf = $k[--$j]; //#26125
        var _6n = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; //#26126
        if (($1.i != ($1.ais.length - 1)) && (!_6n)) { //#26131
            var _6p = $a($1.gpf.length + 1); //#26127
            $puti(_6p, 0, $1.gpf); //#26128
            $put(_6p, $1.gpf.length, $1.fnc1); //#26129
            $1.gpf = _6p; //#26130
        } //#26130
    } //#26130
    $1.rembits = function() {
        $1.used = $k[--$j]; //#26136
        if ($ne($1.ccversion, "c")) { //#26170
            var _73 = new Map([
                ["a", $a([$a([167, 138, 118, 108, 88, 78, 59]), $a([167, 138, 118, 98, 78]), $a([197, 167, 138, 108, 78])])],
                ["b", $a([$a([336, 296, 256, 208, 160, 104, 56]), $a([768, 648, 536, 416, 304, 208, 152, 112, 72, 32]), $a([1184, 1016, 840, 672, 496, 352, 264, 208, 152, 96, 56])])]
            ]); //#26147
            $1.bitcaps = $get($get(_73, $1.ccversion), $f($1.cccolumns - 2)); //#26149
            $k[$j++] = -1; //#26150
            $forall($1.bitcaps, function() { //#26150
                var _79 = $k[--$j]; //#26150
                $k[$j++] = _79; //#26150
                if ($ge(_79, $1.used)) { //#26150
                    var _7B = $k[--$j]; //#26150
                    var _7C = $k[--$j]; //#26150
                    $k[$j++] = _7B; //#26150
                    $k[$j++] = _7C; //#26150
                } //#26150
                $j--; //#26150
            }); //#26150
            var _7D = $k[--$j]; //#26151
            $k[$j++] = _7D; //#26151
            if (_7D != -1) { //#26151
                var _7F = $k[--$j]; //#26151
                $k[$j++] = $f(_7F - $1.used); //#26151
            } //#26151
        } else { //#26170
            var _7G = new Map([
                ["c", -1]
            ]); //#26153
            var _7I = $get(_7G, $1.ccversion); //#26153
            var _7K = ~~Math.ceil($1.used / 8); //#26154
            $1.m = ((~~(_7K / 6)) * 5) + (_7K % 6); //#26154
            if ($1.m <= 40) { //#26155
                $k[$j++] = 8; //#26155
            } //#26155
            if (($1.m >= 41) && ($1.m <= 160)) { //#26156
                $k[$j++] = 16; //#26156
            } //#26156
            if (($1.m >= 161) && ($1.m <= 320)) { //#26157
                $k[$j++] = 32; //#26157
            } //#26157
            if (($1.m >= 321) && ($1.m <= 833)) { //#26158
                $k[$j++] = 64; //#26158
            } //#26158
            if ($1.m >= 834) { //#26159
                $k[$j++] = 32; //#26159
            } //#26159
            $1.eccws = $k[--$j]; //#26160
            $1.m = $f($f($1.m + $1.eccws) + 3); //#26161
            if ($1.cccolumns > 30) { //#26162
                $1.cccolumns = 30; //#26162
            } //#26162
            for (;;) { //#26166
                if (((~~Math.ceil($1.m / $1.cccolumns)) <= 30) || ($1.cccolumns >= 30)) { //#26164
                    break; //#26164
                } //#26164
                $1.cccolumns = $1.cccolumns + 1; //#26165
            } //#26165
            $1.r = ~~Math.ceil($1.m / $1.cccolumns); //#26167
            if ($1.r < 3) { //#26168
                $1.r = 3; //#26168
            } //#26168
            var _7h = $f(($f(($1.cccolumns * $1.r) - $1.eccws)) - 3); //#26169
            $1.tgt = ($f(((~~(_7h / 5)) * 6) + (_7h % 5))) * 8; //#26169
            if ($1.used <= 8304) { //#26170
                $k[$j++] = $f($1.tgt - $1.used); //#26170
            } else { //#26170
                $k[$j++] = -1; //#26170
            } //#26170
        } //#26170
        var _7l = $k[--$j]; //#26172
        $k[$j++] = _7l; //#26185
        if (_7l == -1) { //#26185
            $j--; //#26173
            if ($eq($1.ccversion, "a")) { //#26181
                $1.ccversion = "b"; //#26175
            } else { //#26181
                if ($eq($1.ccversion, "b") && $eq($1.lintype, "gs1-128")) { //#26181
                    $1.ccversion = "c"; //#26178
                    $1.cccolumns = ~~(($1.linwidth - 52) / 17); //#26179
                } else { //#26181
                    $1.ccversion = -1; //#26181
                } //#26181
            } //#26181
            $k[$j++] = $1.used; //#26184
            $1.rembits(); //#26184
        } //#26184
    }; //#26186
    $1.encode = function() {
        var _7r = $k[--$j]; //#26189
        $k[$j++] = _7r; //#26189
        if ($ne(_7r, 'raw')) { //#26189
            var _7s = $k[--$j]; //#26189
            var _7u = $get(_7s, $k[--$j]); //#26189
            $k[$j++] = _7u; //#26189
        } else { //#26189
            $j--; //#26189
        } //#26189
        $k[$j++] = Infinity; //#26190
        var _7v = $k[--$j]; //#26190
        var _7w = $k[--$j]; //#26190
        $k[$j++] = _7v; //#26190
        $forall(_7w, function() { //#26190
            var _7x = $k[--$j]; //#26190
            $k[$j++] = $f(_7x - 48); //#26190
        }); //#26190
        var _7y = $a(); //#26190
        $puti($1.gpfenc, $1.j, _7y); //#26192
        $1.j = _7y.length + $1.j; //#26193
    }; //#26194
    $k[$j++] = Infinity; //#26197
    for (var _83 = 0, _84 = $1.gpf.length; _83 < _84; _83++) { //#26197
        $k[$j++] = 0; //#26197
    } //#26197
    $k[$j++] = 0; //#26197
    $k[$j++] = -1; //#26197
    $1.numericruns = $a(); //#26197
    $k[$j++] = Infinity; //#26198
    for (var _87 = 0, _88 = $1.gpf.length; _87 < _88; _87++) { //#26198
        $k[$j++] = 0; //#26198
    } //#26198
    $k[$j++] = 0; //#26198
    $1.alphanumericruns = $a(); //#26198
    $k[$j++] = Infinity; //#26199
    for (var _8B = 0, _8C = $1.gpf.length; _8B < _8C; _8B++) { //#26199
        $k[$j++] = 0; //#26199
    } //#26199
    $k[$j++] = 9999; //#26199
    $1.nextiso646only = $a(); //#26199
    for (var _8F = $1.gpf.length - 1; _8F >= 0; _8F -= 1) { //#26221
        $1.i = _8F; //#26201
        var _8K = $strcpy($s(2), "00"); //#26203
        var _8N = $get($1.gpf, $1.i); //#26204
        $k[$j++] = $get($1.gpf, $1.i); //#26204
        $k[$j++] = _8K; //#26204
        $k[$j++] = _8K; //#26204
        $k[$j++] = 0; //#26204
        $k[$j++] = _8N; //#26204
        if (_8N == $1.fnc1) { //#26204
            $j--; //#26204
            $k[$j++] = 94; //#26204
        } //#26204
        var _8P = $k[--$j]; //#26204
        var _8Q = $k[--$j]; //#26204
        $put($k[--$j], _8Q, _8P); //#26204
        if ($1.i < ($1.gpf.length - 1)) { //#26205
            var _8U = $k[--$j]; //#26205
            var _8X = $get($1.gpf, $1.i + 1); //#26205
            $k[$j++] = _8U; //#26205
            $k[$j++] = _8U; //#26205
            $k[$j++] = 1; //#26205
            $k[$j++] = _8X; //#26205
            if (_8X == $1.fnc1) { //#26205
                $j--; //#26205
                $k[$j++] = 94; //#26205
            } //#26205
            var _8Z = $k[--$j]; //#26205
            var _8a = $k[--$j]; //#26205
            $put($k[--$j], _8a, _8Z); //#26205
        } //#26205
        var _8e = $get($1.numeric, $k[--$j]) !== undefined; //#26206
        if (_8e) { //#26209
            $put($1.numericruns, $1.i, $f($get($1.numericruns, $1.i + 2) + 2)); //#26207
        } else { //#26209
            $put($1.numericruns, $1.i, 0); //#26209
        } //#26209
        var _8m = $k[--$j]; //#26211
        var _8o = $get($1.alphanumeric, _8m) !== undefined; //#26211
        $k[$j++] = _8m; //#26215
        if (_8o) { //#26214
            $put($1.alphanumericruns, $1.i, $f($get($1.alphanumericruns, $1.i + 1) + 1)); //#26212
        } else { //#26214
            $put($1.alphanumericruns, $1.i, 0); //#26214
        } //#26214
        var _8w = $k[--$j]; //#26216
        var _8y = $get($1.iso646, _8w) !== undefined; //#26216
        var _90 = $get($1.alphanumeric, _8w) !== undefined; //#26216
        if (_8y && (!_90)) { //#26219
            $put($1.nextiso646only, $1.i, 0); //#26217
        } else { //#26219
            $put($1.nextiso646only, $1.i, $f($get($1.nextiso646only, $1.i + 1) + 1)); //#26219
        } //#26219
    } //#26219
    $1.gpfenc = $a(8304); //#26224
    $1.i = 0; //#26225
    $1.j = 0; //#26225
    for (;;) { //#26315
        if ($1.i == $1.gpf.length) { //#26227
            break; //#26227
        } //#26227
        for (;;) { //#26314
            if ($eq($1.mode, "numeric")) { //#26263
                if ($1.i <= ($1.gpf.length - 2)) { //#26260
                    var _9E = $s(2); //#26232
                    var _9H = $get($1.gpf, $1.i); //#26233
                    $k[$j++] = _9E; //#26233
                    $k[$j++] = _9E; //#26233
                    $k[$j++] = 0; //#26233
                    $k[$j++] = _9H; //#26233
                    if (_9H == $1.fnc1) { //#26233
                        $j--; //#26233
                        $k[$j++] = 94; //#26233
                    } //#26233
                    var _9J = $k[--$j]; //#26233
                    var _9K = $k[--$j]; //#26233
                    $put($k[--$j], _9K, _9J); //#26233
                    var _9M = $k[--$j]; //#26234
                    var _9P = $get($1.gpf, $1.i + 1); //#26234
                    $k[$j++] = _9M; //#26234
                    $k[$j++] = _9M; //#26234
                    $k[$j++] = 1; //#26234
                    $k[$j++] = _9P; //#26234
                    if (_9P == $1.fnc1) { //#26234
                        $j--; //#26234
                        $k[$j++] = 94; //#26234
                    } //#26234
                    var _9R = $k[--$j]; //#26234
                    var _9S = $k[--$j]; //#26234
                    $put($k[--$j], _9S, _9R); //#26234
                    var _9U = $k[--$j]; //#26235
                    var _9W = $get($1.numeric, _9U) !== undefined; //#26235
                    $k[$j++] = _9U; //#26239
                    if (_9W) { //#26239
                        $k[$j++] = $1.numeric; //#26236
                        $1.encode(); //#26236
                        $1.i = $1.i + 2; //#26237
                        break; //#26238
                    } //#26238
                    $j--; //#26240
                    $k[$j++] = $1.lalphanumeric; //#26241
                    $k[$j++] = $1.numeric; //#26241
                    $1.encode(); //#26241
                    $1.mode = "alphanumeric"; //#26242
                    break; //#26243
                } else { //#26260
                    var _9d = $get($1.gpf, $1.i); //#26245
                    if ((_9d < 48) || (_9d > 57)) { //#26249
                        $k[$j++] = $1.lalphanumeric; //#26246
                        $k[$j++] = $1.numeric; //#26246
                        $1.encode(); //#26246
                        $1.mode = "alphanumeric"; //#26247
                        break; //#26248
                    } //#26248
                    $k[$j++] = 'rem'; //#26250
                    $k[$j++] = $1.cdf.length + $1.j; //#26250
                    $1.rembits(); //#26250
                    var _9i = $k[--$j]; //#26250
                    $1[$k[--$j]] = _9i; //#26250
                    if (($1.rem >= 4) && ($1.rem <= 6)) { //#26260
                        var _9p = $geti($strcpy($s(6), "000000"), 0, $1.rem); //#26252
                        var _9u = $cvrs($s(4), $f($get($1.gpf, $1.i) - 47), 2); //#26253
                        $puti(_9p, 4 - _9u.length, _9u); //#26254
                        $k[$j++] = _9p; //#26254
                        $k[$j++] = 'raw'; //#26254
                        $1.encode(); //#26254
                        $1.i = $1.i + 1; //#26255
                        break; //#26256
                    } else { //#26260
                        var _9w = $s(2); //#26258
                        $put(_9w, 0, $get($1.gpf, $1.i)); //#26258
                        $put(_9w, 1, 94); //#26258
                        $k[$j++] = _9w; //#26258
                        $k[$j++] = $1.numeric; //#26258
                        $1.encode(); //#26258
                        $1.i = $1.i + 1; //#26259
                        break; //#26260
                    } //#26260
                } //#26260
            } //#26260
            if ($eq($1.mode, "alphanumeric")) { //#26290
                if ($get($1.gpf, $1.i) == $1.fnc1) { //#26271
                    $k[$j++] = $1.fnc1; //#26267
                    $k[$j++] = $1.alphanumeric; //#26267
                    $1.encode(); //#26267
                    $1.mode = "numeric"; //#26268
                    $1.i = $1.i + 1; //#26269
                    break; //#26270
                } //#26270
                var _AC = $get($1.gpf, $1.i); //#26272
                var _AE = $get($1.iso646, _AC) !== undefined; //#26272
                var _AG = $get($1.alphanumeric, _AC) !== undefined; //#26272
                if (_AE && (!_AG)) { //#26276
                    $k[$j++] = $1.liso646; //#26273
                    $k[$j++] = $1.alphanumeric; //#26273
                    $1.encode(); //#26273
                    $1.mode = "iso646"; //#26274
                    break; //#26275
                } //#26275
                if ($get($1.numericruns, $1.i) >= 6) { //#26281
                    $k[$j++] = $1.lnumeric; //#26278
                    $k[$j++] = $1.alphanumeric; //#26278
                    $1.encode(); //#26278
                    $1.mode = "numeric"; //#26279
                    break; //#26280
                } //#26280
                var _AQ = $get($1.numericruns, $1.i); //#26282
                if ((_AQ >= 4) && ($f(_AQ + $1.i) == $1.gpf.length)) { //#26286
                    $k[$j++] = $1.lnumeric; //#26283
                    $k[$j++] = $1.alphanumeric; //#26283
                    $1.encode(); //#26283
                    $1.mode = "numeric"; //#26284
                    break; //#26285
                } //#26285
                $k[$j++] = $get($1.gpf, $1.i); //#26287
                $k[$j++] = $1.alphanumeric; //#26287
                $1.encode(); //#26287
                $1.i = $1.i + 1; //#26288
                break; //#26289
            } //#26289
            if ($eq($1.mode, "iso646")) { //#26312
                if ($get($1.gpf, $1.i) == $1.fnc1) { //#26298
                    $k[$j++] = $1.fnc1; //#26294
                    $k[$j++] = $1.iso646; //#26294
                    $1.encode(); //#26294
                    $1.mode = "numeric"; //#26295
                    $1.i = $1.i + 1; //#26296
                    break; //#26297
                } //#26297
                if (($get($1.numericruns, $1.i) >= 4) && ($get($1.nextiso646only, $1.i) >= 10)) { //#26303
                    $k[$j++] = $1.lnumeric; //#26300
                    $k[$j++] = $1.iso646; //#26300
                    $1.encode(); //#26300
                    $1.mode = "numeric"; //#26301
                    break; //#26302
                } //#26302
                if (($get($1.alphanumericruns, $1.i) >= 5) && ($get($1.nextiso646only, $1.i) >= 10)) { //#26308
                    $k[$j++] = $1.lalphanumeric; //#26305
                    $k[$j++] = $1.iso646; //#26305
                    $1.encode(); //#26305
                    $1.mode = "alphanumeric"; //#26306
                    break; //#26307
                } //#26307
                $k[$j++] = $get($1.gpf, $1.i); //#26309
                $k[$j++] = $1.iso646; //#26309
                $1.encode(); //#26309
                $1.i = $1.i + 1; //#26310
                break; //#26311
            } //#26311
        } //#26311
    } //#26311
    $1.gpf = $geti($1.gpfenc, 0, $1.j); //#26316
    $k[$j++] = 'pad'; //#26319
    $k[$j++] = $1.cdf.length + $1.gpf.length; //#26319
    $1.rembits(); //#26319
    var _B9 = $a($k[--$j]); //#26319
    $1[$k[--$j]] = _B9; //#26319
    if ($1.pad.length > 0) { //#26331
        for (var _BE = 0, _BD = $1.pad.length - 1; _BE <= _BD; _BE += 5) { //#26324
            $1.i = _BE; //#26322
            var _BF = $1.pad; //#26323
            var _BG = $1.i; //#26323
            var _BH = $a([0, 0, 1, 0, 0]); //#26323
            var _BI = $1.pad; //#26323
            var _BJ = $1.i; //#26323
            var _BK = 5; //#26323
            var _BL = _BI.length - _BJ; //#26323
            if ((_BI.length - _BJ) > 5) { //#26323
                var _ = _BK; //#26323
                _BK = _BL; //#26323
                _BL = _; //#26323
            } //#26323
            $puti(_BF, _BG, $geti(_BH, 0, _BL)); //#26323
        } //#26323
        if ($eq($1.mode, "numeric")) { //#26327
            $k[$j++] = Infinity; //#26326
            $k[$j++] = 0; //#26326
            $k[$j++] = 0; //#26326
            $k[$j++] = 0; //#26326
            $k[$j++] = 0; //#26326
            $aload($1.pad); //#26326
            $1.pad = $geti($a(), 0, $1.pad.length); //#26326
        } //#26326
        if ($eq($1.mode, "alpha")) { //#26330
            $k[$j++] = Infinity; //#26329
            $k[$j++] = 1; //#26329
            $k[$j++] = 1; //#26329
            $k[$j++] = 1; //#26329
            $k[$j++] = 1; //#26329
            $k[$j++] = 1; //#26329
            $k[$j++] = 0; //#26329
            $k[$j++] = 0; //#26329
            $k[$j++] = 0; //#26329
            $k[$j++] = 0; //#26329
            $aload($1.pad); //#26329
            $1.pad = $geti($a(), 0, $1.pad.length); //#26329
        } //#26329
    } //#26329
    $k[$j++] = Infinity; //#26337
    $aload($1.cdf); //#26335
    $aload($1.gpf); //#26336
    $aload($1.pad); //#26337
    $1.bits = $a(); //#26337
    if ($1.ccversion == "a") { //#26394
        $k[$j++] = Infinity; //#26343
        $k[$j++] = $a([0, 0, 0, 0, 0, 0, 1]); //#26343
        for (var _Bd = 0, _Be = 68; _Bd < _Be; _Bd++) { //#26343
            $k[$j++] = $a(7); //#26343
        } //#26343
        $1.pwr928 = $a(); //#26343
        for (var _Bh = 1; _Bh <= 68; _Bh += 1) { //#26354
            $1.j = _Bh; //#26346
            $1.v = 0; //#26347
            for (var _Bi = 6; _Bi >= 1; _Bi -= 1) { //#26352
                $1.i = _Bi; //#26349
                $1.v = $f(($get($get($1.pwr928, $1.j - 1), $1.i) * 2) + (~~($1.v / 928))); //#26350
                $put($get($1.pwr928, $1.j), $1.i, $1.v % 928); //#26351
            } //#26351
            $put($get($1.pwr928, $1.j), 0, $f(($get($get($1.pwr928, $1.j - 1), 0) * 2) + (~~($1.v / 928)))); //#26353
        } //#26353
        $k[$j++] = Infinity; //#26355
        for (var _C2 = 0, _C3 = 28; _C2 < _C3; _C2++) { //#26355
            $k[$j++] = 0; //#26355
        } //#26355
        $1.cws = $a(); //#26355
        $1.b = 0; //#26356
        $1.c = 0; //#26356
        for (;;) { //#26380
            if ($1.b == $1.bits.length) { //#26358
                break; //#26358
            } //#26358
            var _C7 = $1.bits; //#26359
            var _C8 = $1.b; //#26359
            var _C9 = $1.bits; //#26359
            var _CA = $1.b; //#26359
            var _CB = _C9.length - _CA; //#26359
            var _CC = 69; //#26359
            if (69 > (_C9.length - _CA)) { //#26359
                var _ = _CB; //#26359
                _CB = _CC; //#26359
                _CC = _; //#26359
            } //#26359
            $1.bs = $geti(_C7, _C8, _CC); //#26359
            $1.bsl = $1.bs.length; //#26360
            $1.cs = $geti($1.cws, $1.c, (~~($1.bsl / 10)) + 1); //#26361
            $1.csl = $1.cs.length; //#26362
            for (var _CM = 0, _CL = $1.bsl - 1; _CM <= _CL; _CM += 1) { //#26372
                $1.i = _CM; //#26364
                for (var _CP = 0, _CO = $1.csl - 1; _CP <= _CO; _CP += 1) { //#26371
                    $1.j = _CP; //#26366
                    var _CQ = $1.cs; //#26367
                    var _CR = $1.j; //#26367
                    $put(_CQ, _CR, $f($get(_CQ, _CR) + ($get($get($1.pwr928, $1.i), ($1.j + 7) - $1.csl) * $get($1.bs, ($1.bsl - $1.i) - 1)))); //#26370
                } //#26370
            } //#26370
            for (var _Ce = $1.csl - 1; _Ce >= 1; _Ce -= 1) { //#26377
                $1.i = _Ce; //#26374
                var _Cf = $1.cs; //#26375
                var _Cg = $1.i; //#26375
                $put(_Cf, _Cg - 1, $f($get(_Cf, _Cg - 1) + (~~($get($1.cs, $1.i) / 928)))); //#26375
                var _Cl = $1.cs; //#26376
                var _Cm = $1.i; //#26376
                $put(_Cl, _Cm, $get(_Cl, _Cm) % 928); //#26376
            } //#26376
            $1.b = $1.b + $1.bsl; //#26378
            $1.c = $1.c + $1.csl; //#26379
        } //#26379
        $1.cws = $geti($1.cws, 0, $1.c); //#26381
        $1.barcode = $s($1.cws.length * 4); //#26382
        for (var _Cz = 0, _Cy = $1.cws.length - 1; _Cz <= _Cy; _Cz += 1) { //#26388
            $1.i = _Cz; //#26384
            var _D1 = $strcpy($s(4), "^   "); //#26385
            var _D6 = $cvrs($s(4), $get($1.cws, $1.i), 10); //#26385
            $puti(_D1, 4 - _D6.length, _D6); //#26386
            $puti($1.barcode, $1.i * 4, _D1); //#26387
        } //#26387
        delete $1.options["parse"]; //#26389
        $put($1.options, "dontdraw", true); //#26390
        $put($1.options, "cca", true); //#26391
        $put($1.options, "columns", $1.cccolumns); //#26392
        $k[$j++] = 'args'; //#26393
        $k[$j++] = $1.barcode; //#26393
        $k[$j++] = $1.options; //#26393
        bwipp_micropdf417(); //#26393
        var _DG = $k[--$j]; //#26393
        $1[$k[--$j]] = _DG; //#26393
    } //#26393
    if ($1.ccversion == "b") { //#26408
        $1.barcode = $s(~~($1.bits.length / 8)); //#26397
        for (var _DN = 0, _DM = $1.barcode.length - 1; _DN <= _DM; _DN += 1) { //#26402
            $1.i = _DN; //#26399
            var _DQ = $geti($1.bits, $1.i * 8, 8); //#26400
            $k[$j++] = 0; //#26400
            for (var _DR = 0, _DS = _DQ.length; _DR < _DS; _DR++) { //#26400
                var _DU = $k[--$j]; //#26400
                $k[$j++] = $f(_DU + $get(_DQ, _DR)) * 2; //#26400
            } //#26400
            $put($1.barcode, $1.i, ~~($k[--$j] / 2)); //#26401
        } //#26401
        delete $1.options["parse"]; //#26403
        $put($1.options, "dontdraw", true); //#26404
        $put($1.options, "ccb", true); //#26405
        $put($1.options, "columns", $1.cccolumns); //#26406
        $k[$j++] = 'args'; //#26407
        $k[$j++] = $1.barcode; //#26407
        $k[$j++] = $1.options; //#26407
        bwipp_micropdf417(); //#26407
        var _Df = $k[--$j]; //#26407
        $1[$k[--$j]] = _Df; //#26407
    } //#26407
    if ($1.ccversion == "c") { //#26423
        $1.barcode = $s(~~($1.bits.length / 8)); //#26411
        for (var _Dm = 0, _Dl = $1.barcode.length - 1; _Dm <= _Dl; _Dm += 1) { //#26416
            $1.i = _Dm; //#26413
            var _Dp = $geti($1.bits, $1.i * 8, 8); //#26414
            $k[$j++] = 0; //#26414
            for (var _Dq = 0, _Dr = _Dp.length; _Dq < _Dr; _Dq++) { //#26414
                var _Dt = $k[--$j]; //#26414
                $k[$j++] = $f(_Dt + $get(_Dp, _Dq)) * 2; //#26414
            } //#26414
            $put($1.barcode, $1.i, ~~($k[--$j] / 2)); //#26415
        } //#26415
        delete $1.options["parse"]; //#26417
        $put($1.options, "dontdraw", true); //#26418
        $put($1.options, "ccc", true); //#26419
        $put($1.options, "columns", $1.cccolumns); //#26420
        $put($1.options, "eclevel", (~~(Math.log($1.eccws) / Math.log(2))) - 1); //#26421
        $k[$j++] = 'args'; //#26422
        $k[$j++] = $1.barcode; //#26422
        $k[$j++] = $1.options; //#26422
        bwipp_pdf417(); //#26422
        var _E6 = $k[--$j]; //#26422
        $1[$k[--$j]] = _E6; //#26422
    } //#26422
    $k[$j++] = $1.args; //#26426
    if (!$1.dontdraw) { //#26426
        bwipp_renmatrix(); //#26426
    } //#26426
}

function bwipp_ean13composite() {
    var $1 = {}; //#26458
    $1.options = $k[--$j]; //#26460
    $1.barcode = $k[--$j]; //#26461
    $1.dontdraw = false; //#26463
    $forall($1.options, function() { //#26474
        var _3 = $k[--$j]; //#26474
        $1[$k[--$j]] = _3; //#26474
    }); //#26474
    $search($1.barcode, "|"); //#26477
    if ($k[--$j]) { //#26482
        $1.linear = $k[--$j]; //#26478
        $j--; //#26479
        $1.comp = $k[--$j]; //#26480
    } else { //#26482
        $j--; //#26482
    } //#26482
    $$.save(); //#26485
    $put($1.options, "lintype", "ean13"); //#26487
    $put($1.options, "inkspread", "0"); //#26488
    $put($1.options, "dontdraw", true); //#26489
    $k[$j++] = $1.linear; //#26492
    $k[$j++] = $1.options; //#26492
    bwipp_ean13(); //#26492
    bwipp_renlinear(); //#26492
    $$.rmoveto(-1, 72); //#26495
    $k[$j++] = Infinity; //#26506
    $k[$j++] = Infinity; //#26500
    $k[$j++] = 0; //#26498
    $k[$j++] = 1; //#26498
    for (var _E = 0, _F = 93; _E < _F; _E++) { //#26498
        $k[$j++] = 0; //#26498
    } //#26498
    $k[$j++] = 1; //#26499
    $k[$j++] = 0; //#26499
    $k[$j++] = 1; //#26499
    $k[$j++] = 0; //#26499
    for (var _G = 0, _H = 93; _G < _H; _G++) { //#26499
        $k[$j++] = 0; //#26499
    } //#26499
    $k[$j++] = 0; //#26500
    $k[$j++] = 1; //#26500
    $k[$j++] = 0; //#26500
    $k[$j++] = 1; //#26500
    for (var _I = 0, _J = 93; _I < _J; _I++) { //#26500
        $k[$j++] = 0; //#26500
    } //#26500
    $k[$j++] = 1; //#26500
    $k[$j++] = 0; //#26500
    var _K = $a(); //#26500
    $k[$j++] = 'ren'; //#26506
    $k[$j++] = bwipp_renmatrix; //#26506
    $k[$j++] = 'pixs'; //#26506
    $k[$j++] = _K; //#26506
    $k[$j++] = 'pixx'; //#26506
    $k[$j++] = 97; //#26506
    $k[$j++] = 'pixy'; //#26506
    $k[$j++] = 3; //#26506
    $k[$j++] = 'height'; //#26506
    $k[$j++] = 6 / 72; //#26506
    $k[$j++] = 'width'; //#26506
    $k[$j++] = 97 / 72; //#26506
    $k[$j++] = 'opt'; //#26506
    $k[$j++] = $1.options; //#26506
    var _M = $d(); //#26506
    $k[$j++] = _M; //#26507
    bwipp_renmatrix(); //#26507
    $$.rmoveto(-2, 6); //#26510
    $k[$j++] = $1.comp; //#26510
    $k[$j++] = $1.options; //#26510
    bwipp_gs1_cc(); //#26510
    bwipp_renmatrix(); //#26510
    $$.restore(); //#26512
}

function bwipp_ean8composite() {
    var $1 = {}; //#26544
    $1.options = $k[--$j]; //#26546
    $1.barcode = $k[--$j]; //#26547
    $1.dontdraw = false; //#26549
    $forall($1.options, function() { //#26560
        var _3 = $k[--$j]; //#26560
        $1[$k[--$j]] = _3; //#26560
    }); //#26560
    $search($1.barcode, "|"); //#26563
    if ($k[--$j]) { //#26568
        $1.linear = $k[--$j]; //#26564
        $j--; //#26565
        $1.comp = $k[--$j]; //#26566
    } else { //#26568
        $j--; //#26568
    } //#26568
    $$.save(); //#26571
    $put($1.options, "lintype", "ean8"); //#26574
    $put($1.options, "inkspread", "0"); //#26575
    $put($1.options, "dontdraw", true); //#26576
    $k[$j++] = $1.linear; //#26579
    $k[$j++] = $1.options; //#26579
    bwipp_ean8(); //#26579
    bwipp_renlinear(); //#26579
    $$.rmoveto(-1, 72); //#26582
    $k[$j++] = Infinity; //#26593
    $k[$j++] = Infinity; //#26587
    $k[$j++] = 0; //#26585
    $k[$j++] = 1; //#26585
    for (var _E = 0, _F = 65; _E < _F; _E++) { //#26585
        $k[$j++] = 0; //#26585
    } //#26585
    $k[$j++] = 1; //#26586
    $k[$j++] = 0; //#26586
    $k[$j++] = 1; //#26586
    $k[$j++] = 0; //#26586
    for (var _G = 0, _H = 65; _G < _H; _G++) { //#26586
        $k[$j++] = 0; //#26586
    } //#26586
    $k[$j++] = 0; //#26587
    $k[$j++] = 1; //#26587
    $k[$j++] = 0; //#26587
    $k[$j++] = 1; //#26587
    for (var _I = 0, _J = 65; _I < _J; _I++) { //#26587
        $k[$j++] = 0; //#26587
    } //#26587
    $k[$j++] = 1; //#26587
    $k[$j++] = 0; //#26587
    var _K = $a(); //#26587
    $k[$j++] = 'ren'; //#26593
    $k[$j++] = bwipp_renmatrix; //#26593
    $k[$j++] = 'pixs'; //#26593
    $k[$j++] = _K; //#26593
    $k[$j++] = 'pixx'; //#26593
    $k[$j++] = 69; //#26593
    $k[$j++] = 'pixy'; //#26593
    $k[$j++] = 3; //#26593
    $k[$j++] = 'height'; //#26593
    $k[$j++] = 6 / 72; //#26593
    $k[$j++] = 'width'; //#26593
    $k[$j++] = 69 / 72; //#26593
    $k[$j++] = 'opt'; //#26593
    $k[$j++] = $1.options; //#26593
    var _M = $d(); //#26593
    $k[$j++] = _M; //#26594
    bwipp_renmatrix(); //#26594
    $k[$j++] = $1.comp; //#26597
    $k[$j++] = $1.options; //#26597
    bwipp_gs1_cc(); //#26597
    var _P = $k[--$j]; //#26598
    $$.rmoveto($f(69 - $get(_P, "pixx")), 6); //#26598
    $k[$j++] = _P; //#26599
    bwipp_renmatrix(); //#26599
    $$.restore(); //#26601
}

function bwipp_upcacomposite() {
    var $1 = {}; //#26633
    $1.options = $k[--$j]; //#26635
    $1.barcode = $k[--$j]; //#26636
    $1.dontdraw = false; //#26638
    $forall($1.options, function() { //#26649
        var _3 = $k[--$j]; //#26649
        $1[$k[--$j]] = _3; //#26649
    }); //#26649
    $search($1.barcode, "|"); //#26652
    if ($k[--$j]) { //#26657
        $1.linear = $k[--$j]; //#26653
        $j--; //#26654
        $1.comp = $k[--$j]; //#26655
    } else { //#26657
        $j--; //#26657
    } //#26657
    $$.save(); //#26660
    $put($1.options, "lintype", "ean13"); //#26662
    $put($1.options, "inkspread", "0"); //#26663
    $put($1.options, "dontdraw", true); //#26664
    $k[$j++] = $1.linear; //#26667
    $k[$j++] = $1.options; //#26667
    bwipp_upca(); //#26667
    bwipp_renlinear(); //#26667
    $$.rmoveto(-1, 72); //#26670
    $k[$j++] = Infinity; //#26681
    $k[$j++] = Infinity; //#26675
    $k[$j++] = 0; //#26673
    $k[$j++] = 1; //#26673
    for (var _E = 0, _F = 93; _E < _F; _E++) { //#26673
        $k[$j++] = 0; //#26673
    } //#26673
    $k[$j++] = 1; //#26674
    $k[$j++] = 0; //#26674
    $k[$j++] = 1; //#26674
    $k[$j++] = 0; //#26674
    for (var _G = 0, _H = 93; _G < _H; _G++) { //#26674
        $k[$j++] = 0; //#26674
    } //#26674
    $k[$j++] = 0; //#26675
    $k[$j++] = 1; //#26675
    $k[$j++] = 0; //#26675
    $k[$j++] = 1; //#26675
    for (var _I = 0, _J = 93; _I < _J; _I++) { //#26675
        $k[$j++] = 0; //#26675
    } //#26675
    $k[$j++] = 1; //#26675
    $k[$j++] = 0; //#26675
    var _K = $a(); //#26675
    $k[$j++] = 'ren'; //#26681
    $k[$j++] = bwipp_renmatrix; //#26681
    $k[$j++] = 'pixs'; //#26681
    $k[$j++] = _K; //#26681
    $k[$j++] = 'pixx'; //#26681
    $k[$j++] = 97; //#26681
    $k[$j++] = 'pixy'; //#26681
    $k[$j++] = 3; //#26681
    $k[$j++] = 'height'; //#26681
    $k[$j++] = 6 / 72; //#26681
    $k[$j++] = 'width'; //#26681
    $k[$j++] = 97 / 72; //#26681
    $k[$j++] = 'opt'; //#26681
    $k[$j++] = $1.options; //#26681
    var _M = $d(); //#26681
    $k[$j++] = _M; //#26682
    bwipp_renmatrix(); //#26682
    $$.rmoveto(-2, 6); //#26685
    $k[$j++] = $1.comp; //#26685
    $k[$j++] = $1.options; //#26685
    bwipp_gs1_cc(); //#26685
    bwipp_renmatrix(); //#26685
    $$.restore(); //#26687
}

function bwipp_upcecomposite() {
    var $1 = {}; //#26719
    $1.options = $k[--$j]; //#26721
    $1.barcode = $k[--$j]; //#26722
    $1.dontdraw = false; //#26724
    $forall($1.options, function() { //#26735
        var _3 = $k[--$j]; //#26735
        $1[$k[--$j]] = _3; //#26735
    }); //#26735
    $search($1.barcode, "|"); //#26738
    if ($k[--$j]) { //#26743
        $1.linear = $k[--$j]; //#26739
        $j--; //#26740
        $1.comp = $k[--$j]; //#26741
    } else { //#26743
        $j--; //#26743
    } //#26743
    $k[$j++] = Infinity; //#26758
    $k[$j++] = Infinity; //#26752
    $k[$j++] = 0; //#26750
    $k[$j++] = 1; //#26750
    for (var _9 = 0, _A = 49; _9 < _A; _9++) { //#26750
        $k[$j++] = 0; //#26750
    } //#26750
    $k[$j++] = 1; //#26751
    $k[$j++] = 0; //#26751
    $k[$j++] = 1; //#26751
    $k[$j++] = 0; //#26751
    for (var _B = 0, _C = 49; _B < _C; _B++) { //#26751
        $k[$j++] = 0; //#26751
    } //#26751
    $k[$j++] = 0; //#26752
    $k[$j++] = 1; //#26752
    $k[$j++] = 0; //#26752
    $k[$j++] = 1; //#26752
    for (var _D = 0, _E = 49; _D < _E; _D++) { //#26752
        $k[$j++] = 0; //#26752
    } //#26752
    $k[$j++] = 1; //#26752
    $k[$j++] = 0; //#26752
    var _F = $a(); //#26752
    $k[$j++] = 'ren'; //#26758
    $k[$j++] = bwipp_renmatrix; //#26758
    $k[$j++] = 'pixs'; //#26758
    $k[$j++] = _F; //#26758
    $k[$j++] = 'pixx'; //#26758
    $k[$j++] = 53; //#26758
    $k[$j++] = 'pixy'; //#26758
    $k[$j++] = 3; //#26758
    $k[$j++] = 'height'; //#26758
    $k[$j++] = 6 / 72; //#26758
    $k[$j++] = 'width'; //#26758
    $k[$j++] = 53 / 72; //#26758
    $k[$j++] = 'opt'; //#26758
    $k[$j++] = $1.options; //#26758
    $1.sep = $d(); //#26759
    $$.save(); //#26761
    $put($1.options, "lintype", "upce"); //#26763
    $put($1.options, "inkspread", "0"); //#26764
    $put($1.options, "dontdraw", true); //#26765
    $k[$j++] = $1.linear; //#26768
    $k[$j++] = $1.options; //#26768
    bwipp_upce(); //#26768
    bwipp_renlinear(); //#26768
    $$.rmoveto(-1, 72); //#26771
    $k[$j++] = Infinity; //#26782
    $k[$j++] = Infinity; //#26776
    $k[$j++] = 0; //#26774
    $k[$j++] = 1; //#26774
    for (var _N = 0, _O = 49; _N < _O; _N++) { //#26774
        $k[$j++] = 0; //#26774
    } //#26774
    $k[$j++] = 1; //#26775
    $k[$j++] = 0; //#26775
    $k[$j++] = 1; //#26775
    $k[$j++] = 0; //#26775
    for (var _P = 0, _Q = 49; _P < _Q; _P++) { //#26775
        $k[$j++] = 0; //#26775
    } //#26775
    $k[$j++] = 0; //#26776
    $k[$j++] = 1; //#26776
    $k[$j++] = 0; //#26776
    $k[$j++] = 1; //#26776
    for (var _R = 0, _S = 49; _R < _S; _R++) { //#26776
        $k[$j++] = 0; //#26776
    } //#26776
    $k[$j++] = 1; //#26776
    $k[$j++] = 0; //#26776
    var _T = $a(); //#26776
    $k[$j++] = 'ren'; //#26782
    $k[$j++] = bwipp_renmatrix; //#26782
    $k[$j++] = 'pixs'; //#26782
    $k[$j++] = _T; //#26782
    $k[$j++] = 'pixx'; //#26782
    $k[$j++] = 53; //#26782
    $k[$j++] = 'pixy'; //#26782
    $k[$j++] = 3; //#26782
    $k[$j++] = 'height'; //#26782
    $k[$j++] = 6 / 72; //#26782
    $k[$j++] = 'width'; //#26782
    $k[$j++] = 53 / 72; //#26782
    $k[$j++] = 'opt'; //#26782
    $k[$j++] = $1.options; //#26782
    var _V = $d(); //#26782
    $k[$j++] = _V; //#26783
    bwipp_renmatrix(); //#26783
    $$.rmoveto(-2, 6); //#26786
    $k[$j++] = $1.comp; //#26786
    $k[$j++] = $1.options; //#26786
    bwipp_gs1_cc(); //#26786
    bwipp_renmatrix(); //#26786
    $$.restore(); //#26788
}

function bwipp_databaromnicomposite() {
    var $1 = {}; //#26820
    $1.options = $k[--$j]; //#26822
    $1.barcode = $k[--$j]; //#26823
    $1.dontdraw = false; //#26825
    $forall($1.options, function() { //#26836
        var _3 = $k[--$j]; //#26836
        $1[$k[--$j]] = _3; //#26836
    }); //#26836
    $search($1.barcode, "|"); //#26839
    if ($k[--$j]) { //#26844
        $1.linear = $k[--$j]; //#26840
        $j--; //#26841
        $1.comp = $k[--$j]; //#26842
    } else { //#26844
        $j--; //#26844
    } //#26844
    $$.save(); //#26847
    $put($1.options, "lintype", "databaromni"); //#26849
    $put($1.options, "linkage", true); //#26850
    $put($1.options, "inkspread", "0"); //#26851
    $put($1.options, "dontdraw", true); //#26852
    $k[$j++] = $1.linear; //#26855
    $k[$j++] = $1.options; //#26855
    bwipp_databaromni(); //#26855
    var _F = $k[--$j]; //#26856
    $1.linsbs = $get(_F, "sbs"); //#26856
    $1.linheight = $get($get(_F, "bhs"), 0) * 72; //#26857
    $k[$j++] = _F; //#26858
    bwipp_renlinear(); //#26858
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#26862
        for (var _N = $1.fp, _M = $f($1.fp + 12); _N <= _M; _N += 1) { //#26875
            $1.i = _N; //#26864
            if ($get($1.bot, $1.i) == 0) { //#26872
                if ($get($1.bot, $1.i - 1) == 1) { //#26869
                    $k[$j++] = 1; //#26867
                } else { //#26869
                    var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#26869
                    $k[$j++] = _X; //#26869
                } //#26869
            } else { //#26872
                $k[$j++] = 0; //#26872
            } //#26872
            $put($1.sep, $1.i, $k[--$j]); //#26874
        } //#26874
        $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#26876
        $k[$j++] = true; //#26877
        for (var _c = 0; _c <= 12; _c += 1) { //#26877
            var _i = $k[--$j]; //#26877
            $k[$j++] = _i && $eq($get($1.bot, $f(_c + $1.fp)), $get($1.f3, _c)); //#26877
        } //#26877
        if ($k[--$j]) { //#26880
            $puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#26879
        } //#26879
    }; //#26881
    $k[$j++] = Infinity; //#26882
    $k[$j++] = 0; //#26883
    $forall($1.linsbs, function() { //#26883
        var _o = $k[--$j]; //#26883
        var _p = $k[--$j]; //#26883
        var _q = (_p == 1) ? 0 : 1; //#26883
        $k[$j++] = _p; //#26883
        for (var _r = 0, _s = _o; _r < _s; _r++) { //#26883
            $k[$j++] = _q //#26883
        } //#26883
    }); //#26883
    $astore($a($counttomark() - 1)); //#26884
    $1.bot = $k[--$j]; //#26884
    $j -= 2; //#26884
    $k[$j++] = Infinity; //#26885
    $forall($1.bot, function() { //#26885
        var _x = $k[--$j]; //#26885
        $k[$j++] = $f(1 - _x); //#26885
    }); //#26885
    $1.sep = $a(); //#26885
    $puti($1.sep, 0, $a([0, 0, 0])); //#26886
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#26887
    $k[$j++] = 18; //#26888
    $1.sepfinder(); //#26888
    $k[$j++] = 64; //#26888
    $1.sepfinder(); //#26888
    $$.rmoveto(0, $1.linheight); //#26889
    var _19 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.sep],
        ["pixx", $1.sep.length],
        ["pixy", 1],
        ["height", 1 / 72],
        ["width", $1.sep.length / 72],
        ["opt", $1.options]
    ]); //#26896
    $k[$j++] = _19; //#26897
    bwipp_renmatrix(); //#26897
    $$.rmoveto(-5, 1); //#26900
    $k[$j++] = $1.comp; //#26900
    $k[$j++] = $1.options; //#26900
    bwipp_gs1_cc(); //#26900
    bwipp_renmatrix(); //#26900
    $$.restore(); //#26902
}

function bwipp_databarstackedcomposite() {
    var $1 = {}; //#26933
    $1.options = $k[--$j]; //#26935
    $1.barcode = $k[--$j]; //#26936
    $1.dontdraw = false; //#26938
    $forall($1.options, function() { //#26949
        var _3 = $k[--$j]; //#26949
        $1[$k[--$j]] = _3; //#26949
    }); //#26949
    $search($1.barcode, "|"); //#26952
    if ($k[--$j]) { //#26957
        $1.linear = $k[--$j]; //#26953
        $j--; //#26954
        $1.comp = $k[--$j]; //#26955
    } else { //#26957
        $j--; //#26957
    } //#26957
    $$.save(); //#26960
    $put($1.options, "lintype", "databarstacked"); //#26962
    $put($1.options, "linkage", true); //#26963
    $put($1.options, "inkspread", "0"); //#26964
    $put($1.options, "dontdraw", true); //#26965
    $k[$j++] = $1.linear; //#26968
    $k[$j++] = $1.options; //#26968
    bwipp_databarstacked(); //#26968
    var _F = $k[--$j]; //#26969
    $1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); //#26969
    $1.linheight = $get(_F, "pixy"); //#26970
    $k[$j++] = _F; //#26971
    bwipp_renmatrix(); //#26971
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#26975
        for (var _O = $1.fp, _N = $f($1.fp + 12); _O <= _N; _O += 1) { //#26988
            $1.i = _O; //#26977
            if ($get($1.bot, $1.i) == 0) { //#26985
                if ($get($1.bot, $1.i - 1) == 1) { //#26982
                    $k[$j++] = 1; //#26980
                } else { //#26982
                    var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#26982
                    $k[$j++] = _Y; //#26982
                } //#26982
            } else { //#26985
                $k[$j++] = 0; //#26985
            } //#26985
            $put($1.sep, $1.i, $k[--$j]); //#26987
        } //#26987
        $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#26989
        $k[$j++] = true; //#26990
        for (var _d = 0; _d <= 12; _d += 1) { //#26990
            var _j = $k[--$j]; //#26990
            $k[$j++] = _j && $eq($get($1.bot, $f(_d + $1.fp)), $get($1.f3, _d)); //#26990
        } //#26990
        if ($k[--$j]) { //#26993
            $puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#26992
        } //#26992
    }; //#26994
    $k[$j++] = Infinity; //#26995
    var _o = $1.bot; //#26995
    for (var _p = 0, _q = _o.length; _p < _q; _p++) { //#26995
        $k[$j++] = $f(1 - $get(_o, _p)); //#26995
    } //#26995
    $1.sep = $a(); //#26995
    $puti($1.sep, 0, $a([0, 0, 0, 0])); //#26996
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#26997
    $k[$j++] = 18; //#26998
    $1.sepfinder(); //#26998
    $$.rmoveto(0, $1.linheight); //#26999
    var _13 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.sep],
        ["pixx", $1.sep.length],
        ["pixy", 1],
        ["height", 1 / 72],
        ["width", $1.sep.length / 72],
        ["opt", $1.options]
    ]); //#27006
    $k[$j++] = _13; //#27007
    bwipp_renmatrix(); //#27007
    $$.rmoveto(1, 1); //#27010
    $k[$j++] = $1.comp; //#27010
    $k[$j++] = $1.options; //#27010
    bwipp_gs1_cc(); //#27010
    bwipp_renmatrix(); //#27010
    $$.restore(); //#27012
}

function bwipp_databarstackedomnicomposite() {
    var $1 = {}; //#27043
    $1.options = $k[--$j]; //#27045
    $1.barcode = $k[--$j]; //#27046
    $1.dontdraw = false; //#27048
    $forall($1.options, function() { //#27059
        var _3 = $k[--$j]; //#27059
        $1[$k[--$j]] = _3; //#27059
    }); //#27059
    $search($1.barcode, "|"); //#27062
    if ($k[--$j]) { //#27067
        $1.linear = $k[--$j]; //#27063
        $j--; //#27064
        $1.comp = $k[--$j]; //#27065
    } else { //#27067
        $j--; //#27067
    } //#27067
    $$.save(); //#27070
    $put($1.options, "lintype", "databarstackedomni"); //#27072
    $put($1.options, "linkage", true); //#27073
    $put($1.options, "inkspread", "0"); //#27074
    $put($1.options, "dontdraw", true); //#27075
    $k[$j++] = $1.linear; //#27078
    $k[$j++] = $1.options; //#27078
    bwipp_databarstackedomni(); //#27078
    var _F = $k[--$j]; //#27079
    $1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); //#27079
    $1.linheight = $get(_F, "pixy"); //#27080
    $k[$j++] = _F; //#27081
    bwipp_renmatrix(); //#27081
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#27085
        for (var _O = $1.fp, _N = $f($1.fp + 12); _O <= _N; _O += 1) { //#27098
            $1.i = _O; //#27087
            if ($get($1.bot, $1.i) == 0) { //#27095
                if ($get($1.bot, $1.i - 1) == 1) { //#27092
                    $k[$j++] = 1; //#27090
                } else { //#27092
                    var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#27092
                    $k[$j++] = _Y; //#27092
                } //#27092
            } else { //#27095
                $k[$j++] = 0; //#27095
            } //#27095
            $put($1.sep, $1.i, $k[--$j]); //#27097
        } //#27097
        $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#27099
        $k[$j++] = true; //#27100
        for (var _d = 0; _d <= 12; _d += 1) { //#27100
            var _j = $k[--$j]; //#27100
            $k[$j++] = _j && $eq($get($1.bot, $f(_d + $1.fp)), $get($1.f3, _d)); //#27100
        } //#27100
        if ($k[--$j]) { //#27103
            $puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#27102
        } //#27102
    }; //#27104
    $k[$j++] = Infinity; //#27105
    var _o = $1.bot; //#27105
    for (var _p = 0, _q = _o.length; _p < _q; _p++) { //#27105
        $k[$j++] = $f(1 - $get(_o, _p)); //#27105
    } //#27105
    $1.sep = $a(); //#27105
    $puti($1.sep, 0, $a([0, 0, 0, 0])); //#27106
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#27107
    $k[$j++] = 18; //#27108
    $1.sepfinder(); //#27108
    $$.rmoveto(0, $1.linheight); //#27109
    var _13 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.sep],
        ["pixx", $1.sep.length],
        ["pixy", 1],
        ["height", 1 / 72],
        ["width", $1.sep.length / 72],
        ["opt", $1.options]
    ]); //#27116
    $k[$j++] = _13; //#27117
    bwipp_renmatrix(); //#27117
    $$.rmoveto(1, 1); //#27120
    $k[$j++] = $1.comp; //#27120
    $k[$j++] = $1.options; //#27120
    bwipp_gs1_cc(); //#27120
    bwipp_renmatrix(); //#27120
    $$.restore(); //#27122
}

function bwipp_databartruncatedcomposite() {
    var $1 = {}; //#27154
    $1.options = $k[--$j]; //#27156
    $1.barcode = $k[--$j]; //#27157
    $1.dontdraw = false; //#27159
    $forall($1.options, function() { //#27170
        var _3 = $k[--$j]; //#27170
        $1[$k[--$j]] = _3; //#27170
    }); //#27170
    $search($1.barcode, "|"); //#27173
    if ($k[--$j]) { //#27178
        $1.linear = $k[--$j]; //#27174
        $j--; //#27175
        $1.comp = $k[--$j]; //#27176
    } else { //#27178
        $j--; //#27178
    } //#27178
    $$.save(); //#27181
    $put($1.options, "lintype", "databartruncated"); //#27183
    $put($1.options, "linkage", true); //#27184
    $put($1.options, "inkspread", "0"); //#27185
    $put($1.options, "dontdraw", true); //#27186
    $k[$j++] = $1.linear; //#27189
    $k[$j++] = $1.options; //#27189
    bwipp_databartruncated(); //#27189
    var _F = $k[--$j]; //#27190
    $1.linsbs = $get(_F, "sbs"); //#27190
    $1.linheight = $get($get(_F, "bhs"), 0) * 72; //#27191
    $k[$j++] = _F; //#27192
    bwipp_renlinear(); //#27192
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#27196
        for (var _N = $1.fp, _M = $f($1.fp + 12); _N <= _M; _N += 1) { //#27209
            $1.i = _N; //#27198
            if ($get($1.bot, $1.i) == 0) { //#27206
                if ($get($1.bot, $1.i - 1) == 1) { //#27203
                    $k[$j++] = 1; //#27201
                } else { //#27203
                    var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#27203
                    $k[$j++] = _X; //#27203
                } //#27203
            } else { //#27206
                $k[$j++] = 0; //#27206
            } //#27206
            $put($1.sep, $1.i, $k[--$j]); //#27208
        } //#27208
        $1.f3 = $a([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1]); //#27210
        $k[$j++] = true; //#27211
        for (var _c = 0; _c <= 12; _c += 1) { //#27211
            var _i = $k[--$j]; //#27211
            $k[$j++] = _i && $eq($get($1.bot, $f(_c + $1.fp)), $get($1.f3, _c)); //#27211
        } //#27211
        if ($k[--$j]) { //#27214
            $puti($1.sep, $1.fp, $a([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0])); //#27213
        } //#27213
    }; //#27215
    $k[$j++] = Infinity; //#27216
    $k[$j++] = 0; //#27217
    $forall($1.linsbs, function() { //#27217
        var _o = $k[--$j]; //#27217
        var _p = $k[--$j]; //#27217
        var _q = (_p == 1) ? 0 : 1; //#27217
        $k[$j++] = _p; //#27217
        for (var _r = 0, _s = _o; _r < _s; _r++) { //#27217
            $k[$j++] = _q //#27217
        } //#27217
    }); //#27217
    $astore($a($counttomark() - 1)); //#27218
    $1.bot = $k[--$j]; //#27218
    $j -= 2; //#27218
    $k[$j++] = Infinity; //#27219
    $forall($1.bot, function() { //#27219
        var _x = $k[--$j]; //#27219
        $k[$j++] = $f(1 - _x); //#27219
    }); //#27219
    $1.sep = $a(); //#27219
    $puti($1.sep, 0, $a([0, 0, 0])); //#27220
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#27221
    $k[$j++] = 18; //#27222
    $1.sepfinder(); //#27222
    $k[$j++] = 64; //#27222
    $1.sepfinder(); //#27222
    $$.rmoveto(0, $1.linheight); //#27223
    var _19 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.sep],
        ["pixx", $1.sep.length],
        ["pixy", 1],
        ["height", 1 / 72],
        ["width", $1.sep.length / 72],
        ["opt", $1.options]
    ]); //#27230
    $k[$j++] = _19; //#27231
    bwipp_renmatrix(); //#27231
    $$.rmoveto(-5, 1); //#27234
    $k[$j++] = $1.comp; //#27234
    $k[$j++] = $1.options; //#27234
    bwipp_gs1_cc(); //#27234
    bwipp_renmatrix(); //#27234
    $$.restore(); //#27236
}

function bwipp_databarlimitedcomposite() {
    var $1 = {}; //#27268
    $1.options = $k[--$j]; //#27270
    $1.barcode = $k[--$j]; //#27271
    $1.dontdraw = false; //#27273
    $forall($1.options, function() { //#27284
        var _3 = $k[--$j]; //#27284
        $1[$k[--$j]] = _3; //#27284
    }); //#27284
    $search($1.barcode, "|"); //#27287
    if ($k[--$j]) { //#27292
        $1.linear = $k[--$j]; //#27288
        $j--; //#27289
        $1.comp = $k[--$j]; //#27290
    } else { //#27292
        $j--; //#27292
    } //#27292
    $$.save(); //#27295
    $put($1.options, "lintype", "databarlimited"); //#27297
    $put($1.options, "linkage", true); //#27298
    $put($1.options, "inkspread", "0"); //#27299
    $put($1.options, "dontdraw", true); //#27300
    $k[$j++] = $1.linear; //#27303
    $k[$j++] = $1.options; //#27303
    bwipp_databarlimited(); //#27303
    var _F = $k[--$j]; //#27304
    $1.linsbs = $get(_F, "sbs"); //#27304
    $1.linheight = $get($get(_F, "bhs"), 0) * 72; //#27305
    $k[$j++] = _F; //#27306
    bwipp_renlinear(); //#27306
    $k[$j++] = Infinity; //#27309
    $k[$j++] = 1; //#27310
    $forall($1.linsbs, function() { //#27310
        var _K = $k[--$j]; //#27310
        var _L = $k[--$j]; //#27310
        var _M = (_L == 0) ? 1 : 0; //#27310
        $k[$j++] = _L; //#27310
        for (var _N = 0, _O = _K; _N < _O; _N++) { //#27310
            $k[$j++] = _M //#27310
        } //#27310
    }); //#27310
    $astore($a($counttomark() - 1)); //#27311
    $1.sep = $k[--$j]; //#27311
    $j -= 2; //#27311
    $puti($1.sep, 0, $a([0, 0, 0])); //#27312
    $puti($1.sep, $1.sep.length - 9, $a([0, 0, 0, 0, 0, 0, 0, 0, 0])); //#27313
    $$.rmoveto(0, $1.linheight); //#27314
    var _c = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.sep],
        ["pixx", $1.sep.length],
        ["pixy", 1],
        ["height", 1 / 72],
        ["width", $1.sep.length / 72],
        ["opt", $1.options]
    ]); //#27321
    $k[$j++] = _c; //#27322
    bwipp_renmatrix(); //#27322
    $k[$j++] = $1.comp; //#27325
    $k[$j++] = $1.options; //#27325
    bwipp_gs1_cc(); //#27325
    var _f = $k[--$j]; //#27326
    $$.rmoveto($f(72 - $get(_f, "pixx")), 1); //#27326
    $k[$j++] = _f; //#27327
    bwipp_renmatrix(); //#27327
    $$.restore(); //#27329
}

function bwipp_databarexpandedcomposite() {
    var $1 = {}; //#27361
    $1.options = $k[--$j]; //#27363
    $1.barcode = $k[--$j]; //#27364
    $1.dontdraw = false; //#27366
    $forall($1.options, function() { //#27377
        var _3 = $k[--$j]; //#27377
        $1[$k[--$j]] = _3; //#27377
    }); //#27377
    $search($1.barcode, "|"); //#27380
    if ($k[--$j]) { //#27385
        $1.linear = $k[--$j]; //#27381
        $j--; //#27382
        $1.comp = $k[--$j]; //#27383
    } else { //#27385
        $j--; //#27385
    } //#27385
    $$.save(); //#27388
    $put($1.options, "lintype", "databarexpanded"); //#27390
    $put($1.options, "linkage", true); //#27391
    $put($1.options, "inkspread", "0"); //#27392
    $put($1.options, "dontdraw", true); //#27393
    $k[$j++] = $1.linear; //#27396
    $k[$j++] = $1.options; //#27396
    bwipp_databarexpanded(); //#27396
    var _F = $k[--$j]; //#27397
    $1.linsbs = $get(_F, "sbs"); //#27397
    $1.linheight = $get($get(_F, "bhs"), 0) * 72; //#27398
    $k[$j++] = _F; //#27399
    bwipp_renlinear(); //#27399
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#27403
        for (var _N = $1.fp, _M = $f($1.fp + 12); _N <= _M; _N += 1) { //#27416
            $1.i = _N; //#27405
            if ($get($1.bot, $1.i) == 0) { //#27413
                if ($get($1.bot, $1.i - 1) == 1) { //#27410
                    $k[$j++] = 1; //#27408
                } else { //#27410
                    var _X = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#27410
                    $k[$j++] = _X; //#27410
                } //#27410
            } else { //#27413
                $k[$j++] = 0; //#27413
            } //#27413
            $put($1.sep, $1.i, $k[--$j]); //#27415
        } //#27415
    }; //#27417
    $k[$j++] = Infinity; //#27418
    $k[$j++] = 0; //#27419
    $forall($1.linsbs, function() { //#27419
        var _c = $k[--$j]; //#27419
        var _d = $k[--$j]; //#27419
        var _e = (_d == 1) ? 0 : 1; //#27419
        $k[$j++] = _d; //#27419
        for (var _f = 0, _g = _c; _f < _g; _f++) { //#27419
            $k[$j++] = _e //#27419
        } //#27419
    }); //#27419
    $astore($a($counttomark() - 1)); //#27420
    $1.bot = $k[--$j]; //#27420
    $j -= 2; //#27420
    $k[$j++] = Infinity; //#27421
    $forall($1.bot, function() { //#27421
        var _l = $k[--$j]; //#27421
        $k[$j++] = $f(1 - _l); //#27421
    }); //#27421
    $1.sep = $a(); //#27421
    $puti($1.sep, 0, $a([0, 0, 0])); //#27422
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#27423
    $k[$j++] = Infinity; //#27426
    for (var _u = 18, _t = $1.bot.length - 13; _u <= _t; _u += 98) { //#27425
        $k[$j++] = _u; //#27425
    } //#27425
    for (var _x = 69, _w = $1.bot.length - 13; _x <= _w; _x += 98) { //#27426
        $k[$j++] = _x; //#27426
    } //#27426
    var _y = $a(); //#27426
    for (var _z = 0, _10 = _y.length; _z < _10; _z++) { //#27427
        $k[$j++] = $get(_y, _z); //#27427
        $1.sepfinder(); //#27427
    } //#27427
    $$.rmoveto(0, $1.linheight); //#27428
    var _17 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.sep],
        ["pixx", $1.sep.length],
        ["pixy", 1],
        ["height", 1 / 72],
        ["width", $1.sep.length / 72],
        ["opt", $1.options]
    ]); //#27435
    $k[$j++] = _17; //#27436
    bwipp_renmatrix(); //#27436
    $$.rmoveto(1, 1); //#27439
    $k[$j++] = $1.comp; //#27439
    $k[$j++] = $1.options; //#27439
    bwipp_gs1_cc(); //#27439
    bwipp_renmatrix(); //#27439
    $$.restore(); //#27441
}

function bwipp_databarexpandedstackedcomposite() {
    var $1 = {}; //#27472
    $1.options = $k[--$j]; //#27474
    $1.barcode = $k[--$j]; //#27475
    $1.dontdraw = false; //#27477
    $forall($1.options, function() { //#27488
        var _3 = $k[--$j]; //#27488
        $1[$k[--$j]] = _3; //#27488
    }); //#27488
    $search($1.barcode, "|"); //#27491
    if ($k[--$j]) { //#27496
        $1.linear = $k[--$j]; //#27492
        $j--; //#27493
        $1.comp = $k[--$j]; //#27494
    } else { //#27496
        $j--; //#27496
    } //#27496
    $$.save(); //#27499
    $put($1.options, "lintype", "databarexpandedstacked"); //#27501
    $put($1.options, "linkage", true); //#27502
    $put($1.options, "inkspread", "0"); //#27503
    $put($1.options, "dontdraw", true); //#27504
    $k[$j++] = $1.linear; //#27507
    $k[$j++] = $1.options; //#27507
    bwipp_databarexpandedstacked(); //#27507
    var _F = $k[--$j]; //#27508
    $1.bot = $geti($get(_F, "pixs"), 0, $get(_F, "pixx")); //#27508
    $1.linheight = $get(_F, "pixy"); //#27509
    $k[$j++] = _F; //#27510
    bwipp_renmatrix(); //#27510
    $1.sepfinder = function() {
        $1.fp = $k[--$j]; //#27514
        for (var _O = $1.fp, _N = $f($1.fp + 12); _O <= _N; _O += 1) { //#27527
            $1.i = _O; //#27516
            if ($get($1.bot, $1.i) == 0) { //#27524
                if ($get($1.bot, $1.i - 1) == 1) { //#27521
                    $k[$j++] = 1; //#27519
                } else { //#27521
                    var _Y = ($get($1.sep, $1.i - 1) == 0) ? 1 : 0; //#27521
                    $k[$j++] = _Y; //#27521
                } //#27521
            } else { //#27524
                $k[$j++] = 0; //#27524
            } //#27524
            $put($1.sep, $1.i, $k[--$j]); //#27526
        } //#27526
    }; //#27528
    $k[$j++] = Infinity; //#27529
    var _c = $1.bot; //#27529
    for (var _d = 0, _e = _c.length; _d < _e; _d++) { //#27529
        $k[$j++] = $f(1 - $get(_c, _d)); //#27529
    } //#27529
    $1.sep = $a(); //#27529
    $puti($1.sep, 0, $a([0, 0, 0, 0])); //#27530
    $puti($1.sep, $1.sep.length - 4, $a([0, 0, 0, 0])); //#27531
    $k[$j++] = Infinity; //#27534
    for (var _o = 19, _n = $1.bot.length - 13; _o <= _n; _o += 98) { //#27533
        $k[$j++] = _o; //#27533
    } //#27533
    for (var _r = 70, _q = $1.bot.length - 13; _r <= _q; _r += 98) { //#27534
        $k[$j++] = _r; //#27534
    } //#27534
    var _s = $a(); //#27534
    for (var _t = 0, _u = _s.length; _t < _u; _t++) { //#27535
        $k[$j++] = $get(_s, _t); //#27535
        $1.sepfinder(); //#27535
    } //#27535
    $$.rmoveto(0, $1.linheight); //#27536
    var _11 = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.sep],
        ["pixx", $1.sep.length],
        ["pixy", 1],
        ["height", 1 / 72],
        ["width", $1.sep.length / 72],
        ["opt", $1.options]
    ]); //#27543
    $k[$j++] = _11; //#27544
    bwipp_renmatrix(); //#27544
    var _14 = ($get($1.bot, 0) == 0) ? 2 : 0; //#27547
    $$.rmoveto(_14, 1); //#27547
    $k[$j++] = $1.comp; //#27548
    $k[$j++] = $1.options; //#27548
    bwipp_gs1_cc(); //#27548
    bwipp_renmatrix(); //#27548
    $$.restore(); //#27550
}

function bwipp_gs1_128composite() {
    var $1 = {}; //#27582
    $1.options = $k[--$j]; //#27584
    $1.barcode = $k[--$j]; //#27585
    $1.dontdraw = false; //#27587
    $forall($1.options, function() { //#27598
        var _3 = $k[--$j]; //#27598
        $1[$k[--$j]] = _3; //#27598
    }); //#27598
    $search($1.barcode, "|"); //#27601
    if ($k[--$j]) { //#27606
        $1.linear = $k[--$j]; //#27602
        $j--; //#27603
        $1.comp = $k[--$j]; //#27604
    } else { //#27606
        $j--; //#27606
    } //#27606
    $$.save(); //#27609
    $put($1.options, "inkspread", "0"); //#27611
    $put($1.options, "dontdraw", true); //#27612
    $put($1.options, "linkagea", true); //#27615
    $k[$j++] = $1.linear; //#27616
    $k[$j++] = Infinity; //#27616
    $forall($1.options); //#27616
    var _E = $d(); //#27616
    $k[$j++] = _E; //#27616
    bwipp_gs1_128(); //#27616
    var _G = $get($k[--$j], "sbs"); //#27617
    $k[$j++] = 0; //#27617
    $forall(_G, function() { //#27617
        var _H = $k[--$j]; //#27617
        var _I = $k[--$j]; //#27617
        $k[$j++] = $f(_I + _H); //#27617
    }); //#27617
    $1.linwidth = $k[--$j]; //#27617
    $put($1.options, "lintype", "gs1-128"); //#27620
    $put($1.options, "linwidth", $1.linwidth); //#27621
    $k[$j++] = $1.comp; //#27622
    $k[$j++] = $1.options; //#27622
    bwipp_gs1_cc(); //#27622
    $1.compsym = $k[--$j]; //#27622
    if ($get($1.compsym, "pixx") == 99) { //#27623
        $k[$j++] = "a"; //#27623
    } else { //#27623
        $k[$j++] = "c"; //#27623
    } //#27623
    $1.linktype = $k[--$j]; //#27623
    if ($eq($1.linktype, "a")) { //#27631
        $put($1.options, "linkagea", true); //#27627
        $put($1.options, "linkagec", false); //#27628
    } else { //#27631
        $put($1.options, "linkagea", false); //#27630
        $put($1.options, "linkagec", true); //#27631
    } //#27631
    $k[$j++] = $1.linear; //#27633
    $k[$j++] = Infinity; //#27633
    $forall($1.options); //#27633
    var _a = $d(); //#27633
    $k[$j++] = _a; //#27633
    bwipp_gs1_128(); //#27633
    var _b = $k[--$j]; //#27634
    $1.linsbs = $get(_b, "sbs"); //#27634
    $1.linheight = $get($get(_b, "bhs"), 0) * 72; //#27635
    $k[$j++] = _b; //#27636
    bwipp_renlinear(); //#27636
    $k[$j++] = Infinity; //#27639
    $k[$j++] = 1; //#27640
    $forall($1.linsbs, function() { //#27640
        var _g = $k[--$j]; //#27640
        var _h = $k[--$j]; //#27640
        var _i = (_h == 0) ? 1 : 0; //#27640
        $k[$j++] = _h; //#27640
        for (var _j = 0, _k = _g; _j < _k; _j++) { //#27640
            $k[$j++] = _i //#27640
        } //#27640
    }); //#27640
    $astore($a($counttomark() - 1)); //#27641
    $1.sep = $k[--$j]; //#27641
    $j -= 2; //#27641
    $$.rmoveto(0, $1.linheight); //#27642
    var _r = $1.sep; //#27648
    var _t = new Map([
        ["ren", bwipp_renmatrix],
        ["pixs", $1.sep],
        ["pixx", $1.sep.length],
        ["pixy", 1],
        ["height", 1 / 72],
        ["width", _r.length / 72],
        ["opt", $1.options]
    ]); //#27649
    $k[$j++] = _t; //#27650
    bwipp_renmatrix(); //#27650
    if ($eq($1.linktype, "a")) { //#27659
        $1.s = ~~($f($1.linwidth - 2) / 11); //#27654
        $1.p = ~~(($1.s - 9) / 2); //#27655
        $k[$j++] = 'x'; //#27656
        $k[$j++] = ((($1.s - $1.p) - 1) * 11) + 10; //#27656
        if ($1.p == 0) { //#27656
            var _10 = $k[--$j]; //#27656
            $k[$j++] = $f(_10 + 2); //#27656
        } //#27656
        var _11 = $k[--$j]; //#27656
        $1[$k[--$j]] = $f(_11 - 99); //#27656
        $$.rmoveto($1.x, 1); //#27657
    } else { //#27659
        $$.rmoveto(-7, 1); //#27659
    } //#27659
    $k[$j++] = $1.compsym; //#27662
    bwipp_renmatrix(); //#27662
    $$.restore(); //#27664
}

function bwipp_gs1datamatrix() {
    var $1 = {}; //#27696
    $1.options = $k[--$j]; //#27698
    $1.barcode = $k[--$j]; //#27699
    $1.dontdraw = false; //#27701
    $1.parse = false; //#27702
    $1.dontlint = false; //#27703
    $1.gssep = false; //#27704
    $forall($1.options, function() { //#27715
        var _3 = $k[--$j]; //#27715
        $1[$k[--$j]] = _3; //#27715
    }); //#27715
    $1.expand = function() {
        var _6 = new Map([
            ["parse", $1.parse],
            ["parseonly", true],
            ["parsefnc", false]
        ]); //#27722
        $1.fncvals = _6; //#27723
        $k[$j++] = $1.fncvals; //#27724
        bwipp_parseinput(); //#27724
    }; //#27725
    $1.ais = $a([]); //#27728
    $1.vals = $a([]); //#27729
    var _A = $1.barcode; //#27730
    $k[$j++] = $geti(_A, 1, _A.length - 1); //#27743
    for (;;) { //#27743
        var _C = $k[--$j]; //#27732
        $k[$j++] = _C; //#27732
        if ($eq(_C, "")) { //#27732
            break; //#27732
        } //#27732
        $search($k[--$j], ")"); //#27733
        $j--; //#27733
        var _E = $k[--$j]; //#27734
        var _F = $k[--$j]; //#27734
        $k[$j++] = _E; //#27734
        $k[$j++] = _F; //#27734
        $j--; //#27734
        var _G = $k[--$j]; //#27735
        var _H = $k[--$j]; //#27735
        $k[$j++] = _G; //#27735
        $search(_H, "("); //#27735
        if ($k[--$j]) { //#27738
            var _J = $k[--$j]; //#27736
            var _K = $k[--$j]; //#27736
            $k[$j++] = _J; //#27736
            $k[$j++] = _K; //#27736
            $j--; //#27736
            var _L = $k[--$j]; //#27736
            var _M = $k[--$j]; //#27736
            var _N = $k[--$j]; //#27736
            $k[$j++] = _M; //#27736
            $k[$j++] = _N; //#27736
            $k[$j++] = _L; //#27736
        } else { //#27738
            var _O = $k[--$j]; //#27738
            var _P = $k[--$j]; //#27738
            $k[$j++] = ""; //#27738
            $k[$j++] = _P; //#27738
            $k[$j++] = _O; //#27738
        } //#27738
        $k[$j++] = Infinity; //#27740
        $aload($1.ais); //#27740
        var _S = $k[$j - 1 - ($counttomark() + 2)]; //#27740
        $k[$j++] = _S; //#27740
        $1.ais = $a(); //#27740
        $k[$j++] = Infinity; //#27741
        $aload($1.vals); //#27741
        var _W = $k[$j - 1 - ($counttomark() + 1)]; //#27741
        $k[$j++] = _W; //#27741
        $1.expand(); //#27741
        $1.vals = $a(); //#27741
        $j -= 2; //#27742
    } //#27742
    $j--; //#27744
    if (!$1.dontlint) { //#27746
        $k[$j++] = $1.ais; //#27746
        $k[$j++] = $1.vals; //#27746
        bwipp_gs1lint(); //#27746
        $j--; //#27746
    } //#27746
    $1.aifixed = new Map; //#27751
    $k[$j++] = Infinity; //#27753
    for (var _b = 0; _b <= 4; _b += 1) { //#27753
        $k[$j++] = _b; //#27753
    } //#27753
    var _c = $a(); //#27753
    for (var _d = 0, _e = _c.length; _d < _e; _d++) { //#27756
        var _h = $strcpy($s(2), "00"); //#27755
        $put(_h, 1, $f($get(_c, _d) + 48)); //#27755
        $put($1.aifixed, _h, _h); //#27755
    } //#27755
    $k[$j++] = Infinity; //#27761
    for (var _j = 11; _j <= 20; _j += 1) { //#27758
        $k[$j++] = _j; //#27758
    } //#27758
    $k[$j++] = 23; //#27760
    for (var _k = 31; _k <= 36; _k += 1) { //#27760
        $k[$j++] = _k; //#27760
    } //#27760
    $k[$j++] = 41; //#27761
    var _l = $a(); //#27761
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#27764
        var _q = $cvrs($s(2), $get(_l, _m), 10); //#27763
        $put($1.aifixed, _q, _q); //#27763
    } //#27763
    $1.fnc1 = -1; //#27767
    $1.dmtx = $a([$1.fnc1]); //#27768
    for (var _w = 0, _v = $1.ais.length - 1; _w <= _v; _w += 1) { //#27784
        $1.i = _w; //#27770
        $1.ai = $get($1.ais, $1.i); //#27771
        $1.val = $get($1.vals, $1.i); //#27772
        var _16 = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); //#27773
        $puti(_16, 0, $1.dmtx); //#27774
        $k[$j++] = _16; //#27775
        $k[$j++] = _16; //#27775
        $k[$j++] = $1.dmtx.length; //#27775
        $k[$j++] = $1.ai; //#27775
        $k[$j++] = Infinity; //#27775
        var _1A = $k[--$j]; //#27775
        var _1B = $k[--$j]; //#27775
        $k[$j++] = _1A; //#27775
        $forall(_1B); //#27775
        var _1C = $a(); //#27775
        var _1D = $k[--$j]; //#27775
        $puti($k[--$j], _1D, _1C); //#27775
        var _1F = $k[--$j]; //#27776
        $k[$j++] = _1F; //#27776
        $k[$j++] = _1F; //#27776
        $k[$j++] = $1.dmtx.length + $1.ai.length; //#27776
        $k[$j++] = $1.val; //#27776
        $k[$j++] = Infinity; //#27776
        var _1J = $k[--$j]; //#27776
        var _1K = $k[--$j]; //#27776
        $k[$j++] = _1J; //#27776
        $forall(_1K); //#27776
        var _1L = $a(); //#27776
        var _1M = $k[--$j]; //#27776
        $puti($k[--$j], _1M, _1L); //#27776
        $1.dmtx = $k[--$j]; //#27777
        var _1U = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; //#27778
        if (($1.i != ($1.ais.length - 1)) && (!_1U)) { //#27783
            var _1W = $a($1.dmtx.length + 1); //#27779
            $puti(_1W, 0, $1.dmtx); //#27780
            $k[$j++] = _1W; //#27781
            $k[$j++] = _1W; //#27781
            $k[$j++] = $1.dmtx.length; //#27781
            if ($1.gssep) { //#27781
                $k[$j++] = 29; //#27781
            } else { //#27781
                $k[$j++] = $1.fnc1; //#27781
            } //#27781
            var _1b = $k[--$j]; //#27781
            var _1c = $k[--$j]; //#27781
            $put($k[--$j], _1c, _1b); //#27781
            $1.dmtx = $k[--$j]; //#27782
        } //#27782
    } //#27782
    $1.barcode = $s(($1.dmtx.length + 1) * 5); //#27787
    $1.i = 0; //#27788
    $1.j = 0; //#27788
    for (;;) { //#27798
        if ($1.i == $1.dmtx.length) { //#27789
            break; //#27789
        } //#27789
        var _1l = $get($1.dmtx, $1.i); //#27790
        $k[$j++] = _1l; //#27795
        if (_1l == $1.fnc1) { //#27794
            $j--; //#27791
            $puti($1.barcode, $1.j, "^FNC1"); //#27791
            $1.j = $1.j + 4; //#27792
        } else { //#27794
            $put($1.barcode, $1.j, $k[--$j]); //#27794
        } //#27794
        $1.i = $1.i + 1; //#27796
        $1.j = $1.j + 1; //#27797
    } //#27797
    $1.barcode = $geti($1.barcode, 0, $1.j); //#27799
    delete $1.options["parse"]; //#27802
    $put($1.options, "dontdraw", true); //#27803
    $put($1.options, "parsefnc", true); //#27804
    $k[$j++] = 'args'; //#27805
    $k[$j++] = $1.barcode; //#27805
    $k[$j++] = $1.options; //#27805
    bwipp_datamatrix(); //#27805
    var _23 = $k[--$j]; //#27805
    $1[$k[--$j]] = _23; //#27805
    $put($1.args, "opt", $1.options); //#27807
    $k[$j++] = $1.args; //#27810
    if (!$1.dontdraw) { //#27810
        bwipp_renmatrix(); //#27810
    } //#27810
}

function bwipp_gs1datamatrixrectangular() {
    var $1 = {}; //#27842
    $1.options = $k[--$j]; //#27844
    $1.barcode = $k[--$j]; //#27845
    $1.parse = false; //#27847
    $1.dontlint = false; //#27848
    $1.dontdraw = false; //#27849
    $1.gssep = false; //#27850
    $forall($1.options, function() { //#27861
        var _3 = $k[--$j]; //#27861
        $1[$k[--$j]] = _3; //#27861
    }); //#27861
    $1.expand = function() {
        var _6 = new Map([
            ["parse", $1.parse],
            ["parseonly", true],
            ["parsefnc", false]
        ]); //#27868
        $1.fncvals = _6; //#27869
        $k[$j++] = $1.fncvals; //#27870
        bwipp_parseinput(); //#27870
    }; //#27871
    $1.ais = $a([]); //#27874
    $1.vals = $a([]); //#27875
    var _A = $1.barcode; //#27876
    $k[$j++] = $geti(_A, 1, _A.length - 1); //#27889
    for (;;) { //#27889
        var _C = $k[--$j]; //#27878
        $k[$j++] = _C; //#27878
        if ($eq(_C, "")) { //#27878
            break; //#27878
        } //#27878
        $search($k[--$j], ")"); //#27879
        $j--; //#27879
        var _E = $k[--$j]; //#27880
        var _F = $k[--$j]; //#27880
        $k[$j++] = _E; //#27880
        $k[$j++] = _F; //#27880
        $j--; //#27880
        var _G = $k[--$j]; //#27881
        var _H = $k[--$j]; //#27881
        $k[$j++] = _G; //#27881
        $search(_H, "("); //#27881
        if ($k[--$j]) { //#27884
            var _J = $k[--$j]; //#27882
            var _K = $k[--$j]; //#27882
            $k[$j++] = _J; //#27882
            $k[$j++] = _K; //#27882
            $j--; //#27882
            var _L = $k[--$j]; //#27882
            var _M = $k[--$j]; //#27882
            var _N = $k[--$j]; //#27882
            $k[$j++] = _M; //#27882
            $k[$j++] = _N; //#27882
            $k[$j++] = _L; //#27882
        } else { //#27884
            var _O = $k[--$j]; //#27884
            var _P = $k[--$j]; //#27884
            $k[$j++] = ""; //#27884
            $k[$j++] = _P; //#27884
            $k[$j++] = _O; //#27884
        } //#27884
        $k[$j++] = Infinity; //#27886
        $aload($1.ais); //#27886
        var _S = $k[$j - 1 - ($counttomark() + 2)]; //#27886
        $k[$j++] = _S; //#27886
        $1.ais = $a(); //#27886
        $k[$j++] = Infinity; //#27887
        $aload($1.vals); //#27887
        var _W = $k[$j - 1 - ($counttomark() + 1)]; //#27887
        $k[$j++] = _W; //#27887
        $1.expand(); //#27887
        $1.vals = $a(); //#27887
        $j -= 2; //#27888
    } //#27888
    $j--; //#27890
    if (!$1.dontlint) { //#27892
        $k[$j++] = $1.ais; //#27892
        $k[$j++] = $1.vals; //#27892
        bwipp_gs1lint(); //#27892
        $j--; //#27892
    } //#27892
    $1.aifixed = new Map; //#27897
    $k[$j++] = Infinity; //#27899
    for (var _b = 0; _b <= 4; _b += 1) { //#27899
        $k[$j++] = _b; //#27899
    } //#27899
    var _c = $a(); //#27899
    for (var _d = 0, _e = _c.length; _d < _e; _d++) { //#27902
        var _h = $strcpy($s(2), "00"); //#27901
        $put(_h, 1, $f($get(_c, _d) + 48)); //#27901
        $put($1.aifixed, _h, _h); //#27901
    } //#27901
    $k[$j++] = Infinity; //#27907
    for (var _j = 11; _j <= 20; _j += 1) { //#27904
        $k[$j++] = _j; //#27904
    } //#27904
    $k[$j++] = 23; //#27906
    for (var _k = 31; _k <= 36; _k += 1) { //#27906
        $k[$j++] = _k; //#27906
    } //#27906
    $k[$j++] = 41; //#27907
    var _l = $a(); //#27907
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#27910
        var _q = $cvrs($s(2), $get(_l, _m), 10); //#27909
        $put($1.aifixed, _q, _q); //#27909
    } //#27909
    $1.fnc1 = -1; //#27913
    $1.dmtx = $a([$1.fnc1]); //#27914
    for (var _w = 0, _v = $1.ais.length - 1; _w <= _v; _w += 1) { //#27930
        $1.i = _w; //#27916
        $1.ai = $get($1.ais, $1.i); //#27917
        $1.val = $get($1.vals, $1.i); //#27918
        var _16 = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); //#27919
        $puti(_16, 0, $1.dmtx); //#27920
        $k[$j++] = _16; //#27921
        $k[$j++] = _16; //#27921
        $k[$j++] = $1.dmtx.length; //#27921
        $k[$j++] = $1.ai; //#27921
        $k[$j++] = Infinity; //#27921
        var _1A = $k[--$j]; //#27921
        var _1B = $k[--$j]; //#27921
        $k[$j++] = _1A; //#27921
        $forall(_1B); //#27921
        var _1C = $a(); //#27921
        var _1D = $k[--$j]; //#27921
        $puti($k[--$j], _1D, _1C); //#27921
        var _1F = $k[--$j]; //#27922
        $k[$j++] = _1F; //#27922
        $k[$j++] = _1F; //#27922
        $k[$j++] = $1.dmtx.length + $1.ai.length; //#27922
        $k[$j++] = $1.val; //#27922
        $k[$j++] = Infinity; //#27922
        var _1J = $k[--$j]; //#27922
        var _1K = $k[--$j]; //#27922
        $k[$j++] = _1J; //#27922
        $forall(_1K); //#27922
        var _1L = $a(); //#27922
        var _1M = $k[--$j]; //#27922
        $puti($k[--$j], _1M, _1L); //#27922
        $1.dmtx = $k[--$j]; //#27923
        var _1U = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; //#27924
        if (($1.i != ($1.ais.length - 1)) && (!_1U)) { //#27929
            var _1W = $a($1.dmtx.length + 1); //#27925
            $puti(_1W, 0, $1.dmtx); //#27926
            $k[$j++] = _1W; //#27927
            $k[$j++] = _1W; //#27927
            $k[$j++] = $1.dmtx.length; //#27927
            if ($1.gssep) { //#27927
                $k[$j++] = 29; //#27927
            } else { //#27927
                $k[$j++] = $1.fnc1; //#27927
            } //#27927
            var _1b = $k[--$j]; //#27927
            var _1c = $k[--$j]; //#27927
            $put($k[--$j], _1c, _1b); //#27927
            $1.dmtx = $k[--$j]; //#27928
        } //#27928
    } //#27928
    $1.barcode = $s(($1.dmtx.length + 1) * 5); //#27933
    $1.i = 0; //#27934
    $1.j = 0; //#27934
    for (;;) { //#27944
        if ($1.i == $1.dmtx.length) { //#27935
            break; //#27935
        } //#27935
        var _1l = $get($1.dmtx, $1.i); //#27936
        $k[$j++] = _1l; //#27941
        if (_1l == $1.fnc1) { //#27940
            $j--; //#27937
            $puti($1.barcode, $1.j, "^FNC1"); //#27937
            $1.j = $1.j + 4; //#27938
        } else { //#27940
            $put($1.barcode, $1.j, $k[--$j]); //#27940
        } //#27940
        $1.i = $1.i + 1; //#27942
        $1.j = $1.j + 1; //#27943
    } //#27943
    $1.barcode = $geti($1.barcode, 0, $1.j); //#27945
    delete $1.options["parse"]; //#27948
    $put($1.options, "dontdraw", true); //#27949
    $put($1.options, "parsefnc", true); //#27950
    $put($1.options, "format", "rectangle"); //#27951
    $k[$j++] = 'args'; //#27952
    $k[$j++] = $1.barcode; //#27952
    $k[$j++] = $1.options; //#27952
    bwipp_datamatrix(); //#27952
    var _24 = $k[--$j]; //#27952
    $1[$k[--$j]] = _24; //#27952
    $put($1.args, "opt", $1.options); //#27954
    $k[$j++] = $1.args; //#27957
    if (!$1.dontdraw) { //#27957
        bwipp_renmatrix(); //#27957
    } //#27957
}

function bwipp_gs1qrcode() {
    var $1 = {}; //#27988
    $1.options = $k[--$j]; //#27990
    $1.barcode = $k[--$j]; //#27991
    $1.parse = false; //#27993
    $1.dontlint = false; //#27994
    $1.dontdraw = false; //#27995
    $forall($1.options, function() { //#28006
        var _3 = $k[--$j]; //#28006
        $1[$k[--$j]] = _3; //#28006
    }); //#28006
    $1.expand = function() {
        var _6 = new Map([
            ["parse", $1.parse],
            ["parseonly", true],
            ["parsefnc", false]
        ]); //#28013
        $1.fncvals = _6; //#28014
        $k[$j++] = $1.fncvals; //#28015
        bwipp_parseinput(); //#28015
    }; //#28016
    $1.ais = $a([]); //#28019
    $1.vals = $a([]); //#28020
    var _A = $1.barcode; //#28021
    $k[$j++] = $geti(_A, 1, _A.length - 1); //#28034
    for (;;) { //#28034
        var _C = $k[--$j]; //#28023
        $k[$j++] = _C; //#28023
        if ($eq(_C, "")) { //#28023
            break; //#28023
        } //#28023
        $search($k[--$j], ")"); //#28024
        $j--; //#28024
        var _E = $k[--$j]; //#28025
        var _F = $k[--$j]; //#28025
        $k[$j++] = _E; //#28025
        $k[$j++] = _F; //#28025
        $j--; //#28025
        var _G = $k[--$j]; //#28026
        var _H = $k[--$j]; //#28026
        $k[$j++] = _G; //#28026
        $search(_H, "("); //#28026
        if ($k[--$j]) { //#28029
            var _J = $k[--$j]; //#28027
            var _K = $k[--$j]; //#28027
            $k[$j++] = _J; //#28027
            $k[$j++] = _K; //#28027
            $j--; //#28027
            var _L = $k[--$j]; //#28027
            var _M = $k[--$j]; //#28027
            var _N = $k[--$j]; //#28027
            $k[$j++] = _M; //#28027
            $k[$j++] = _N; //#28027
            $k[$j++] = _L; //#28027
        } else { //#28029
            var _O = $k[--$j]; //#28029
            var _P = $k[--$j]; //#28029
            $k[$j++] = ""; //#28029
            $k[$j++] = _P; //#28029
            $k[$j++] = _O; //#28029
        } //#28029
        $k[$j++] = Infinity; //#28031
        $aload($1.ais); //#28031
        var _S = $k[$j - 1 - ($counttomark() + 2)]; //#28031
        $k[$j++] = _S; //#28031
        $1.ais = $a(); //#28031
        $k[$j++] = Infinity; //#28032
        $aload($1.vals); //#28032
        var _W = $k[$j - 1 - ($counttomark() + 1)]; //#28032
        $k[$j++] = _W; //#28032
        $1.expand(); //#28032
        $1.vals = $a(); //#28032
        $j -= 2; //#28033
    } //#28033
    $j--; //#28035
    if (!$1.dontlint) { //#28037
        $k[$j++] = $1.ais; //#28037
        $k[$j++] = $1.vals; //#28037
        bwipp_gs1lint(); //#28037
        $j--; //#28037
    } //#28037
    $1.aifixed = new Map; //#28042
    $k[$j++] = Infinity; //#28044
    for (var _b = 0; _b <= 4; _b += 1) { //#28044
        $k[$j++] = _b; //#28044
    } //#28044
    var _c = $a(); //#28044
    for (var _d = 0, _e = _c.length; _d < _e; _d++) { //#28047
        var _h = $strcpy($s(2), "00"); //#28046
        $put(_h, 1, $f($get(_c, _d) + 48)); //#28046
        $put($1.aifixed, _h, _h); //#28046
    } //#28046
    $k[$j++] = Infinity; //#28052
    for (var _j = 11; _j <= 20; _j += 1) { //#28049
        $k[$j++] = _j; //#28049
    } //#28049
    $k[$j++] = 23; //#28051
    for (var _k = 31; _k <= 36; _k += 1) { //#28051
        $k[$j++] = _k; //#28051
    } //#28051
    $k[$j++] = 41; //#28052
    var _l = $a(); //#28052
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#28055
        var _q = $cvrs($s(2), $get(_l, _m), 10); //#28054
        $put($1.aifixed, _q, _q); //#28054
    } //#28054
    $1.fnc1 = -1; //#28058
    $1.qrc = $a([$1.fnc1]); //#28059
    for (var _w = 0, _v = $1.ais.length - 1; _w <= _v; _w += 1) { //#28075
        $1.i = _w; //#28061
        $1.ai = $get($1.ais, $1.i); //#28062
        $1.val = $get($1.vals, $1.i); //#28063
        var _16 = $a(($1.qrc.length + $1.ai.length) + $1.val.length); //#28064
        $puti(_16, 0, $1.qrc); //#28065
        $k[$j++] = _16; //#28066
        $k[$j++] = _16; //#28066
        $k[$j++] = $1.qrc.length; //#28066
        $k[$j++] = $1.ai; //#28066
        $k[$j++] = Infinity; //#28066
        var _1A = $k[--$j]; //#28066
        var _1B = $k[--$j]; //#28066
        $k[$j++] = _1A; //#28066
        $forall(_1B); //#28066
        var _1C = $a(); //#28066
        var _1D = $k[--$j]; //#28066
        $puti($k[--$j], _1D, _1C); //#28066
        var _1F = $k[--$j]; //#28067
        $k[$j++] = _1F; //#28067
        $k[$j++] = _1F; //#28067
        $k[$j++] = $1.qrc.length + $1.ai.length; //#28067
        $k[$j++] = $1.val; //#28067
        $k[$j++] = Infinity; //#28067
        var _1J = $k[--$j]; //#28067
        var _1K = $k[--$j]; //#28067
        $k[$j++] = _1J; //#28067
        $forall(_1K); //#28067
        var _1L = $a(); //#28067
        var _1M = $k[--$j]; //#28067
        $puti($k[--$j], _1M, _1L); //#28067
        $1.qrc = $k[--$j]; //#28068
        var _1U = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; //#28069
        if (($1.i != ($1.ais.length - 1)) && (!_1U)) { //#28074
            var _1W = $a($1.qrc.length + 1); //#28070
            $puti(_1W, 0, $1.qrc); //#28071
            $put(_1W, $1.qrc.length, $1.fnc1); //#28072
            $1.qrc = _1W; //#28073
        } //#28073
    } //#28073
    $1.barcode = $s(($1.qrc.length + 1) * 5); //#28078
    $1.i = 0; //#28079
    $1.j = 0; //#28079
    for (;;) { //#28089
        if ($1.i == $1.qrc.length) { //#28080
            break; //#28080
        } //#28080
        var _1g = $get($1.qrc, $1.i); //#28081
        $k[$j++] = _1g; //#28086
        if (_1g == $1.fnc1) { //#28085
            $j--; //#28082
            $puti($1.barcode, $1.j, "^FNC1"); //#28082
            $1.j = $1.j + 4; //#28083
        } else { //#28085
            $put($1.barcode, $1.j, $k[--$j]); //#28085
        } //#28085
        $1.i = $1.i + 1; //#28087
        $1.j = $1.j + 1; //#28088
    } //#28088
    $1.barcode = $geti($1.barcode, 0, $1.j); //#28090
    delete $1.options["parse"]; //#28093
    $put($1.options, "dontdraw", true); //#28094
    $put($1.options, "parsefnc", true); //#28095
    $k[$j++] = 'args'; //#28096
    $k[$j++] = $1.barcode; //#28096
    $k[$j++] = $1.options; //#28096
    bwipp_qrcode(); //#28096
    var _1y = $k[--$j]; //#28096
    $1[$k[--$j]] = _1y; //#28096
    $put($1.args, "opt", $1.options); //#28098
    $k[$j++] = $1.args; //#28101
    if (!$1.dontdraw) { //#28101
        bwipp_renmatrix(); //#28101
    } //#28101
}

function bwipp_gs1dotcode() {
    var $1 = {}; //#28133
    $1.options = $k[--$j]; //#28135
    $1.barcode = $k[--$j]; //#28136
    $1.dontdraw = false; //#28138
    $1.parse = false; //#28139
    $1.dontlint = false; //#28140
    $forall($1.options, function() { //#28151
        var _3 = $k[--$j]; //#28151
        $1[$k[--$j]] = _3; //#28151
    }); //#28151
    $1.expand = function() {
        var _6 = new Map([
            ["parse", $1.parse],
            ["parseonly", true],
            ["parsefnc", false]
        ]); //#28158
        $1.fncvals = _6; //#28159
        $k[$j++] = $1.fncvals; //#28160
        bwipp_parseinput(); //#28160
    }; //#28161
    $1.ais = $a([]); //#28164
    $1.vals = $a([]); //#28165
    var _A = $1.barcode; //#28166
    $k[$j++] = $geti(_A, 1, _A.length - 1); //#28179
    for (;;) { //#28179
        var _C = $k[--$j]; //#28168
        $k[$j++] = _C; //#28168
        if ($eq(_C, "")) { //#28168
            break; //#28168
        } //#28168
        $search($k[--$j], ")"); //#28169
        $j--; //#28169
        var _E = $k[--$j]; //#28170
        var _F = $k[--$j]; //#28170
        $k[$j++] = _E; //#28170
        $k[$j++] = _F; //#28170
        $j--; //#28170
        var _G = $k[--$j]; //#28171
        var _H = $k[--$j]; //#28171
        $k[$j++] = _G; //#28171
        $search(_H, "("); //#28171
        if ($k[--$j]) { //#28174
            var _J = $k[--$j]; //#28172
            var _K = $k[--$j]; //#28172
            $k[$j++] = _J; //#28172
            $k[$j++] = _K; //#28172
            $j--; //#28172
            var _L = $k[--$j]; //#28172
            var _M = $k[--$j]; //#28172
            var _N = $k[--$j]; //#28172
            $k[$j++] = _M; //#28172
            $k[$j++] = _N; //#28172
            $k[$j++] = _L; //#28172
        } else { //#28174
            var _O = $k[--$j]; //#28174
            var _P = $k[--$j]; //#28174
            $k[$j++] = ""; //#28174
            $k[$j++] = _P; //#28174
            $k[$j++] = _O; //#28174
        } //#28174
        $k[$j++] = Infinity; //#28176
        $aload($1.ais); //#28176
        var _S = $k[$j - 1 - ($counttomark() + 2)]; //#28176
        $k[$j++] = _S; //#28176
        $1.ais = $a(); //#28176
        $k[$j++] = Infinity; //#28177
        $aload($1.vals); //#28177
        var _W = $k[$j - 1 - ($counttomark() + 1)]; //#28177
        $k[$j++] = _W; //#28177
        $1.expand(); //#28177
        $1.vals = $a(); //#28177
        $j -= 2; //#28178
    } //#28178
    $j--; //#28180
    if (!$1.dontlint) { //#28182
        $k[$j++] = $1.ais; //#28182
        $k[$j++] = $1.vals; //#28182
        bwipp_gs1lint(); //#28182
        $j--; //#28182
    } //#28182
    $1.aifixed = new Map; //#28187
    $k[$j++] = Infinity; //#28189
    for (var _b = 0; _b <= 4; _b += 1) { //#28189
        $k[$j++] = _b; //#28189
    } //#28189
    var _c = $a(); //#28189
    for (var _d = 0, _e = _c.length; _d < _e; _d++) { //#28192
        var _h = $strcpy($s(2), "00"); //#28191
        $put(_h, 1, $f($get(_c, _d) + 48)); //#28191
        $put($1.aifixed, _h, _h); //#28191
    } //#28191
    $k[$j++] = Infinity; //#28197
    for (var _j = 11; _j <= 20; _j += 1) { //#28194
        $k[$j++] = _j; //#28194
    } //#28194
    $k[$j++] = 23; //#28196
    for (var _k = 31; _k <= 36; _k += 1) { //#28196
        $k[$j++] = _k; //#28196
    } //#28196
    $k[$j++] = 41; //#28197
    var _l = $a(); //#28197
    for (var _m = 0, _n = _l.length; _m < _n; _m++) { //#28200
        var _q = $cvrs($s(2), $get(_l, _m), 10); //#28199
        $put($1.aifixed, _q, _q); //#28199
    } //#28199
    $1.fnc1 = -1; //#28203
    $1.dmtx = $a([$1.fnc1]); //#28204
    for (var _w = 0, _v = $1.ais.length - 1; _w <= _v; _w += 1) { //#28220
        $1.i = _w; //#28206
        $1.ai = $get($1.ais, $1.i); //#28207
        $1.val = $get($1.vals, $1.i); //#28208
        var _16 = $a(($1.dmtx.length + $1.ai.length) + $1.val.length); //#28209
        $puti(_16, 0, $1.dmtx); //#28210
        $k[$j++] = _16; //#28211
        $k[$j++] = _16; //#28211
        $k[$j++] = $1.dmtx.length; //#28211
        $k[$j++] = $1.ai; //#28211
        $k[$j++] = Infinity; //#28211
        var _1A = $k[--$j]; //#28211
        var _1B = $k[--$j]; //#28211
        $k[$j++] = _1A; //#28211
        $forall(_1B); //#28211
        var _1C = $a(); //#28211
        var _1D = $k[--$j]; //#28211
        $puti($k[--$j], _1D, _1C); //#28211
        var _1F = $k[--$j]; //#28212
        $k[$j++] = _1F; //#28212
        $k[$j++] = _1F; //#28212
        $k[$j++] = $1.dmtx.length + $1.ai.length; //#28212
        $k[$j++] = $1.val; //#28212
        $k[$j++] = Infinity; //#28212
        var _1J = $k[--$j]; //#28212
        var _1K = $k[--$j]; //#28212
        $k[$j++] = _1J; //#28212
        $forall(_1K); //#28212
        var _1L = $a(); //#28212
        var _1M = $k[--$j]; //#28212
        $puti($k[--$j], _1M, _1L); //#28212
        $1.dmtx = $k[--$j]; //#28213
        var _1U = $get($1.aifixed, $geti($1.ai, 0, 2)) !== undefined; //#28214
        if (($1.i != ($1.ais.length - 1)) && (!_1U)) { //#28219
            var _1W = $a($1.dmtx.length + 1); //#28215
            $puti(_1W, 0, $1.dmtx); //#28216
            $put(_1W, $1.dmtx.length, $1.fnc1); //#28217
            $1.dmtx = _1W; //#28218
        } //#28218
    } //#28218
    $1.barcode = $s(($1.dmtx.length + 1) * 5); //#28223
    $1.i = 0; //#28224
    $1.j = 0; //#28224
    for (;;) { //#28234
        if ($1.i == $1.dmtx.length) { //#28225
            break; //#28225
        } //#28225
        var _1g = $get($1.dmtx, $1.i); //#28226
        $k[$j++] = _1g; //#28231
        if (_1g == $1.fnc1) { //#28230
            $j--; //#28227
            $puti($1.barcode, $1.j, "^FNC1"); //#28227
            $1.j = $1.j + 4; //#28228
        } else { //#28230
            $put($1.barcode, $1.j, $k[--$j]); //#28230
        } //#28230
        $1.i = $1.i + 1; //#28232
        $1.j = $1.j + 1; //#28233
    } //#28233
    $1.barcode = $geti($1.barcode, 0, $1.j); //#28235
    delete $1.options["parse"]; //#28238
    $put($1.options, "dontdraw", true); //#28239
    $put($1.options, "parsefnc", true); //#28240
    $k[$j++] = 'args'; //#28241
    $k[$j++] = $1.barcode; //#28241
    $k[$j++] = $1.options; //#28241
    bwipp_dotcode(); //#28241
    var _1y = $k[--$j]; //#28241
    $1[$k[--$j]] = _1y; //#28241
    $put($1.args, "opt", $1.options); //#28243
    $k[$j++] = $1.args; //#28246
    if (!$1.dontdraw) { //#28246
        bwipp_renmatrix(); //#28246
    } //#28246
}

function bwipp_hibccode39() {
    var $1 = {}; //#28276
    $1.options = $k[--$j]; //#28278
    $1.barcode = $k[--$j]; //#28279
    $1.dontdraw = false; //#28281
    $1.textfont = "OCR-B"; //#28282
    $1.textsize = 10; //#28283
    $1.textyoffset = -8; //#28284
    $1.textxoffset = 0; //#28285
    $1.validatecheck = false; //#28286
    $forall($1.options, function() { //#28297
        var _3 = $k[--$j]; //#28297
        $1[$k[--$j]] = _3; //#28297
    }); //#28297
    $1.textfont = "" + $1.textfont; //#28299
    $1.textsize = +$1.textsize; //#28300
    $1.textyoffset = +$1.textyoffset; //#28301
    $1.textxoffset = +$1.textxoffset; //#28302
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#28305
    $1.charvals = new Map; //#28306
    for (var _9 = 0; _9 <= 42; _9 += 1) { //#28307
        $put($1.charvals, $geti($1.barchars, _9, 1), _9); //#28307
    } //#28307
    for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) { //#28314
        var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; //#28311
        if (!_J) { //#28313
            $k[$j++] = 'bwipp.hibccode39badCharacter'; //#28312
            $k[$j++] = "HIBC Code 39 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#28312
            bwipp_raiseerror(); //#28312
        } //#28312
    } //#28312
    $k[$j++] = 'barlen'; //#28316
    $k[$j++] = $1.barcode.length; //#28316
    if ($1.validatecheck) { //#28316
        var _M = $k[--$j]; //#28316
        $k[$j++] = $f(_M - 1); //#28316
    } //#28316
    var _N = $k[--$j]; //#28316
    $1[$k[--$j]] = _N; //#28316
    $1.checksum = 41; //#28318
    for (var _R = 0, _Q = $f($1.barlen - 1); _R <= _Q; _R += 1) { //#28322
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum); //#28321
    } //#28321
    $1.checksum = $1.checksum % 43; //#28323
    if ($1.validatecheck) { //#28329
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#28327
            $k[$j++] = 'bwipp.hibccode39badCheckDigit'; //#28326
            $k[$j++] = "Incorrect HIBC Code 39 check digit provided"; //#28326
            bwipp_raiseerror(); //#28326
        } //#28326
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#28328
    } //#28328
    var _j = $s($f($1.barlen + 2)); //#28331
    $puti(_j, 1, $1.barcode); //#28331
    $1.barcode = _j; //#28331
    $put($1.barcode, 0, 43); //#28332
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#28333
    $1.text = $s($f($1.barlen + 4)); //#28335
    $put($1.text, 0, 42); //#28336
    $puti($1.text, 1, $1.barcode); //#28337
    var _10 = $get($1.barcode, $f($1.barlen + 1)); //#28338
    $k[$j++] = $1.text; //#28338
    $k[$j++] = $f($1.barlen + 2); //#28338
    $k[$j++] = _10; //#28338
    if (_10 == 32) { //#28338
        $j--; //#28338
        $k[$j++] = 95; //#28338
    } //#28338
    var _11 = $k[--$j]; //#28338
    var _12 = $k[--$j]; //#28338
    $put($k[--$j], _12, _11); //#28338
    $put($1.text, $f($1.barlen + 3), 42); //#28339
    $put($1.options, "dontdraw", true); //#28342
    $put($1.options, "includecheck", false); //#28343
    $put($1.options, "validatecheck", false); //#28344
    $k[$j++] = 'args'; //#28345
    $k[$j++] = $1.barcode; //#28345
    $k[$j++] = $1.options; //#28345
    bwipp_code39(); //#28345
    var _1B = $k[--$j]; //#28345
    $1[$k[--$j]] = _1B; //#28345
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#28347
    $put($1.args, "textxalign", "center"); //#28348
    $put($1.args, "opt", $1.options); //#28349
    $k[$j++] = $1.args; //#28352
    if (!$1.dontdraw) { //#28352
        bwipp_renlinear(); //#28352
    } //#28352
}

function bwipp_hibccode128() {
    var $1 = {}; //#28382
    $1.options = $k[--$j]; //#28384
    $1.barcode = $k[--$j]; //#28385
    $1.dontdraw = false; //#28387
    $1.textfont = "OCR-B"; //#28388
    $1.textsize = 10; //#28389
    $1.textyoffset = -8; //#28390
    $1.textxoffset = 0; //#28391
    $1.validatecheck = false; //#28392
    $forall($1.options, function() { //#28403
        var _3 = $k[--$j]; //#28403
        $1[$k[--$j]] = _3; //#28403
    }); //#28403
    $1.textfont = "" + $1.textfont; //#28405
    $1.textsize = +$1.textsize; //#28406
    $1.textyoffset = +$1.textyoffset; //#28407
    $1.textxoffset = +$1.textxoffset; //#28408
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#28411
    $1.charvals = new Map; //#28412
    for (var _9 = 0; _9 <= 42; _9 += 1) { //#28413
        $put($1.charvals, $geti($1.barchars, _9, 1), _9); //#28413
    } //#28413
    for (var _F = 0, _E = $1.barcode.length - 1; _F <= _E; _F += 1) { //#28420
        var _J = $get($1.charvals, $geti($1.barcode, _F, 1)) !== undefined; //#28417
        if (!_J) { //#28419
            $k[$j++] = 'bwipp.hibccode128badCharacter'; //#28418
            $k[$j++] = "HIBC Code 128 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#28418
            bwipp_raiseerror(); //#28418
        } //#28418
    } //#28418
    $k[$j++] = 'barlen'; //#28422
    $k[$j++] = $1.barcode.length; //#28422
    if ($1.validatecheck) { //#28422
        var _M = $k[--$j]; //#28422
        $k[$j++] = $f(_M - 1); //#28422
    } //#28422
    var _N = $k[--$j]; //#28422
    $1[$k[--$j]] = _N; //#28422
    $1.checksum = 41; //#28424
    for (var _R = 0, _Q = $f($1.barlen - 1); _R <= _Q; _R += 1) { //#28428
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _R, 1)) + $1.checksum); //#28427
    } //#28427
    $1.checksum = $1.checksum % 43; //#28429
    if ($1.validatecheck) { //#28435
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#28433
            $k[$j++] = 'bwipp.hibccode128badCheckDigit'; //#28432
            $k[$j++] = "Incorrect HIBC Code 128 check digit provided"; //#28432
            bwipp_raiseerror(); //#28432
        } //#28432
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#28434
    } //#28434
    var _j = $s($f($1.barlen + 2)); //#28437
    $puti(_j, 1, $1.barcode); //#28437
    $1.barcode = _j; //#28437
    $put($1.barcode, 0, 43); //#28438
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#28439
    $1.text = $s($f($1.barlen + 4)); //#28441
    $put($1.text, 0, 42); //#28442
    $puti($1.text, 1, $1.barcode); //#28443
    var _10 = $get($1.barcode, $f($1.barlen + 1)); //#28444
    $k[$j++] = $1.text; //#28444
    $k[$j++] = $f($1.barlen + 2); //#28444
    $k[$j++] = _10; //#28444
    if (_10 == 32) { //#28444
        $j--; //#28444
        $k[$j++] = 95; //#28444
    } //#28444
    var _11 = $k[--$j]; //#28444
    var _12 = $k[--$j]; //#28444
    $put($k[--$j], _12, _11); //#28444
    $put($1.text, $f($1.barlen + 3), 42); //#28445
    $put($1.options, "dontdraw", true); //#28448
    $put($1.options, "validatecheck", false); //#28449
    $k[$j++] = 'args'; //#28450
    $k[$j++] = $1.barcode; //#28450
    $k[$j++] = $1.options; //#28450
    bwipp_code128(); //#28450
    var _1A = $k[--$j]; //#28450
    $1[$k[--$j]] = _1A; //#28450
    $put($1.args, "txt", $a([$a([$1.text, $1.textxoffset, $1.textyoffset, $1.textfont, $1.textsize])])); //#28452
    $put($1.args, "textxalign", "center"); //#28453
    $put($1.args, "opt", $1.options); //#28454
    $k[$j++] = $1.args; //#28457
    if (!$1.dontdraw) { //#28457
        bwipp_renlinear(); //#28457
    } //#28457
}

function bwipp_hibcdatamatrix() {
    var $1 = {}; //#28487
    $1.options = $k[--$j]; //#28489
    $1.barcode = $k[--$j]; //#28490
    $1.dontdraw = false; //#28492
    $1.validatecheck = false; //#28493
    $forall($1.options, function() { //#28504
        var _3 = $k[--$j]; //#28504
        $1[$k[--$j]] = _3; //#28504
    }); //#28504
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#28507
    $1.charvals = new Map; //#28508
    for (var _5 = 0; _5 <= 42; _5 += 1) { //#28509
        $put($1.charvals, $geti($1.barchars, _5, 1), _5); //#28509
    } //#28509
    for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) { //#28516
        var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; //#28513
        if (!_F) { //#28515
            $k[$j++] = 'bwipp.hibcdatamatrixBadCharacter'; //#28514
            $k[$j++] = "HIBC Data Matrix must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#28514
            bwipp_raiseerror(); //#28514
        } //#28514
    } //#28514
    $k[$j++] = 'barlen'; //#28518
    $k[$j++] = $1.barcode.length; //#28518
    if ($1.validatecheck) { //#28518
        var _I = $k[--$j]; //#28518
        $k[$j++] = $f(_I - 1); //#28518
    } //#28518
    var _J = $k[--$j]; //#28518
    $1[$k[--$j]] = _J; //#28518
    $1.checksum = 41; //#28520
    for (var _N = 0, _M = $f($1.barlen - 1); _N <= _M; _N += 1) { //#28524
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum); //#28523
    } //#28523
    $1.checksum = $1.checksum % 43; //#28525
    if ($1.validatecheck) { //#28531
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#28529
            $k[$j++] = 'bwipp.hibcdatamatrixBadCheckDigit'; //#28528
            $k[$j++] = "Incorrect HIBC Data Matrix check digit provided"; //#28528
            bwipp_raiseerror(); //#28528
        } //#28528
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#28530
    } //#28530
    var _f = $s($f($1.barlen + 2)); //#28533
    $puti(_f, 1, $1.barcode); //#28533
    $1.barcode = _f; //#28533
    $put($1.barcode, 0, 43); //#28534
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#28535
    $put($1.options, "dontdraw", true); //#28538
    $put($1.options, "validatecheck", false); //#28539
    $k[$j++] = 'args'; //#28540
    $k[$j++] = $1.barcode; //#28540
    $k[$j++] = $1.options; //#28540
    bwipp_datamatrix(); //#28540
    var _r = $k[--$j]; //#28540
    $1[$k[--$j]] = _r; //#28540
    $put($1.args, "opt", $1.options); //#28542
    $k[$j++] = $1.args; //#28545
    if (!$1.dontdraw) { //#28545
        bwipp_renmatrix(); //#28545
    } //#28545
}

function bwipp_hibcdatamatrixrectangular() {
    var $1 = {}; //#28575
    $1.options = $k[--$j]; //#28577
    $1.barcode = $k[--$j]; //#28578
    $1.dontdraw = false; //#28580
    $1.validatecheck = false; //#28581
    $forall($1.options, function() { //#28592
        var _3 = $k[--$j]; //#28592
        $1[$k[--$j]] = _3; //#28592
    }); //#28592
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#28595
    $1.charvals = new Map; //#28596
    for (var _5 = 0; _5 <= 42; _5 += 1) { //#28597
        $put($1.charvals, $geti($1.barchars, _5, 1), _5); //#28597
    } //#28597
    for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) { //#28604
        var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; //#28601
        if (!_F) { //#28603
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCharacter'; //#28602
            $k[$j++] = "HIBC Data Matrix Rectangular must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#28602
            bwipp_raiseerror(); //#28602
        } //#28602
    } //#28602
    $k[$j++] = 'barlen'; //#28606
    $k[$j++] = $1.barcode.length; //#28606
    if ($1.validatecheck) { //#28606
        var _I = $k[--$j]; //#28606
        $k[$j++] = $f(_I - 1); //#28606
    } //#28606
    var _J = $k[--$j]; //#28606
    $1[$k[--$j]] = _J; //#28606
    $1.checksum = 41; //#28608
    for (var _N = 0, _M = $f($1.barlen - 1); _N <= _M; _N += 1) { //#28612
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum); //#28611
    } //#28611
    $1.checksum = $1.checksum % 43; //#28613
    if ($1.validatecheck) { //#28619
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#28617
            $k[$j++] = 'bwipp.hibcdatamatrixrectangularBadCheckDigit'; //#28616
            $k[$j++] = "Incorrect HIBC Data Matrix Rectangular check digit provided"; //#28616
            bwipp_raiseerror(); //#28616
        } //#28616
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#28618
    } //#28618
    var _f = $s($f($1.barlen + 2)); //#28621
    $puti(_f, 1, $1.barcode); //#28621
    $1.barcode = _f; //#28621
    $put($1.barcode, 0, 43); //#28622
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#28623
    $put($1.options, "dontdraw", true); //#28626
    $put($1.options, "validatecheck", false); //#28627
    $put($1.options, "format", "rectangle"); //#28628
    var _r = $1.options; //#28629
    $k[$j++] = 'args'; //#28629
    $k[$j++] = $1.barcode; //#28629
    $k[$j++] = _r; //#28629
    bwipp_datamatrix(); //#28629
    var _s = $k[--$j]; //#28629
    $1[$k[--$j]] = _s; //#28629
    $put($1.args, "opt", $1.options); //#28631
    $k[$j++] = $1.args; //#28634
    if (!$1.dontdraw) { //#28634
        bwipp_renmatrix(); //#28634
    } //#28634
}

function bwipp_hibcpdf417() {
    var $1 = {}; //#28664
    $1.options = $k[--$j]; //#28666
    $1.barcode = $k[--$j]; //#28667
    $1.dontdraw = false; //#28669
    $1.columns = 2; //#28670
    $1.validatecheck = false; //#28671
    $forall($1.options, function() { //#28682
        var _3 = $k[--$j]; //#28682
        $1[$k[--$j]] = _3; //#28682
    }); //#28682
    $1.columns = ~~$1.columns; //#28684
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#28687
    $1.charvals = new Map; //#28688
    for (var _6 = 0; _6 <= 42; _6 += 1) { //#28689
        $put($1.charvals, $geti($1.barchars, _6, 1), _6); //#28689
    } //#28689
    for (var _C = 0, _B = $1.barcode.length - 1; _C <= _B; _C += 1) { //#28696
        var _G = $get($1.charvals, $geti($1.barcode, _C, 1)) !== undefined; //#28693
        if (!_G) { //#28695
            $k[$j++] = 'bwipp.hibcpdf417BadCharacter'; //#28694
            $k[$j++] = "HIBC PDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#28694
            bwipp_raiseerror(); //#28694
        } //#28694
    } //#28694
    $k[$j++] = 'barlen'; //#28698
    $k[$j++] = $1.barcode.length; //#28698
    if ($1.validatecheck) { //#28698
        var _J = $k[--$j]; //#28698
        $k[$j++] = $f(_J - 1); //#28698
    } //#28698
    var _K = $k[--$j]; //#28698
    $1[$k[--$j]] = _K; //#28698
    $1.checksum = 41; //#28700
    for (var _O = 0, _N = $f($1.barlen - 1); _O <= _N; _O += 1) { //#28704
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _O, 1)) + $1.checksum); //#28703
    } //#28703
    $1.checksum = $1.checksum % 43; //#28705
    if ($1.validatecheck) { //#28711
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#28709
            $k[$j++] = 'bwipp.hibcpdf417BadCheckDigit'; //#28708
            $k[$j++] = "Incorrect HIBC PDF417 check digit provided"; //#28708
            bwipp_raiseerror(); //#28708
        } //#28708
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#28710
    } //#28710
    var _g = $s($f($1.barlen + 2)); //#28713
    $puti(_g, 1, $1.barcode); //#28713
    $1.barcode = _g; //#28713
    $put($1.barcode, 0, 43); //#28714
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#28715
    $put($1.options, "dontdraw", true); //#28718
    var _p = $1.options; //#28719
    $put(_p, "columns", $1.columns); //#28719
    var _r = $1.options; //#28720
    $put(_r, "validatecheck", false); //#28720
    $k[$j++] = 'args'; //#28721
    $k[$j++] = $1.barcode; //#28721
    $k[$j++] = $1.options; //#28721
    bwipp_pdf417(); //#28721
    var _u = $k[--$j]; //#28721
    $1[$k[--$j]] = _u; //#28721
    $put($1.args, "opt", $1.options); //#28723
    $k[$j++] = $1.args; //#28726
    if (!$1.dontdraw) { //#28726
        bwipp_renmatrix(); //#28726
    } //#28726
}

function bwipp_hibcmicropdf417() {
    var $1 = {}; //#28756
    $1.options = $k[--$j]; //#28758
    $1.barcode = $k[--$j]; //#28759
    $1.dontdraw = false; //#28761
    $1.columns = 2; //#28762
    $1.validatecheck = false; //#28763
    $forall($1.options, function() { //#28774
        var _3 = $k[--$j]; //#28774
        $1[$k[--$j]] = _3; //#28774
    }); //#28774
    $1.columns = ~~$1.columns; //#28776
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#28779
    $1.charvals = new Map; //#28780
    for (var _6 = 0; _6 <= 42; _6 += 1) { //#28781
        $put($1.charvals, $geti($1.barchars, _6, 1), _6); //#28781
    } //#28781
    for (var _C = 0, _B = $1.barcode.length - 1; _C <= _B; _C += 1) { //#28788
        var _G = $get($1.charvals, $geti($1.barcode, _C, 1)) !== undefined; //#28785
        if (!_G) { //#28787
            $k[$j++] = 'bwipp.hibcmicropdf417BadCharacter'; //#28786
            $k[$j++] = "HIBC MicroPDF417 must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#28786
            bwipp_raiseerror(); //#28786
        } //#28786
    } //#28786
    $k[$j++] = 'barlen'; //#28790
    $k[$j++] = $1.barcode.length; //#28790
    if ($1.validatecheck) { //#28790
        var _J = $k[--$j]; //#28790
        $k[$j++] = $f(_J - 1); //#28790
    } //#28790
    var _K = $k[--$j]; //#28790
    $1[$k[--$j]] = _K; //#28790
    $1.checksum = 41; //#28792
    for (var _O = 0, _N = $f($1.barlen - 1); _O <= _N; _O += 1) { //#28796
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _O, 1)) + $1.checksum); //#28795
    } //#28795
    $1.checksum = $1.checksum % 43; //#28797
    if ($1.validatecheck) { //#28803
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#28801
            $k[$j++] = 'bwipp.hibcmicropdf417BadCheckDigit'; //#28800
            $k[$j++] = "Incorrect HIBC MicroPDF417 check digit provided"; //#28800
            bwipp_raiseerror(); //#28800
        } //#28800
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#28802
    } //#28802
    var _g = $s($f($1.barlen + 2)); //#28805
    $puti(_g, 1, $1.barcode); //#28805
    $1.barcode = _g; //#28805
    $put($1.barcode, 0, 43); //#28806
    var _m = $1.checksum; //#28807
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, _m)); //#28807
    $put($1.options, "dontdraw", true); //#28810
    $put($1.options, "columns", $1.columns); //#28811
    var _r = $1.options; //#28812
    $put(_r, "validatecheck", false); //#28812
    $k[$j++] = 'args'; //#28813
    $k[$j++] = $1.barcode; //#28813
    $k[$j++] = $1.options; //#28813
    bwipp_micropdf417(); //#28813
    var _u = $k[--$j]; //#28813
    $1[$k[--$j]] = _u; //#28813
    $put($1.args, "opt", $1.options); //#28815
    $k[$j++] = $1.args; //#28818
    if (!$1.dontdraw) { //#28818
        bwipp_renmatrix(); //#28818
    } //#28818
}

function bwipp_hibcqrcode() {
    var $1 = {}; //#28848
    $1.options = $k[--$j]; //#28850
    $1.barcode = $k[--$j]; //#28851
    $1.dontdraw = false; //#28853
    $1.validatecheck = false; //#28854
    $forall($1.options, function() { //#28865
        var _3 = $k[--$j]; //#28865
        $1[$k[--$j]] = _3; //#28865
    }); //#28865
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#28868
    $1.charvals = new Map; //#28869
    for (var _5 = 0; _5 <= 42; _5 += 1) { //#28870
        $put($1.charvals, $geti($1.barchars, _5, 1), _5); //#28870
    } //#28870
    for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) { //#28877
        var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; //#28874
        if (!_F) { //#28876
            $k[$j++] = 'bwipp.hibcqrcodeBadCharacter'; //#28875
            $k[$j++] = "HIBC QR Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#28875
            bwipp_raiseerror(); //#28875
        } //#28875
    } //#28875
    $k[$j++] = 'barlen'; //#28879
    $k[$j++] = $1.barcode.length; //#28879
    if ($1.validatecheck) { //#28879
        var _I = $k[--$j]; //#28879
        $k[$j++] = $f(_I - 1); //#28879
    } //#28879
    var _J = $k[--$j]; //#28879
    $1[$k[--$j]] = _J; //#28879
    $1.checksum = 41; //#28881
    for (var _N = 0, _M = $f($1.barlen - 1); _N <= _M; _N += 1) { //#28885
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum); //#28884
    } //#28884
    $1.checksum = $1.checksum % 43; //#28886
    if ($1.validatecheck) { //#28892
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#28890
            $k[$j++] = 'bwipp.hibcqrcodeBadCheckDigit'; //#28889
            $k[$j++] = "Incorrect HIBC QR Code check digit provided"; //#28889
            bwipp_raiseerror(); //#28889
        } //#28889
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#28891
    } //#28891
    var _f = $s($f($1.barlen + 2)); //#28894
    $puti(_f, 1, $1.barcode); //#28894
    $1.barcode = _f; //#28894
    $put($1.barcode, 0, 43); //#28895
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#28896
    $put($1.options, "dontdraw", true); //#28899
    $put($1.options, "validatecheck", false); //#28900
    var _q = $1.options; //#28901
    $k[$j++] = 'args'; //#28901
    $k[$j++] = $1.barcode; //#28901
    $k[$j++] = _q; //#28901
    bwipp_qrcode(); //#28901
    var _r = $k[--$j]; //#28901
    $1[$k[--$j]] = _r; //#28901
    $put($1.args, "opt", $1.options); //#28903
    $k[$j++] = $1.args; //#28906
    if (!$1.dontdraw) { //#28906
        bwipp_renmatrix(); //#28906
    } //#28906
}

function bwipp_hibccodablockf() {
    var $1 = {}; //#28936
    $1.options = $k[--$j]; //#28938
    $1.barcode = $k[--$j]; //#28939
    $1.dontdraw = false; //#28941
    $1.validatecheck = false; //#28942
    $forall($1.options, function() { //#28953
        var _3 = $k[--$j]; //#28953
        $1[$k[--$j]] = _3; //#28953
    }); //#28953
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#28956
    $1.charvals = new Map; //#28957
    for (var _5 = 0; _5 <= 42; _5 += 1) { //#28958
        $put($1.charvals, $geti($1.barchars, _5, 1), _5); //#28958
    } //#28958
    for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) { //#28965
        var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; //#28962
        if (!_F) { //#28964
            $k[$j++] = 'bwipp.codablockfBadCharacter'; //#28963
            $k[$j++] = "HIBC Codablock F must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#28963
            bwipp_raiseerror(); //#28963
        } //#28963
    } //#28963
    $k[$j++] = 'barlen'; //#28967
    $k[$j++] = $1.barcode.length; //#28967
    if ($1.validatecheck) { //#28967
        var _I = $k[--$j]; //#28967
        $k[$j++] = $f(_I - 1); //#28967
    } //#28967
    var _J = $k[--$j]; //#28967
    $1[$k[--$j]] = _J; //#28967
    $1.checksum = 41; //#28969
    for (var _N = 0, _M = $f($1.barlen - 1); _N <= _M; _N += 1) { //#28973
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum); //#28972
    } //#28972
    $1.checksum = $1.checksum % 43; //#28974
    if ($1.validatecheck) { //#28980
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#28978
            $k[$j++] = 'bwipp.hibccodablockfBadCheckDigit'; //#28977
            $k[$j++] = "Incorrect HIBC Codablock F check digit provided"; //#28977
            bwipp_raiseerror(); //#28977
        } //#28977
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#28979
    } //#28979
    var _f = $s($f($1.barlen + 2)); //#28982
    $puti(_f, 1, $1.barcode); //#28982
    $1.barcode = _f; //#28982
    $put($1.barcode, 0, 43); //#28983
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#28984
    $put($1.options, "dontdraw", true); //#28987
    $put($1.options, "validatecheck", false); //#28988
    $k[$j++] = 'args'; //#28989
    $k[$j++] = $1.barcode; //#28989
    $k[$j++] = $1.options; //#28989
    bwipp_codablockf(); //#28989
    var _r = $k[--$j]; //#28989
    $1[$k[--$j]] = _r; //#28989
    $put($1.args, "opt", $1.options); //#28991
    $k[$j++] = $1.args; //#28994
    if (!$1.dontdraw) { //#28994
        bwipp_renmatrix(); //#28994
    } //#28994
}

function bwipp_hibcazteccode() {
    var $1 = {}; //#29024
    $1.options = $k[--$j]; //#29026
    $1.barcode = $k[--$j]; //#29027
    $1.dontdraw = false; //#29029
    $1.validatecheck = false; //#29030
    $forall($1.options, function() { //#29041
        var _3 = $k[--$j]; //#29041
        $1[$k[--$j]] = _3; //#29041
    }); //#29041
    $1.barchars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"; //#29044
    $1.charvals = new Map; //#29045
    for (var _5 = 0; _5 <= 42; _5 += 1) { //#29046
        $put($1.charvals, $geti($1.barchars, _5, 1), _5); //#29046
    } //#29046
    for (var _B = 0, _A = $1.barcode.length - 1; _B <= _A; _B += 1) { //#29053
        var _F = $get($1.charvals, $geti($1.barcode, _B, 1)) !== undefined; //#29050
        if (!_F) { //#29052
            $k[$j++] = 'bwipp.hibcazteccodeBadCharacter'; //#29051
            $k[$j++] = "HIBC Aztec Code must contain only digits, capital letters, spaces and the symbols -.$/+%"; //#29051
            bwipp_raiseerror(); //#29051
        } //#29051
    } //#29051
    $k[$j++] = 'barlen'; //#29055
    $k[$j++] = $1.barcode.length; //#29055
    if ($1.validatecheck) { //#29055
        var _I = $k[--$j]; //#29055
        $k[$j++] = $f(_I - 1); //#29055
    } //#29055
    var _J = $k[--$j]; //#29055
    $1[$k[--$j]] = _J; //#29055
    $1.checksum = 41; //#29057
    for (var _N = 0, _M = $f($1.barlen - 1); _N <= _M; _N += 1) { //#29061
        $1.checksum = $f($get($1.charvals, $geti($1.barcode, _N, 1)) + $1.checksum); //#29060
    } //#29060
    $1.checksum = $1.checksum % 43; //#29062
    if ($1.validatecheck) { //#29068
        if ($get($1.barcode, $1.barlen) != $get($1.barchars, $1.checksum)) { //#29066
            $k[$j++] = 'bwipp.hibcazteccodeBadCheckDigit'; //#29065
            $k[$j++] = "Incorrect HIBC Aztec Code check digit provided"; //#29065
            bwipp_raiseerror(); //#29065
        } //#29065
        $1.barcode = $geti($1.barcode, 0, $1.barlen); //#29067
    } //#29067
    var _f = $s($f($1.barlen + 2)); //#29070
    $puti(_f, 1, $1.barcode); //#29070
    $1.barcode = _f; //#29070
    $put($1.barcode, 0, 43); //#29071
    $put($1.barcode, $f($1.barlen + 1), $get($1.barchars, $1.checksum)); //#29072
    $put($1.options, "dontdraw", true); //#29075
    $put($1.options, "validatecheck", false); //#29076
    $k[$j++] = 'args'; //#29077
    $k[$j++] = $1.barcode; //#29077
    $k[$j++] = $1.options; //#29077
    bwipp_azteccode(); //#29077
    var _r = $k[--$j]; //#29077
    $1[$k[--$j]] = _r; //#29077
    $put($1.args, "opt", $1.options); //#29079
    $k[$j++] = $1.args; //#29082
    if (!$1.dontdraw) { //#29082
        bwipp_renmatrix(); //#29082
    } //#29082
}

function bwipp_channelcode() {
    var $1 = {}; //#29112
    $1.options = $k[--$j]; //#29114
    $1.barcode = $k[--$j]; //#29115
    $1.dontdraw = false; //#29117
    $1.shortfinder = false; //#29118
    $1.includetext = false; //#29119
    $1.includecheck = false; //#29120
    $1.height = 1; //#29121
    $forall($1.options, function() { //#29132
        var _3 = $k[--$j]; //#29132
        $1[$k[--$j]] = _3; //#29132
    }); //#29132
    $1.height = +$1.height; //#29134
    if (($1.barcode.length < 2) || ($1.barcode.length > 7)) { //#29139
        $k[$j++] = 'bwipp.channelcodeBadLength'; //#29138
        $k[$j++] = "Channel Code must be 2 to 7 digits"; //#29138
        bwipp_raiseerror(); //#29138
    } //#29138
    $forall($1.barcode, function() { //#29144
        var _9 = $k[--$j]; //#29141
        if ((_9 < 48) || (_9 > 57)) { //#29143
            $k[$j++] = 'bwipp.channelcodeBadCharacter'; //#29142
            $k[$j++] = "Channel Code must contain only digits"; //#29142
            bwipp_raiseerror(); //#29142
        } //#29142
    }); //#29142
    if ($cvi($1.barcode) > $get($a([26, 292, 3493, 44072, 576688, 7742862]), $1.barcode.length - 2)) { //#29147
        $k[$j++] = 'bwipp.channelcodeTooBig'; //#29146
        $k[$j++] = "The Channel Code value is too big for the number of channels"; //#29146
        bwipp_raiseerror(); //#29146
    } //#29146
    $1.nextb = function() {
        var _E = $k[--$j]; //#29150
        var _N = (($f($get($1.s, _E) + ($f($get($1.b, $f(_E - 1)) + $f($get($1.b, $f(_E - 2)) + $get($1.s, $f(_E - 1))))))) > 4) ? 1 : 2; //#29155
        $k[$j++] = _E; //#29171
        $k[$j++] = _N; //#29171
        if (_E < $f($1.chan + 2)) { //#29169
            var _P = $k[--$j]; //#29157
            var _Q = $k[--$j]; //#29157
            var _R = $k[--$j]; //#29157
            $k[$j++] = _R; //#29160
            $k[$j++] = _Q; //#29160
            $k[$j++] = _P; //#29160
            for (var _T = _P, _S = _R; _T <= _S; _T += 1) { //#29160
                var _V = $k[--$j]; //#29158
                var _W = $k[--$j]; //#29158
                $put($1.b, _W, _T); //#29158
                var _X = $k[--$j]; //#29159
                var _Y = $k[--$j]; //#29159
                $k[$j++] = _Y; //#29159
                $k[$j++] = _X; //#29159
                $k[$j++] = _W; //#29159
                $k[$j++] = _V; //#29159
                $k[$j++] = $f($f(_X - _T) + 1); //#29159
                $k[$j++] = _Y; //#29159
                $k[$j++] = $f(_W + 1); //#29159
                $1.nexts(); //#29159
            } //#29159
        } else { //#29169
            var _Z = $k[--$j]; //#29162
            var _a = $k[--$j]; //#29162
            var _b = $k[--$j]; //#29162
            $k[$j++] = _b; //#29170
            $k[$j++] = _a; //#29170
            $k[$j++] = _Z; //#29170
            if ($le(_Z, _b)) { //#29170
                var _d = $k[--$j]; //#29163
                var _e = $k[--$j]; //#29163
                var _f = $k[--$j]; //#29163
                $put($1.b, _e, _f); //#29163
                $k[$j++] = _f; //#29168
                $k[$j++] = _e; //#29168
                $k[$j++] = _d; //#29168
                if ($1.value == $1.target) { //#29168
                    $k[$j++] = Infinity; //#29166
                    for (var _i = 3; _i <= 10; _i += 1) { //#29166
                        $k[$j++] = $get($1.s, _i); //#29166
                        $k[$j++] = $get($1.b, _i); //#29166
                    } //#29166
                    $1.out = $geti($a(), 0, $1.chan * 2); //#29167
                } //#29167
                $1.value = $1.value + 1; //#29169
            } //#29169
        } //#29169
        $j -= 4; //#29172
    }; //#29173
    $1.nexts = function() {
        var _r = $k[--$j]; //#29176
        $k[$j++] = _r; //#29176
        if (_r < $f($1.chan + 2)) { //#29176
            $k[$j++] = 1; //#29176
        } else { //#29176
            var _t = $k[--$j]; //#29176
            var _u = $k[--$j]; //#29176
            $k[$j++] = _u; //#29176
            $k[$j++] = _t; //#29176
            $k[$j++] = _u; //#29176
        } //#29176
        var _v = $k[--$j]; //#29176
        var _w = $k[--$j]; //#29176
        var _x = $k[--$j]; //#29176
        $k[$j++] = _x; //#29179
        $k[$j++] = _w; //#29179
        for (var _z = _v, _y = _x; _z <= _y; _z += 1) { //#29179
            var _11 = $k[--$j]; //#29177
            $put($1.s, _11, _z); //#29177
            var _12 = $k[--$j]; //#29178
            var _13 = $k[--$j]; //#29178
            $k[$j++] = _13; //#29178
            $k[$j++] = _12; //#29178
            $k[$j++] = _11; //#29178
            $k[$j++] = $f($f(_12 - _z) + 1); //#29178
            $k[$j++] = _13; //#29178
            $k[$j++] = _11; //#29178
            $1.nextb(); //#29178
        } //#29178
        $j -= 3; //#29180
    }; //#29181
    $1.encode = function() {
        $1.chan = $k[--$j]; //#29184
        $1.target = $k[--$j]; //#29185
        $1.value = 0; //#29186
        $1.out = -1; //#29187
        $1.b = $a([1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#29188
        $1.s = $a([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]); //#29189
        var _18 = $1.chan; //#29190
        $k[$j++] = _18; //#29190
        $k[$j++] = _18; //#29190
        $k[$j++] = 3; //#29190
        $1.nexts(); //#29190
        $k[$j++] = $1.out; //#29191
    }; //#29192
    $1.barlen = $1.barcode.length; //#29194
    $k[$j++] = 'finder'; //#29197
    if ($1.shortfinder) { //#29197
        $k[$j++] = $a([1, 1, 1, 1, 1]); //#29197
    } else { //#29197
        $k[$j++] = $a([1, 1, 1, 1, 1, 1, 1, 1, 1]); //#29197
    } //#29197
    var _1E = $k[--$j]; //#29197
    $1[$k[--$j]] = _1E; //#29197
    $k[$j++] = 'data'; //#29200
    $k[$j++] = $cvi($1.barcode); //#29200
    $k[$j++] = $1.barlen + 1; //#29200
    $1.encode(); //#29200
    var _1I = $k[--$j]; //#29200
    $1[$k[--$j]] = _1I; //#29200
    $1.check = $a([]); //#29203
    if ($1.includecheck) { //#29219
        $1.mod23 = $get($a([$a([]), $a([]), $a([13, 12, 4, 9, 3, 1]), $a([13, 2, 12, 3, 18, 16, 4, 1]), $a([11, 16, 17, 8, 20, 4, 10, 2, 5, 1]), $a([1, 4, 16, 18, 3, 12, 2, 8, 9, 13, 6, 1]), $a([20, 16, 22, 13, 15, 12, 5, 4, 8, 9, 21, 3, 7, 1]), $a([2, 6, 18, 8, 1, 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1])]), $1.barlen); //#29213
        $k[$j++] = 0; //#29217
        for (var _1Z = 0, _1Y = $1.data.length - 1; _1Z <= _1Y; _1Z += 1) { //#29217
            var _1e = $k[--$j]; //#29216
            $k[$j++] = $f(_1e + ($f($get($1.data, _1Z) - 1) * $get($1.mod23, _1Z))); //#29216
        } //#29216
        var _1f = $k[--$j]; //#29218
        $k[$j++] = _1f % 23; //#29218
        $k[$j++] = 3; //#29218
        $1.encode(); //#29218
        $1.check = $k[--$j]; //#29218
    } //#29218
    $k[$j++] = Infinity; //#29225
    $aload($1.finder); //#29223
    $aload($1.data); //#29224
    $aload($1.check); //#29225
    $1.sbs = $a(); //#29225
    $1.txt = $a($1.barlen); //#29229
    for (var _1p = 0, _1o = $1.barlen - 1; _1p <= _1o; _1p += 1) { //#29233
        $1.i = _1p; //#29231
        $put($1.txt, $1.i, $a([$geti($1.barcode, $1.i, 1), 0, 0, "", 0])); //#29232
    } //#29232
    $k[$j++] = Infinity; //#29243
    var _1w = $1.sbs; //#29238
    $k[$j++] = Infinity; //#29239
    for (var _1y = 0, _1z = ~~(($1.sbs.length + 1) / 2); _1y < _1z; _1y++) { //#29239
        $k[$j++] = $1.height; //#29239
    } //#29239
    var _21 = $a(); //#29239
    $k[$j++] = Infinity; //#29240
    for (var _23 = 0, _24 = ~~(($1.sbs.length + 1) / 2); _23 < _24; _23++) { //#29240
        $k[$j++] = 0; //#29240
    } //#29240
    var _25 = $a(); //#29240
    $k[$j++] = 'ren'; //#29243
    $k[$j++] = bwipp_renlinear; //#29243
    $k[$j++] = 'sbs'; //#29243
    $k[$j++] = _1w; //#29243
    $k[$j++] = 'bhs'; //#29243
    $k[$j++] = _21; //#29243
    $k[$j++] = 'bbs'; //#29243
    $k[$j++] = _25; //#29243
    $k[$j++] = 'txt'; //#29243
    $k[$j++] = $1.txt; //#29243
    $k[$j++] = 'textxalign'; //#29243
    $k[$j++] = "center"; //#29243
    $k[$j++] = 'opt'; //#29243
    $k[$j++] = $1.options; //#29243
    var _28 = $d(); //#29243
    $k[$j++] = _28; //#29246
    if (!$1.dontdraw) { //#29246
        bwipp_renlinear(); //#29246
    } //#29246
}

function bwipp_renlinear() {
    if ($0.bwipjs_dontdraw) { //#29267
        return; //#29267
    } //#29267
    var $1 = {}; //#29268
    $1.args = $k[--$j]; //#29270
    $1.sbs = $a([]); //#29273
    $1.bhs = $a([]); //#29274
    $1.bbs = $a([]); //#29275
    $1.txt = $a([]); //#29276
    $1.barcolor = "unset"; //#29277
    $1.includetext = false; //#29278
    $1.textcolor = "unset"; //#29279
    $1.textxalign = "unset"; //#29280
    $1.textyalign = "unset"; //#29281
    $1.textfont = "OCR-B"; //#29282
    $1.textsize = 10; //#29283
    $1.textxoffset = 0; //#29284
    $1.textyoffset = 0; //#29285
    $1.textgaps = 0; //#29286
    $1.alttext = ""; //#29287
    $1.bordercolor = "unset"; //#29288
    $1.backgroundcolor = "unset"; //#29289
    $1.inkspread = 0; //#29290
    $1.width = 0; //#29291
    $1.barratio = 1; //#29292
    $1.spaceratio = 1; //#29293
    $1.showborder = false; //#29294
    $1.borderleft = 10; //#29295
    $1.borderright = 10; //#29296
    $1.bordertop = 1; //#29297
    $1.borderbottom = 1; //#29298
    $1.borderwidth = 0.5; //#29299
    $1.guardwhitespace = false; //#29300
    $1.guardleftpos = 0; //#29301
    $1.guardleftypos = 0; //#29302
    $1.guardrightpos = 0; //#29303
    $1.guardrightypos = 0; //#29304
    $1.guardwidth = 7; //#29305
    $1.guardheight = 7; //#29306
    $forall($1.args, function() { //#29309
        var _7 = $k[--$j]; //#29309
        $1[$k[--$j]] = _7; //#29309
    }); //#29309
    var _9 = $1.opt; //#29310
    for (var _E = _9.size, _D = _9.keys(), _C = 0; _C < _E; _C++) { //#29310
        var _A = _D.next().value; //#29310
        $1[_A] = _9.get(_A); //#29310
    } //#29310
    $1.barcolor = "" + $1.barcolor; //#29312
    $1.textcolor = "" + $1.textcolor; //#29313
    $1.textxalign = "" + $1.textxalign; //#29314
    $1.textyalign = "" + $1.textyalign; //#29315
    $1.textfont = "" + $1.textfont; //#29316
    $1.textsize = +$1.textsize; //#29317
    $1.textxoffset = +$1.textxoffset; //#29318
    $1.textyoffset = +$1.textyoffset; //#29319
    $1.textgaps = +$1.textgaps; //#29320
    $1.alttext = "" + $1.alttext; //#29321
    $1.bordercolor = "" + $1.bordercolor; //#29322
    $1.backgroundcolor = "" + $1.backgroundcolor; //#29323
    $1.inkspread = +$1.inkspread; //#29324
    $1.width = +$1.width; //#29325
    $1.barratio = +$1.barratio; //#29326
    $1.spaceratio = +$1.spaceratio; //#29327
    $1.borderleft = +$1.borderleft; //#29328
    $1.borderright = +$1.borderright; //#29329
    $1.bordertop = +$1.bordertop; //#29330
    $1.borderbottom = +$1.borderbottom; //#29331
    $1.borderwidth = +$1.borderwidth; //#29332
    $1.guardleftpos = +$1.guardleftpos; //#29333
    $1.guardleftypos = +$1.guardleftypos; //#29334
    $1.guardrightpos = +$1.guardrightpos; //#29335
    $1.guardrightypos = +$1.guardrightypos; //#29336
    $1.guardwidth = +$1.guardwidth; //#29337
    $1.guardheight = +$1.guardheight; //#29338
    $1.bars = $a(~~(($1.sbs.length + 1) / 2)); //#29341
    $1.x = 0; //#29342
    $1.maxh = 0; //#29342
    for (var _k = 0, _j = ((~~(($1.sbs.length + 1) / 2)) * 2) - 2; _k <= _j; _k += 1) { //#29361
        $1.i = _k; //#29344
        if (($1.i % 2) == 0) { //#29358
            $1.d = $f(($f(($get($1.sbs, $1.i) * $1.barratio) - $1.barratio)) + 1); //#29346
            if ($get($1.sbs, $1.i) != 0) { //#29355
                $1.h = $get($1.bhs, ~~($1.i / 2)) * 72; //#29348
                $1.c = $f(($1.d / 2) + $1.x); //#29349
                $1.y = $get($1.bbs, ~~($1.i / 2)) * 72; //#29350
                $1.w = $f($1.d - $1.inkspread); //#29351
                $put($1.bars, ~~($1.i / 2), $a([$1.h, $1.c, $1.y, $1.w])); //#29352
                if ($f($1.h + $1.y) > $1.maxh) { //#29353
                    $1.maxh = $f($1.h + $1.y); //#29353
                } //#29353
            } else { //#29355
                $put($1.bars, ~~($1.i / 2), -1); //#29355
            } //#29355
        } else { //#29358
            $1.d = $f(($f(($get($1.sbs, $1.i) * $1.spaceratio) - $1.spaceratio)) + 1); //#29358
        } //#29358
        $1.x = $f($1.x + $1.d); //#29360
    } //#29360
    $$.save(); //#29363
    var _1P = $$.currpos(); //#29365
    $$.translate(_1P.x, _1P.y); //#29365
    if ($1.width != 0) { //#29370
        $$.scale(($1.width * 72) / $1.x, 1); //#29369
    } //#29369
    $$.newpath(); //#29373
    $$.moveto(-$1.borderleft, -$1.borderbottom); //#29374
    $$.rlineto($f($f($1.x + $1.borderleft) + $1.borderright), 0); //#29375
    $$.rlineto(0, $f($f($1.maxh + $1.borderbottom) + $1.bordertop)); //#29376
    $$.rlineto(-($f($f($1.x + $1.borderleft) + $1.borderright)), 0); //#29377
    $$.rlineto(0, -($f($f($1.maxh + $1.borderbottom) + $1.bordertop))); //#29378
    $$.closepath(); //#29379
    if ($1.showborder) { //#29387
        $$.save(); //#29383
        if ($ne($1.bordercolor, "unset")) { //#29384
            $$.setcolor($1.bordercolor); //#29384
        } //#29384
        $$.setlinewidth($1.borderwidth); //#29385
        $$.stroke(); //#29385
        $$.restore(); //#29386
    } //#29386
    $$.save(); //#29390
    if ($ne($1.barcolor, "unset")) { //#29392
        $$.setcolor($1.barcolor); //#29392
    } //#29392
    var _1n = $1.bars; //#29393
    for (var _1o = 0, _1p = _1n.length; _1o < _1p; _1o++) { //#29399
        var _1q = $get(_1n, _1o); //#29399
        $k[$j++] = _1q; //#29398
        if (_1q != -1) { //#29397
            $aload($k[--$j]); //#29395
            $$.newpath(); //#29395
            $$.setlinewidth($k[--$j]); //#29395
            var _1t = $k[--$j]; //#29395
            $$.moveto($k[--$j], _1t); //#29395
            $$.rlineto(0, $k[--$j]); //#29395
            $$.stroke(); //#29395
        } else { //#29397
            $j--; //#29397
        } //#29397
    } //#29397
    $$.restore(); //#29400
    if ($ne($1.textcolor, "unset")) { //#29403
        $$.setcolor($1.textcolor); //#29403
    } //#29403
    if ($1.includetext) { //#29460
        if (($eq($1.textxalign, "unset") && $eq($1.textyalign, "unset")) && $eq($1.alttext, "")) { //#29458
            $1.s = 0; //#29406
            $1.fn = ""; //#29406
            var _22 = $1.txt; //#29407
            for (var _23 = 0, _24 = _22.length; _23 < _24; _23++) { //#29416
                $forall($get(_22, _23)); //#29408
                var _26 = $k[--$j]; //#29409
                var _27 = $k[--$j]; //#29409
                $k[$j++] = _27; //#29414
                $k[$j++] = _26; //#29414
                if ((_26 != $1.s) || $ne(_27, $1.fn)) { //#29413
                    var _2A = $k[--$j]; //#29410
                    var _2B = $k[--$j]; //#29410
                    $1.s = _2A; //#29410
                    $1.fn = _2B; //#29410
                    $$.selectfont(_2B, _2A); //#29411
                } else { //#29413
                    $j -= 2; //#29413
                } //#29413
                var _2C = $k[--$j]; //#29415
                $$.moveto($k[--$j], _2C); //#29415
                $$.show($k[--$j], 0, 0); //#29415
            } //#29415
        } else { //#29458
            $$.selectfont($1.textfont, $1.textsize); //#29418
            if ($eq($1.alttext, "")) { //#29424
                $k[$j++] = Infinity; //#29420
                var _2I = $1.txt; //#29420
                for (var _2J = 0, _2K = _2I.length; _2J < _2K; _2J++) { //#29420
                    $forall($get($get(_2I, _2J), 0)); //#29420
                } //#29420
                $1.txt = $a(); //#29420
                $1.tstr = $s($1.txt.length); //#29421
                for (var _2S = 0, _2R = $1.txt.length - 1; _2S <= _2R; _2S += 1) { //#29422
                    $put($1.tstr, _2S, $get($1.txt, _2S)); //#29422
                } //#29422
            } else { //#29424
                $1.tstr = $1.alttext; //#29424
            } //#29424
            if ($1.tstr.length == 0) { //#29434
                $k[$j++] = 0; //#29429
            } else { //#29434
                $$.save(); //#29431
                $$.newpath(); //#29432
                $$.moveto(0, 0); //#29432
                $$.charpath("0", false); //#29432
                var _2Y = $$.pathbbox(); //#29432
                $$.restore(); //#29434
                $k[$j++] = _2Y.ury; //#29434
            } //#29434
            $1.textascent = $k[--$j]; //#29443
            var _2b = $$.stringwidth($1.tstr); //#29444
            $1.textwidth = $f(_2b.w + (($1.tstr.length - 1) * $1.textgaps)); //#29444
            $1.textxpos = $f($1.textxoffset + ($f($1.x - $1.textwidth) / 2)); //#29446
            if ($eq($1.textxalign, "left")) { //#29447
                $1.textxpos = $1.textxoffset; //#29447
            } //#29447
            if ($eq($1.textxalign, "right")) { //#29448
                $1.textxpos = $f($f($1.x - $1.textxoffset) - $1.textwidth); //#29448
            } //#29448
            if ($eq($1.textxalign, "offleft")) { //#29449
                $1.textxpos = -$f($1.textwidth + $1.textxoffset); //#29449
            } //#29449
            if ($eq($1.textxalign, "offright")) { //#29450
                $1.textxpos = $f($1.x + $1.textxoffset); //#29450
            } //#29450
            if ($eq($1.textxalign, "justify") && ($1.textwidth < $1.x)) { //#29454
                $1.textxpos = 0; //#29452
                $1.textgaps = $f($1.x - $1.textwidth) / ($1.tstr.length - 1); //#29453
            } //#29453
            $1.textypos = -($f($f($1.textyoffset + $1.textascent) + 1)); //#29455
            if ($eq($1.textyalign, "above")) { //#29456
                $1.textypos = $f($f($1.textyoffset + $1.maxh) + 1); //#29456
            } //#29456
            if ($eq($1.textyalign, "center")) { //#29457
                $1.textypos = $f($1.textyoffset + ($f($1.maxh - $1.textascent) / 2)); //#29457
            } //#29457
            $$.moveto($1.textxpos, $1.textypos); //#29458
            $$.show($1.tstr, $1.textgaps, 0); //#29458
        } //#29458
    } //#29458
    if ($1.guardwhitespace) { //#29473
        $$.selectfont("OCR-B", $1.guardheight * 2); //#29464
        if ($1.guardleftpos != 0) { //#29468
            $$.moveto($f((-$1.guardleftpos) - 1), $f(($f($1.guardleftypos - ($1.guardheight / 2))) - 1.5)); //#29466
            $$.show("<", 0, 0); //#29467
        } //#29467
        if ($1.guardrightpos != 0) { //#29472
            $$.moveto($f(($f($f($1.guardrightpos + $1.x) - $1.guardwidth)) + 1), $f(($f($1.guardrightypos - ($1.guardheight / 2))) - 1.5)); //#29470
            $$.show(">", 0, 0); //#29471
        } //#29471
    } //#29471
    $$.restore(); //#29475
}

function bwipp_renmaximatrix() {
    if ($0.bwipjs_dontdraw) { //#29495
        return; //#29495
    } //#29495
    var $1 = {}; //#29497
    $1.args = $k[--$j]; //#29499
    $1.barcolor = "unset"; //#29502
    $1.backgroundcolor = "unset"; //#29503
    $forall($1.args, function() { //#29506
        var _3 = $k[--$j]; //#29506
        $1[$k[--$j]] = _3; //#29506
    }); //#29506
    var _5 = $1.opt; //#29507
    for (var _A = _5.size, _9 = _5.keys(), _8 = 0; _8 < _A; _8++) { //#29507
        var _6 = _9.next().value; //#29507
        $1[_6] = _5.get(_6); //#29507
    } //#29507
    $1.barcolor = "" + $1.barcolor; //#29509
    $1.backgroundcolor = "" + $1.backgroundcolor; //#29510
    $$.save(); //#29512
    if ($ne($1.barcolor, "unset")) { //#29514
        $$.setcolor($1.barcolor); //#29514
    } //#29514
    $$.maxicode($1.pixs); //#29515
    $$.restore(); //#29517
}
// bwip-js/barcode-ftr.js
//
// This code is injected below the cross-compiled barcode.js.

// `encoder` is one of the $0_* BWIPP functions
function bwipp_encode(bwipjs, encoder, text, opts, dontdraw) {
    if (typeof text !== 'string') {
        throw new Error('bwipp.typeError: barcode text not a string (' +
            text + ')');
    }
    opts = opts || {};
    if (typeof opts === 'string') {
        var tmp = opts.split(' ');
        opts = {};
        for (var i = 0; i < tmp.length; i++) {
            if (!tmp[i]) {
                continue;
            }
            var eq = tmp[i].indexOf('=');
            if (eq == -1) {
                opts[tmp[i]] = true;
            } else {
                opts[tmp[i].substr(0, eq)] = tmp[i].substr(eq + 1);
            }
        }
    } else if (typeof opts !== 'object' || opts.constructor !== Object) {
        throw new Error('bwipp.typeError: options not an object');
    }

    // Convert utf-16 to utf-8 but leave binary (8-bit) strings untouched.
    if (/[\u0100-\uffff]/.test(text)) {
        text = unescape(encodeURIComponent(text));
    }

    // Don't draw? (See file runtest)
    $0.bwipjs_dontdraw = opts.dontdraw || dontdraw || false;

    // Convert opts to a Map
    var map = new Map;
    for (var id in opts) {
        if (opts.hasOwnProperty(id)) {
            map.set(id, opts[id]);
        }
    }

    // Invoke the encoder
    $$ = bwipjs;
    $k = [text, map];
    $j = 2;
    encoder();

    // Return what is left on the stack.  This branch should only be taken
    // when running with the dontdraw option.
    if ($j) {
        return $k.splice(0, $j);
    }

    return true;
}

function bwipp_lookup(symbol) {
    if (!symbol) {
        throw new Error("bwipp.undefinedEncoder: bcid is not defined");
    }
    switch (symbol.replace(/-/g, "_")) {
        case "auspost":
            return bwipp_auspost;
        case "azteccode":
            return bwipp_azteccode;
        case "azteccodecompact":
            return bwipp_azteccodecompact;
        case "aztecrune":
            return bwipp_aztecrune;
        case "bc412":
            return bwipp_bc412;
        case "channelcode":
            return bwipp_channelcode;
        case "codablockf":
            return bwipp_codablockf;
        case "code11":
            return bwipp_code11;
        case "code128":
            return bwipp_code128;
        case "code16k":
            return bwipp_code16k;
        case "code2of5":
            return bwipp_code2of5;
        case "code32":
            return bwipp_code32;
        case "code39":
            return bwipp_code39;
        case "code39ext":
            return bwipp_code39ext;
        case "code49":
            return bwipp_code49;
        case "code93":
            return bwipp_code93;
        case "code93ext":
            return bwipp_code93ext;
        case "codeone":
            return bwipp_codeone;
        case "coop2of5":
            return bwipp_coop2of5;
        case "daft":
            return bwipp_daft;
        case "databarexpanded":
            return bwipp_databarexpanded;
        case "databarexpandedcomposite":
            return bwipp_databarexpandedcomposite;
        case "databarexpandedstacked":
            return bwipp_databarexpandedstacked;
        case "databarexpandedstackedcomposite":
            return bwipp_databarexpandedstackedcomposite;
        case "databarlimited":
            return bwipp_databarlimited;
        case "databarlimitedcomposite":
            return bwipp_databarlimitedcomposite;
        case "databaromni":
            return bwipp_databaromni;
        case "databaromnicomposite":
            return bwipp_databaromnicomposite;
        case "databarstacked":
            return bwipp_databarstacked;
        case "databarstackedcomposite":
            return bwipp_databarstackedcomposite;
        case "databarstackedomni":
            return bwipp_databarstackedomni;
        case "databarstackedomnicomposite":
            return bwipp_databarstackedomnicomposite;
        case "databartruncated":
            return bwipp_databartruncated;
        case "databartruncatedcomposite":
            return bwipp_databartruncatedcomposite;
        case "datalogic2of5":
            return bwipp_datalogic2of5;
        case "datamatrix":
            return bwipp_datamatrix;
        case "datamatrixrectangular":
            return bwipp_datamatrixrectangular;
        case "datamatrixrectangularextension":
            return bwipp_datamatrixrectangularextension;
        case "dotcode":
            return bwipp_dotcode;
        case "ean13":
            return bwipp_ean13;
        case "ean13composite":
            return bwipp_ean13composite;
        case "ean14":
            return bwipp_ean14;
        case "ean2":
            return bwipp_ean2;
        case "ean5":
            return bwipp_ean5;
        case "ean8":
            return bwipp_ean8;
        case "ean8composite":
            return bwipp_ean8composite;
        case "flattermarken":
            return bwipp_flattermarken;
        case "gs1_128":
            return bwipp_gs1_128;
        case "gs1_128composite":
            return bwipp_gs1_128composite;
        case "gs1_cc":
            return bwipp_gs1_cc;
        case "gs1datamatrix":
            return bwipp_gs1datamatrix;
        case "gs1datamatrixrectangular":
            return bwipp_gs1datamatrixrectangular;
        case "gs1dotcode":
            return bwipp_gs1dotcode;
        case "gs1northamericancoupon":
            return bwipp_gs1northamericancoupon;
        case "gs1qrcode":
            return bwipp_gs1qrcode;
        case "hanxin":
            return bwipp_hanxin;
        case "hibcazteccode":
            return bwipp_hibcazteccode;
        case "hibccodablockf":
            return bwipp_hibccodablockf;
        case "hibccode128":
            return bwipp_hibccode128;
        case "hibccode39":
            return bwipp_hibccode39;
        case "hibcdatamatrix":
            return bwipp_hibcdatamatrix;
        case "hibcdatamatrixrectangular":
            return bwipp_hibcdatamatrixrectangular;
        case "hibcmicropdf417":
            return bwipp_hibcmicropdf417;
        case "hibcpdf417":
            return bwipp_hibcpdf417;
        case "hibcqrcode":
            return bwipp_hibcqrcode;
        case "iata2of5":
            return bwipp_iata2of5;
        case "identcode":
            return bwipp_identcode;
        case "industrial2of5":
            return bwipp_industrial2of5;
        case "interleaved2of5":
            return bwipp_interleaved2of5;
        case "isbn":
            return bwipp_isbn;
        case "ismn":
            return bwipp_ismn;
        case "issn":
            return bwipp_issn;
        case "itf14":
            return bwipp_itf14;
        case "jabcode":
            return bwipp_jabcode;
        case "japanpost":
            return bwipp_japanpost;
        case "kix":
            return bwipp_kix;
        case "leitcode":
            return bwipp_leitcode;
        case "mailmark":
            return bwipp_mailmark;
        case "matrix2of5":
            return bwipp_matrix2of5;
        case "maxicode":
            return bwipp_maxicode;
        case "micropdf417":
            return bwipp_micropdf417;
        case "microqrcode":
            return bwipp_microqrcode;
        case "msi":
            return bwipp_msi;
        case "onecode":
            return bwipp_onecode;
        case "pdf417":
            return bwipp_pdf417;
        case "pdf417compact":
            return bwipp_pdf417compact;
        case "pharmacode":
            return bwipp_pharmacode;
        case "pharmacode2":
            return bwipp_pharmacode2;
        case "planet":
            return bwipp_planet;
        case "plessey":
            return bwipp_plessey;
        case "posicode":
            return bwipp_posicode;
        case "postnet":
            return bwipp_postnet;
        case "pzn":
            return bwipp_pzn;
        case "qrcode":
            return bwipp_qrcode;
        case "rationalizedCodabar":
            return bwipp_rationalizedCodabar;
        case "raw":
            return bwipp_raw;
        case "rectangularmicroqrcode":
            return bwipp_rectangularmicroqrcode;
        case "royalmail":
            return bwipp_royalmail;
        case "sscc18":
            return bwipp_sscc18;
        case "swissqrcode":
            return bwipp_swissqrcode;
        case "symbol":
            return bwipp_symbol;
        case "telepen":
            return bwipp_telepen;
        case "telepennumeric":
            return bwipp_telepennumeric;
        case "ultracode":
            return bwipp_ultracode;
        case "upca":
            return bwipp_upca;
        case "upcacomposite":
            return bwipp_upcacomposite;
        case "upce":
            return bwipp_upce;
        case "upcecomposite":
            return bwipp_upcecomposite;
    }
    throw new Error("bwipp.unknownEncoder: unknown encoder name: " + symbol);
}
var BWIPP_VERSION = '2022-06-10';
// file : bwipjs.js
//
// Graphics-context interface to the BWIPP cross-compiled code

var BWIPJS = (function() {

// Math.floor(), etc. are notoriously slow.  Caching seems to help.
var floor = Math.floor;
var round = Math.round;
var ceil  = Math.ceil;
var min	  = Math.min;
var max	  = Math.max;

function BWIPJS(drawing) {
	if (this.constructor !== BWIPJS) {
		return new BWIPJS(drawing);
	}
	this.gstk	 = [];		// Graphics save/restore stack
	this.cmds	 = [];		// Graphics primitives to replay when rendering
	this.drawing = drawing;	// Drawing interface

	this.reset();

	// Drawing surface bounding box
	this.minx = this.miny = Infinity;
	this.maxx = this.maxy = -Infinity;
};

// All graphics state that must be saved/restored is given a prefix of g_
BWIPJS.prototype.reset = function() {
	// Current Transform Matrix - since we don't do rotation, we can fake
	// the matrix math
	this.g_tdx	= 0;		// CTM x-offset
	this.g_tdy	= 0;		// CTM y-offset
	this.g_tsx	= 1;		// CTM x-scale factor
	this.g_tsy	= 1;		// CTM y-scale factor

	this.g_posx	= 0;		// current x position
	this.g_posy	= 0;		// current y position
	this.g_penw	= 1;		// current line/pen width
	this.g_path	= [];		// current path
	this.g_font	= null;		// current font object
	this.g_rgb  = [0,0,0];	// current color (black)
    this.g_clip = false;    // clip region active
};
BWIPJS.prototype.save = function() {
	// clone all g_ properties
	var ctx = {};
	for (var id in this) {
		if (id.indexOf('g_') == 0) {
			ctx[id] = clone(this[id]);
		}
	}
	this.gstk.push(ctx);

	// Perform a deep clone of the graphics state properties
	function clone(v) {
		if (v instanceof Array) {
			var t = [];
			for (var i = 0; i < v.length; i++)
				t[i] = clone(v[i]);
			return t;
		}
		if (v instanceof Object) {
			var t = {};
			for (var id in v)
				t[id] = clone(v[id]);
			return t;
		}
		return v;
	}
};
BWIPJS.prototype.restore = function() {
	if (!this.gstk.length) {
		throw new Error('grestore: stack underflow');
	}
	var ctx  = this.gstk.pop();
    var self = this;
    if (this.g_clip && !ctx.g_clip) {
        this.cmds.push(function() {
                self.drawing.unclip();
            });
    }
	for (var id in ctx) {
		this[id] = ctx[id];
	}
};
// Per the postscript spec:
//	As discussed in Section 4.4.1, Current Path, points entered into a path
//	are immediately converted to device coordinates by the current
//	transformation matrix (CTM); subsequent modifications to the CTM do not
//	affect existing points.  `currentpoint` computes the user space
//	coordinates corresponding to the current point according to the current
//	value of the CTM. Thus, if a current point is set and then the CTM is
//	changed, the coordinates returned by currentpoint will be different
//	from those that were originally specified for the point. 
BWIPJS.prototype.currpos = function() {
	return { x:(this.g_posx-this.g_tdx)/this.g_tsx,
			 y:(this.g_posy-this.g_tdy)/this.g_tsy
		};
};
BWIPJS.prototype.currfont = function() {
	return this.g_font;
};
BWIPJS.prototype.translate = function(x, y) {
	this.g_tdx = this.g_tsx * x;
	this.g_tdy = this.g_tsy * y;
};
BWIPJS.prototype.scale = function(x, y) {
	this.g_tsx *= x;
	this.g_tsy *= y;
	var sxy = this.drawing.scale(this.g_tsx, this.g_tsy);
	if (sxy && sxy[0] && sxy[1]) {
		this.g_tsx = sxy[0];
		this.g_tsy = sxy[1];
	}
};
BWIPJS.prototype.setlinewidth = function(w) {
	this.g_penw = w;
};
BWIPJS.prototype.selectfont = function(f, z) {
	this.g_font = { FontName:this.jsstring(f), FontSize:+z };
};
BWIPJS.prototype.getfont = function() {
	return this.g_font.FontName;
};
// Special function for converting a Uint8Array string to string.
BWIPJS.prototype.jsstring = function(s) {
	if (s instanceof Uint8Array) {
		// Postscript (like C) treats nul-char as end of string.
		for (var i = 0, l = s.length; i < l && s[i]; i++);
		if (i < l) {
			return String.fromCharCode.apply(null,s.subarray(0, i));
		}
		return String.fromCharCode.apply(null,s)
	}
	return ''+s;
};
// Special function to replace setanycolor in BWIPP
// Takes a string of hex digits either 6 chars in length (rrggbb) or
// 8 chars (ccmmyykk).
BWIPJS.prototype.setcolor = function(s) {
	if (s instanceof Uint8Array) {
		s = this.jsstring(s);
	}
	if (s.length == 6) {
		var r = parseInt(s.substr(0,2), 16);
		var g = parseInt(s.substr(2,2), 16);
		var b = parseInt(s.substr(4,2), 16);
		this.g_rgb = [ r, g, b ];
	} else if (s.length == 8) {
		var c = parseInt(s.substr(0,2), 16) / 255;
		var m = parseInt(s.substr(2,2), 16) / 255;
		var y = parseInt(s.substr(4,2), 16) / 255;
		var k = parseInt(s.substr(6,2), 16) / 255;
		var r = round((1-c) * (1-k) * 255);
		var g = round((1-m) * (1-k) * 255);
		var b = round((1-y) * (1-k) * 255);
		this.g_rgb = [ r, g, b ];
	}
};
// Used only by swissqrcode
BWIPJS.prototype.setrgbcolor = function(r,g,b) {
    this.g_rgb = [ r, g, b ];
};
// Returns the current rgb values as a 'RRGGBB'
BWIPJS.prototype.getRGB = function() {
	var r = this.g_rgb[0].toString(16);
	var g = this.g_rgb[1].toString(16);
	var b = this.g_rgb[2].toString(16);
	return '00'.substr(r.length) + r + '00'.substr(g.length) + g + '00'.substr(b.length) + b;
};
BWIPJS.prototype.newpath = function() {
	this.g_path = [];
};
BWIPJS.prototype.closepath = function() {
	var path = this.g_path;
	var plen = path.length;
	if (!plen) return;

	var f = plen-1;
	for ( ; f >= 0 && path[f].op == 'l'; f--);
	f++;
	if (f < plen-1) {
		var poly = [];
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		for (var i = f; i < plen; i++) {
			var a = path[i];
			poly.push([ a.x0, a.y0 ]);
			if (xmin > a.x0) xmin = a.x0;
			if (xmax < a.x0) xmax = a.x0;
			if (ymin > a.y0) ymin = a.y0;
			if (ymax < a.y0) ymax = a.y0;
		}
		var a = path[plen-1];
		var b = path[f];
		if (a.x1 != b.x0 || a.y1 != b.y0) {
			poly.push([ a.x1, a.y1 ]);
			if (xmin > a.x1) xmin = a.x1;
			if (xmax < a.x1) xmax = a.x1;
			if (ymin > a.y1) ymin = a.y1;
			if (ymax < a.y1) ymax = a.y1;
		}
		path.splice(f, plen-f,
					{ op:'p', x0:xmin, y0:ymin, x1:xmax, y1:ymax, poly:poly });
	} else {
		path.push({ op:'c' });
	}
};
BWIPJS.prototype.moveto = function(x,y) {
	this.g_posx = this.g_tdx + this.g_tsx * x;
	this.g_posy = this.g_tdy + this.g_tsy * y;
};
BWIPJS.prototype.rmoveto = function(x,y) {
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
};
BWIPJS.prototype.lineto = function(x,y) {
	var x0 = round(this.g_posx);
	var y0 = round(this.g_posy);
	this.g_posx = this.g_tdx + this.g_tsx * x;
	this.g_posy = this.g_tdy + this.g_tsy * y;
	var x1 = round(this.g_posx);
	var y1 = round(this.g_posy);

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
BWIPJS.prototype.rlineto = function(x,y) {
	var x0 = round(this.g_posx);
	var y0 = round(this.g_posy);
	this.g_posx += this.g_tsx * x;
	this.g_posy += this.g_tsy * y;
	var x1 = round(this.g_posx);
	var y1 = round(this.g_posy);

	this.g_path.push({ op:'l', x0:x0, y0:y0, x1:x1, y1:y1 });
};
// implements both arc and arcn
BWIPJS.prototype.arc = function(x,y,r,sa,ea,ccw) {
	if (sa == ea) {
		return;
	}
	// For now, we only implement full circles...
	if (sa != 0 && sa != 360 || ea != 0 && ea != 360) {
		throw new Error('arc: not a full circle (' + sa + ',' + ea + ')');
	}

	x = this.g_tdx + this.g_tsx * x;
	y = this.g_tdy + this.g_tsy * y;

	// e == ellipse
	var rx = r * this.g_tsx;
	var ry = r * this.g_tsy;
	this.g_path.push({ op:'e', x0:x-rx, y0:y-ry, x1:x+rx, y1:y+ry,
								x:x, y:y, rx:rx, ry:ry, sa:sa, ea:ea, ccw:ccw });
};
BWIPJS.prototype.stringwidth = function(str) {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var size = +this.g_font.FontSize || 10;

	// The string can be either a uint8-string or regular string
	str = this.jsstring(str);

	var bbox = this.drawing.measure(str, this.g_font.FontName, size*tsx, size*tsy);

	return { w:bbox.width/tsx, h:(bbox.ascent+bbox.descent)/tsy,
			 a:bbox.ascent/tsy, d:bbox.descent/tsy };
};
BWIPJS.prototype.charpath = function(str, b) {
	var sw = this.stringwidth(str);

	// Emulate the char-path by placing a rectangle around it
	this.rlineto(0, sw.a);
	this.rlineto(sw.w, 0);
	this.rlineto(0, -sw.h);
};
BWIPJS.prototype.pathbbox = function() {
	if (!this.g_path.length)	throw new Error('pathbbox: --nocurrentpoint--');
	var path = this.g_path;
	var llx = Infinity;
	var lly = Infinity;
	var urx = -Infinity;
	var ury = -Infinity;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'c') {
			continue;
		}
		if (a.x0 < a.x1) {
			if (llx > a.x0) llx = a.x0;
			if (urx < a.x1) urx = a.x1;
		} else {
			if (llx > a.x1) llx = a.x1;
			if (urx < a.x0) urx = a.x0;
		}
		if (a.y0 < a.y1) {
			if (lly > a.y0) lly = a.y0;
			if (ury < a.y1) ury = a.y1;
		} else {
			if (lly > a.y1) lly = a.y1;
			if (ury < a.y0) ury = a.y0;
		}
	}

	// Convert to user-space coordinates
	var rv = {	llx:(llx-this.g_tdx)/this.g_tsx,
				lly:(lly-this.g_tdy)/this.g_tsy,
				urx:(urx-this.g_tdx)/this.g_tsx,
				ury:(ury-this.g_tdy)/this.g_tsy };
	return rv;
};
// Tranforms the pts array to standard (not y-inverted), unscalled values.
BWIPJS.prototype.transform = function(pts) {
	var minx = this.minx;
	var maxy = this.maxy;

	for (var i = 0; i < pts.length; i++) {
		var pt = pts[i];
		pt[0] = pt[0] - minx;
		pt[1] = maxy - pt[1];
	}
};
BWIPJS.prototype.stroke = function() {
	var tsx  = this.g_tsx;
	var tsy  = this.g_tsy;
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// This is a "super majority" round i.e. if over .66 round up.
	var penw = floor(this.g_penw * tsx + 0.66);
	var penh = floor(this.g_penw * tsy + 0.66);

	// Calculate the bounding boxes
	var nlines = 0, npolys = 0;
	for (var i = 0; i < path.length; i++) {
		var a = path[i];
		if (a.op == 'l') {
			// We only stroke vertical and horizontal lines.  Complex shapes are
			// always filled.
			if (a.x0 != a.x1 && a.y0 != a.y1) {
				throw new Error('stroke: --not-orthogonal--');
			}
			var x0 = a.x0;
			var y0 = a.y0;
			var x1 = a.x1;
			var y1 = a.y1;

			// Half widths (may be factional)
			var penw2 = penw/2;
			var penh2 = penh/2;

			if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
			if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }
			if (x0 == x1) {
				this.bbox(x0-penw2, y0, x0+penw-penw2-1, y1); 	// vertical line
			} else {
				this.bbox(x0, y0-penh+penh2+1, x1, y1+penh2);	// horizontal line
			}
			nlines++;
		} else if (a.op == 'p') {
			// Closed (rectangular) poly (border around the barcode)
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			if (pts.length != 4) {
				throw new Error('stroke: --not-a-rect--');
			}
			for (var i = 0, j = pts.length-1; i < pts.length; j = i++) {
				var xj = pts[j][0];
				var yj = pts[j][1];
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi != xj && yi != yj) {
					throw new Error('stroke: --not-orthogonal--');
				}

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}

			// Half widths (integer)
			var penw2 = ceil(penw/2);
			var penh2 = ceil(penh/2);

			// We render these as two polygons plus a fill.
			// When border width is odd, allocate the bigger half to the outside.
			this.bbox(minx-penw2, miny-penh2, maxx+penw2, maxy+penh2);
			npolys++;
		} else {
			throw new Error('stroke: --not-a-line--');
		}
	}

	// Draw the lines
	var self = this;
	this.cmds.push(function() {
		// Half widths (big half and remaining half)
		var bigw2 = ceil(penw/2);
		var bigh2 = ceil(penh/2);
		var remw2 = penw - bigw2;
		var remh2 = penh - bigh2;

		for (var i = 0; i < path.length; i++) {
			var a = path[i]
			if (a.op == 'l') {
				var pts = [ [ a.x0, a.y0 ], [ a.x1, a.y1 ] ];
				self.transform(pts);
				self.drawing.line(pts[0][0], pts[0][1], pts[1][0], pts[1][1],
							a.x0 == a.x1 ? penw : penh, rgb);
				self.fill(rgb);
			} else {
				var pts = a.poly;
				self.transform(pts);
				var x0 = min(pts[0][0], pts[2][0]);
				var x1 = max(pts[0][0], pts[2][0]);
				var y0 = min(pts[0][1], pts[2][1]);
				var y1 = max(pts[0][1], pts[2][1]);

				// Top and left edges are "inside" the polygon.
				// Bottom and right edges are outside.
				self.drawing.polygon([
						[ x0-bigw2, y0-bigh2 ],
						[ x0-bigw2, y1+bigh2+1 ],
						[ x1+bigw2+1, y1+bigh2+1 ],
						[ x1+bigw2+1, y0-bigh2 ]
					]);
				self.drawing.polygon([
						[ x0+remw2, y0+remh2 ],
						[ x0+remw2, y1-remh2+1 ],
						[ x1-remw2+1, y1-remh2+1 ],
						[ x1-remw2+1, y0+remh2 ],
					]);
				self.drawing.fill(rgb);
			}
		}
	});
};
BWIPJS.prototype.fill = function() {
	var path = this.g_path;
	var rgb  = this.getRGB();
	this.g_path = [];

	// Calculate the bounding boxes
	for (var p = 0; p < path.length; p++) {
		var a = path[p];
		if (a.op == 'p') {  // polygon
			var minx = Infinity;
			var miny = Infinity;
			var maxx = -Infinity;
			var maxy = -Infinity;
			var pts  = a.poly;
			for (var i = 0; i < pts.length; i++) {
				var xi = pts[i][0];
				var yi = pts[i][1];

				if (xi < minx) minx = xi;
				if (xi > maxx) maxx = xi;
				if (yi < miny) miny = yi;
				if (yi > maxy) maxy = yi;
			}
			// With polygons, the right and bottom edges are "outside" and do not
			// contribute to the bounding box.  But we are in postscript inverted-y
			// mode.
			this.bbox(minx, miny+1, maxx-1, maxy);
		} else if (a.op == 'e') {	// ellipse
			this.bbox(a.x - a.rx, a.y - a.ry, a.x + a.rx, a.y + a.ry);
		} else {
			throw new Error('fill: --not-a-polygon--');
		}
	}

	// Render the poly
	var self = this;
	this.cmds.push(function() {
		for (var i = 0; i < path.length; i++) {
			var a = path[i];
			if (a.op == 'p') {
				var pts = a.poly
				self.transform(pts);
				self.drawing.polygon(pts);
			} else if (a.op == 'e') {
				var pts = [ [ a.x, a.y ] ];
				self.transform(pts);
				self.drawing.ellipse(pts[0][0], pts[0][1], a.rx, a.ry, a.ccw);
			}
		}
		self.drawing.fill(rgb);
	});
};
BWIPJS.prototype.clip = function() {
	var path = this.g_path;
	this.g_path = [];
    this.g_clip = true;

	var self = this;
	this.cmds.push(function() {
        var polys = [];
		for (var i = 0; i < path.length; i++) {
			var a = path[i];
			if (a.op == 'p') {
				var pts = a.poly
				self.transform(pts);
                polys.push(pts);
			} else {
                throw new Error('clip: only polygon regions supported');
			}
		}
		self.drawing.clip(polys);
	});
};

// The pix array is in standard (not y-inverted postscript) orientation.
BWIPJS.prototype.maxicode = function(pix) {
	var tsx = this.g_tsx;
	var tsy = this.g_tsy;
	var rgb = this.getRGB();

	// Module width.  Module height is an integer multiple of tsy.
	var twidth = 1.04 * tsx * 100;
	var mwidth = (twidth / 30)|0;
	if (twidth - (mwidth*30-1) > 9) {
		mwidth++;
	}

	// Dimensions needed for plotting the hexagons.  These must be integer values.
	var w, h, wgap, hgap;
	// if (opts.??? ) {
	//	// Create a one or two pixel gap
	//	wgap = (mwidth & 1) ? 1 : 2;
	//	hgap = 1;
	//	w = mwidth - gap;
	//	h = 4 * tsy;
	// } else {
		// Create a 1/8mm gap
		wgap = (tsx/2)|0;
		hgap = (tsy/2)|0;
		w = mwidth - wgap;
		if (w & 1) {
			w--;
		}
		h = ((4*tsy)|0) - hgap;
	//}

	// These must be integer values
	var w2 = w / 2 - 1;			// half width
	var qh = ((w2+1) / 2)|0;	// quarter height
	var vh = h - 2 - 2 * qh;	// side height

	// Bounding box
	this.bbox(0, 0, mwidth*30 - wgap, tsy * 3 * 32 + tsy * 4 - hgap);

	// Render the elements
	var self = this;
	this.cmds.push(function() {
		// Draw the hexagons
		for (var i = 0; i < pix.length; i++) {
			var c = pix[i];
			var x = c % 30;
			var y = (c / 30)|0;

			// Adjust x,y to the top of hexagon
			x *= mwidth;
			x += (y & 1) ? mwidth : mwidth/2;
			x = x|0;

			y = 33 - y;	// invert for postscript notation
			y *= tsy * 3;
			y += tsy * 2 - h/2;
			y = y|0;
			
			// Build bottom up so the drawing is top-down.
			var pts = [ [ x-0.5, y-- ] ]; 
			y -= qh-1;
			pts.push([x-1-w2, y--]);
			y -= vh;
			pts.push([x-1-w2, y--]);
			y -= qh-1;
			pts.push([x-0.5, y++]);
			y += qh-1;
			pts.push([x+w2, y++]);
			y += vh;
			pts.push([x+w2, y++]);

			self.transform(pts);
			self.drawing.hexagon(pts, rgb);
		}
		self.drawing.fill(rgb);


		// Draw the rings
		var x = (14 * mwidth + mwidth/2 + 0.01)|0;
		var y = ((12 * 4 + 3) * tsy - qh/2 + 0.01)|0;
		self.drawing.ellipse(x, y, (0.5774*3.5*tsx+0.01)|0, (0.5774*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (1.3359*3.5*tsx+0.01)|0, (1.3359*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (2.1058*3.5*tsx+0.01)|0, (2.1058*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (2.8644*3.5*tsx+0.01)|0, (2.8644*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);
		self.drawing.ellipse(x, y, (3.6229*3.5*tsx+0.01)|0, (3.6229*3.5*tsy+0.01)|0, true);
		self.drawing.ellipse(x, y, (4.3814*3.5*tsx+0.01)|0, (4.3814*3.5*tsy+0.01)|0, false);
		self.drawing.fill(rgb);

	});
};

// dx,dy are inter-character gaps
BWIPJS.prototype.show = function(str, dx, dy) {
	if (!str.length) {
		return;
	}

	// Capture current graphics state
	var tsx	 = this.g_tsx;
	var tsy  = this.g_tsy;
	var name = this.g_font.FontName || 'OCR-B';
	var size = (this.g_font.FontSize || 10);
	var szx  = size * tsx;
	var szy  = size * tsy;
	var posx = this.g_posx;
	var posy = this.g_posy;
	var rgb  = this.getRGB();

	// The string can be either a uint8-string or regular string
	str = this.jsstring(str);

	// Convert dx,dy to device space
	dx = tsx * dx || 0;
	dy = tsy * dy || 0;

	// Bounding box.
	var base = posy + dy;
	var bbox = this.drawing.measure(str, name, szx, szy);
	var width = bbox.width + (str.length-1) * dx;
	this.bbox(posx, base-bbox.descent+1, posx+width-1, base+bbox.ascent);
	this.g_posx += width;

	var self = this;
	self.cmds.push(function() {
		// self.transform()
		var x = posx - self.minx;
		var y = self.maxy - posy;
		self.drawing.text(x, y, str, rgb, { name:name, width:szx, height:szy, dx:dx });
	});
};
// drawing surface bounding box
BWIPJS.prototype.bbox = function(x0, y0, x1, y1) {
	if (x0 > x1) { var t = x0; x0 = x1; x1 = t; }
	if (y0 > y1) { var t = y0; y0 = y1; y1 = t; }

	x0 = floor(x0);
	y0 = floor(y0);
	x1 = ceil(x1);
	y1 = ceil(y1);

	if (this.minx > x0) this.minx = x0;
    if (this.maxx < x1)	this.maxx = x1;
    if (this.miny > y0)	this.miny = y0;
	if (this.maxy < y1)	this.maxy = y1;
};
BWIPJS.prototype.render = function() {
	if (this.minx === Infinity) {
        // Most likely, `dontdraw` was set in the options
        return new Promise(function (resolve, reject) {
            resolve(null);
        });
	}
	// Draw the image
	this.drawing.init(this.maxx - this.minx + 1, this.maxy - this.miny + 1,
					  this.g_tsx, this.g_tsy);
	for (var i = 0, l = this.cmds.length; i < l; i++) {
		this.cmds[i]();
	}
	return this.drawing.end();
};

return BWIPJS;
})();	// BWIPJS closure
// drawing-builtin.js
//
// The aliased (except the fonts) graphics used by drawing-canvas.js and
// drawing-png.js
//
// All x,y and lengths are integer values.
//
// For the methods that take a color `rgb` parameter, the value is always a
// string with format RRGGBB.
//
// opts is the same options object passed into the bwipjs methods.
function DrawingBuiltin(opts) {
	var floor = Math.floor;

	// Unrolled x,y rotate/translate matrix
	var tx0 = 0, tx1 = 0, tx2 = 0, tx3 = 0;
	var ty0 = 0, ty1 = 0, ty2 = 0, ty3 = 0;

	var gs_image, gs_rowbyte;	// rowbyte will be 1 for png's, 0 for canvas
	var gs_width, gs_height;	// image size, in pixels
	var gs_dx, gs_dy;			// x,y translate (padding)
	var gs_r, gs_g, gs_b;		// rgb
	var gs_xymap;				// even-odd edge map
    var gs_xyclip;              // clip region map (similar to xymap)

	return {
		// Ensure compliant bar codes by always using integer scaling factors.
		scale : function(sx, sy) {
            // swissqrcode requires clipping and drawing that are not scaled to the
            // the barcode module size.
            if (opts.bcid == 'swissqrcode') {
                return [ sx, sy ];
            } else {
			    return [ (sx|0)||1, (sy|0)||1 ];
            }
		},

		// Measure text.  This and scale() are the only drawing primitives that
		// are called before init().
		//
		// `font` is the font name typically OCR-A or OCR-B.
		// `fwidth` and `fheight` are the requested font cell size.  They will
		// usually be the same, except when the scaling is not symetric.
		measure : function(str, font, fwidth, fheight) {
			fwidth = fwidth|0;
			fheight = fheight|0;

			var fontid = FontLib.lookup(font);
			var width = 0;
			var ascent = 0;
			var descent = 0;
			for (var i = 0, l = str.length; i < l; i++) {
				var ch = str.charCodeAt(i);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				ascent  = Math.max(ascent, glyph.top);
				descent = Math.max(descent, glyph.height - glyph.top);

				if (i == l-1) {
					width += glyph.left + glyph.width;
				} else {
					width += glyph.advance;
				}
			}
			return { width:width, ascent:ascent, descent:descent };
		},

		// width and height represent the maximum bounding box the graphics will occupy.
		// The dimensions are for an unrotated rendering.  Adjust as necessary.
		init : function(width, height) {
			// Add in the effects of padding.  These are always set before the
			// drawing constructor is called.
			var padl = opts.paddingleft;
			var padr = opts.paddingright;
			var padt = opts.paddingtop;
			var padb = opts.paddingbottom;
			var rot  = opts.rotate || 'N';

			width  += padl + padr;
			height += padt + padb;

			if (+opts.sizelimit && +opts.sizelimit < width * height) {
				throw new Error('Image size over limit');
			}

			// Transform indexes are: x, y, w, h
			switch (rot) {
			// tx = w-y, ty = x
			case 'R': tx1 = -1; tx2 = 1; ty0 = 1; break;
			// tx = w-x, ty = h-y
			case 'I': tx0 = -1; tx2 = 1; ty1 = -1; ty3 = 1; break;
			// tx = y, ty = h-x
			case 'L': tx1 = 1; ty0 = -1; ty3 = 1; break;
			// tx = x, ty = y
			default:  tx0 = ty1 = 1; break;
			}

			// Setup the graphics state
			var swap = rot == 'L' || rot == 'R';
			gs_width  = swap ? height : width;
			gs_height = swap ? width : height;
			gs_dx = padl;
			gs_dy = padt;
			gs_xymap = [];
			gs_xymap.min = Infinity;
            gs_xyclip = null;
			gs_r = gs_g = gs_b = 0;

			// Get the rgba image from the constructor
			var res = this.image(gs_width, gs_height);
			gs_image   = res.buffer;
			gs_rowbyte = res.ispng ? 1 : 0;
		},
		// Unconnected stroked lines are used to draw the bars in linear barcodes;
		// and the border around a linear barcode (e.g. ITF-14)
		// No line cap should be applied.  These lines are always orthogonal.
		line : function(x0, y0, x1, y1, lw, rgb) {
			x0 = x0|0;
			y0 = y0|0;
			x1 = x1|0;
			y1 = y1|0;

			// Most linear barcodes, the line width will be integral.  The exceptions
			// are variable width barcodes (e.g. code39) and the postal 4-state codes.
			lw = Math.round(lw) || 1;

			if (y1 < y0) { var t = y0; y0 = y1; y1 = t; }
			if (x1 < x0) { var t = x0; x0 = x1; x1 = t; }

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			// Horizontal or vertical line?
			var w2 = (lw/2)|0;
			if (x0 == x1) {
				// Vertical line
				x0 = x0 - lw + w2;  // big half
				x1 = x1 + w2 - 1;   // small half
			} else {
				// Horizontal line (inverted halves)
				y0 = y0 - w2;
				y1 = y1 + lw - w2 - 1;
			}
			for (var y = y0; y <= y1; y++) {
				for (var x = x0; x <= x1; x++) {
					set(x, y, 255);
				}
			}
		},

		// Polygons are used to draw the connected regions in a 2d barcode.
		// These will always be unstroked, filled, orthogonal shapes.
        // 
		// You will see a series of polygon() calls, followed by a fill().
		polygon : function(pts) {
			var npts = pts.length;
			for (var j = npts-1, i = 0; i < npts; j = i++) {
				if (pts[j][0] == pts[i][0]) {
					// Vertical lines do not get their end points. End points
					// are added by the horizontal line logic.
					var xj = pts[j][0]|0;	// i or j, doesn't matter
					var yj = pts[j][1]|0;
					var yi = pts[i][1]|0;
					if (yj > yi) {
						for (var y = yi+1; y < yj; y++) {
							addPoint(xj, y);
						}
					} else {
						for (var y = yj+1; y < yi; y++) {
							addPoint(xj, y);
						}
					}
				} else {
					var xj = pts[j][0]|0;
					var xi = pts[i][0]|0;
					var yj = pts[j][1]|0;	// i or j, doesn't matter

					// Horizontal lines are tricky.  As a rule, top lines get filled,
					// bottom lines do not (similar to how left edges get filled and
					// right edges do not).
					//
					// Where it gets complex is deciding whether the line actually
					// adds edges.  There are cases where a horizontal line does
					// not add anything to the scanline plotting.  And it doesn't
					// actually matter whether the line is a top or bottom edge,
					// the logic is the same.
					//
					// A left edge is added if the edge to its left is below.
					// A right edge is added if the edge to its right is below.
					if (xj < xi) {
						var yl = pts[j == 0 ? npts-1 : j-1][1];	// left edge
						var yr = pts[i == npts-1 ? 0 : i+1][1];	// right edge
						if (yl > yj) {
							addPoint(xj, yj);
						}
						if (yr > yj) {
							addPoint(xi, yj);
						}
					} else {
						var yl = pts[i == npts-1 ? 0 : i+1][1];	// left edge
						var yr = pts[j == 0 ? npts-1 : j-1][1];	// right edge
						if (yl > yj) {
							addPoint(xi, yj);
						}
						if (yr > yj) {
							addPoint(xj, yj);
						}
					}
				}
			}
		},
		// An unstroked, filled hexagon used by maxicode.  You can choose to fill
		// each individually, or wait for the final fill().
		//
		// The hexagon is drawn from the top, counter-clockwise.
		//
		// The X-coordinate for the top and bottom points on the hexagon is always
		// .5 pixels.  We draw our hexagons with a 2 pixel flat top.
		//
		// All other points of the polygon/hexagon are guaranteed to be integer values.
		hexagon : function(pts, rgb) {
			var x = pts[0][0]|0;
			var y = pts[0][1]|0;
			var qh = (pts[1][1] - pts[0][1])|0;		// height of triangle (quarter height)
			var vh = (pts[2][1] - pts[1][1] - 1)|0;	// height of vertical side
			var xl = (pts[2][0])|0;					// left side
			var xr = (pts[4][0])|0;					// right side

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			fillSegment(x, x+1, y++);
			for (var k = 1; k < qh; k++) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			for (var k = 0; k <= vh; k++) {
				fillSegment(xl, xr, y++);
			}
			for (var k = qh-1; k >= 1; k--) {
				fillSegment(x-2*k, x+1+2*k, y++);
			}
			fillSegment(x, x+1, y);
		},
		// An unstroked, filled ellipse.  Used by dotcode and maxicode at present.
		// maxicode issues pairs of ellipse calls (one cw, one ccw) followed by a fill()
		// to create the bullseye rings.  dotcode issues all of its ellipses then a
		// fill().
		ellipse : function(x, y, rx, ry, ccw) {
			drawEllipse((x-rx)|0, (y-ry)|0, (x+rx)|0, (y+ry)|0, ccw);
		},
		// PostScript's default fill rule is even-odd.
		fill : function(rgb) {
			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			evenodd();
			gs_xymap = [];
			gs_xymap.min = Infinity;
		},
        // Currently only used by swissqrcode.  The `polys` area is an array of
        // arrays of points.  Each array of points is identical to the `pts`
        // parameter passed to polygon().  The clipping rule, like the fill rule,
        // uses even-odd logic.
        clip : function(polys) {
            if (!gs_xyclip) {
                gs_xyclip = [];
                gs_xyclip.min = Infinity;
            }
            // Swap out the xymap for the clip map so addPoint() works on it.
            var xymap = gs_xymap;
            gs_xymap = gs_xyclip;

            // Now just use the polygon() logic to fill in the clipping regions.
            for (var i = 0, l = polys.length; i < l; i++) {
                this.polygon(polys[i]);
            }

            // Restore
            gs_xymap = xymap;
        },
        unclip : function() {
            gs_xyclip = null;
        },
		// Draw text with optional inter-character spacing.  `y` is the baseline.
		// font is an object with properties { name, width, height, dx }
		// width and height are the font cell size.
		// dx is extra space requested between characters (usually zero).
		text : function(x, y, str, rgb, font) {
			x = x|0;
			y = y|0;

			gs_r = parseInt(rgb.substr(0,2), 16);
			gs_g = parseInt(rgb.substr(2,2), 16);
			gs_b = parseInt(rgb.substr(4,2), 16);

			var fontid  = FontLib.lookup(font.name);
			var fwidth  = font.width|0;
			var fheight = font.height|0;
			var dx      = font.dx|0;
			for (var k = 0; k < str.length; k++) {
				var ch = str.charCodeAt(k);
				var glyph = FontLib.getglyph(fontid, ch, fwidth, fheight);

				var gt = y - glyph.top;
				var gl = glyph.left;
				var gw = glyph.width;
				var gh = glyph.height;
				var gb = glyph.bytes;
				var go = glyph.offset;		// offset into bytes

				for (var i = 0; i < gw; i++) {
					for (var j = 0; j < gh; j++) {
						var a = gb[go + j * gw + i];
						if (a) {
							set(x+gl+i, gt+j, a);
						}
					}
				}
				x += glyph.advance + dx;
			}
		},
		// Called after all drawing is complete.
		end : function() {
		},
	};

	// This code is specialized to deal with two types of RGBA buffers:
	// - canvas style, which is true RGBA
	// - PNG style, which has a one-byte "filter code" prefixing each row.
	function set(x, y, a) {
        if (gs_xyclip && clipped(x, y)) {
            return;
        }
		// translate/rotate
		x += gs_dx;
		y += gs_dy;
		var tx = tx0 * x + tx1 * y + tx2 * (gs_width-1) + tx3 * (gs_height-1);
		var ty = ty0 * x + ty1 * y + ty2 * (gs_width-1) + ty3 * (gs_height-1);

		// https://en.wikipedia.org/wiki/Alpha_compositing
		var offs = (ty * gs_width + tx) * 4 + (ty+1) * gs_rowbyte;
		var dsta = gs_image[offs+3] / 255;
		var srca = a / 255;
		var inva = (1 - srca) * dsta;
		var outa = srca + inva;

		gs_image[offs+0] = ((gs_r * srca + gs_image[offs+0] * inva) / outa)|0;
		gs_image[offs+1] = ((gs_g * srca + gs_image[offs+1] * inva) / outa)|0;
		gs_image[offs+2] = ((gs_b * srca + gs_image[offs+2] * inva) / outa)|0;
		gs_image[offs+3] = (255 * outa)|0;
	}

	// Add a point on an edge to the scanline map.
	function addPoint(x, y) {
		if (gs_xymap.min > y) gs_xymap.min = y;
		if (!gs_xymap[y]) {
			gs_xymap[y] = [ x ];
		} else {
			gs_xymap[y].push(x);
		}
	}

	function fillSegment(x0, x1, y) {
		while (x0 <= x1) {
			set(x0++, y, 255);
		}
	}

	// even-odd fill
	//
	// This implementation is optimized for BWIPP's simple usage.
	// It is not a general purpose scanline fill.  It relies heavily on
	// polygon() creating the correct intersections.
	function evenodd() {
		var ymin = gs_xymap.min;
		var ymax = gs_xymap.length-1;

		for (var y = ymin; y <= ymax; y++) {
			var pts = gs_xymap[y];
			if (!pts) {
				continue
			}
			pts.sort(function(a, b) { return a - b; });

			var wn = false;
			var xl = 0;
			for (var n = 0, npts = pts.length; n < npts; n++) {
				var x = pts[n];
				if (wn) {
					fillSegment(xl, x-1, y);
				} else {
					xl = x;
				}
				wn = !wn;
			}
		}
	}

	function drawEllipse(x0, y0, x1, y1, dir) {
		x0 = x0|0;
		y0 = y0|0;
		x1 = x1|0;
		y1 = y1|0;

		var a = Math.abs(x1-x0);
		var b = Math.abs(y1-y0);
		var b1 = b & 1;
		var dx = 4*(1-a)*b*b;
		var dy = 4*(b1+1)*a*a;
		var err = dx + dy + b1*a*a;
		var e2;

		// Left and right edges
		var left = [], right = [];
		left.min = right.min = Infinity;

		if (x0 > x1) { x0 = x1; x1 += a; }
		if (y0 > y1) y0 = y1;
		y0 += ((b+1)/2)|0;
		y1 = y0 - b1;
		a *= 8*a; b1 = 8*b*b;

		do {
			maxedge(right, x1, y0);	// 1st quadrant
			minedge(left, x0, y0);	// 2nd quadrant
			minedge(left, x0, y1);	// 3rd quadrant
			maxedge(right, x1, y1);	// 4th quadrant
			e2 = 2*err;
			if (e2 >= dx) { x0++; x1--; dx += b1; err += dx; }
			if (e2 <= dy) { y0++; y1--; dy += a;  err += dy; }
		} while (x0 <= x1);

		while (y0-y1 < b) {	// too early stop of flat ellipse
			maxedge(right, x1+1, y0);
			minedge(left, x0-1, y0++);
			minedge(left, x0-1, y1);
			maxedge(right, x1+1, y1--);
		}

		for (var y = left.min, max = left.length-1; y <= max; y++) {
			addPoint(left[y], y);
		}
		// The points we calculated are "inside".  The fill algorithm excludes 
		// right edges, so +1 on each x.
		for (var y = right.min, max = right.length-1; y <= max; y++) {
			addPoint(right[y]+1, y);
		}

		function minedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey > x) {
				e[y] = x;
			}
		}

		function maxedge(e, x, y) {
			if (e.min > y) e.min = y;
			var ey = e[y];
			if (ey == null || ey < x) {
				e[y] = x;
			}
		}
	}

    // Returns true if outside the clipping region.
	function clipped(x, y) {
        var pts = gs_xyclip[y];
        if (!pts) {
            return true;
        }
        if (!pts.sorted) {
			pts.sort(function(a, b) { return a - b; });
            pts.sorted = true;
        }

        var wn = false;
        for (var n = 0, npts = pts.length; n < npts; n++) {
            var xn = pts[n];
            if (xn > x) {
                return !wn; 
            } else if (xn == x) {
                return wn;
            }
            wn = !wn;
		}
        return true;
	}

	// Returns 1 if clockwise, -1 if ccw.
	function polydir(pts) {
		var xp = 0;
		for (var i = 0, l = pts.length, j = l-1; i < l; j = i++) {
			xp += pts[j][0] * pts[i][1] - pts[i][0] * pts[j][1];
		}
		return xp > 0 ? 1 : -1;
	}
}
// drawing-canvas.js
//

// opts is the same options object passed into the bwipjs methods.
function DrawingCanvas(opts, canvas) {
	if (typeof window == null) {
		throw new Error('DrawingCanvas: not a browser');
	}

	var img;
	var ctx = canvas.getContext('2d');
	var drawing = DrawingBuiltin(opts);

	// Provide our specializations for the builtin drawing
	drawing.image = image;
	drawing.end = end;

	return drawing;


	// Called by DrawingBuiltin.init() to get the ARGB bitmap for rendering.
	function image(width, height) {
		canvas.width  = width;
		canvas.height = height;

		// Set background 
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		if (/^[0-9a-fA-F]{6}$/.test(''+opts.backgroundcolor)) {
			ctx.fillStyle = '#' + opts.backgroundcolor;
			ctx.fillRect(0, 0, width, height);
		} else {
			ctx.clearRect(0, 0, width, height);
		}

		// Prepare the bitmap 
		img = ctx.getImageData(0, 0, width, height);

		// The return value is designed for both canvas pure-RGBA and PNG RGBA
		return { buffer:img.data, ispng:false };
	}

	function end() {
		ctx.putImageData(img, 0, 0);
	}
}
// fontlib.js
var FontLib = (function() {
    var fonts = [];
    var names = {};
    var glyphcache = {};
    var glyphmru = {};
    var glyphcount = 0;

    // Sentinel to simplify moving entries around in the list.
    glyphmru.next = glyphmru;
    glyphmru.prev = glyphmru;

    return {
        lookup:lookup,
        monochrome:monochrome,
        getglyph:getglyph,
        getpaths:getpaths,
        loadFont:loadFont,
    };

    // loadFont(name, data)
    // loadFont(name, mult, data)
    // loadFont(name, multy, multx, data)   // note order: y,x
    // data must be the font data, either a binary or base64 encoded string.
    function loadFont(name /*...args*/) {
        var multx = 100;
        var multy = 100;
        var data = null;

        if (arguments.length == 2) {
            data = arguments[1];
        } else if (arguments.length == 3) {
            multx = multy = +arguments[1] || 100;
            data = arguments[2];
        } else if (arguments.length == 4) {
            multy = +arguments[1] || 100;
            multx = +arguments[2] || 100;
            data = arguments[3];
        } else {
            throw new Error("loadFont(): invalid number of arguments");
        }

        var font = STBTT.InitFont(toUint8Array(data));
        font.bwipjs_name = name;
        font.bwipjs_multx = multx;
        font.bwipjs_multy = multy;

        var fontid = fonts.push(font)-1;
        names[name.toUpperCase()] = fontid;
        return fontid;
    }

    // Always returns a valid font-id (default OCR-B)
    function lookup(name) {
        var fontid = names[name.toUpperCase()];
        return fontid === undefined ? 1 : fontid;       // OCR B default
    }

    // Not supported by stbtt
    function monochrome(mono) {
        if (mono) {
            throw new Error('fontlib: monochrome not implemented');
        }
    }

    function getglyph(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        // In the cache?
        var cachekey = '' + fontid + 'c' + charcode + 'w' + width + 'h' + height; 
        var glyph = glyphcache[cachekey];
        if (glyph) {
            // Unthread from the MRU
            glyph.prev.next = glyph.next;
            glyph.next.prev = glyph.prev;

            // Thread back onto the top
            var sntl = glyphmru;
            sntl.next.prev = glyph;
            glyph.next = sntl.next;
            glyph.prev = sntl;
            sntl.next = glyph;
            
            return glyph;
        }

        var font = fonts[fontid];
        var glyph = STBTT.GetGlyph(font, charcode, width * font.bwipjs_multx / 100,
                                                   height * font.bwipjs_multy / 100);
        
        glyph.bytes = glyph.pixels;
        glyph.cachekey = cachekey;
        glyph.offset = 0;

        //glyph = {
        //      top:font.GlyphTop(),
        //      left:font.GlyphLeft(),
        //      width:font.GlyphWidth(),
        //      height:font.GlyphHeight(),
        //      advance:font.GlyphAdvance(),
        //      bitmap:font.GlyphBitmap(),
        //      offset:0,
        //      cachekey:cachekey,
        //  };

        // Purge old
        if (glyphcount > 250) {
            var sntl = glyphmru;
            var temp = sntl.prev;
            temp.prev.next = sntl;
            sntl.prev = temp.prev;
            temp.next = temp.prev = null;
            delete glyphcache[temp.cachekey];
        } else {
            glyphcount++;
        }

        // Add to cache and to the top of the MRU
        glyphcache[cachekey] = glyph;

        var sntl = glyphmru;
        sntl.next.prev = glyph;
        glyph.next = sntl.next;
        glyph.prev = sntl;
        sntl.next = glyph;

        return glyph;
    }

    function getpaths(fontid, charcode, width, height) {
        fontid   = fontid|0;
        charcode = charcode|0;
        width    = +width;
        height   = +height;
        if (!width || width < 8) {
            width = 8;
        }
        if (!height || height < 8) {
            height = width;
        }
        if (fontid < 0 || fontid >= fonts.length) {
            fontid = 1;     // OCR B default
        }
        if (!charcode || charcode < 32) {
            charcode = 32;
        }

        var font = fonts[fontid];
        return STBTT.GetPaths(font, charcode, width * font.bwipjs_multx / 100,
                                              height * font.bwipjs_multy / 100);
    }
})();

// bwip-js/stb_trutype.js
//
// JavaScript implementation of stb_truetype.h @ https://github.com/nothings/stb.
//
// This file is part of the bwip-js project available at:
//
// 		http://metafloor.github.io/bwip-js
//
// Copyright (c) 2019 Mark Warren : MIT LICENSE

// Copyright notice from stb_truetype.h:
//
// MIT License
//
// Copyright (c) 2017 Sean Barrett
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

var STBTT = (function () {

var	STBTT_vmove	 = 1,
	STBTT_vline	 = 2,
	STBTT_vcurve = 3,
	STBTT_vcubic = 4,

	STBTT_PLATFORM_ID_UNICODE	= 0,
	STBTT_PLATFORM_ID_MAC		= 1,
	STBTT_PLATFORM_ID_ISO		= 2,
	STBTT_PLATFORM_ID_MICROSOFT = 3,

	STBTT_UNICODE_EID_UNICODE_1_0		= 0,
	STBTT_UNICODE_EID_UNICODE_1_1		= 1,
	STBTT_UNICODE_EID_ISO_10646			= 2,
	STBTT_UNICODE_EID_UNICODE_2_0_BMP	= 3,
	STBTT_UNICODE_EID_UNICODE_2_0_FULL	= 4,

	STBTT_MS_EID_SYMBOL			= 0,
	STBTT_MS_EID_UNICODE_BMP	= 1,
	STBTT_MS_EID_SHIFTJIS		= 2,
	STBTT_MS_EID_UNICODE_FULL	= 10;

var floor = Math.floor;
var ceil  = Math.ceil;
var sqrt  = Math.sqrt;
var abs   = Math.abs;

// Allocate an array of objects - replaces malloc(sizeof struct * n)
function oalloc(n) {
	var o = [];
	for (var i = 0; i < n; i++) {
		o.push({});
	}
	return o;
}

//static unsigned char stbtt__buf_get8(stbtt__buf * b)
function stbtt__buf_get8(b) {
    return b[b.cursor++]||0;
}

//static unsigned char stbtt__buf_peek8(stbtt__buf * b)
function stbtt__buf_peek8(b) {
    return b[b.cursor];
}

//static void stbtt__buf_seek(stbtt__buf * b, int o)
function stbtt__buf_seek(b, o) {
    b.cursor = (o > b.length || o < 0) ? b.length : o;
}

//static void stbtt__buf_skip(stbtt__buf * b, int o)
function stbtt__buf_skip(b, o) {
    stbtt__buf_seek(b, b.cursor + o);
}

//static unsigned int stbtt__buf_get(stbtt__buf * b, int n)
function stbtt__buf_get(b, n) {
    var v = 0;
    for (var i = 0; i < n; i++) {
        v = (v << 8) | stbtt__buf_get8(b);
    }
    return v;
}

// This function is only called once with a real 'p', all other uses are
// for a NULL buffer.  The for real usage, the code is inlined.
//static stbtt__buf stbtt__new_buf(const void *p, int size)
function stbtt__null_buf() {
	return { length:0 };
}

//static stbtt__buf stbtt__buf_range(const stbtt__buf * b, int o, int s)
function stbtt__buf_range(b, o, s) {
    if (o < 0 || s < 0 || o > b.length || s > b.length - o) {
        return stbtt__null_buf();
    }
	var r = b.subarray(o, o + s);
	r.cursor = 0;
	return r;
}

//static stbtt__buf stbtt__cff_get_index(stbtt__buf * b)
function stbtt__cff_get_index(b) {
    var start = b.cursor;
    var count = stbtt__buf_get(b, 2);
    if (count) {
        var offsize = stbtt__buf_get8(b);
        stbtt__buf_skip(b, offsize * count);
        stbtt__buf_skip(b, stbtt__buf_get(b, offsize) - 1);
    }
    return stbtt__buf_range(b, start, b.cursor - start);
}

//static unsigned int stbtt__cff_int(stbtt__buf * b)
function stbtt__cff_int(b) {
    var b0 = stbtt__buf_get8(b);
    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    } else if (b0 >= 247 && b0 <= 250) {
        return (b0 - 247) * 256 + stbtt__buf_get8(b) + 108;
    } else if (b0 >= 251 && b0 <= 254) {
        return -(b0 - 251) * 256 - stbtt__buf_get8(b) - 108;
    } else if (b0 == 28) {
        return stbtt__buf_get(b, 2);
    } else if (b0 == 29) {
        return stbtt__buf_get(b, 4);
    }
    return 0;
}

//static void stbtt__cff_skip_operand(stbtt__buf * b)
function stbtt__cff_skip_operand(b) {
    var b0 = stbtt__buf_peek8(b);
    if (b0 == 30) {
        stbtt__buf_skip(b, 1);
        while (b.cursor < b.length) {
            var v = stbtt__buf_get8(b);
            if ((v & 0xF) == 0xF || (v >> 4) == 0xF) {
                break;
            }
        }
    } else {
        stbtt__cff_int(b);
    }
}

//static stbtt__buf stbtt__dict_get(stbtt__buf * b, int key)
function stbtt__dict_get(b, key) {
    stbtt__buf_seek(b, 0);
    while (b.cursor < b.length) {
        var start = b.cursor, end, op;
        while (stbtt__buf_peek8(b) >= 28) {
            stbtt__cff_skip_operand(b);
        }
        end = b.cursor;
        op = stbtt__buf_get8(b);
        if (op == 12) {
            op = stbtt__buf_get8(b) | 0x100;
        }
        if (op == key) {
            return stbtt__buf_range(b, start, end - start);
        }
    }
    return stbtt__buf_range(b, 0, 0);
}

//static void stbtt__dict_get_ints(stbtt__buf * b, int key, int outcount, unsigned int *out)
function stbtt__dict_get_ints(b, key, outcount, out) {
    var operands = stbtt__dict_get(b, key);
    for (var i = 0; i < outcount && operands.cursor < operands.length; i++) {
        out[i] = stbtt__cff_int(operands);
    }
}
// single-integer format of above since javascript doesn't have address-of
function stbtt__dict_get_int(b, key, out) {
    var operands = stbtt__dict_get(b, key);
    if (operands.cursor < operands.length) {
        out = stbtt__cff_int(operands);
    }
	return out;
}

//static int stbtt__cff_index_count(stbtt__buf * b)
function stbtt__cff_index_count(b) {
    stbtt__buf_seek(b, 0);
    return stbtt__buf_get(b, 2);
}

//static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)
function stbtt__cff_index_get(b, i) {
    var count, offsize, start, end;
    stbtt__buf_seek(b, 0);
    count = stbtt__buf_get(b, 2);
    offsize = stbtt__buf_get8(b);
    stbtt__buf_skip(b, i * offsize);
    start = stbtt__buf_get(b, offsize);
    end = stbtt__buf_get(b, offsize);
    return stbtt__buf_range(b, 2 + (count + 1) * offsize + start, end - start);
}

// Convert sign-extend a 16-bit integer to JS number
function INT16(n) {
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned short ttUSHORT(unsigned char *p)
function ttUSHORT(b, o) {
    return b[o] * 256 + b[o+1];
}

//static short ttSHORT(unsigned char *p)
function ttSHORT(b, o) {
    var n = b[o] * 256 + b[o+1];
	return n & 0x8000 ? (0xffff0000|n)>>0 : n;
}

//static unsigned int ttULONG(unsigned char *p)
function ttULONG(b, o) {
    return (b[o] << 24) + (b[o+1] << 16) + (b[o+2] << 8) + b[o+3];
}

//static unsigned int stbtt__find_table(unsigned char *data, unsigned int fontstart, const char *tag)
function stbtt__find_table(data, fontstart, tag) {
    var num_tables = ttUSHORT(data, fontstart + 4);
    var tabledir = fontstart + 12;
    for (var i = 0; i < num_tables; ++i) {
        var loc = tabledir + 16 * i;
        if (data[loc] == tag[0] && data[loc+1] == tag[1] && data[loc+2] == tag[2] && data[loc+3] == tag[3]) {
            return ttULONG(data, loc + 8);
        }
    }
    return 0;
}

//static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)
function stbtt__get_subrs(cff, fontdict) {
    var private_loc = [ 0, 0 ];
    stbtt__dict_get_ints(fontdict, 18, 2, private_loc);
    if (!private_loc[1] || !private_loc[0]) {
        return stbtt__null_buf();
    }
    var pdict = stbtt__buf_range(cff, private_loc[1], private_loc[0]);
    var subrsoff = stbtt__dict_get_int(pdict, 19, 0);
    if (!subrsoff) {
        return stbtt__null_buf();
    }
    stbtt__buf_seek(cff, private_loc[1] + subrsoff);
    return stbtt__cff_get_index(cff);
}

//static int stbtt_InitFont_internal(stbtt_fontinfo * info, unsigned char *data, int fontstart)
function stbtt_InitFont_internal(info, data, fontstart) {
    var cmap, t, i, numTables;

    info.data = data;
    info.fontstart = fontstart;
    info.cff = stbtt__null_buf();

    cmap = stbtt__find_table(data, fontstart, [ 99, 109, 97, 112 ]);		//"cmap"
    info.loca = stbtt__find_table(data, fontstart, [ 108, 111, 99, 97 ]);	//"loca"
    info.head = stbtt__find_table(data, fontstart, [ 104, 101, 97, 100 ]);	//"head"
    info.glyf = stbtt__find_table(data, fontstart, [ 103, 108, 121, 102 ]);	//"glyf"
    info.hhea = stbtt__find_table(data, fontstart, [ 104, 104, 101, 97 ]);	//"hhea"
    info.hmtx = stbtt__find_table(data, fontstart, [ 104, 109, 116, 120 ]);	//"hmtx"
    info.kern = stbtt__find_table(data, fontstart, [ 107, 101, 114, 110 ]);	//"kern"

    if (!cmap || !info.head || !info.hhea || !info.hmtx) {
        return 0;
    }
    if (info.glyf) {
        if (!info.loca) {
            return 0;
        }
    } else {
        var b, topdict, topdictidx, cff,
			cstype = 2, charstrings = 0, fdarrayoff = 0, fdselectoff = 0;

        cff = stbtt__find_table(data, fontstart, [ 67, 70, 70, 32 ]);	//"CFF "
        if (!cff) {
            return 0;
        }

        info.fontdicts = stbtt__null_buf();
        info.fdselect = stbtt__null_buf();

        info.cff = data.subarray(cff); //stbtt__new_buf(data + cff, 512 * 1024 * 1024);
		info.cff.cursor = 0;
        b = info.cff;

        stbtt__buf_skip(b, 2);
        stbtt__buf_seek(b, stbtt__buf_get8(b));

        stbtt__cff_get_index(b);
        topdictidx = stbtt__cff_get_index(b);
        topdict = stbtt__cff_index_get(topdictidx, 0);
        stbtt__cff_get_index(b);
        info.gsubrs = stbtt__cff_get_index(b);

        charstrings = stbtt__dict_get_int(topdict, 17, charstrings);
        cstype = stbtt__dict_get_int(topdict, 0x100 | 6, cstype);
        fdarrayoff = stbtt__dict_get_int(topdict, 0x100 | 36, fdarrayoff);
        fdselectoff = stbtt__dict_get_int(topdict, 0x100 | 37, fdselectoff);
        info.subrs = stbtt__get_subrs(b, topdict);

        if (cstype != 2) {
            return 0;
        }
        if (charstrings == 0) {
            return 0;
        }

        if (fdarrayoff) {
            if (!fdselectoff) {
                return 0;
            }
            stbtt__buf_seek(b, fdarrayoff);
            info.fontdicts = stbtt__cff_get_index(b);
            info.fdselect = stbtt__buf_range(b, fdselectoff, b.length - fdselectoff);
        }

        stbtt__buf_seek(b, charstrings);
        info.charstrings = stbtt__cff_get_index(b);
    }

    t = stbtt__find_table(data, fontstart, [ 109, 97, 120, 112 ]);	//"maxp"
    if (t) {
        info.numGlyphs = ttUSHORT(data, t + 4);
    }
    else {
        info.numGlyphs = 0xffff;
    }

    numTables = ttUSHORT(data, cmap + 2);
    info.index_map = 0;
    for (i = 0; i < numTables; ++i) {
        var encoding_record = cmap + 4 + 8 * i;

        switch (ttUSHORT(data, encoding_record)) {
        case STBTT_PLATFORM_ID_MICROSOFT:
            switch (ttUSHORT(data, encoding_record + 2)) {
            case STBTT_MS_EID_UNICODE_BMP:
            case STBTT_MS_EID_UNICODE_FULL:
                info.index_map = cmap + ttULONG(data, encoding_record + 4);
                break;
            }
            break;
        case STBTT_PLATFORM_ID_UNICODE:
            info.index_map = cmap + ttULONG(data, encoding_record + 4);
            break;
        }
    }
    if (info.index_map == 0) {
        return 0;
    }

    info.indexToLocFormat = ttUSHORT(data, info.head + 50);
    return 1;
}

//extern int stbtt_FindGlyphIndex(const stbtt_fontinfo * info, int unicode_codepoint)
function stbtt_FindGlyphIndex(info, unicode_codepoint) {
    var data = info.data, index_map = info.index_map;

    var format = ttUSHORT(data, index_map + 0);
    if (format == 0) {
        var bytes = ttUSHORT(data, index_map + 2);
        if (unicode_codepoint < bytes - 6) {
            return data[index_map + 6 + unicode_codepoint];
		}
        return 0;
    } else if (format == 6) {
        var first = ttUSHORT(data, index_map + 6),
            count = ttUSHORT(data, index_map + 8);
        if (unicode_codepoint >= first && unicode_codepoint < first + count) {
            return ttUSHORT(data, index_map + 10 + (unicode_codepoint - first) * 2);
		}
        return 0;
    } else if (format == 2) {
        return 0;
    } else if (format == 4) {
        var segcount = ttUSHORT(data, index_map + 6) >> 1,
            searchRange = ttUSHORT(data, index_map + 8) >> 1,
            entrySelector = ttUSHORT(data, index_map + 10),
            rangeShift = ttUSHORT(data, index_map + 12) >> 1,
			endCount = index_map + 14,
            search = endCount;

        if (unicode_codepoint > 0xffff) {
            return 0;
        }

        if (unicode_codepoint >= ttUSHORT(data, search + rangeShift * 2)) {
            search += rangeShift * 2;
        }

        search -= 2;
        while (entrySelector) {
            searchRange >>= 1;
            var end = ttUSHORT(data, search + searchRange * 2);
            if (unicode_codepoint > end) {
                search += searchRange * 2;
            }
            --entrySelector;
        }
        search += 2;

		var offset, start, item = (search - endCount) >>> 1;

		start = ttUSHORT(data, index_map + 14 + segcount * 2 + 2 + 2 * item);
		if (unicode_codepoint < start) {
			return 0;
		}

		offset = ttUSHORT(data, index_map + 14 + segcount * 6 + 2 + 2 * item);
		if (offset == 0) {
			return unicode_codepoint + ttSHORT(data, index_map + 14 + segcount * 4 + 2 + 2 * item);
		}
		return ttUSHORT(data, offset + (unicode_codepoint - start) * 2 +
								index_map + 14 + segcount * 6 + 2 +	2 * item);
    } else if (format == 12 || format == 13) {
        var ngroups = ttULONG(data, index_map + 12),
			low = 0, high = ngroups;
         while (low < high) {
            var mid = low + ((high - low) >> 1);
            var start_char = ttULONG(data, index_map + 16 + mid * 12);
            var end_char = ttULONG(data, index_map + 16 + mid * 12 + 4);
            if (unicode_codepoint < start_char) {
                high = mid;
            } else if (unicode_codepoint > end_char) {
                low = mid + 1;
            } else {
                var start_glyph = ttULONG(data, index_map + 16 + mid * 12 + 8);
                if (format == 12) {
                    return start_glyph + unicode_codepoint - start_char;
				} else {
                    return start_glyph;
                }
            }
        }
        return 0;
    }
    return 0;
}

//static void stbtt_setvertex(stbtt_vertex * v, unsigned char type, int x, int y, int cx, int cy)
function stbtt_setvertex(v, type, x, y, cx, cy) {
    v.type = type;
    v.x = x;
    v.y = y;
    v.cx = cx;
    v.cy = cy;
}

//static int stbtt__GetGlyfOffset(const stbtt_fontinfo * info, int glyph_index)
function stbtt__GetGlyfOffset(info, glyph_index) {
    var  g1, g2;
    if (glyph_index >= info.numGlyphs) {
        return -1;
    }
    if (info.indexToLocFormat >= 2) {
        return -1;
    }

    if (info.indexToLocFormat == 0) {
        g1 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2) * 2;
        g2 = info.glyf + ttUSHORT(info.data, info.loca + glyph_index * 2 + 2) * 2;
    } else {
        g1 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4);
        g2 = info.glyf + ttULONG(info.data, info.loca + glyph_index * 4 + 4);
    }

    return g1 == g2 ? -1 : g1;
}

//extern int stbtt_GetGlyphBox(const stbtt_fontinfo * info, int glyph_index, int *x0, int *y0, int *x1, int *y1)
function stbtt_GetGlyphBox(info, glyph_index, out) {
    if (info.cff.length) {
        stbtt__GetGlyphInfoT2(info, glyph_index, out);
    } else {
        var g = stbtt__GetGlyfOffset(info, glyph_index);
        if (g < 0) {
            return 0;
        }
	    out.x0 = ttSHORT(info.data, g + 2);
		out.y0 = ttSHORT(info.data, g + 4);
		out.x1 = ttSHORT(info.data, g + 6);
		out.y1 = ttSHORT(info.data, g + 8);
    }
    return 1;
}

//static int stbtt__close_shape(stbtt_vertex * vertices, int num_vertices, int was_off,
//                   int start_off, int sx, int sy, int scx, int scy, int cx, int cy)
function stbtt__close_shape(vertices, num_vertices, was_off, start_off, sx, sy, scx, scy, cx, cy) {
    if (start_off) {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                            (cx + scx) >> 1, (cy + scy) >> 1, cx, cy);
		}
        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, scx, scy);
    } else {
        if (was_off) {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, sx, sy, cx, cy);
		} else {
            stbtt_setvertex(vertices[num_vertices++], STBTT_vline, sx, sy, 0, 0);
		}
    }
    return num_vertices;
}

//static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo * info, int glyph_index, stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeTT(info, glyph_index) {
    var data = info.data,
		g = stbtt__GetGlyfOffset(info, glyph_index);

	if (g < 0) {
        return null;
    }

	var vertices = [];
    var numberOfContours = ttSHORT(data, g);
    if (numberOfContours > 0) {
        var flags = 0, flagcount,
			i, j = 0, m, n, next_move, was_off = 0, off, start_off = 0,
			x, y, cx, cy, sx, sy, scx, scy;
        var endPtsOfContours = g + 10;
        var ins = ttUSHORT(data, g + 10 + numberOfContours * 2);
        var points = data.subarray(g + 10 + numberOfContours * 2 + 2 + ins);
		var ptsoff = 0;

        n = 1 + ttUSHORT(data, endPtsOfContours + numberOfContours * 2 - 2);
        m = n + 2 * numberOfContours;

        vertices = oalloc(m);
        next_move = 0;
        flagcount = 0;
        off = m - n;

        for (i = 0; i < n; ++i) {
            if (flagcount == 0) {
                flags = points[ptsoff++];
                if (flags & 8) {
                    flagcount = points[ptsoff++];
                }
            } else {
                --flagcount;
            }
            vertices[off + i].type = flags;
        }

        x = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 2) {
                var dx = points[ptsoff++];
                x += (flags & 16) ? dx : -dx;
            } else {
                if (!(flags & 16)) {
                    x = x + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].x = x;
        }

        y = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            if (flags & 4) {
                var dy = points[ptsoff++];
                y += (flags & 32) ? dy : -dy;
            } else {
                if (!(flags & 32)) {
                    y = y + INT16(points[ptsoff] * 256 + points[ptsoff+1]);
                    ptsoff += 2;
                }
            }
            vertices[off + i].y = y;
        }

        var num_vertices = 0;
        sx = sy = cx = cy = scx = scy = 0;
        for (i = 0; i < n; ++i) {
            flags = vertices[off + i].type;
            x = vertices[off + i].x;
            y = vertices[off + i].y;

            if (next_move == i) {
                if (i != 0) {
                    num_vertices = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
											sx, sy, scx, scy, cx, cy);
				}
                start_off = !(flags & 1);
                if (start_off) {
                    scx = x;
                    scy = y;
                    if (!(vertices[off + i + 1].type & 1)) {
                        sx = (x + vertices[off + i + 1].x) >> 1;
                        sy = (y + vertices[off + i + 1].y) >> 1;
                    } else {
                        sx = vertices[off + i + 1].x;
                        sy = vertices[off + i + 1].y;
                        ++i;
                    }
                } else {
                    sx = x;
                    sy = y;
                }
                stbtt_setvertex(vertices[num_vertices++], STBTT_vmove, sx, sy, 0, 0);
                was_off = 0;
                next_move = 1 + ttUSHORT(data, endPtsOfContours + j * 2);
                ++j;
            } else {
                if (!(flags & 1)) {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve,
                                        (cx + x) >> 1, (cy + y) >> 1, cx, cy);
					}
                    cx = x;
                    cy = y;
                    was_off = 1;
                } else {
                    if (was_off) {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vcurve, x, y, cx, cy);
                    } else {
                        stbtt_setvertex(vertices[num_vertices++], STBTT_vline, x, y, 0, 0);
					}
                    was_off = 0;
                }
            }
        }
        vertices.length = stbtt__close_shape(vertices, num_vertices, was_off, start_off,
												sx, sy, scx, scy, cx, cy);
    } else if (numberOfContours == -1) {
        var more = 1;
        var comp = g + 10;
         while (more) {
            var flags, gidx, mtx = [ 1, 0, 0, 1, 0, 0 ];

            flags = ttSHORT(data, comp);
            comp += 2;
            gidx = ttSHORT(data, comp);
            comp += 2;

            if (flags & 2) {
                if (flags & 1) {
                    mtx[4] = ttSHORT(data, comp);
                    comp += 2;
                    mtx[5] = ttSHORT(data, comp);
                    comp += 2;
                } else {
                    mtx[4] = stbtt__buf_get8(data, comp);
                    comp += 1;
                    mtx[5] = stbtt__buf_get8(data, comp);
                    comp += 1;
                }
            }
            if (flags & (1 << 3)) {
                mtx[0] = mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
            } else if (flags & (1 << 6)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = mtx[2] = 0;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            } else if (flags & (1 << 7)) {
                mtx[0] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[1] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[2] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
                mtx[3] = ttSHORT(data, comp) / 16384.0;
                comp += 2;
            }

            var m = sqrt(mtx[0] * mtx[0] + mtx[1] * mtx[1]);
            var n = sqrt(mtx[2] * mtx[2] + mtx[3] * mtx[3]);
            var comp_verts = stbtt_GetGlyphShape(info, gidx);
            if (comp_verts.length > 0) {
                for (var i = 0, l = comp_verts.length; i < l; ++i) {
                    var v = comp_verts[i], x, y;
					x = v.x;
					y = v.y;
                    v.x = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.y = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                    x = v.cx;
                    y = v.cy;
                    v.cx = floor(m * (mtx[0] * x + mtx[2] * y + mtx[4]));
                    v.cy = floor(n * (mtx[1] * x + mtx[3] * y + mtx[5]));
                }

				vertices = vertices.concat(comp_verts);
            }
            more = flags & (1 << 5);
        }
    }
	//console.log('vertices(' + vertices.length + ')');
	//for (var i = 0; i < vertices.length; i++) {
	//	var pt = vertices[i];
	//	console.log(`${i}: ${pt.x},${pt.y} / ${pt.cx},${pt.cy} / ${pt.type}`);
	//}

    return vertices;
}

//static void stbtt__track_vertex(stbtt__csctx * c, int x, int y)
function stbtt__track_vertex(c, x, y) {
    if (x > c.max_x || !c.started) {
        c.max_x = x;
    }
    if (y > c.max_y || !c.started) {
        c.max_y = y;
    }
    if (x < c.min_x || !c.started) {
        c.min_x = x;
    }
    if (y < c.min_y || !c.started) {
        c.min_y = y;
    }
    c.started = 1;
}

//static void stbtt__csctx_v(stbtt__csctx * c, unsigned char type, int x, int y, int cx, int cy, int cx1, int cy1)
function stbtt__csctx_v(c, type, x, y, cx, cy, cx1, cy1) {
	stbtt__track_vertex(c, x, y);
	if (type == STBTT_vcubic) {
		stbtt__track_vertex(c, cx, cy);
		stbtt__track_vertex(c, cx1, cy1);
	}
	var v = {};
	stbtt_setvertex(v, type, x, y, cx, cy);
	v.cx1 = cx1;
	v.cy1 = cy1;
	c.vertices.push(v);
 }

//static void stbtt__csctx_close_shape(stbtt__csctx * ctx)
function stbtt__csctx_close_shape(ctx) {
    if (ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
        stbtt__csctx_v(ctx, STBTT_vline, ctx.first_x, ctx.first_y, 0, 0, 0, 0);
	}
}

//static void stbtt__csctx_rmove_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rmove_to(ctx, dx, dy) {
    stbtt__csctx_close_shape(ctx);
    ctx.first_x = ctx.x = ctx.x + dx;
    ctx.first_y = ctx.y = ctx.y + dy;
    stbtt__csctx_v(ctx, STBTT_vmove, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rline_to(stbtt__csctx * ctx, float dx, float dy)
function stbtt__csctx_rline_to(ctx, dx, dy) {
    ctx.x += dx;
    ctx.y += dy;
    stbtt__csctx_v(ctx, STBTT_vline, ctx.x, ctx.y, 0, 0, 0, 0);
}

//static void stbtt__csctx_rccurve_to(stbtt__csctx * ctx, float dx1, float dy1, float dx2,
//									float dy2, float dx3, float dy3)
function stbtt__csctx_rccurve_to(ctx, dx1, dy1, dx2, dy2, dx3, dy3) {
    var cx1 = ctx.x + dx1,
		cy1 = ctx.y + dy1,
		cx2 = cx1 + dx2,
		cy2 = cy1 + dy2;
    ctx.x = cx2 + dx3;
    ctx.y = cy2 + dy3;
    stbtt__csctx_v(ctx, STBTT_vcubic, ctx.x, ctx.y, cx1, cy1, cx2, cy2);
}

//static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)
function stbtt__get_subr(b, n) {
    var count = stbtt__cff_index_count(b);
    var bias = 107;
    if (count >= 33900) {
        bias = 32768;
    } else if (count >= 1240) {
        bias = 1131;
    }
    n += bias;
    if (n < 0 || n >= count) {
        return stbtt__null_buf();
    }
    return stbtt__cff_index_get(b, n);
}

//static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo * info, int glyph_index)
function stbtt__cid_get_glyph_subrs(info, glyph_index) {
    var fdselect = info.fdselect;
    var nranges, start, end, v, fmt, fdselector = -1, i;

    stbtt__buf_seek(fdselect, 0);
    fmt = stbtt__buf_get8(fdselect);
    if (fmt == 0) {
        stbtt__buf_skip(fdselect, glyph_index);
        fdselector = stbtt__buf_get8(fdselect);
    } else if (fmt == 3) {
        nranges = stbtt__buf_get(fdselect, 2);
        start = stbtt__buf_get(fdselect, 2);
        for (i = 0; i < nranges; i++) {
            v = stbtt__buf_get8(fdselect);
            end = stbtt__buf_get(fdselect, 2);
            if (glyph_index >= start && glyph_index < end) {
                fdselector = v;
                break;
            }
            start = end;
        }
    }
    if (fdselector == -1) {
        stbtt__null_buf();
    }
    return stbtt__get_subrs(info.cff, stbtt__cff_index_get(info.fontdicts, fdselector));
}

//static int stbtt__run_charstring(const stbtt_fontinfo * info, int glyph_index,
//								   stbtt__csctx * c)
function stbtt__run_charstring(info, glyph_index, c) {
    var in_header = 1, maskbits = 0, subr_stack_height = 0, sp = 0, v, i, b0,
		has_subrs = 0, clear_stack,
		s = [], subr_stack = [], subrs = info.subrs, b, f;

    b = stbtt__cff_index_get(info.charstrings, glyph_index);
    while (b.cursor < b.length) {
        i = 0;
        clear_stack = 1;
        b0 = stbtt__buf_get8(b);
        switch (b0) {
        case 0x13:
        case 0x14:
            if (in_header) {
                maskbits += (sp / 2)|0;
            }
            in_header = 0;
            stbtt__buf_skip(b, ((maskbits + 7) / 8)|0);
            break;

        case 0x01:
        case 0x03:
        case 0x12:
        case 0x17:
            maskbits += (sp / 2)|0;
            break;

        case 0x15:
            in_header = 0;
            if (sp < 2) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 2], s[sp - 1]);
            break;
        case 0x04:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, 0, s[sp - 1]);
            break;
        case 0x16:
            in_header = 0;
            if (sp < 1) {
                return 0;
            }
            stbtt__csctx_rmove_to(c, s[sp - 1], 0);
            break;

        case 0x05:
            if (sp < 2) {
                return 0;
            }
            for (; i + 1 < sp; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            break;

        case 0x07:
            if (sp < 1) {
                return 0;
            }
			for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
			}
			break;
        case 0x06:
            if (sp < 1) {
                return 0;
            }
            for (;;) {
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, s[i], 0);
                i++;
                if (i >= sp) {
                    break;
                }
                stbtt__csctx_rline_to(c, 0, s[i]);
                i++;
            }
            break;

        case 0x1F:
            if (sp < 4) {
                return 0;
            }
			for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
			}
			break;
        case 0x1E:
            if (sp < 4) {
                return 0;
            }
            for (;;) {
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, 0, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        (sp - i == 5) ? s[i + 4] : 0.0);
                i += 4;
                if (i + 3 >= sp) {
                    break;
                }
                stbtt__csctx_rccurve_to(c, s[i], 0, s[i + 1], s[i + 2],
                                        (sp - i == 5) ? s[i + 4] : 0.0,
                                        s[i + 3]);
                i += 4;
            }
            break;

        case 0x08:
            if (sp < 6) {
                return 0;
            }
            for (; i + 5 < sp; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            break;

        case 0x18:
            if (sp < 8) {
                return 0;
            }
            for (; i + 5 < sp - 2; i += 6) {
                stbtt__csctx_rccurve_to(c, s[i], s[i + 1],
                                        s[i + 2], s[i + 3],
                                        s[i + 4], s[i + 5]);
			}
            if (i + 1 >= sp) {
                return 0;
            }
            stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            break;

        case 0x19:
            if (sp < 8) {
                return 0;
            }
            for (; i + 1 < sp - 6; i += 2) {
                stbtt__csctx_rline_to(c, s[i], s[i + 1]);
            }
            if (i + 5 >= sp) {
                return 0;
            }
            stbtt__csctx_rccurve_to(c, s[i], s[i + 1], s[i + 2],
                                    s[i + 3], s[i + 4], s[i + 5]);
            break;

        case 0x1A:
        case 0x1B:
            if (sp < 4) {
                return 0;
            }
            f = 0.0;
            if (sp & 1) {
                f = s[i];
                i++;
            }
            for (; i + 3 < sp; i += 4) {
                if (b0 == 0x1B) {
                    stbtt__csctx_rccurve_to(c, s[i], f,
                                            s[i + 1],
                                            s[i + 2],
                                            s[i + 3], 0.0);
                } else {
                    stbtt__csctx_rccurve_to(c, f, s[i],
                                            s[i + 1],
                                            s[i + 2], 0.0,
                                            s[i + 3]);
				}
                f = 0.0;
            }
            break;

        case 0x0A:
            if (!has_subrs) {
                if (info.fdselect.length) {
                    subrs = stbtt__cid_get_glyph_subrs(info, glyph_index);
				}
                has_subrs = 1;
            }

        case 0x1D:
            if (sp < 1) {
                return 0;
            }
            v = s[--sp]|0;
            if (subr_stack_height >= 10) {
                return 0;
            }
            subr_stack[subr_stack_height++] = b;
            b = stbtt__get_subr(b0 == 0x0A ? subrs : info.gsubrs, v);
            if (b.length == 0) {
                return 0;
            }
            b.cursor = 0;
            clear_stack = 0;
            break;

        case 0x0B:
            if (subr_stack_height <= 0) {
                return 0;
            }
            b = subr_stack[--subr_stack_height];
            clear_stack = 0;
            break;

        case 0x0E:
            stbtt__csctx_close_shape(c);
            return 1;

        case 0x0C:
            var dx1, dx2, dx3, dx4, dx5, dx6, dy1, dy2, dy3, dy4, dy5, dy6,
				dx, dy, b1 = stbtt__buf_get8(b);
            switch (b1) {
            case 0x22:
                if (sp < 7) {
                    return 0;
                }
                dx1 = s[0];
                dx2 = s[1];
                dy2 = s[2];
                dx3 = s[3];
                dx4 = s[4];
                dx5 = s[5];
                dx6 = s[6];
                stbtt__csctx_rccurve_to(c, dx1, 0, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, -dy2, dx6, 0);
                break;

            case 0x23:
                if (sp < 13) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = s[10];
                dy6 = s[11];

                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            case 0x24:
                if (sp < 9) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dx4 = s[5];
                dx5 = s[6];
                dy5 = s[7];
                dx6 = s[8];
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, 0);
                stbtt__csctx_rccurve_to(c, dx4, 0, dx5, dy5, dx6, -(dy1 + dy2 + dy5));
                break;

            case 0x25:
                if (sp < 11) {
                    return 0;
                }
                dx1 = s[0];
                dy1 = s[1];
                dx2 = s[2];
                dy2 = s[3];
                dx3 = s[4];
                dy3 = s[5];
                dx4 = s[6];
                dy4 = s[7];
                dx5 = s[8];
                dy5 = s[9];
                dx6 = dy6 = s[10];
                dx = dx1 + dx2 + dx3 + dx4 + dx5;
                dy = dy1 + dy2 + dy3 + dy4 + dy5;
                if (abs(dx) > abs(dy)) {
                    dy6 = -dy;
                } else {
                    dx6 = -dx;
                }
                stbtt__csctx_rccurve_to(c, dx1, dy1, dx2, dy2, dx3, dy3);
                stbtt__csctx_rccurve_to(c, dx4, dy4, dx5, dy5, dx6, dy6);
                break;

            default:
                return 0;
            }
        	break;

        default:
            if (b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
                return 0;
            }
            if (b0 == 255) {
                // f = (float)(stbtt_int32)stbtt__buf_get32(&b) / 0x10000;
                f = (stbtt__buf_get(b, 4)|0) / 0x10000;
            } else {
                stbtt__buf_skip(b, -1);
                // f = (float)(stbtt_int16)stbtt__cff_int(&b);
                f = ((stbtt__cff_int(b)<<16)|0)>>16;
            }
            if (sp >= 48) {
                return 0;
            }
            s[sp++] = f;
            clear_stack = 0;
            break;
        }
        if (clear_stack) {
            sp = 0;
        }
    }
    return 0;
}

function stbtt__csctx_init() {
	return { started:0, first_x:0, first_y:0, x:0, y:0,
			min_x:0, max_x:0, min_y:0, max_y:0,
			vertices:[]
		};
}

//static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo * info, int glyph_index,
//									stbtt_vertex ** pvertices)
function stbtt__GetGlyphShapeT2(info, glyph_index) {
    var output_ctx = stbtt__csctx_init();
    if (stbtt__run_charstring(info, glyph_index, output_ctx)) {
		return output_ctx.vertices;
    }
    return null;
}

//static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo * info, int glyph_index, int *x0,
//                      int *y0, int *x1, int *y1)
function stbtt__GetGlyphInfoT2(info, glyph_index, out) {
    var c = stbtt__csctx_init();
    var r = stbtt__run_charstring(info, glyph_index, c);
	out.x0 = r ? c.min_x : 0;
	out.y0 = r ? c.min_y : 0;
	out.x1 = r ? c.max_x : 0;
	out.y1 = r ? c.max_y : 0;
    return r && c.vertices ? c.vertices.length : 0;
}

//extern int stbtt_GetGlyphShape(const stbtt_fontinfo * info, int glyph_index,
//								 stbtt_vertex ** pvertices)
function stbtt_GetGlyphShape(info, glyph_index) {
    if (!info.cff.length) {
        return stbtt__GetGlyphShapeTT(info, glyph_index);
    } else {
        return stbtt__GetGlyphShapeT2(info, glyph_index);
    }
}

//extern void stbtt_GetGlyphHMetrics(const stbtt_fontinfo * info, int glyph_index,
//                       int *advanceWidth, int *leftSideBearing)
function stbtt_GetGlyphHMetrics(info, glyph_index) {
    var numOfLongHorMetrics = ttUSHORT(info.data, info.hhea + 34);
    if (glyph_index < numOfLongHorMetrics) {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * glyph_index),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * glyph_index + 2)
			};
    } else {
		return {
				advanceWidth:   ttSHORT(info.data, info.hmtx + 4 * (numOfLongHorMetrics - 1)),
				leftSideBearing:ttSHORT(info.data, info.hmtx + 4 * numOfLongHorMetrics +
											2 * (glyph_index - numOfLongHorMetrics))
			};
    }
}

//extern void stbtt_GetCodepointHMetrics(const stbtt_fontinfo * info, int codepoint,
//                           int *advanceWidth, int *leftSideBearing)
function stbtt_GetCodepointHMetrics(info, codepoint) {
     return stbtt_GetGlyphHMetrics(info, stbtt_FindGlyphIndex(info, codepoint));
}

//extern void stbtt_GetFontVMetrics(const stbtt_fontinfo * info, int *ascent, int *descent, int *lineGap)
function stbtt_GetFontVMetrics(info) {
	return {
        ascent:	ttSHORT(info.data, info.hhea + 4),
        descent:ttSHORT(info.data, info.hhea + 6),
        linegap:ttSHORT(info.data, info.hhea + 8),
	};
}

//extern void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo * font, int glyph,
//                              float scale_x, float scale_y, float shift_x, float shift_y,
//								int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, shift_x, shift_y) {
    var tmp = {};
    if (!stbtt_GetGlyphBox(font, glyph, tmp)) {
		return { x0:0, y0:0, x1:0, y1:0 };
    }
	return {
			x0:floor(tmp.x0 * scale_x + shift_x),
			y0:floor(-tmp.y1 * scale_y + shift_y),
			x1:ceil(tmp.x1 * scale_x + shift_x),
			y1:ceil(-tmp.y0 * scale_y + shift_y),
		};
}

//extern void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo * font,
//                                    int codepoint, float scale_x, float scale_y, float shift_x,
//                                    float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, shift_x, shift_y) {
    return stbtt_GetGlyphBitmapBoxSubpixel(font, stbtt_FindGlyphIndex(font, codepoint),
											scale_x, scale_y, shift_x, shift_y);
}

//extern void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo * font, int codepoint,	float scale_x, float scale_y,
//										int *ix0, int *iy0, int *ix1, int *iy1)
function stbtt_GetCodepointBitmapBox(font, codepoint, scale_x, scale_y) {
    return stbtt_GetCodepointBitmapBoxSubpixel(font, codepoint, scale_x, scale_y, 0, 0);
}

//static stbtt__active_edge *stbtt__new_active(stbtt__hheap * hh, stbtt__edge * e, int off_x, float start_point, void *userdata)
function stbtt__new_active(e, off_x, start_point) {
    var dxdy = (e.x1 - e.x0) / (e.y1 - e.y0);
	return {
		fdx:dxdy,
		fdy:dxdy != 0.0 ? (1.0 / dxdy) : 0.0,
		fx:(e.x0 + dxdy * (start_point - e.y0)) - (off_x|0),
		direction:e.invert ? 1.0 : -1.0,
		sy:e.y0,
		ey:e.y1,
		next:0,
    };
}

//static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge * e,
//                           float x0, float y0, float x1, float y1)
function stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1) {
	x = x|0;
    if (y0 == y1) {
        return;
    }
    if (y0 > e.ey) {
        return;
    }
    if (y1 < e.sy) {
        return;
    }
    if (y0 < e.sy) {
        x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
        y0 = e.sy;
    }
    if (y1 > e.ey) {
        x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
        y1 = e.ey;
    }

    if (x0 <= x && x1 <= x) {
        scanline[x] += e.direction * (y1 - y0);
    } else if (x0 >= x + 1 && x1 >= x + 1) {

    } else {
        scanline[x] += e.direction * (y1 - y0) * (1 - ((x0 - x) + (x1 - x)) / 2);
    }
}

//static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,
//                             stbtt__active_edge * e, float y_top)
// The C implementation passed scanline_fill as a +1 pointer on the call, and then -1 in
// places in this function.  That doesn't work with array-views, so we reverse the handling.
function stbtt__fill_active_edges_new(scanline, scanline_fill, len, e, y_top) {
    var y_bottom = y_top + 1;
    while (e) {
        if (e.fdx == 0) {
            var x0 = e.fx;
            if (x0 < len) {
                if (x0 >= 0) {
                    stbtt__handle_clipped_edge(scanline, x0, e, x0, y_top, x0, y_bottom);
                    stbtt__handle_clipped_edge(scanline_fill, x0+1, e, x0, y_top, x0, y_bottom);
                } else {
                    stbtt__handle_clipped_edge(scanline_fill, 0, e, x0, y_top, x0, y_bottom);
                }
            }
        } else {
            var x0 = e.fx,
				dx = e.fdx,
				xb = x0 + dx,
				x_top, x_bottom,
				sy0, sy1,
				dy = e.fdy;

            if (e.sy > y_top) {
                x_top = x0 + dx * (e.sy - y_top);
                sy0 = e.sy;
            } else {
                x_top = x0;
                sy0 = y_top;
            }
            if (e.ey < y_bottom) {
                x_bottom = x0 + dx * (e.ey - y_top);
                sy1 = e.ey;
            } else {
                x_bottom = xb;
                sy1 = y_bottom;
            }

            if (x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
                if ((x_top|0) == (x_bottom|0)) {
                    var height = sy1 - sy0,
						x = x_top|0;
                    scanline[x] += e.direction * (1 - ((x_top - x) + (x_bottom - x)) / 2) * height;
                    scanline_fill[x+1] += e.direction * height;
                } else {
                    var t, x, x1, x2, y_crossing, step, sign, area;
                    if (x_top > x_bottom) {
                        sy0 = y_bottom - (sy0 - y_top);
                        sy1 = y_bottom - (sy1 - y_top);
                        t = sy0, sy0 = sy1, sy1 = t;
                        t = x_bottom, x_bottom = x_top, x_top = t;
                        dx = -dx;
                        dy = -dy;
                        t = x0, x0 = xb, xb = t;
                    }

                    x1 = x_top|0;
                    x2 = x_bottom|0;
                    y_crossing = (x1 + 1 - x0) * dy + y_top;
                    sign = e.direction;
                    area = sign * (y_crossing - sy0);

                    scanline[x1] += area * (1 - ((x_top - x1) + (x1 + 1 - x1)) / 2);

                    step = sign * dy;
                    for (x = x1 + 1; x < x2; ++x) {
                        scanline[x] += area + step / 2;
                        area += step;
                    }
                    y_crossing += dy * (x2 - (x1 + 1));

                    scanline[x2] += area + sign * (1 - ((x2 - x2) + (x_bottom - x2)) / 2) *
												(sy1 - y_crossing);
                    scanline_fill[x2+1] += sign * (sy1 - sy0);
                }
            } else {
                for (var x = 0; x < len; ++x) {
                    var y0 = y_top,
						x1 = x,
						x2 = x + 1,
						x3 = xb,
						y3 = y_bottom,
						y1 = (x - x0) / dx + y_top,
						y2 = (x + 1 - x0) / dx + y_top;

                    if (x0 < x1 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x1 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x1 && x3 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x3 < x1 && x0 > x1) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x1, y1);
                        stbtt__handle_clipped_edge(scanline, x, e, x1, y1, x3, y3);
                    } else if (x0 < x2 && x3 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else if (x3 < x2 && x0 > x2) {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x2, y2);
                        stbtt__handle_clipped_edge(scanline, x, e, x2, y2, x3, y3);
                    } else {
                        stbtt__handle_clipped_edge(scanline, x, e, x0, y0, x3, y3);
                    }
                }
            }
        }
        e = e.next;
    }
}

//static void stbtt__rasterize_sorted_edges(stbtt__bitmap * result, stbtt__edge * e, int n,
//                              int vsubsample, int off_x, int off_y, void *userdata)
function stbtt__rasterize_sorted_edges(result, edges, nedges, vsubsample, off_x, off_y) {
	vsubsample |= 0, off_x |= 0, off_y |= 0;
    var active = null, z;
    var y = off_y, j = 0, i;
    var scanline = new Float32Array(result.w * 2 + 1);
    var scanline2 = scanline.subarray(result.w);
	var eoff = 0;

    edges[nedges].y0 = off_y + result.h + 1;
    while (j < result.h) {
        var scan_y_top = y + 0.0,
			scan_y_bottom = y + 1.0,
			step = active;

		// F'ing IE
		if (scanline.fill) { scanline.fill(0); }
		else { for (var $i = 0, $l = scanline.length; $i < $l; $i++) scanline[$i] = 0; }

        while (step) {
            z = step;
			step = z.next;
            if (z.ey <= scan_y_top) {
                z.direction = 0;
            } else {
			}
        }

        while (edges[eoff].y0 <= scan_y_bottom) {
            if (edges[eoff].y0 != edges[eoff].y1) {
                z = stbtt__new_active(edges[eoff], off_x, scan_y_top);
				z.next = active;
				active = z;
            }
            ++eoff;
        }

        if (active) {
			// C implementation passed scanline2+1.  See function for details.
            stbtt__fill_active_edges_new(scanline, scanline2, result.w, active, scan_y_top);
		}
		for (var i = 0, sum = 0; i < result.w; ++i) {
			var k, m;
			sum += scanline2[i];
			k = scanline[i] + sum;
			k = abs(k) * 255 + 0.5;
			m = k>>>0;
			if (m > 255) {
				m = 255;
			}
			result.pixels[j * result.stride + i] = m;
        }

        step = active;
        while (step) {
            z = step;
            z.fx += z.fdx;
            step = z.next;
        }
        ++y;
        ++j;
    }
}

//static void stbtt__sort_edges_ins_sort(stbtt__edge * p, int n)
function stbtt__sort_edges_ins_sort(p, n) {
    for (var i = 1; i < n; ++i) {
        var t = p[i], j = i;
        while (j > 0 && t.y0 < p[j-1].y0) {
             p[j] = p[j - 1];
            --j;
        }
        if (i != j) {
            p[j] = t;
        }
    }
}

//static void stbtt__sort_edges_quicksort(stbtt__edge * p, int n)
// The C implementation messed with the p pointer.  JS uses an offset instead.
function stbtt__sort_edges_quicksort(p, o, n) {
    while (n > 12) {
        var t, c, i, j, z,
			m = n >> 1,
			c01 = p[o].y0 < p[o+m].y0,
			c12 = p[o+m].y0 < p[o+n-1].y0;

        if (c01 != c12) {
            c = p[o].y0 < p[o+n-11].y0;
            z = (c == c12) ? 0 : n - 1;
            t = p[o+z];
            p[o+z] = p[o+m];
            p[o+m] = t;
        }

        t = p[o];
        p[o] = p[o+m];
        p[o+m] = t;

        i = 1;
        j = n - 1;
        for (;;) {
            for ( ; p[o+i].y0 < p[o].y0; ++i) {
            }
            for ( ; p[o].y0 < p[o+j].y0; --j) {
            }
            if (i >= j) {
                break;
            }
            t = p[o+i];
            p[o+i] = p[o+j];
            p[o+j] = t;

            ++i;
            --j;
        }

        if (j < n - i) {
            stbtt__sort_edges_quicksort(p, o, j);
            o += i;
            n -= i;
        } else {
            stbtt__sort_edges_quicksort(p, o + i, n - i);
            n = j;
        }
    }
}

//static void stbtt__sort_edges(stbtt__edge * p, int n)
function stbtt__sort_edges(p, n) {
    stbtt__sort_edges_quicksort(p, 0, n);
    stbtt__sort_edges_ins_sort(p, n);
}

//static void stbtt__rasterize(stbtt__bitmap * result, stbtt__point * pts, int *wcount,
//                 int windings, float scale_x, float scale_y, float shift_x,
//                 float shift_y, int off_x, int off_y, int invert,
//                 void *userdata)
function stbtt__rasterize(result, pts, wcount, scale_x, scale_y, shift_x, shift_y, off_x, off_y, invert) {
    var y_scale_inv = invert ? -scale_y : scale_y,
		e, n, i, j, k, m,
		vsubsample = 1;

    n = 0;
    for (i = 0; i < wcount.length; ++i) {
        n += wcount[i];
    }

    e = oalloc(n + 1);
    n = 0;
    m = 0;
    for (i = 0; i < wcount.length; ++i) {
        var p = m;
        m += wcount[i];
        j = wcount[i] - 1;
        for (k = 0; k < wcount[i]; j = k++) {
            var a = k, b = j;
            if (pts[p+j].y == pts[p+k].y) {
                continue;
            }

            e[n].invert = 0;
            if (invert ? pts[p+j].y > pts[p+k].y : pts[p+j].y < pts[p+k].y) {
                e[n].invert = 1;
                a = j, b = k;
            }
            e[n].x0 = pts[p+a].x * scale_x + shift_x;
            e[n].y0 = (pts[p+a].y * y_scale_inv + shift_y) * vsubsample;
            e[n].x1 = pts[p+b].x * scale_x + shift_x;
            e[n].y1 = (pts[p+b].y * y_scale_inv + shift_y) * vsubsample;
            ++n;
        }
    }

    stbtt__sort_edges(e, n);
    stbtt__rasterize_sorted_edges(result, e, n, vsubsample, off_x, off_y);
 }

//static int stbtt__tesselate_curve(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float objspace_flatness_squared, int n)
function stbtt__tesselate_curve(points, x0, y0, x1, y1, x2, y2, objspace_flatness_squared, n) {
    var mx = (x0 + 2 * x1 + x2) / 4,
		my = (y0 + 2 * y1 + y2) / 4,
		dx = (x0 + x2) / 2 - mx,
		dy = (y0 + y2) / 2 - my;
    if (n > 16) {
        return 1;
    }
    if (dx * dx + dy * dy > objspace_flatness_squared) {
        stbtt__tesselate_curve(points, x0, y0, (x0 + x1) / 2.0, (y0 + y1) / 2.0, mx, my,
                               objspace_flatness_squared, n + 1);
        stbtt__tesselate_curve(points, mx, my, (x1 + x2) / 2.0, (y1 + y2) / 2.0, x2, y2,
                               objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x2, y:y2 });
    }
    return 1;
}

//static void stbtt__tesselate_cubic(stbtt__point * points, int *num_points, float x0,
//                       float y0, float x1, float y1, float x2, float y2,
//                       float x3, float y3, float objspace_flatness_squared, int n)
function stbtt__tesselate_cubic(points, x0, y0, x1, y1, x2, y2, x3, y3, objspace_flatness_squared, n) {
    var dx0 = x1 - x0,
		dy0 = y1 - y0,
		dx1 = x2 - x1,
		dy1 = y2 - y1,
		dx2 = x3 - x2,
		dy2 = y3 - y2,
		dx = x3 - x0,
		dy = y3 - y0,
		longlen = sqrt(dx0 * dx0 + dy0 * dy0) +
				  sqrt(dx1 * dx1 + dy1 * dy1) +
                  sqrt(dx2 * dx2 + dy2 * dy2),
		shortlen = sqrt(dx * dx + dy * dy),
		flatness_squared = longlen * longlen - shortlen * shortlen;
    if (n > 16) {
        return;
    }

    if (flatness_squared > objspace_flatness_squared) {
        var x01 = (x0 + x1) / 2,
			y01 = (y0 + y1) / 2,
			x12 = (x1 + x2) / 2,
			y12 = (y1 + y2) / 2,
			x23 = (x2 + x3) / 2,
			y23 = (y2 + y3) / 2,
			xa = (x01 + x12) / 2,
			ya = (y01 + y12) / 2,
			xb = (x12 + x23) / 2,
			yb = (y12 + y23) / 2,
			mx = (xa + xb) / 2,
			my = (ya + yb) / 2;

        stbtt__tesselate_cubic(points, x0, y0, x01, y01, xa, ya, mx, my,
								objspace_flatness_squared, n + 1);
        stbtt__tesselate_cubic(points, mx, my, xb, yb, x23, y23, x3, y3,
								objspace_flatness_squared, n + 1);
    } else {
		points.push({ x:x3, y:y3 });
    }
}

//static stbtt__point *stbtt_FlattenCurves(stbtt_vertex * vertices, int num_verts,
//        float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)
function stbtt_FlattenCurves(vertices, objspace_flatness, contour_lengths) {
    var points = [],
		objspace_flatness_squared = objspace_flatness * objspace_flatness,
		n = -1, start = 0,
		x = 0, y = 0;
	for (var i = 0, nverts = vertices.length; i < nverts; ++i) {
		switch (vertices[i].type) {
		case STBTT_vmove:
			if (n >= 0) {
				contour_lengths[n] = points.length - start;
			}
			++n;
			start = points.length;
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vline:
			x = vertices[i].x, y = vertices[i].y;
			points.push({ x:x, y:y });
			break;
		case STBTT_vcurve:
			stbtt__tesselate_curve(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].x, vertices[i].y, objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		case STBTT_vcubic:
			stbtt__tesselate_cubic(points, x, y, vertices[i].cx, vertices[i].cy,
								   vertices[i].cx1, vertices[i].cy1, vertices[i].x, vertices[i].y,
								   objspace_flatness_squared, 0);
			x = vertices[i].x, y = vertices[i].y;
			break;
		}
	}
	contour_lengths[n] = points.length - start;

	//console.log("--cl(" + (n+1) + '):');
	//for (var i = 0; i <= n; i++) {
	//	console.log(" %d", contour_lengths[i]);
	//}
	//console.log("\n--pts(" + points.length + '):');
	//for (var i = 0; i < points.length; i++) {
	//	var pt = points[i];
	//	console.log(i + ': ' + pt.x  + ',' + pt.y);
	//}

    return points;
}

//extern void stbtt_Rasterize(stbtt__bitmap * result, float flatness_in_pixels,
//                stbtt_vertex * vertices, int num_verts, float scale_x,
//                float scale_y, float shift_x, float shift_y, int x_off,
//                int y_off, int invert, void *userdata)
function stbtt_Rasterize(result, flatness_in_pixels, vertices, scale_x, scale_y, shift_x, shift_y,
						 x_off, y_off, invert) {
	x_off |= 0, y_off |= 0;
    var scale = scale_x > scale_y ? scale_y : scale_x,
		wcount = [],
		windings = stbtt_FlattenCurves(vertices, flatness_in_pixels / scale, wcount);
    if (windings) {
        stbtt__rasterize(result, windings, wcount, scale_x, scale_y,
						 shift_x, shift_y, x_off, y_off, invert);
    }
}

//extern void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo * info,
//                              unsigned char *output, int out_w, int out_h,
//                              int out_stride, float scale_x, float scale_y,
//                              float shift_x, float shift_y, int glyph)
function stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, glyph) {
    var vertices = stbtt_GetGlyphShape(info, glyph);
    var gbm = {};
    var rect = stbtt_GetGlyphBitmapBoxSubpixel(info, glyph, scale_x, scale_y, shift_x, shift_y);
    gbm.pixels = buffer;
    gbm.w = out_w|0;
    gbm.h = out_h|0;
    gbm.stride = out_stride|0;

    if (gbm.w && gbm.h) {
        stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, shift_x, shift_y, rect.x0, rect.y0, 1);
	}
}

//extern void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo * info,
//                                  unsigned char *output, int out_w,
//                                  int out_h, int out_stride, float scale_x,
//                                  float scale_y, float shift_x,
//                                  float shift_y, int codepoint)
function stbtt_MakeCodepointBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
									scale_x, scale_y, shift_x, shift_y, codepoint) {
    stbtt_MakeGlyphBitmapSubpixel(info, buffer, out_w, out_h, out_stride,
                                  scale_x, scale_y, shift_x, shift_y,
                                  stbtt_FindGlyphIndex(info, codepoint));
}

//extern int stbtt_InitFont(stbtt_fontinfo * info, const unsigned char *data, int offset)
function stbtt_InitFont(font, data, offset) {
    return stbtt_InitFont_internal(font, data, offset);
}


function InitFont(data) {
	var font = {};
    if (!stbtt_InitFont_internal(font, data, 0)) {
		return null;
	}

	var vm = stbtt_GetFontVMetrics(font);

	font.ascent = vm.ascent;
	font.descent = vm.descent;
	font.linegap = vm.linegap;

	return font;
}

function GetGlyph(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}

    var vertices = stbtt_GetGlyphShape(font, glyph);
	var rect = stbtt_GetGlyphBitmapBoxSubpixel(font, glyph, scale_x, scale_y, 0, 0);
	var width = rect.x1 - rect.x0;
	var height = rect.y1 - rect.y0;
	var pixels = null;

	if (width && height) {
		var gbm = {
			pixels : (pixels = new Uint8Array(width * height)),
			w : width,
			h : height,
			stride : width,
		}
		stbtt_Rasterize(gbm, 0.35, vertices, scale_x, scale_y, 0, 0, rect.x0, rect.y0, 1);
	}

	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);
	return {
		glyph:glyph, pixels:pixels, width:width, height:height, top:-rect.y0, left:rect.x0,
		advance:floor(hmetrics.advanceWidth * scale_x),
	}
}
function GetPaths(font, codepoint, size_x, size_y) {
	size_y = size_y || size_x;
	var scale_x = size_x / font.ascent;
	var scale_y = size_y / font.ascent;

	var glyph = stbtt_FindGlyphIndex(font, codepoint);
	if (!glyph && codepoint) {
		return null;
	}
    var vertices = stbtt_GetGlyphShape(font, glyph);
	var hmetrics = stbtt_GetGlyphHMetrics(font, glyph);

	// The hmetrics just give us advance.  We need ascent and descent as well.
	var ascent = 0;
	var descent = 0;

	// Convert to SVG notation
	var paths = [];
	if (vertices) {
		for (var i = 0, l = vertices.length; i < l; i++) {
			var v = vertices[i];
			var path;
			if (v.type == STBTT_vmove) {
				path = { type:'M', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vline) {
				path = { type:'L', x:v.x * scale_x, y:v.y * scale_y };
			} else if (v.type == STBTT_vcurve) {
				path = { type:'Q', x:v.x * scale_x, y:v.y * scale_y,
								  cx:v.cx * scale_x, cy:v.cy * scale_y };
			} else if (v.type == STBTT_vcubic) {
				path = { type:'C', x:v.x * scale_x, y:v.y * scale_y,
								 cx1:v.cx * scale_x, cy1:v.cy * scale_y,
								 cx2:v.cx1 * scale_x, cy2:v.cy1 * scale_y };
			} else {
				continue;
			}
			if (path.y > ascent)  ascent  = path.y;
			if (path.y < descent) descent = path.y;
			paths.push(path);
		}
	}

	// Add the glyph metrics to the returned array.
	paths.advance = hmetrics.advanceWidth * scale_x;
	paths.ascent  = ascent;
	paths.descent = descent;
	return paths;
}


// exports
return {
	InitFont:	InitFont,
	GetGlyph:	GetGlyph,
	GetPaths:	GetPaths,
}

})();
function toUint8Array(data) {
    if (typeof data == "string") {
        var binary = /[^A-Za-z0-9+\/=\s]/.test(data);
        var bstr = binary ? data : atob(data),
            len = bstr.length,
            bytes = new Uint8Array(len);
        for (var i = 0; i < len; i++) {
            bytes[i] = bstr.charCodeAt(i);
        }
        return bytes;
    } else if (data instanceof Uint8Array) {
        return data;
    } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
    }
    throw new ReferenceError("data must be a binary or base64 encoded string or Uint8Array");
}

FontLib.loadFont("OCR-A", 100, 100, "");
FontLib.loadFont("OCR-B", 96, 100, "");
    return {
        // The public interface
        toCanvas:ToCanvas, render:Render, raw:ToRaw,
        fixupOptions:FixupOptions,
        loadFont:FontLib.loadFont,
        BWIPJS_VERSION:'3.1.0 (2022-06-20)',
        BWIPP_VERSION:BWIPP_VERSION,
        // Internals
        BWIPJS:BWIPJS, STBTT:STBTT, FontLib:FontLib,
        DrawingBuiltin:DrawingBuiltin, DrawingCanvas:DrawingCanvas,
    };
}));
